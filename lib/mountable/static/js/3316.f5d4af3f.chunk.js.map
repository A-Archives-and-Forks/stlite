{"version":3,"file":"static/js/3316.f5d4af3f.chunk.js","mappings":"mNAsBO,MAAMA,GACXC,EAAAA,EAAAA,GAAA,UAAAC,OAAA,aAAAD,EAA2CE,IAA4B,IAA3B,WAAEC,EAAU,MAAEC,GAAOF,EAC/D,MAAMG,EAAgBF,EAClB,CACEG,MAAO,SACPC,IAAK,SACLC,gBAAiB,eAEnB,CACEF,MAAO,UACPC,IAAK,YACLE,QAAS,EACTC,UAAW,WACXF,gBAAiBJ,EAAMO,OAAOC,eAGpC,MAAO,CACLC,SAAU,WACVC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAEhBC,OAAQb,EAAMc,SAASC,QAAU,EACjCC,OAAQ,SACRC,MAAO,SACPC,WAAY,6CACZC,OAAQ,OACRC,MAAOpB,EAAMO,OAAOc,YACpBC,aAAc,SAEXrB,EAEH,UAAW,CACTsB,QAAS,QAGX,qCAAsC,CACpClB,QAAS,EACTkB,QAAS,OACTjB,UAAW,WACXc,MAAOpB,EAAMO,OAAOiB,SACpBN,WAAY,QAEf,GACF,IAMUO,GAAwB7B,EAAAA,EAAAA,GAAA,OAAAC,OAAA,aAAAD,EACnC8B,IAAA,IAAC,MAAE1B,EAAK,WAAED,GAAY2B,EAAA,MAAM,CAC1B,UAAW,CACT,CAAC/B,GAAgC,CAC/BU,QAAS,EACTC,UAAW,WACXY,WAAY,YAIZnB,EACA,CACEU,SAAU,QACVN,IAAK,EACLwB,KAAM,EACNC,OAAQ,EACR1B,MAAO,EACP2B,WAAY7B,EAAMO,OAAOuB,QACzBjB,OAAQb,EAAMc,SAASiB,kBACvBC,QAAShC,EAAMiC,QAAQC,GACvBC,WAAYnC,EAAMoC,MAAMC,uBACxBC,SAAU,CAAC,OAAQ,WACnB5B,QAAS,OACTC,WAAY,SACZC,eAAgB,UAElB,CAAC,EACN,GAAC,I,eCrCJ,MAAM2B,UAA0BC,EAAAA,cAKvBC,WAAAA,CAAYC,GACjBC,MAAMD,GAAM,KALPE,aAAO,OAsBNC,YAAeC,IACrB,MAAM,SAAEC,GAAaC,KAAKC,MAEJ,KAAlBH,EAAMI,SAAkBH,GAE1BC,KAAKG,SACP,EACD,KAEOC,OAAS,KACfC,SAASC,KAAKC,MAAMjB,SAAW,SAC/BU,KAAKJ,QAAQY,eAAc,GAC3BR,KAAKS,SAAS,CAAEV,UAAU,GAAO,EAClC,KAEOI,QAAU,KAChBE,SAASC,KAAKC,MAAMjB,SAAW,QAC/BU,KAAKJ,QAAQY,eAAc,GAC3BR,KAAKS,SAAS,CAAEV,UAAU,GAAQ,EACnC,KAEOW,4BAA+BC,GACpBC,WAAWD,GAG1BC,WAAWC,iBAAiBR,SAASS,iBAAiBC,UAEzD,KAEOC,oBAAsB,KAI5B,MAAMhC,EAAUgB,KAAKU,4BACnBV,KAAKN,MAAM1C,MAAMiC,QAAQC,IAErBC,EAAaa,KAAKU,4BACtBV,KAAKN,MAAM1C,MAAMoC,MAAMC,wBAGzB,MAAO,CACL4B,UAAWC,OAAOC,WAAuB,EAAVnC,EAC/BoC,WAAYF,OAAOG,aAAerC,EAAUG,GAC7C,EACF,KAEOmC,uBAAyB,KAC/BtB,KAAKS,SAAST,KAAKgB,sBAAsB,EA/DzChB,KAAKC,MAAQ,CACXF,UAAU,KACPC,KAAKgB,sBAEZ,CAEOO,iBAAAA,GACLL,OAAOM,iBAAiB,SAAUxB,KAAKsB,wBACvCjB,SAASmB,iBAAiB,UAAWxB,KAAKH,aAAa,EACzD,CAEO4B,oBAAAA,GACLP,OAAOQ,oBAAoB,SAAU1B,KAAKsB,wBAC1CjB,SAASqB,oBAAoB,UAAW1B,KAAKH,aAAa,EAC5D,CAoDO8B,MAAAA,GACL,MAAM,SAAE5B,EAAQ,UAAEkB,EAAS,WAAEG,GAAepB,KAAKC,OAC3C,SAAE2B,EAAQ,MAAE3D,EAAK,OAAED,EAAM,sBAAE6D,GAA0B7B,KAAKN,MAEhE,IAAIoC,EAAcC,EAAAA,EACdC,EAAgBhC,KAAKI,OACrB6B,EAAc,kBAQlB,OANIlC,IACF+B,EAAcI,EAAAA,EACdF,EAAgBhC,KAAKG,QACrB8B,EAAc,oBAIdE,EAAAA,EAAAA,MAAC1D,EAAqB,CACpB1B,WAAYgD,EACZ,cAAY,oBAAmB6B,SAAA,EAE7BC,IACAO,EAAAA,EAAAA,KAACzF,EAAsB,CACrB,cAAY,yBACZ0F,QAASL,EACTM,MAAOL,EACPlF,WAAYgD,EAAS6B,UAErBQ,EAAAA,EAAAA,KAACG,EAAAA,EAAI,CAACC,QAASV,MAIfF,EADH7B,EACY,CACP9B,MAAOgD,EACPjD,OAAQoD,EACRrB,WACA0C,OAAQzC,KAAKI,OACbsC,SAAU1C,KAAKG,SAER,CACPlC,QACAD,SACA+B,WACA0C,OAAQzC,KAAKI,OACbsC,SAAU1C,KAAKG,YAI3B,EAvHIZ,EAGUoD,YAAcC,EAAAA,EAuH9B,SAAeC,EAAAA,EAAAA,GAAUtD,GC7GzB,QA1CA,SACEuD,GAE0D,IAD1DC,EAA0BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAE1B,MAAMG,UAAuC3D,EAAAA,cAA+BC,WAAAA,GAAA,SAAAuD,WAAA,KAKnErB,OAAS,KACd,MAAM,MAAE1D,EAAK,OAAED,EAAM,sBAAE6D,GAA0B7B,KAAKN,MAEtD,OACE0C,EAAAA,EAAAA,KAAC7C,EAAiB,CAChBtB,MAAOA,EACPD,OAAQA,EACR6D,sBACEkB,GAA8BlB,EAC/BD,SAEA9E,IAAA,IAAC,MAAEmB,EAAK,OAAED,EAAM,SAAE+B,EAAQ,OAAE0C,EAAM,SAAEC,GAAU5F,EAAA,OAG7CsF,EAAAA,EAAAA,KAACU,EAAgB,IACV9C,KAAKN,MACVzB,MAAOA,EACPD,OAAQA,EACRoF,aAAcrD,EACd0C,OAAQA,EACRC,SAAUA,GACX,GAEe,CAEvB,EAKH,OAnCMS,EACmBE,YAAe,yBACpCP,EAAiBO,aAAeP,EAAiBQ,QAiC9CC,IAAqBJ,EAAgCL,EAC9D,C,kKCrDA,MAAMU,EAAe,UAORC,GAAuB7G,EAAAA,EAAAA,GAAA,OAAAC,OAAA,YAAAD,EAClCE,IAAA,IAAC,MAAEE,EAAK,OAAE0G,EAAM,OAAE7G,GAAQC,EAAA,MAAM,CAC9BkC,QAAU,GAAEhC,EAAMiC,QAAQ0E,QAAQ3G,EAAMiC,QAAQ0E,MAAM3G,EAAMiC,QAAQ0E,KACpElG,SAAU,WACVN,IAAKuG,EAASF,EAAe,QAC7BtG,MAAOF,EAAMiC,QAAQ2E,KACrB1F,WAAY,WACPwF,GAAU,CACbrG,QAAS,EACT,qCAAsC,CACpCa,WAAY,uCACZb,QAAS,EACTF,IAAKqG,MAEH3G,GAAU,CACZ,CAAE,GAAEA,cAAmBA,eAAoBA,qBAA2B,CACpEqB,WAAY,uCACZb,QAAS,EACTF,IAAKqG,KAIZ,GAAC,IAGSK,GAAgBjH,EAAAA,EAAAA,GAAA,OAAAC,OAAA,YAAAD,EAAW8B,IAAA,IAAC,MAAE1B,GAAO0B,EAAA,MAAM,CACtDN,OAAO0F,EAAAA,EAAAA,IAAwB9G,GAC3BA,EAAMO,OAAOc,YACbrB,EAAMO,OAAOiB,SACjBd,QAAS,OACTqG,cAAe,MACfpG,WAAY,SACZC,eAAgB,WAChBoG,UAAW,kCACX1F,aAActB,EAAMiH,MAAMC,QAC1B9G,gBAAiBJ,EAAMO,OAAOC,cAC9BS,MAAO,cACPJ,OAAQb,EAAMc,SAASC,QAAU,EAClC,GAAC,I,eCvBK,SAASoG,EAAarH,GAKS,IALR,MAC5BsH,EAAK,WACLC,EAAU,KACVC,EAAI,QACJjC,GACmBvF,EACnB,MAAME,GAAsBuH,EAAAA,EAAAA,KAEtBC,EAAeH,EAAaD,EAAQ,GAC1C,OACEhC,EAAAA,EAAAA,KAAA,OAAK,cAAY,yBAAwBR,UACvCQ,EAAAA,EAAAA,KAACqC,EAAAA,EAAO,CACNjC,SACEJ,EAAAA,EAAAA,KAACsC,EAAAA,GAAiB,CAChBC,OAAQP,EACRQ,WAAW,EACXrE,MAAO,CAAEQ,SAAU/D,EAAM6H,UAAUlB,MAGvCmB,UAAWC,EAAAA,EAAUC,IAGrBC,kBAAmB,IACnBC,QAAM,EAAAtD,UAENO,EAAAA,EAAAA,MAACgD,EAAAA,GAAM,CACL9C,QAASvC,IACHuC,GACFA,IAEFvC,EAAMsF,iBAAiB,EAEzBC,KAAMC,EAAAA,GAAeC,gBACrB,aAAYnB,EAAMxC,SAAA,CAEjB0C,IACClC,EAAAA,EAAAA,KAACG,EAAAA,EAAI,CACHC,QAAS8B,EACTkB,KAAK,KACLC,OAAO,+BAGVjB,IAAgBpC,EAAAA,EAAAA,KAAA,QAAAR,SAAO4C,UAKlC,CAWA,MAqCA,EArCiE9F,IAQ5C,IAR6C,SAChEgH,EAAQ,WACRC,EAAU,aACVvC,EAAY,OACZM,EAAM,SACN9B,EAAQ,OACR/E,EAAM,sBACNgF,GACDnD,EACC,OACE0D,EAAAA,EAAAA,KAACqB,EAAoB,CACnBmC,UAAU,mBACV,cAAY,mBACZlC,OAAQA,GAAUN,EAClBvG,OAAQA,EAAO+E,UAEfO,EAAAA,EAAAA,MAAC0B,EAAa,CAAAjC,SAAA,CACXA,EACA8D,IAAa7D,IAA0BuB,IACtChB,EAAAA,EAAAA,KAAC+B,EAAa,CACZC,MAAM,aACNE,KAAMuB,EAAAA,EACNxD,QAASA,IAAMqD,MAGlBC,IAAe9D,GAAyBuB,IACvChB,EAAAA,EAAAA,KAAC+B,EAAa,CACZC,MAAM,mBACNE,KAAMpC,EAAAA,EACNG,QAASA,IAAMsD,UAIA,C,qEC3GpB,MAAMG,EAAgBrG,WAAAA,GAAA,KACnBsG,uBAAiB,OAEjBC,mBAAa,OAEbC,gBAAU,EAYXC,uBAAAA,CACLC,EACAC,EACAC,IAIEC,EAAAA,EAAAA,IAAmBtG,KAAK+F,oBACxB/F,KAAKgG,gBAAkBG,GACvBnG,KAAKiG,aAAeG,IAMtBpG,KAAKuG,cAGAC,EAAAA,EAAAA,IAAcJ,KAKnBpG,KAAK+F,kBAAoBI,EAAUM,uBAAuBL,EAAQC,GAClErG,KAAKgG,cAAgBG,EACrBnG,KAAKiG,WAAaG,GACpB,CAOOG,UAAAA,GAAoB,IAADG,EACF,QAAtBA,EAAA1G,KAAK+F,yBAAiB,IAAAW,GAAtBA,EAAwBH,aACxBvG,KAAK+F,uBAAoB7C,EACzBlD,KAAKgG,mBAAgB9C,EACrBlD,KAAKiG,gBAAa/C,CACpB,EAaK,SAASyD,EAAkB7J,GAIH,IAJI,QACjC8J,EAAO,UACPT,EAAS,cACTU,GACoB/J,GACpBgK,EAAAA,EAAAA,YAAU,KACR,KAAKN,EAAAA,EAAAA,IAAcI,EAAQR,QACzB,OAGF,MAAML,EAAoBI,EAAUM,uBAClCG,EAAQR,OACRS,GAGF,MAAO,KACLd,EAAkBQ,YAAY,CAC/B,GACA,CAACK,EAAST,EAAWU,GAC1B,C","sources":["../../../streamlit/frontend/lib/src/components/shared/FullScreenWrapper/styled-components.ts","../../../streamlit/frontend/lib/src/components/shared/FullScreenWrapper/FullScreenWrapper.tsx","../../../streamlit/frontend/lib/src/components/shared/FullScreenWrapper/withFullScreenWrapper.tsx","../../../streamlit/frontend/lib/src/components/shared/Toolbar/styled-components.ts","../../../streamlit/frontend/lib/src/components/shared/Toolbar/Toolbar.tsx","../../../streamlit/frontend/lib/src/components/widgets/Form/FormClearHelper.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport interface StyledFullScreenButtonProps {\n  isExpanded: boolean\n}\n\nexport const StyledFullScreenButton =\n  styled.button<StyledFullScreenButtonProps>(({ isExpanded, theme }) => {\n    const variableProps = isExpanded\n      ? {\n          right: \"0.4rem\",\n          top: \"0.5rem\",\n          backgroundColor: \"transparent\",\n        }\n      : {\n          right: \"-3.0rem\",\n          top: \"-0.375rem\",\n          opacity: 0,\n          transform: \"scale(0)\",\n          backgroundColor: theme.colors.lightenedBg05,\n        }\n\n    return {\n      position: \"absolute\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n\n      zIndex: theme.zIndices.sidebar + 1,\n      height: \"2.5rem\",\n      width: \"2.5rem\",\n      transition: \"opacity 300ms 150ms, transform 300ms 150ms\",\n      border: \"none\",\n      color: theme.colors.fadedText60,\n      borderRadius: \"50%\",\n\n      ...variableProps,\n\n      \"&:focus\": {\n        outline: \"none\",\n      },\n\n      \"&:active, &:focus-visible, &:hover\": {\n        opacity: 1,\n        outline: \"none\",\n        transform: \"scale(1)\",\n        color: theme.colors.bodyText,\n        transition: \"none\",\n      },\n    }\n  })\n\nexport interface StyledFullScreenFrameProps {\n  isExpanded: boolean\n}\n\nexport const StyledFullScreenFrame = styled.div<StyledFullScreenFrameProps>(\n  ({ theme, isExpanded }) => ({\n    \"&:hover\": {\n      [StyledFullScreenButton as any]: {\n        opacity: 1,\n        transform: \"scale(1)\",\n        transition: \"none\",\n      },\n    },\n\n    ...(isExpanded\n      ? {\n          position: \"fixed\",\n          top: 0,\n          left: 0,\n          bottom: 0,\n          right: 0,\n          background: theme.colors.bgColor,\n          zIndex: theme.zIndices.fullscreenWrapper,\n          padding: theme.spacing.md,\n          paddingTop: theme.sizes.fullScreenHeaderHeight,\n          overflow: [\"auto\", \"overlay\"],\n          display: \"flex\", // To avoid extra spaces that lead to scrollbars.\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }\n      : {}),\n  })\n)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { PureComponent } from \"react\"\n\nimport { withTheme } from \"@emotion/react\"\nimport { FullscreenEnter, FullscreenExit } from \"@emotion-icons/open-iconic\"\n\nimport Icon from \"@streamlit/lib/src/components/shared/Icon\"\nimport { LibContext } from \"@streamlit/lib/src/components/core/LibContext\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\n\nimport {\n  StyledFullScreenButton,\n  StyledFullScreenFrame,\n} from \"./styled-components\"\n\nexport type Size = {\n  width: number\n  expanded: boolean\n  height?: number\n  expand: () => void\n  collapse: () => void\n}\n\n/*\n * Function responsible for rendering children.\n * This function should implement the following signature:\n * ({ height, width }) => PropTypes.element\n */\nexport interface FullScreenWrapperProps {\n  children: (props: Size) => React.ReactNode\n  width: number\n  height?: number\n  theme: EmotionTheme\n  disableFullscreenMode?: boolean\n}\n\ninterface State {\n  expanded: boolean\n  fullWidth: number\n  fullHeight: number\n}\n\n/*\n * A component that draws a button on the top right of the\n * wrapper element. OnClick, change the element container\n * to fixed and cover all screen, updating wrapped element height and width\n */\nclass FullScreenWrapper extends PureComponent<FullScreenWrapperProps, State> {\n  public context!: React.ContextType<typeof LibContext>\n\n  public static contextType = LibContext\n\n  public constructor(props: FullScreenWrapperProps) {\n    super(props)\n    this.state = {\n      expanded: false,\n      ...this.getWindowDimensions(),\n    }\n  }\n\n  public componentDidMount(): void {\n    window.addEventListener(\"resize\", this.updateWindowDimensions)\n    document.addEventListener(\"keydown\", this.controlKeys, false)\n  }\n\n  public componentWillUnmount(): void {\n    window.removeEventListener(\"resize\", this.updateWindowDimensions)\n    document.removeEventListener(\"keydown\", this.controlKeys, false)\n  }\n\n  private controlKeys = (event: any): void => {\n    const { expanded } = this.state\n\n    if (event.keyCode === 27 && expanded) {\n      // Exit fullscreen\n      this.zoomOut()\n    }\n  }\n\n  private zoomIn = (): void => {\n    document.body.style.overflow = \"hidden\"\n    this.context.setFullScreen(true)\n    this.setState({ expanded: true })\n  }\n\n  private zoomOut = (): void => {\n    document.body.style.overflow = \"unset\"\n    this.context.setFullScreen(false)\n    this.setState({ expanded: false })\n  }\n\n  private convertScssRemValueToPixels = (scssValue: string): number => {\n    const remValue = parseFloat(scssValue)\n    return (\n      remValue *\n      parseFloat(getComputedStyle(document.documentElement).fontSize)\n    )\n  }\n\n  private getWindowDimensions = (): Pick<\n    State,\n    \"fullWidth\" | \"fullHeight\"\n  > => {\n    const padding = this.convertScssRemValueToPixels(\n      this.props.theme.spacing.md\n    )\n    const paddingTop = this.convertScssRemValueToPixels(\n      this.props.theme.sizes.fullScreenHeaderHeight\n    )\n\n    return {\n      fullWidth: window.innerWidth - padding * 2, // Left and right\n      fullHeight: window.innerHeight - (padding + paddingTop), // Bottom and Top\n    }\n  }\n\n  private updateWindowDimensions = (): void => {\n    this.setState(this.getWindowDimensions())\n  }\n\n  public render(): JSX.Element {\n    const { expanded, fullWidth, fullHeight } = this.state\n    const { children, width, height, disableFullscreenMode } = this.props\n\n    let buttonImage = FullscreenEnter\n    let buttonOnClick = this.zoomIn\n    let buttonTitle = \"View fullscreen\"\n\n    if (expanded) {\n      buttonImage = FullscreenExit\n      buttonOnClick = this.zoomOut\n      buttonTitle = \"Exit fullscreen\"\n    }\n\n    return (\n      <StyledFullScreenFrame\n        isExpanded={expanded}\n        data-testid=\"stFullScreenFrame\"\n      >\n        {!disableFullscreenMode && (\n          <StyledFullScreenButton\n            data-testid=\"StyledFullScreenButton\"\n            onClick={buttonOnClick}\n            title={buttonTitle}\n            isExpanded={expanded}\n          >\n            <Icon content={buttonImage} />\n          </StyledFullScreenButton>\n        )}\n        {expanded\n          ? children({\n              width: fullWidth,\n              height: fullHeight,\n              expanded,\n              expand: this.zoomIn,\n              collapse: this.zoomOut,\n            })\n          : children({\n              width,\n              height,\n              expanded,\n              expand: this.zoomIn,\n              collapse: this.zoomOut,\n            })}\n      </StyledFullScreenFrame>\n    )\n  }\n}\n\nexport default withTheme(FullScreenWrapper)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ComponentType, PureComponent, ReactNode } from \"react\"\n\nimport hoistNonReactStatics from \"hoist-non-react-statics\"\n\nimport FullScreenWrapper from \"./FullScreenWrapper\"\n\nexport interface Props {\n  width: number\n  height?: number\n  disableFullscreenMode?: boolean\n}\n\n// Our wrapper takes the wrapped component's props, plus \"width\", \"height?\".\n// It will pass \"isFullScreen\" to the wrapped component automatically\n// (but the wrapped component is free to ignore that prop).\ntype WrapperProps<P> = Omit<P & Props, \"isFullScreen\" | \"collapse\" | \"expand\">\n\nfunction withFullScreenWrapper<P>(\n  WrappedComponent: ComponentType<React.PropsWithChildren<P>>,\n  forceDisableFullScreenMode = false\n): ComponentType<React.PropsWithChildren<WrapperProps<P>>> {\n  class ComponentWithFullScreenWrapper extends PureComponent<WrapperProps<P>> {\n    public static readonly displayName = `withFullScreenWrapper(${\n      WrappedComponent.displayName || WrappedComponent.name\n    })`\n\n    public render = (): ReactNode => {\n      const { width, height, disableFullscreenMode } = this.props\n\n      return (\n        <FullScreenWrapper\n          width={width}\n          height={height}\n          disableFullscreenMode={\n            forceDisableFullScreenMode || disableFullscreenMode\n          }\n        >\n          {({ width, height, expanded, expand, collapse }) => (\n            // `(this.props as P)` is required due to a TS bug:\n            // https://github.com/microsoft/TypeScript/issues/28938#issuecomment-450636046\n            <WrappedComponent\n              {...(this.props as P)}\n              width={width}\n              height={height}\n              isFullScreen={expanded}\n              expand={expand}\n              collapse={collapse}\n            />\n          )}\n        </FullScreenWrapper>\n      )\n    }\n  }\n\n  // Static methods must be copied over\n  // https://en.reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n  return hoistNonReactStatics(ComponentWithFullScreenWrapper, WrappedComponent)\n}\n\nexport default withFullScreenWrapper\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled, { StyledComponent } from \"@emotion/styled\"\n\nimport { hasLightBackgroundColor } from \"@streamlit/lib/src/theme\"\n\nconst TOP_DISTANCE = \"-2.4rem\"\n\nexport interface StyledToolbarWrapperProps {\n  locked?: boolean\n  target?: StyledComponent<any, any, any>\n}\n\nexport const StyledToolbarWrapper = styled.div<StyledToolbarWrapperProps>(\n  ({ theme, locked, target }) => ({\n    padding: `${theme.spacing.sm} 0 ${theme.spacing.sm} ${theme.spacing.sm}`,\n    position: \"absolute\",\n    top: locked ? TOP_DISTANCE : \"-1rem\",\n    right: theme.spacing.none,\n    transition: \"none\",\n    ...(!locked && {\n      opacity: 0,\n      \"&:active, &:focus-visible, &:hover\": {\n        transition: \"opacity 150ms 100ms, top 100ms 100ms\",\n        opacity: 1,\n        top: TOP_DISTANCE,\n      },\n      ...(target && {\n        [`${target}:hover &, ${target}:active &, ${target}:focus-visible &`]: {\n          transition: \"opacity 150ms 100ms, top 100ms 100ms\",\n          opacity: 1,\n          top: TOP_DISTANCE,\n        },\n      }),\n    }),\n  })\n)\n\nexport const StyledToolbar = styled.div(({ theme }) => ({\n  color: hasLightBackgroundColor(theme)\n    ? theme.colors.fadedText60\n    : theme.colors.bodyText,\n  display: \"flex\",\n  flexDirection: \"row\",\n  alignItems: \"center\",\n  justifyContent: \"flex-end\",\n  boxShadow: \"1px 2px 8px rgba(0, 0, 0, 0.08)\",\n  borderRadius: theme.radii.default,\n  backgroundColor: theme.colors.lightenedBg05,\n  width: \"fit-content\",\n  zIndex: theme.zIndices.sidebar + 1,\n}))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\n\nimport { EmotionIcon } from \"@emotion-icons/emotion-icon\"\nimport { useTheme } from \"@emotion/react\"\nimport { StyledComponent } from \"@emotion/styled\"\nimport { Fullscreen, FullscreenExit } from \"@emotion-icons/material-outlined\"\n\nimport StreamlitMarkdown from \"@streamlit/lib/src/components/shared/StreamlitMarkdown\"\nimport Tooltip, {\n  Placement,\n} from \"@streamlit/lib/src/components/shared/Tooltip\"\nimport Button, {\n  BaseButtonKind,\n} from \"@streamlit/lib/src/components/shared/BaseButton\"\nimport Icon from \"@streamlit/lib/src/components/shared/Icon\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\n\nimport { StyledToolbar, StyledToolbarWrapper } from \"./styled-components\"\n\nexport interface ToolbarActionProps {\n  label: string\n  icon?: EmotionIcon\n  show_label?: boolean\n  onClick: () => void\n}\n\nexport function ToolbarAction({\n  label,\n  show_label,\n  icon,\n  onClick,\n}: ToolbarActionProps): ReactElement {\n  const theme: EmotionTheme = useTheme()\n\n  const displayLabel = show_label ? label : \"\"\n  return (\n    <div data-testid=\"stElementToolbarButton\">\n      <Tooltip\n        content={\n          <StreamlitMarkdown\n            source={label}\n            allowHTML={false}\n            style={{ fontSize: theme.fontSizes.sm }}\n          />\n        }\n        placement={Placement.TOP}\n        // The default tooltip delay (== how fast the tooltip is triggered) of 200ms\n        // is a bit too fast for the toolbar use case. Therefore, we are setting it to 1000ms.\n        onMouseEnterDelay={1000}\n        inline\n      >\n        <Button\n          onClick={event => {\n            if (onClick) {\n              onClick()\n            }\n            event.stopPropagation()\n          }}\n          kind={BaseButtonKind.ELEMENT_TOOLBAR}\n          aria-label={label}\n        >\n          {icon && (\n            <Icon\n              content={icon}\n              size=\"md\"\n              testid=\"stElementToolbarButtonIcon\"\n            />\n          )}\n          {displayLabel && <span>{displayLabel}</span>}\n        </Button>\n      </Tooltip>\n    </div>\n  )\n}\n\nexport interface ToolbarProps {\n  onExpand?: () => void\n  onCollapse?: () => void\n  isFullScreen?: boolean\n  locked?: boolean\n  target?: StyledComponent<any, any, any>\n  disableFullscreenMode?: boolean\n}\n\nconst Toolbar: React.FC<React.PropsWithChildren<ToolbarProps>> = ({\n  onExpand,\n  onCollapse,\n  isFullScreen,\n  locked,\n  children,\n  target,\n  disableFullscreenMode,\n}): ReactElement => {\n  return (\n    <StyledToolbarWrapper\n      className=\"stElementToolbar\"\n      data-testid=\"stElementToolbar\"\n      locked={locked || isFullScreen}\n      target={target}\n    >\n      <StyledToolbar>\n        {children}\n        {onExpand && !disableFullscreenMode && !isFullScreen && (\n          <ToolbarAction\n            label=\"Fullscreen\"\n            icon={Fullscreen}\n            onClick={() => onExpand()}\n          />\n        )}\n        {onCollapse && !disableFullscreenMode && isFullScreen && (\n          <ToolbarAction\n            label=\"Close fullscreen\"\n            icon={FullscreenExit}\n            onClick={() => onCollapse()}\n          />\n        )}\n      </StyledToolbar>\n    </StyledToolbarWrapper>\n  )\n}\n\nexport default Toolbar\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useEffect } from \"react\"\n\nimport { SignalConnection } from \"typed-signals\"\n\nimport {\n  isValidFormId,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\n\nexport class FormClearHelper {\n  private formClearListener?: SignalConnection\n\n  private lastWidgetMgr?: WidgetStateManager\n\n  private lastFormId?: string\n\n  /**\n   * Register the listener that will be called when the widget's form is cleared.\n   * This should be called in the `render` function of every class-based widget\n   * element - it mimics the behavior of a `useEffect` hook, and ensures that\n   * subscription and unsubscription happen correctly.\n   *\n   * Hooks-based widgets can just use `useEffect` and call\n   * `widgetMgr.addFormClearedListener` directly. Or just use the convenient\n   * hook `useFormClearHelper`, below.\n   */\n  public manageFormClearListener(\n    widgetMgr: WidgetStateManager,\n    formId: string,\n    listener: () => void\n  ): void {\n    // If we're already subscribed and our params haven't changed, early-out.\n    if (\n      notNullOrUndefined(this.formClearListener) &&\n      this.lastWidgetMgr === widgetMgr &&\n      this.lastFormId === formId\n    ) {\n      return\n    }\n\n    // Close our previous subscription, if we had one.\n    this.disconnect()\n\n    // If we're not part of a form, there's nothing to do.\n    if (!isValidFormId(formId)) {\n      return\n    }\n\n    // Make the new subscription.\n    this.formClearListener = widgetMgr.addFormClearedListener(formId, listener)\n    this.lastWidgetMgr = widgetMgr\n    this.lastFormId = formId\n  }\n\n  /**\n   * Disconnect from the form-clear signal, if we're connected.\n   * This should be called from the `componentWillUnmount` function of every\n   * element that uses it.\n   */\n  public disconnect(): void {\n    this.formClearListener?.disconnect()\n    this.formClearListener = undefined\n    this.lastWidgetMgr = undefined\n    this.lastFormId = undefined\n  }\n}\n\ninterface FormElementProtoInterface {\n  formId: string\n}\n\ninterface FormClearHelperArgs {\n  element: FormElementProtoInterface\n  widgetMgr: WidgetStateManager\n  onFormCleared: () => void\n}\n\nexport function useFormClearHelper({\n  element,\n  widgetMgr,\n  onFormCleared,\n}: FormClearHelperArgs): void {\n  useEffect(() => {\n    if (!isValidFormId(element.formId)) {\n      return\n    }\n\n    const formClearListener = widgetMgr.addFormClearedListener(\n      element.formId,\n      onFormCleared\n    )\n\n    return () => {\n      formClearListener.disconnect()\n    }\n  }, [element, widgetMgr, onFormCleared])\n}\n"],"names":["StyledFullScreenButton","_styled","target","_ref","isExpanded","theme","variableProps","right","top","backgroundColor","opacity","transform","colors","lightenedBg05","position","display","alignItems","justifyContent","zIndex","zIndices","sidebar","height","width","transition","border","color","fadedText60","borderRadius","outline","bodyText","StyledFullScreenFrame","_ref2","left","bottom","background","bgColor","fullscreenWrapper","padding","spacing","md","paddingTop","sizes","fullScreenHeaderHeight","overflow","FullScreenWrapper","PureComponent","constructor","props","super","context","controlKeys","event","expanded","this","state","keyCode","zoomOut","zoomIn","document","body","style","setFullScreen","setState","convertScssRemValueToPixels","scssValue","parseFloat","getComputedStyle","documentElement","fontSize","getWindowDimensions","fullWidth","window","innerWidth","fullHeight","innerHeight","updateWindowDimensions","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","children","disableFullscreenMode","buttonImage","FullscreenEnter","buttonOnClick","buttonTitle","FullscreenExit","_jsxs","_jsx","onClick","title","Icon","content","expand","collapse","contextType","LibContext","withTheme","WrappedComponent","forceDisableFullScreenMode","arguments","length","undefined","ComponentWithFullScreenWrapper","isFullScreen","displayName","name","hoistNonReactStatics","TOP_DISTANCE","StyledToolbarWrapper","locked","sm","none","StyledToolbar","hasLightBackgroundColor","flexDirection","boxShadow","radii","default","ToolbarAction","label","show_label","icon","useTheme","displayLabel","Tooltip","StreamlitMarkdown","source","allowHTML","fontSizes","placement","Placement","TOP","onMouseEnterDelay","inline","Button","stopPropagation","kind","BaseButtonKind","ELEMENT_TOOLBAR","size","testid","onExpand","onCollapse","className","Fullscreen","FormClearHelper","formClearListener","lastWidgetMgr","lastFormId","manageFormClearListener","widgetMgr","formId","listener","notNullOrUndefined","disconnect","isValidFormId","addFormClearedListener","_this$formClearListen","useFormClearHelper","element","onFormCleared","useEffect"],"sourceRoot":""}