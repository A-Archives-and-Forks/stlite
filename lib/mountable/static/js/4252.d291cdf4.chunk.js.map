{"version":3,"file":"static/js/4252.d291cdf4.chunk.js","mappings":"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","sources":["../../../streamlit/frontend/lib/src/components/elements/ImageList/styled-components.ts","../../../streamlit/frontend/lib/src/components/elements/ImageList/ImageList.tsx","../../../streamlit/frontend/lib/src/components/shared/ElementFullscreen/ElementFullscreenContext.tsx","../../../streamlit/frontend/lib/src/components/shared/FullScreenWrapper/styled-components.tsx","../../../streamlit/frontend/lib/src/components/shared/ElementFullscreen/ElementFullscreenWrapper.tsx","../../../streamlit/frontend/lib/src/components/shared/ElementFullscreen/useFullscreen.tsx","../../../streamlit/frontend/lib/src/components/shared/FullScreenWrapper/withFullScreenWrapper.tsx","../../../streamlit/frontend/lib/src/components/shared/Toolbar/Toolbar.tsx","../../../streamlit/frontend/lib/src/components/shared/Toolbar/styled-components.ts","../../../streamlit/frontend/lib/src/hooks/useRequiredContext.tsx","../../../node_modules/@emotion-icons/material-outlined/Fullscreen/Fullscreen.esm.js","../../../node_modules/@emotion-icons/material-outlined/FullscreenExit/FullscreenExit.esm.js"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport const StyledImageList = styled.div(({ theme }) => ({\n  display: \"flex\",\n  flexDirection: \"row\",\n  flexWrap: \"wrap\",\n  // Not supported in Safari, but at least it's not a regression for those users:\n  rowGap: theme.spacing.lg,\n  maxWidth: \"100%\",\n}))\n\nexport const StyledImageContainer = styled.div({\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"stretch\",\n  width: \"auto\",\n  flexGrow: 0,\n})\n\nexport const StyledCaption = styled.div(({ theme }) => ({\n  fontFamily: theme.genericFonts.bodyFont,\n  fontSize: theme.fontSizes.sm,\n  color: theme.colors.fadedText60,\n  textAlign: \"center\",\n  marginTop: theme.spacing.xs,\n  wordWrap: \"break-word\",\n  padding: theme.spacing.threeXS,\n}))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n * Copyright (c) Yuichiro Tachibana (Tsuchiya) (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { CSSProperties, ReactElement } from \"react\"\n\nimport {\n  ImageList as ImageListProto,\n  Image as ImageProto,\n} from \"@streamlit/lib/src/proto\"\nimport { StreamlitEndpoints } from \"@streamlit/lib/src/StreamlitEndpoints\"\nimport Toolbar, {\n  StyledToolbarElementContainer,\n} from \"@streamlit/lib/src/components/shared/Toolbar\"\nimport { ElementFullscreenContext } from \"@streamlit/lib/src/components/shared/ElementFullscreen/ElementFullscreenContext\"\nimport { useRequiredContext } from \"@streamlit/lib/src/hooks/useRequiredContext\"\nimport { withFullScreenWrapper } from \"@streamlit/lib/src/components/shared/FullScreenWrapper\"\n\nimport { useStliteMediaObjects } from \"@stlite/kernel\"\n\nimport {\n  StyledCaption,\n  StyledImageContainer,\n  StyledImageList,\n} from \"./styled-components\"\n\nexport interface ImageListProps {\n  endpoints: StreamlitEndpoints\n  width: number\n  element: ImageListProto\n  disableFullscreenMode?: boolean\n}\n\n/**\n * @see WidthBehaviour on the Backend\n * @see the Image.proto file\n */\nenum WidthBehavior {\n  OriginalWidth = -1,\n  /** @deprecated */\n  ColumnWidth = -2,\n  /** @deprecated */\n  AutoWidth = -3,\n  MinImageOrContainer = -4,\n  MaxImageOrContainer = -5,\n}\n\n/**\n * Functional element for a horizontal list of images.\n */\nfunction ImageList({\n  element,\n  width,\n  endpoints,\n  disableFullscreenMode,\n}: Readonly<ImageListProps>): ReactElement {\n  const images = useStliteMediaObjects(element.imgs)\n\n  const {\n    expanded: isFullScreen,\n    width: fullScreenWidth,\n    height,\n    expand,\n    collapse,\n  } = useRequiredContext(ElementFullscreenContext)\n\n  // The width field in the proto sets the image width, but has special\n  // cases the values in the WidthBehavior enum.\n  let containerWidth: number | undefined\n  const protoWidth = element.width\n\n  if (\n    [\n      WidthBehavior.OriginalWidth,\n      WidthBehavior.AutoWidth,\n      WidthBehavior.MinImageOrContainer,\n    ].includes(protoWidth)\n  ) {\n    // Use the original image width.\n    containerWidth = undefined\n  } else if (\n    [WidthBehavior.ColumnWidth, WidthBehavior.MaxImageOrContainer].includes(\n      protoWidth\n    )\n  ) {\n    // Use the column width unless the image is currently fullscreen, then use the fullscreen width\n    containerWidth = isFullScreen ? fullScreenWidth : width\n  } else if (protoWidth > 0) {\n    // Set the image width explicitly.\n    containerWidth = protoWidth\n  } else {\n    throw Error(`Invalid image width: ${protoWidth}`)\n  }\n\n  const imgStyle: CSSProperties = {}\n\n  if (height && isFullScreen) {\n    imgStyle.maxHeight = height\n    imgStyle.objectFit = \"contain\"\n  } else {\n    imgStyle.width = containerWidth\n    // Cap the image width, so it doesn't exceed its parent container width\n    imgStyle.maxWidth = \"100%\"\n  }\n\n  return (\n    <StyledToolbarElementContainer\n      width={containerWidth}\n      height={height}\n      useContainerWidth={isFullScreen}\n    >\n      <Toolbar\n        target={StyledToolbarElementContainer}\n        isFullScreen={isFullScreen}\n        onExpand={expand}\n        onCollapse={collapse}\n        disableFullscreenMode={disableFullscreenMode}\n      ></Toolbar>\n      <StyledImageList\n        className=\"stImage\"\n        data-testid=\"stImage\"\n        style={{ width: containerWidth }}\n      >\n        {images.map((iimage, idx): ReactElement => {\n          const image = iimage as ImageProto\n          return (\n            <StyledImageContainer data-testid=\"stImageContainer\" key={idx}>\n              <img\n                style={imgStyle}\n                src={endpoints.buildMediaURL(image.url)}\n                alt={idx.toString()}\n              />\n              {image.caption && (\n                <StyledCaption data-testid=\"stImageCaption\" style={imgStyle}>\n                  {` ${image.caption} `}\n                </StyledCaption>\n              )}\n            </StyledImageContainer>\n          )\n        })}\n      </StyledImageList>\n    </StyledToolbarElementContainer>\n  )\n}\n\nexport default withFullScreenWrapper(ImageList)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createContext } from \"react\"\n\ntype ElementFullscreenContextShape = {\n  width: number\n  height: number | undefined\n  expanded: boolean\n  expand: () => void\n  collapse: () => void\n}\n\nexport const ElementFullscreenContext =\n  createContext<ElementFullscreenContextShape | null>(null)\nElementFullscreenContext.displayName = \"ElementFullscreenContext\"\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport interface StyledFullScreenFrameProps {\n  isExpanded: boolean\n}\n\nexport const StyledFullScreenFrame = styled.div<StyledFullScreenFrameProps>(\n  ({ theme, isExpanded }) => ({\n    ...(isExpanded\n      ? {\n          position: \"fixed\",\n          top: 0,\n          left: 0,\n          bottom: 0,\n          right: 0,\n          background: theme.colors.bgColor,\n          zIndex: theme.zIndices.fullscreenWrapper,\n          padding: theme.spacing.md,\n          paddingTop: theme.sizes.fullScreenHeaderHeight,\n          overflow: [\"auto\", \"overlay\"],\n          display: \"flex\", // To avoid extra spaces that lead to scrollbars.\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }\n      : {}),\n  })\n)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { FC, PropsWithChildren, useMemo } from \"react\"\n\nimport { useTheme } from \"@emotion/react\"\n\nimport { StyledFullScreenFrame } from \"@streamlit/lib/src/components/shared/FullScreenWrapper/styled-components\"\nimport { ElementFullscreenContext } from \"@streamlit/lib/src/components/shared/ElementFullscreen/ElementFullscreenContext\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\n\nimport { useFullscreen } from \"./useFullscreen\"\n\ntype ElementFullscreenWrapperProps = PropsWithChildren<{\n  height?: number\n  width: number\n}>\n\nconst ElementFullscreenWrapper: FC<ElementFullscreenWrapperProps> = ({\n  children,\n  height,\n  width,\n}) => {\n  const theme: EmotionTheme = useTheme()\n  const { expanded, fullHeight, fullWidth, zoomIn, zoomOut } = useFullscreen()\n\n  const fullscreenContextValue = useMemo(() => {\n    return {\n      width: expanded ? fullWidth : width,\n      height: expanded ? fullHeight : height,\n      expanded,\n      expand: zoomIn,\n      collapse: zoomOut,\n    }\n  }, [expanded, fullHeight, fullWidth, height, width, zoomIn, zoomOut])\n\n  return (\n    <ElementFullscreenContext.Provider value={fullscreenContextValue}>\n      <StyledFullScreenFrame\n        isExpanded={expanded}\n        data-testid=\"stFullScreenFrame\"\n        theme={theme}\n      >\n        {children}\n      </StyledFullScreenFrame>\n    </ElementFullscreenContext.Provider>\n  )\n}\n\nexport default ElementFullscreenWrapper\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useCallback, useContext, useEffect, useMemo, useState } from \"react\"\n\nimport { LibContext } from \"@streamlit/lib/src/components/core/LibContext\"\nimport { WindowDimensionsContext } from \"@streamlit/lib/src/components/shared/WindowDimensions\"\nimport { useRequiredContext } from \"@streamlit/lib/src/hooks/useRequiredContext\"\n\nexport type UseEscapeToCollapseArgs = {\n  expanded: boolean\n  zoomOut: () => void\n}\n\nexport type UseFullscreenShape = {\n  expanded: boolean\n  fullHeight: number\n  fullWidth: number\n  zoomIn: () => void\n  zoomOut: () => void\n}\n\nexport const useFullscreen = (): UseFullscreenShape => {\n  const { setFullScreen } = useContext(LibContext)\n  const [expanded, setExpanded] = useState(false)\n  const { fullHeight, fullWidth } = useRequiredContext(WindowDimensionsContext)\n\n  const setExpandedState = useCallback(\n    (isExpanded: boolean) => {\n      // Set the local component-level state\n      setExpanded(isExpanded)\n      // Set the context-level state\n      setFullScreen(isExpanded)\n    },\n    [setFullScreen]\n  )\n\n  const zoomIn = useCallback(() => {\n    document.body.style.overflow = \"hidden\"\n    setExpandedState(true)\n  }, [setExpandedState])\n\n  const zoomOut = useCallback(() => {\n    document.body.style.overflow = \"unset\"\n    setExpandedState(false)\n  }, [setExpandedState])\n\n  const controlKeys = useCallback(\n    (event: KeyboardEvent) => {\n      /**\n       * keyCode 27 is the ESC key\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode\n       */\n      if (event.keyCode === 27 && expanded) {\n        // Exit fullscreen\n        zoomOut()\n      }\n    },\n    [zoomOut, expanded]\n  )\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", controlKeys, false)\n\n    return () => {\n      document.removeEventListener(\"keydown\", controlKeys, false)\n    }\n  }, [controlKeys])\n\n  return useMemo(() => {\n    return { expanded, zoomIn, zoomOut, fullHeight, fullWidth }\n  }, [expanded, zoomIn, zoomOut, fullHeight, fullWidth])\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ComponentType, ReactElement } from \"react\"\n\nimport hoistNonReactStatics from \"hoist-non-react-statics\"\n\nimport ElementFullscreenWrapper from \"@streamlit/lib/src/components/shared/ElementFullscreen/ElementFullscreenWrapper\"\n\nfunction withFullScreenWrapper<P extends { width: number }>(\n  WrappedComponent: ComponentType<React.PropsWithChildren<P>>\n): ComponentType<React.PropsWithChildren<P>> {\n  const ComponentWithFullScreenWrapper = (props: P): ReactElement => {\n    return (\n      <ElementFullscreenWrapper width={props.width}>\n        <WrappedComponent {...(props as P)}></WrappedComponent>\n      </ElementFullscreenWrapper>\n    )\n  }\n  ComponentWithFullScreenWrapper.displayName = `withFullScreenWrapper(${\n    WrappedComponent.displayName || WrappedComponent.name\n  })`\n\n  // Static methods must be copied over\n  // https://en.reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n  return hoistNonReactStatics(ComponentWithFullScreenWrapper, WrappedComponent)\n}\n\nexport default withFullScreenWrapper\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\n\nimport { EmotionIcon } from \"@emotion-icons/emotion-icon\"\nimport { useTheme } from \"@emotion/react\"\nimport { StyledComponent } from \"@emotion/styled\"\nimport { Fullscreen, FullscreenExit } from \"@emotion-icons/material-outlined\"\n\nimport StreamlitMarkdown from \"@streamlit/lib/src/components/shared/StreamlitMarkdown\"\nimport Tooltip, {\n  Placement,\n} from \"@streamlit/lib/src/components/shared/Tooltip\"\nimport Button, {\n  BaseButtonKind,\n} from \"@streamlit/lib/src/components/shared/BaseButton\"\nimport Icon from \"@streamlit/lib/src/components/shared/Icon\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\n\nimport { StyledToolbar, StyledToolbarWrapper } from \"./styled-components\"\n\nexport interface ToolbarActionProps {\n  label: string\n  icon?: EmotionIcon\n  show_label?: boolean\n  onClick: () => void\n}\n\nexport function ToolbarAction({\n  label,\n  show_label,\n  icon,\n  onClick,\n}: ToolbarActionProps): ReactElement {\n  const theme: EmotionTheme = useTheme()\n\n  const displayLabel = show_label ? label : \"\"\n  return (\n    <div data-testid=\"stElementToolbarButton\">\n      <Tooltip\n        content={\n          <StreamlitMarkdown\n            source={label}\n            allowHTML={false}\n            style={{ fontSize: theme.fontSizes.sm }}\n          />\n        }\n        placement={Placement.TOP}\n        // The default tooltip delay (== how fast the tooltip is triggered) of 200ms\n        // is a bit too fast for the toolbar use case. Therefore, we are setting it to 1000ms.\n        onMouseEnterDelay={1000}\n        inline\n      >\n        <Button\n          onClick={event => {\n            if (onClick) {\n              onClick()\n            }\n            event.stopPropagation()\n          }}\n          kind={BaseButtonKind.ELEMENT_TOOLBAR}\n          aria-label={label}\n        >\n          {icon && (\n            <Icon\n              content={icon}\n              size=\"md\"\n              testid=\"stElementToolbarButtonIcon\"\n            />\n          )}\n          {displayLabel && <span>{displayLabel}</span>}\n        </Button>\n      </Tooltip>\n    </div>\n  )\n}\n\nexport interface ToolbarProps {\n  onExpand?: () => void\n  onCollapse?: () => void\n  isFullScreen?: boolean\n  locked?: boolean\n  target?: StyledComponent<any, any, any>\n  disableFullscreenMode?: boolean\n}\n\nconst Toolbar: React.FC<React.PropsWithChildren<ToolbarProps>> = ({\n  onExpand,\n  onCollapse,\n  isFullScreen,\n  locked,\n  children,\n  target,\n  disableFullscreenMode,\n}): ReactElement => {\n  return (\n    <StyledToolbarWrapper\n      className=\"stElementToolbar\"\n      data-testid=\"stElementToolbar\"\n      locked={locked || isFullScreen}\n      target={target}\n    >\n      <StyledToolbar>\n        {children}\n        {onExpand && !disableFullscreenMode && !isFullScreen && (\n          <ToolbarAction\n            label=\"Fullscreen\"\n            icon={Fullscreen}\n            onClick={() => onExpand()}\n          />\n        )}\n        {onCollapse && !disableFullscreenMode && isFullScreen && (\n          <ToolbarAction\n            label=\"Close fullscreen\"\n            icon={FullscreenExit}\n            onClick={() => onCollapse()}\n          />\n        )}\n      </StyledToolbar>\n    </StyledToolbarWrapper>\n  )\n}\n\nexport default Toolbar\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled, { StyledComponent } from \"@emotion/styled\"\n\nimport { hasLightBackgroundColor } from \"@streamlit/lib/src/theme\"\n\nconst TOP_DISTANCE = \"-2.4rem\"\n\nexport interface StyledToolbarWrapperProps {\n  locked?: boolean\n  target?: StyledComponent<any, any, any>\n}\n\nexport const StyledToolbarWrapper = styled.div<StyledToolbarWrapperProps>(\n  ({ theme, locked, target }) => ({\n    padding: `${theme.spacing.sm} 0 ${theme.spacing.sm} ${theme.spacing.sm}`,\n    position: \"absolute\",\n    top: locked ? TOP_DISTANCE : \"-1rem\",\n    right: theme.spacing.none,\n    transition: \"none\",\n    ...(!locked && {\n      opacity: 0,\n      \"&:active, &:focus-visible, &:hover\": {\n        transition: \"opacity 150ms 100ms, top 100ms 100ms\",\n        opacity: 1,\n        top: TOP_DISTANCE,\n      },\n      ...(target && {\n        [`${target}:hover &, ${target}:active &, ${target}:focus-visible &`]: {\n          transition: \"opacity 150ms 100ms, top 100ms 100ms\",\n          opacity: 1,\n          top: TOP_DISTANCE,\n        },\n      }),\n    }),\n  })\n)\n\nexport const StyledToolbar = styled.div(({ theme }) => ({\n  color: hasLightBackgroundColor(theme)\n    ? theme.colors.fadedText60\n    : theme.colors.bodyText,\n  display: \"flex\",\n  flexDirection: \"row\",\n  alignItems: \"center\",\n  justifyContent: \"flex-end\",\n  boxShadow: \"1px 2px 8px rgba(0, 0, 0, 0.08)\",\n  borderRadius: theme.radii.default,\n  backgroundColor: theme.colors.lightenedBg05,\n  width: \"fit-content\",\n  zIndex: theme.zIndices.sidebar + 1,\n}))\n\nexport const StyledToolbarElementContainer = styled.div<{\n  width?: number\n  height?: number\n  useContainerWidth: boolean\n}>(({ width, height, useContainerWidth }) => ({\n  position: \"relative\",\n  height: useContainerWidth ? height : \"fit-content\",\n  width: useContainerWidth ? width : \"fit-content\",\n  maxWidth: \"100%\",\n}))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, useContext } from \"react\"\n\nexport const useRequiredContext = <R,>(context: Context<R | null>): R => {\n  const foundContext = useContext(context)\n\n  if (foundContext === null || foundContext === undefined) {\n    throw new Error(\n      `useRequiredContext: ${context.displayName ?? \"context\"} not found`\n    )\n  }\n\n  return foundContext\n}\n","import _extends from \"@babel/runtime/helpers/extends\";\nimport * as React from 'react';\nimport { EmotionIconBase } from '@emotion-icons/emotion-icon';\nexport var Fullscreen = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var attrs = {\n    \"fill\": \"currentColor\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  };\n  return /*#__PURE__*/React.createElement(EmotionIconBase, _extends({\n    iconAttrs: attrs,\n    iconVerticalAlign: \"middle\",\n    iconViewBox: \"0 0 24 24\"\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"none\",\n    d: \"M0 0h24v24H0V0z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z\"\n  }));\n});\nFullscreen.displayName = 'Fullscreen';\nexport var FullscreenDimensions = {\n  height: 24,\n  width: 24\n};","import _extends from \"@babel/runtime/helpers/extends\";\nimport * as React from 'react';\nimport { EmotionIconBase } from '@emotion-icons/emotion-icon';\nexport var FullscreenExit = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var attrs = {\n    \"fill\": \"currentColor\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  };\n  return /*#__PURE__*/React.createElement(EmotionIconBase, _extends({\n    iconAttrs: attrs,\n    iconVerticalAlign: \"middle\",\n    iconViewBox: \"0 0 24 24\"\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"none\",\n    d: \"M0 0h24v24H0V0z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M5 16h3v3h2v-5H5v2zm3-8H5v2h5V5H8v3zm6 11h2v-3h3v-2h-5v5zm2-11V5h-2v5h5V8h-3z\"\n  }));\n});\nFullscreenExit.displayName = 'FullscreenExit';\nexport var FullscreenExitDimensions = {\n  height: 24,\n  width: 24\n};"],"names":["StyledImageList","_styled","target","_ref","theme","display","flexDirection","flexWrap","rowGap","spacing","lg","maxWidth","StyledImageContainer","name","styles","StyledCaption","_ref2","fontFamily","genericFonts","bodyFont","fontSize","fontSizes","sm","color","colors","fadedText60","textAlign","marginTop","xs","wordWrap","padding","threeXS","WidthBehavior","withFullScreenWrapper","element","width","endpoints","disableFullscreenMode","images","useStliteMediaObjects","imgs","expanded","isFullScreen","fullScreenWidth","height","expand","collapse","useRequiredContext","ElementFullscreenContext","containerWidth","protoWidth","OriginalWidth","AutoWidth","MinImageOrContainer","includes","undefined","ColumnWidth","MaxImageOrContainer","Error","imgStyle","maxHeight","objectFit","_jsxs","StyledToolbarElementContainer","useContainerWidth","children","_jsx","Toolbar","onExpand","onCollapse","className","style","map","iimage","idx","image","src","buildMediaURL","url","alt","toString","caption","createContext","displayName","StyledFullScreenFrame","isExpanded","position","top","left","bottom","right","background","bgColor","zIndex","zIndices","fullscreenWrapper","md","paddingTop","sizes","fullScreenHeaderHeight","overflow","alignItems","justifyContent","useTheme","fullHeight","fullWidth","zoomIn","zoomOut","useFullscreen","setFullScreen","useContext","LibContext","setExpanded","useState","WindowDimensionsContext","setExpandedState","useCallback","document","body","controlKeys","event","keyCode","useEffect","addEventListener","removeEventListener","useMemo","fullscreenContextValue","Provider","value","WrappedComponent","ComponentWithFullScreenWrapper","props","ElementFullscreenWrapper","hoistNonReactStatics","ToolbarAction","label","show_label","icon","onClick","displayLabel","Tooltip","content","StreamlitMarkdown","source","allowHTML","placement","Placement","TOP","onMouseEnterDelay","inline","Button","stopPropagation","kind","BaseButtonKind","ELEMENT_TOOLBAR","Icon","size","testid","locked","StyledToolbarWrapper","StyledToolbar","Fullscreen","FullscreenExit","TOP_DISTANCE","none","transition","opacity","hasLightBackgroundColor","bodyText","boxShadow","borderRadius","radii","default","backgroundColor","lightenedBg05","sidebar","_ref3","context","foundContext","_context$displayName","React","ref","EmotionIconBase","_extends","iconAttrs","iconVerticalAlign","iconViewBox","fill","d"],"sourceRoot":""}