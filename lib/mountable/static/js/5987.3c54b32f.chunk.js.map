{"version":3,"file":"static/js/5987.3c54b32f.chunk.js","mappings":"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","sources":["../../../streamlit/frontend/lib/src/components/widgets/Form/FormClearHelper.ts","../../../streamlit/frontend/lib/src/components/widgets/Slider/styled-components.ts","../../../streamlit/frontend/lib/src/components/widgets/Slider/Slider.tsx","../../../streamlit/frontend/lib/src/useBasicWidgetState.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useEffect } from \"react\"\n\nimport { SignalConnection } from \"typed-signals\"\n\nimport {\n  isValidFormId,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\n\nexport class FormClearHelper {\n  private formClearListener?: SignalConnection\n\n  private lastWidgetMgr?: WidgetStateManager\n\n  private lastFormId?: string\n\n  /**\n   * Register the listener that will be called when the widget's form is cleared.\n   * This should be called in the `render` function of every class-based widget\n   * element - it mimics the behavior of a `useEffect` hook, and ensures that\n   * subscription and unsubscription happen correctly.\n   *\n   * Hooks-based widgets can just use `useEffect` and call\n   * `widgetMgr.addFormClearedListener` directly. Or just use the convenient\n   * hook `useFormClearHelper`, below.\n   */\n  public manageFormClearListener(\n    widgetMgr: WidgetStateManager,\n    formId: string,\n    listener: () => void\n  ): void {\n    // If we're already subscribed and our params haven't changed, early-out.\n    if (\n      notNullOrUndefined(this.formClearListener) &&\n      this.lastWidgetMgr === widgetMgr &&\n      this.lastFormId === formId\n    ) {\n      return\n    }\n\n    // Close our previous subscription, if we had one.\n    this.disconnect()\n\n    // If we're not part of a form, there's nothing to do.\n    if (!isValidFormId(formId)) {\n      return\n    }\n\n    // Make the new subscription.\n    this.formClearListener = widgetMgr.addFormClearedListener(formId, listener)\n    this.lastWidgetMgr = widgetMgr\n    this.lastFormId = formId\n  }\n\n  /**\n   * Disconnect from the form-clear signal, if we're connected.\n   * This should be called from the `componentWillUnmount` function of every\n   * element that uses it.\n   */\n  public disconnect(): void {\n    this.formClearListener?.disconnect()\n    this.formClearListener = undefined\n    this.lastWidgetMgr = undefined\n    this.lastFormId = undefined\n  }\n}\n\ninterface FormElementProtoInterface {\n  formId: string\n}\n\ninterface FormClearHelperArgs {\n  element: FormElementProtoInterface\n  widgetMgr: WidgetStateManager\n  onFormCleared: () => void\n}\n\nexport function useFormClearHelper({\n  element,\n  widgetMgr,\n  onFormCleared,\n}: FormClearHelperArgs): void {\n  useEffect(() => {\n    if (!isValidFormId(element.formId)) {\n      return\n    }\n\n    const formClearListener = widgetMgr.addFormClearedListener(\n      element.formId,\n      onFormCleared\n    )\n\n    return () => {\n      formClearListener.disconnect()\n    }\n  }, [element, widgetMgr, onFormCleared])\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\nimport { transparentize } from \"color2k\"\n\nexport interface StyledSliderProps {\n  disabled: boolean\n}\n\nexport const StyledThumb = styled.div<StyledSliderProps>(\n  ({ disabled, theme }) => ({\n    alignItems: \"center\",\n    backgroundColor: disabled ? theme.colors.gray : theme.colors.primary,\n    borderTopLeftRadius: \"100%\",\n    borderTopRightRadius: \"100%\",\n    borderBottomLeftRadius: \"100%\",\n    borderBottomRightRadius: \"100%\",\n    borderTopStyle: \"none\",\n    borderBottomStyle: \"none\",\n    borderRightStyle: \"none\",\n    borderLeftStyle: \"none\",\n    boxShadow: \"none\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    height: theme.sizes.sliderThumb,\n    width: theme.sizes.sliderThumb,\n    \":focus\": {\n      outline: \"none\",\n    },\n    \":focus-visible\": {\n      boxShadow: `0 0 0 0.2rem ${transparentize(theme.colors.primary, 0.5)}`,\n    },\n  })\n)\n\nexport const StyledThumbValue = styled.div<StyledSliderProps>(\n  ({ disabled, theme }) => ({\n    fontFamily: theme.genericFonts.codeFont,\n    fontSize: theme.fontSizes.sm,\n    color: disabled ? theme.colors.gray : theme.colors.primary,\n    top: \"-1.6em\",\n    position: \"absolute\",\n    whiteSpace: \"nowrap\",\n    backgroundColor: theme.colors.transparent,\n    lineHeight: theme.lineHeights.base,\n    fontWeight: theme.fontWeights.normal,\n    // If values are clickable, it's hard to move the right thumb when they're\n    // very close. So make them unclickable:\n    pointerEvents: \"none\",\n  })\n)\n\nexport const StyledTickBar = styled.div(({ theme }) => ({\n  fontSize: theme.fontSizes.sm,\n  paddingBottom: theme.spacing.none,\n  paddingLeft: theme.spacing.none,\n  paddingRight: theme.spacing.none,\n  paddingTop: \"0.65em\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\",\n  display: \"flex\",\n}))\n\nexport const StyledTickBarItem = styled.div<StyledSliderProps>(\n  ({ disabled, theme }) => ({\n    lineHeight: theme.lineHeights.base,\n    fontWeight: theme.fontWeights.normal,\n    fontFamily: theme.genericFonts.codeFont,\n    color: disabled ? theme.colors.fadedText40 : \"inherit\",\n  })\n)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {\n  memo,\n  ReactElement,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\"\n\nimport pick from \"lodash/pick\"\nimport { StyleProps, Slider as UISlider } from \"baseui/slider\"\nimport { useTheme } from \"@emotion/react\"\nimport { sprintf } from \"sprintf-js\"\nimport moment from \"moment\"\n\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\nimport {\n  useBasicWidgetState,\n  ValueWithSource,\n} from \"@streamlit/lib/src/useBasicWidgetState\"\nimport { Slider as SliderProto } from \"@streamlit/lib/src/proto\"\nimport {\n  debounce,\n  labelVisibilityProtoValueToEnum,\n} from \"@streamlit/lib/src/util/utils\"\nimport {\n  StyledWidgetLabelHelp,\n  WidgetLabel,\n} from \"@streamlit/lib/src/components/widgets/BaseWidget\"\nimport TooltipIcon from \"@streamlit/lib/src/components/shared/TooltipIcon\"\nimport { Placement } from \"@streamlit/lib/src/components/shared/Tooltip\"\n\nimport {\n  StyledThumb,\n  StyledThumbValue,\n  StyledTickBar,\n  StyledTickBarItem,\n} from \"./styled-components\"\n\nconst DEBOUNCE_TIME_MS = 200\n\nexport interface Props {\n  disabled: boolean\n  element: SliderProto\n  widgetMgr: WidgetStateManager\n  width: number\n  fragmentId?: string\n}\n\nfunction Slider({\n  disabled,\n  element,\n  widgetMgr,\n  width,\n  fragmentId,\n}: Props): ReactElement {\n  const [value, setValueWithSource] = useBasicWidgetState<\n    number[],\n    SliderProto\n  >({\n    getStateFromWidgetMgr,\n    getDefaultStateFromProto,\n    getCurrStateFromProto,\n    updateWidgetMgrState,\n    element,\n    widgetMgr,\n    fragmentId,\n  })\n\n  // We tie the UI to `uiValue` rather than `value` because `value` only updates\n  // every DEBOUNCE_TIME_MS. If we tied the UI to `value` then the UI would only\n  // update every DEBOUNCE_TIME_MS as well. So this keeps the UI smooth.\n  const [uiValue, setUiValue] = useState(value)\n\n  const sliderRef = useRef<HTMLDivElement | null>(null)\n  const [thumbRefs] = useState<\n    React.MutableRefObject<HTMLDivElement | null>[]\n  >([])\n  const [thumbValueRefs] = useState<\n    React.MutableRefObject<HTMLDivElement | null>[]\n  >([])\n\n  const { colors, fonts, fontSizes, spacing } = useTheme()\n  const style = { width }\n\n  const formattedValueArr = uiValue.map(v => formatValue(v, element))\n  const formattedMinValue = formatValue(element.min, element)\n  const formattedMaxValue = formatValue(element.max, element)\n  const thumbAriaLabel = element.label\n\n  // When resetting a form, `value` will change so we need to change `uiValue`\n  // to match.\n  useEffect(() => {\n    setUiValue(value)\n  }, [value])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const debouncedSetValueWithSource = useCallback(\n    debounce(DEBOUNCE_TIME_MS, (value: number[]): void => {\n      setValueWithSource({ value, fromUi: true })\n    }) as (value: number[]) => void,\n    []\n  )\n\n  const handleChange = useCallback(\n    ({ value }: { value: number[] }): void => {\n      setUiValue(value)\n      debouncedSetValueWithSource(value)\n    },\n    [debouncedSetValueWithSource]\n  )\n\n  const renderTickBar = useCallback((): ReactElement => {\n    return (\n      <StyledTickBar data-testid=\"stSliderTickBar\">\n        <StyledTickBarItem\n          disabled={disabled}\n          data-testid=\"stSliderTickBarMin\"\n        >\n          {formattedMinValue}\n        </StyledTickBarItem>\n        <StyledTickBarItem\n          disabled={disabled}\n          data-testid=\"stSliderTickBarMax\"\n        >\n          {formattedMaxValue}\n        </StyledTickBarItem>\n      </StyledTickBar>\n    )\n  }, [formattedMinValue, formattedMaxValue, disabled])\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const renderThumb = useCallback(\n    React.forwardRef<HTMLDivElement, StyleProps>(function renderThumb(\n      props: StyleProps,\n      ref\n    ): ReactElement {\n      const { $thumbIndex } = props\n      const thumbIndex = $thumbIndex || 0\n      thumbRefs[thumbIndex] = ref as React.MutableRefObject<HTMLDivElement>\n      thumbValueRefs[thumbIndex] ||= React.createRef<HTMLDivElement>()\n\n      const passThrough = pick(props, [\n        \"role\",\n        \"style\",\n        \"aria-valuemax\",\n        \"aria-valuemin\",\n        \"aria-valuenow\",\n        \"tabIndex\",\n        \"onKeyUp\",\n        \"onKeyDown\",\n        \"onMouseEnter\",\n        \"onMouseLeave\",\n        \"draggable\",\n      ])\n\n      const formattedValue = formattedValueArr[thumbIndex]\n\n      return (\n        <StyledThumb\n          {...passThrough}\n          disabled={props.$disabled === true}\n          ref={thumbRefs[thumbIndex]}\n          aria-valuetext={formattedValue}\n          aria-label={thumbAriaLabel}\n        >\n          <StyledThumbValue\n            data-testid=\"stSliderThumbValue\"\n            disabled={props.$disabled === true}\n            ref={thumbValueRefs[thumbIndex]}\n          >\n            {formattedValue}\n          </StyledThumbValue>\n        </StyledThumb>\n      )\n    }),\n    // Only run this on first render, to avoid losing the focus state.\n    // Then, when the value written about the thumb needs to change, that\n    // happens with the function below instead.\n    []\n  )\n\n  useEffect(() => {\n    // Update the numbers on the thumb via DOM manipulation to avoid a redraw,\n    // which drops the widget's focus state.\n    thumbValueRefs.map((ref, i) => {\n      if (ref.current) {\n        ref.current.innerText = formattedValueArr[i]\n      }\n    })\n\n    thumbRefs.map((ref, i) => {\n      if (ref.current) {\n        ref.current.setAttribute(\"aria-valuetext\", formattedValueArr[i])\n      }\n    })\n\n    // If, after rendering, the thumb value's is outside the container (too\n    // far left or too far right), bring it inside. Or if there are two\n    // thumbs and their values overlap, fix that.\n    const sliderDiv = sliderRef.current ?? null\n    const thumb1Div = thumbRefs[0].current\n    const thumb2Div = thumbRefs[1]?.current\n    const thumb1ValueDiv = thumbValueRefs[0].current\n    const thumb2ValueDiv = thumbValueRefs[1]?.current\n\n    fixLabelPositions(\n      sliderDiv,\n      thumb1Div,\n      thumb2Div,\n      thumb1ValueDiv,\n      thumb2ValueDiv\n    )\n  })\n\n  const innerTrackStyle = useCallback(\n    ({ $disabled }: StyleProps) => ({\n      height: spacing.twoXS,\n      ...($disabled ? { background: colors.darkenedBgMix25 } : {}),\n    }),\n    [colors, spacing]\n  )\n\n  return (\n    <div\n      ref={sliderRef}\n      className=\"stSlider\"\n      data-testid=\"stSlider\"\n      style={style}\n    >\n      <WidgetLabel\n        label={element.label}\n        disabled={disabled}\n        labelVisibility={labelVisibilityProtoValueToEnum(\n          element.labelVisibility?.value\n        )}\n      >\n        {element.help && (\n          <StyledWidgetLabelHelp>\n            <TooltipIcon\n              content={element.help}\n              placement={Placement.TOP_RIGHT}\n            />\n          </StyledWidgetLabelHelp>\n        )}\n      </WidgetLabel>\n      <UISlider\n        min={element.min}\n        max={element.max}\n        step={element.step}\n        value={getValueAsArray(uiValue, element)}\n        onChange={handleChange}\n        disabled={disabled}\n        overrides={{\n          Thumb: renderThumb,\n          Tick: {\n            style: {\n              fontFamily: fonts.monospace,\n            },\n          },\n          Track: {\n            style: {\n              backgroundColor: \"none !important\",\n              paddingBottom: spacing.none,\n              paddingLeft: spacing.none,\n              paddingRight: spacing.none,\n              // Add additional padding to fit the thumb value\n              // which uses a fontSizes.sm.\n              paddingTop: `calc(${fontSizes.sm} * 1.35)`,\n            },\n          },\n          InnerTrack: {\n            style: innerTrackStyle,\n          },\n          TickBar: renderTickBar,\n        }}\n      />\n    </div>\n  )\n}\n\nfunction getStateFromWidgetMgr(\n  widgetMgr: WidgetStateManager,\n  element: SliderProto\n): number[] | undefined {\n  return widgetMgr.getDoubleArrayValue(element)\n}\n\nfunction getDefaultStateFromProto(element: SliderProto): number[] {\n  return element.default\n}\n\nfunction getCurrStateFromProto(element: SliderProto): number[] {\n  return element.value\n}\n\nfunction updateWidgetMgrState(\n  element: SliderProto,\n  widgetMgr: WidgetStateManager,\n  vws: ValueWithSource<number[]>,\n  fragmentId?: string\n): void {\n  widgetMgr.setDoubleArrayValue(\n    element,\n    vws.value,\n    { fromUi: vws.fromUi },\n    fragmentId\n  )\n}\n\nfunction isDateTimeType(element: SliderProto): boolean {\n  const { dataType } = element\n  return (\n    dataType === SliderProto.DataType.DATETIME ||\n    dataType === SliderProto.DataType.DATE ||\n    dataType === SliderProto.DataType.TIME\n  )\n}\n\nfunction formatValue(value: number, element: SliderProto): string {\n  const { format, options } = element\n  if (isDateTimeType(element)) {\n    // Python datetime uses microseconds, but JS & Moment uses milliseconds\n    // The timestamp is always set to the UTC timezone, even so, the actual timezone\n    // for this timestamp in the backend could be different.\n    // However, the frontend component does not need to know about the actual timezone.\n    return moment.utc(value / 1000).format(format)\n  }\n\n  if (options.length > 0) {\n    return sprintf(format, options[value])\n  }\n\n  return sprintf(format, value)\n}\n\n/**\n * Return the value of the slider. This will either be an array with\n * one value (for a single value slider), or an array with two\n * values (for a range slider).\n */\nfunction getValueAsArray(value: number[], element: SliderProto): number[] {\n  const { min, max } = element\n  let start = value[0]\n  let end = value.length > 1 ? value[1] : value[0]\n  // Adjust the value if it's out of bounds.\n  if (start > end) {\n    start = end\n  }\n  if (start < min) {\n    start = min\n  }\n  if (start > max) {\n    start = max\n  }\n  if (end < min) {\n    end = min\n  }\n  if (end > max) {\n    end = max\n  }\n  return value.length > 1 ? [start, end] : [start]\n}\n\nfunction fixLabelPositions(\n  sliderDiv: HTMLDivElement | null,\n  thumb1Div: HTMLDivElement | null,\n  thumb2Div: HTMLDivElement | null,\n  thumb1ValueDiv: HTMLDivElement | null,\n  thumb2ValueDiv: HTMLDivElement | null\n): void {\n  if (!sliderDiv || !thumb1Div || !thumb1ValueDiv) {\n    return\n  }\n\n  fixLabelOverflow(sliderDiv, thumb1Div, thumb1ValueDiv)\n\n  if (thumb2Div && thumb2ValueDiv) {\n    fixLabelOverflow(sliderDiv, thumb2Div, thumb2ValueDiv)\n\n    // If two thumbs.\n    fixLabelOverlap(\n      sliderDiv,\n      thumb1Div,\n      thumb2Div,\n      thumb1ValueDiv,\n      thumb2ValueDiv\n    )\n  }\n}\n\nfunction fixLabelOverflow(\n  slider: HTMLDivElement,\n  thumb: HTMLDivElement,\n  thumbValue: HTMLDivElement\n): void {\n  const sliderRect = slider.getBoundingClientRect()\n  const thumbRect = thumb.getBoundingClientRect()\n  const thumbValueRect = thumbValue.getBoundingClientRect()\n\n  const thumbMidpoint = thumbRect.left + thumbRect.width / 2\n  const thumbValueOverflowsLeft =\n    thumbMidpoint - thumbValueRect.width / 2 < sliderRect.left\n  const thumbValueOverflowsRight =\n    thumbMidpoint + thumbValueRect.width / 2 > sliderRect.right\n\n  thumbValue.style.left = thumbValueOverflowsLeft ? \"0\" : \"\"\n  thumbValue.style.right = thumbValueOverflowsRight ? \"0\" : \"\"\n}\n\n/**\n * Goals:\n * - Keep the thumb values near their respective thumbs.\n * - Keep thumb values within the bounds of the slider.\n * - Avoid visual jank while moving the thumbs\n */\nfunction fixLabelOverlap(\n  sliderDiv: HTMLDivElement,\n  thumb1Div: HTMLDivElement,\n  thumb2Div: HTMLDivElement,\n  thumb1ValueDiv: HTMLDivElement,\n  thumb2ValueDiv: HTMLDivElement\n): void {\n  const labelGap = 24\n\n  const sliderRect = sliderDiv.getBoundingClientRect()\n  const thumb1Rect = thumb1Div.getBoundingClientRect()\n  const thumb2Rect = thumb2Div.getBoundingClientRect()\n  const thumb1ValueRect = thumb1ValueDiv.getBoundingClientRect()\n  const thumb2ValueRect = thumb2ValueDiv.getBoundingClientRect()\n\n  const sliderMidpoint = sliderRect.left + sliderRect.width / 2\n  const thumb1MidPoint = thumb1Rect.left + thumb1Rect.width / 2\n  const thumb2MidPoint = thumb2Rect.left + thumb2Rect.width / 2\n\n  const centeredThumb1ValueFitsLeft =\n    thumb1MidPoint - thumb1ValueRect.width / 2 >= sliderRect.left\n\n  const centeredThumb2ValueFitsRight =\n    thumb2MidPoint + thumb2ValueRect.width / 2 <= sliderRect.right\n\n  const leftAlignedThumb1ValueFitsLeft =\n    thumb1Rect.left - thumb1ValueRect.width >= sliderRect.left\n\n  const rightAlignedThumb2ValueFitsRight =\n    thumb2Rect.right + thumb2ValueRect.width <= sliderRect.right\n\n  const thumb1ValueOverhang = centeredThumb1ValueFitsLeft\n    ? thumb1ValueRect.width / 2\n    : thumb1ValueRect.width\n\n  const thumb2ValueOverhang = centeredThumb2ValueFitsRight\n    ? thumb2ValueRect.width / 2\n    : thumb2ValueRect.width\n\n  const thumb1ValueInnerEdge = thumb1MidPoint + thumb1ValueOverhang\n  const thumb2ValueInnerEdge = thumb2MidPoint - thumb2ValueOverhang\n  const thumbsAreFarApart =\n    thumb2ValueInnerEdge - thumb1ValueInnerEdge > labelGap\n\n  // If thumbs are far apart, just handle each separately.\n  //\n  // 1. Center values on their thumbs, like this:\n  //\n  //        [thumb1Value]       [thumb1Value]\n  // |--------[thumb1]-------------[thumb2]-------------------|\n  //\n  //\n  // 2. If one of the thumbs is so close to the edge that centering would cause\n  // the value to overflow past the edge, align the value away from the edge.\n  // (This is the normal fixLabelOverflow() behavior)\n  //\n  // For example, let's say thumb1 moved to the left:\n  //\n  //     [thumb1Value]          [thumb2Value]\n  // |---[thumb1]------------------[thumb2]-------------------|\n  //\n  //\n  if (thumbsAreFarApart) {\n    fixLabelOverflow(sliderDiv, thumb1Div, thumb1ValueDiv)\n    fixLabelOverflow(sliderDiv, thumb2Div, thumb2ValueDiv)\n    return\n  }\n\n  // If thumbs are close, try different things...\n\n  // 3. If thumbs are so close that centering would cause values to\n  // overlap, then place the values to the side of their thumbs, away from\n  // the opposing thumbs:\n  //\n  // For example, if starting from case #1 above we moved thumb1 to the\n  // right:\n  //\n  //      [thumb1Value]                    [thumb2Value]\n  // |-----------------[thumb1]----[thumb2]-------------------|\n  //\n  // Note: round all values to not have weird decimal pixels (that make our Snapshot tests flaky)\n  if (leftAlignedThumb1ValueFitsLeft && rightAlignedThumb2ValueFitsRight) {\n    // Align value1 to the left of its thumb.\n    thumb1ValueDiv.style.left = \"\"\n    thumb1ValueDiv.style.right = `${Math.round(thumb1Rect.width)}px`\n\n    // Align value2 to the right of its thumb.\n    thumb2ValueDiv.style.left = `${Math.round(thumb2Rect.width)}px`\n    thumb2ValueDiv.style.right = \"\"\n\n    return\n  }\n\n  // 4. If one of the thumbs is so close to the edge that doing the outward\n  // alignment from #3 would cause its value to overflow past the edge, then\n  // try centering the value. And place the other thumb's value right next to\n  // it, to avoid overlaps.\n  //\n  // For example, if we moved thumb1 and thumb2 to the left by the same\n  // amount:\n  //\n  //    [thumb1Value][thumb2Value]\n  // |----[thumb1]--[thumb2]----------------------------------|\n  //\n  //\n  // 5. If one of the thumbs is so close to the edge that doing the center\n  // alignment from #4 would cause its value to overflow past the edge, then\n  // align it with its thumb, pointing inward. And, like in #4, place the\n  // other thumb's value right next to it to avoid overlaps.\n  //\n  // For example, if we moved thumb1 to the left, and moved thumb2 even more:\n  //\n  //   [thumb1Value][thumb2Value]\n  // |-[thumb1]--[thumb2]-------------------------------------|\n  //\n\n  const jointThumbsAreOnLeftHalf = thumb1MidPoint < sliderMidpoint\n\n  if (jointThumbsAreOnLeftHalf) {\n    fixLabelOverflow(sliderDiv, thumb1Div, thumb1ValueDiv)\n\n    // Make thumb2Value appear to the right of thumb1Value.\n    thumb2ValueDiv.style.left = `${Math.round(\n      thumb1MidPoint + thumb1ValueOverhang + labelGap - thumb2MidPoint\n    )}px`\n    thumb2ValueDiv.style.right = \"\"\n  } else {\n    fixLabelOverflow(sliderDiv, thumb2Div, thumb2ValueDiv)\n\n    // Make thumb1Value appear to the left of thumb2Value.\n    thumb1ValueDiv.style.left = \"\"\n    thumb1ValueDiv.style.right = `${-Math.round(\n      thumb2MidPoint - thumb2ValueOverhang - labelGap - thumb1MidPoint\n    )}px`\n  }\n}\n\nexport default memo(Slider)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Dispatch,\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\"\n\nimport {\n  Source,\n  WidgetStateManager,\n} from \"@streamlit/lib/src/WidgetStateManager\"\nimport { useFormClearHelper } from \"@streamlit/lib/src/components/widgets/Form\"\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nexport type ValueWithSource<T> = {\n  value: T\n} & Source\n\n// Interface for a proto that has a .formId\ninterface ValueElementProtoInterface {\n  formId: string\n}\n\ninterface BaseArgs<\n  T, // Type of the value stored in WidgetStateManager.\n  P extends ValueElementProtoInterface // Proto for this widget.\n> {\n  // Important: these callback functions need to have stable references! So\n  // either declare them at the module level or wrap in useCallback.\n  getStateFromWidgetMgr: (wm: WidgetStateManager, el: P) => T | undefined\n  updateWidgetMgrState: (\n    el: P,\n    wm: WidgetStateManager,\n    vws: ValueWithSource<T>,\n    fragmentId?: string\n  ) => void\n  element: P\n  widgetMgr: WidgetStateManager\n  fragmentId?: string\n  onFormCleared?: () => void\n}\n\nexport interface UseBasicWidgetClientStateArgs<\n  T, // Type of the value stored in WidgetStateManager.\n  P extends ValueElementProtoInterface // Proto for this widget.\n> extends BaseArgs<T, P> {\n  // Important: these callback functions need to have stable references! So\n  // either declare them at the module level or wrap in useCallback.\n  getDefaultState: (wm: WidgetStateManager, el: P) => T\n}\n\n/**\n * A React hook that makes the simplest kinds of widgets very easy to implement.\n * Use the clientState version when the widget does not have a .setValue on its\n * proto, otherwise utilize `useBasicWidgetState`.\n */\nexport function useBasicWidgetClientState<\n  T, // Type of the value stored in WidgetStateManager.\n  P extends ValueElementProtoInterface // Proto for this widget.\n>({\n  getStateFromWidgetMgr,\n  getDefaultState,\n  updateWidgetMgrState,\n  element,\n  widgetMgr,\n  fragmentId,\n  onFormCleared,\n}: UseBasicWidgetClientStateArgs<T, P>): [\n  T,\n  Dispatch<SetStateAction<ValueWithSource<T> | null>>\n] {\n  const [currentValue, setCurrentValue] = useState<T>(() => {\n    // If WidgetStateManager knew a value for this widget, initialize to that.\n    // Otherwise, use the default value.\n    return (\n      getStateFromWidgetMgr(widgetMgr, element) ??\n      getDefaultState(widgetMgr, element)\n    )\n  })\n\n  // This acts as an \"event\":\n  // - It's null most of the time\n  // - It only has a value the moment when the user calls setValue (internally\n  //   called setNextValueWithSource). And then it's immediately set to null\n  //   internally.\n  const [nextValueWithSource, setNextValueWithSource] =\n    useState<ValueWithSource<T> | null>({\n      value: currentValue,\n      fromUi: false,\n    })\n\n  // When someone calls setNextValueWithSource, update internal state and tell\n  // widget manager to update its state too.\n  useEffect(() => {\n    if (isNullOrUndefined(nextValueWithSource)) return\n    setNextValueWithSource(null) // Clear \"event\".\n\n    setCurrentValue(nextValueWithSource.value)\n    updateWidgetMgrState(element, widgetMgr, nextValueWithSource, fragmentId)\n  }, [\n    nextValueWithSource,\n    updateWidgetMgrState,\n    element,\n    widgetMgr,\n    fragmentId,\n  ])\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  const handleFormCleared = useCallback((): void => {\n    setNextValueWithSource({\n      value: getDefaultState(widgetMgr, element),\n      fromUi: true,\n    })\n    onFormCleared?.()\n  }, [\n    setNextValueWithSource,\n    element,\n    getDefaultState,\n    widgetMgr,\n    onFormCleared,\n  ])\n\n  // Manage our form-clear event handler.\n  useFormClearHelper({ widgetMgr, element, onFormCleared: handleFormCleared })\n\n  return [currentValue, setNextValueWithSource]\n}\n\n// Interface for a proto that has a setValue, and .formId\ninterface ValueElementProtoInterfaceWithSetValue\n  extends ValueElementProtoInterface {\n  setValue: boolean\n}\n\nexport interface UseBasicWidgetStateArgs<\n  T, // Type of the value stored in WidgetStateManager.\n  P extends ValueElementProtoInterfaceWithSetValue // Proto for this widget.\n> extends BaseArgs<T, P> {\n  // Important: these callback functions need to have stable references! So\n  // either declare them at the module level or wrap in useCallback.\n  getDefaultStateFromProto: (el: P) => T\n  getCurrStateFromProto: (el: P) => T\n}\n\n/**\n * A React hook that makes the simplest kinds of widgets very easy to implement.\n */\nexport function useBasicWidgetState<\n  T, // Type of the value stored in WidgetStateManager.\n  P extends ValueElementProtoInterfaceWithSetValue // Proto for this widget.\n>({\n  getStateFromWidgetMgr,\n  getDefaultStateFromProto,\n  getCurrStateFromProto,\n  updateWidgetMgrState,\n  element,\n  widgetMgr,\n  fragmentId,\n  onFormCleared,\n}: UseBasicWidgetStateArgs<T, P>): [\n  T,\n  Dispatch<SetStateAction<ValueWithSource<T> | null>>\n] {\n  const getDefaultState = useCallback<(wm: WidgetStateManager, el: P) => T>(\n    (wm, el) => {\n      return getDefaultStateFromProto(el)\n    },\n    [getDefaultStateFromProto]\n  )\n\n  const [currentValue, setNextValueWithSource] = useBasicWidgetClientState({\n    getStateFromWidgetMgr,\n    getDefaultState,\n    updateWidgetMgrState,\n    element,\n    widgetMgr,\n    fragmentId,\n    onFormCleared,\n  })\n\n  // Respond to value changes via session_state. This is also set via an\n  // \"event\", this time using the .setValue property of the proto.\n  useEffect(() => {\n    if (!element.setValue) return\n    element.setValue = false // Clear \"event\".\n\n    setNextValueWithSource({\n      value: getCurrStateFromProto(element),\n      fromUi: false,\n    })\n  }, [element, getCurrStateFromProto, setNextValueWithSource])\n\n  return [currentValue, setNextValueWithSource]\n}\n"],"names":["FormClearHelper","constructor","formClearListener","lastWidgetMgr","lastFormId","manageFormClearListener","widgetMgr","formId","listener","notNullOrUndefined","this","disconnect","isValidFormId","addFormClearedListener","_this$formClearListen","undefined","useFormClearHelper","_ref","element","onFormCleared","useEffect","StyledThumb","_styled","target","disabled","theme","alignItems","backgroundColor","colors","gray","primary","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","borderTopStyle","borderBottomStyle","borderRightStyle","borderLeftStyle","boxShadow","display","justifyContent","height","sizes","sliderThumb","width","outline","transparentize","StyledThumbValue","_ref2","fontFamily","genericFonts","codeFont","fontSize","fontSizes","sm","color","top","position","whiteSpace","transparent","lineHeight","lineHeights","base","fontWeight","fontWeights","normal","pointerEvents","StyledTickBar","_ref3","paddingBottom","spacing","none","paddingLeft","paddingRight","paddingTop","StyledTickBarItem","_ref4","fadedText40","Slider","_element$labelVisibil","fragmentId","value","setValueWithSource","useBasicWidgetState","getStateFromWidgetMgr","getDefaultStateFromProto","getCurrStateFromProto","updateWidgetMgrState","uiValue","setUiValue","useState","sliderRef","useRef","thumbRefs","thumbValueRefs","fonts","useTheme","style","formattedValueArr","map","v","formatValue","formattedMinValue","min","formattedMaxValue","max","thumbAriaLabel","label","debouncedSetValueWithSource","useCallback","debounce","fromUi","handleChange","renderTickBar","_jsxs","children","_jsx","renderThumb","React","props","ref","$thumbIndex","thumbIndex","passThrough","pick","formattedValue","$disabled","_sliderRef$current","_thumbRefs$","_thumbValueRefs$","i","current","innerText","setAttribute","sliderDiv","thumb1Div","thumb2Div","thumb1ValueDiv","thumb2ValueDiv","fixLabelOverflow","labelGap","sliderRect","getBoundingClientRect","thumb1Rect","thumb2Rect","thumb1ValueRect","thumb2ValueRect","sliderMidpoint","left","thumb1MidPoint","thumb2MidPoint","centeredThumb1ValueFitsLeft","centeredThumb2ValueFitsRight","right","leftAlignedThumb1ValueFitsLeft","rightAlignedThumb2ValueFitsRight","thumb1ValueOverhang","thumb2ValueOverhang","Math","round","fixLabelOverlap","fixLabelPositions","innerTrackStyle","twoXS","background","darkenedBgMix25","className","WidgetLabel","labelVisibility","labelVisibilityProtoValueToEnum","help","StyledWidgetLabelHelp","TooltipIcon","content","placement","Placement","TOP_RIGHT","UISlider","step","getValueAsArray","onChange","overrides","Thumb","Tick","monospace","Track","InnerTrack","TickBar","getDoubleArrayValue","default","vws","setDoubleArrayValue","format","options","dataType","SliderProto","DataType","DATETIME","DATE","TIME","isDateTimeType","moment","length","sprintf","start","end","slider","thumb","thumbValue","thumbRect","thumbValueRect","thumbMidpoint","thumbValueOverflowsLeft","thumbValueOverflowsRight","memo","useBasicWidgetClientState","getDefaultState","currentValue","setCurrentValue","_getStateFromWidgetMg","nextValueWithSource","setNextValueWithSource","isNullOrUndefined","handleFormCleared","wm","el","setValue"],"sourceRoot":""}