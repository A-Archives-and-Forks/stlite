{"version":3,"file":"static/js/7253.0b208a26.chunk.js","mappings":"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","sources":["../../../streamlit/frontend/lib/src/hocs/withMapboxToken/MapboxToken.ts","../../../streamlit/frontend/lib/src/hocs/withMapboxToken/MapboxTokenError.tsx","../../../streamlit/frontend/lib/src/hocs/withMapboxToken/withMapboxToken.tsx","../../../streamlit/frontend/lib/src/components/elements/DeckGlJsonChart/styled-components.ts","../../../streamlit/frontend/lib/src/components/elements/DeckGlJsonChart/DeckGlJsonChart.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport axios from \"axios\"\nimport { ensureError } from \"@streamlit/lib/src/util/ErrorHandling\"\nimport { SessionInfo } from \"@streamlit/lib/src/SessionInfo\"\n\nexport class MapboxTokenNotProvidedError extends Error {}\nexport class MapboxTokenFetchingError extends Error {}\n\n/**\n * A remote file that stores user-visible tokens.\n */\nexport const TOKENS_URL = \"https://data.streamlit.io/tokens.json\"\n\nexport class MapboxToken {\n  static token?: string\n\n  static commandLine?: string\n\n  /**\n   * Expose a singleton MapboxToken:\n   * - If the user specified a token in their streamlit config, return it.\n   * - Else, fetch the remote \"tokens.json\" and return the \"mapbox\" entry.\n   *\n   * (The returned value is cached in memory, so the remote resource will\n   * only be fetched once per session.)\n   */\n  public static async get(sessionInfo: SessionInfo): Promise<string> {\n    const { commandLine, userMapboxToken } = sessionInfo.current\n\n    if (\n      !MapboxToken.token ||\n      MapboxToken.commandLine !== commandLine.toLowerCase()\n    ) {\n      if (userMapboxToken !== \"\") {\n        MapboxToken.token = userMapboxToken\n      } else {\n        MapboxToken.token = await this.fetchToken(TOKENS_URL, \"mapbox\")\n      }\n\n      MapboxToken.commandLine = commandLine.toLowerCase()\n    }\n\n    return MapboxToken.token\n  }\n\n  private static async fetchToken(\n    url: string,\n    tokenName: string\n  ): Promise<string> {\n    try {\n      const response = await axios.get(url)\n      const { [tokenName]: token } = response.data\n\n      if (token == null || token === \"\") {\n        throw new Error(`Missing token \"${tokenName}\"`)\n      }\n\n      return token\n    } catch (e) {\n      const error = ensureError(e)\n      throw new MapboxTokenFetchingError(`${error.message} (${url})`)\n    }\n  }\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\nimport ErrorElement from \"@streamlit/lib/src/components/shared/ErrorElement\"\nimport {\n  MapboxTokenFetchingError,\n  MapboxTokenNotProvidedError,\n} from \"@streamlit/lib/src/hocs/withMapboxToken/MapboxToken\"\n\ninterface Props {\n  error: Error | MapboxTokenFetchingError | MapboxTokenNotProvidedError\n  deltaType: string\n  width: number\n}\n\nconst MapboxTokenError = ({\n  error,\n  width,\n  deltaType,\n}: Props): ReactElement => {\n  if (error instanceof MapboxTokenNotProvidedError) {\n    return (\n      <ErrorElement\n        width={width}\n        name=\"No Mapbox token provided\"\n        message={\n          <>\n            <p>\n              To use <code>st.{deltaType}</code> or <code>st.map</code> you\n              need to set up a Mapbox access token.\n            </p>\n\n            <p>\n              To get a token, create an account at{\" \"}\n              <a href=\"https://mapbox.com\">https://mapbox.com</a>. It's free\n              for moderate usage levels!\n            </p>\n\n            <p>\n              Once you have a token, just set it using the Streamlit config\n              option <code>mapbox.token</code> and don't forget to restart your\n              Streamlit server at this point if it's still running, then reload\n              this tab.\n            </p>\n\n            <p>\n              See{\" \"}\n              <a href=\"https://docs.streamlit.io/library/advanced-features/configuration#view-all-configuration-options\">\n                our documentation\n              </a>{\" \"}\n              for more info on how to set config options.\n            </p>\n          </>\n        }\n      />\n    )\n  }\n\n  if (error instanceof MapboxTokenFetchingError) {\n    return (\n      <ErrorElement\n        width={width}\n        name=\"Error fetching Streamlit Mapbox token\"\n        message={\n          <>\n            <p>This app requires an internet connection.</p>\n            <p>Please check your connection and try again.</p>\n            <p>\n              If you think this is a bug, please file bug report{\" \"}\n              <a href=\"https://github.com/streamlit/streamlit/issues/new/choose\">\n                here\n              </a>\n              .\n            </p>\n          </>\n        }\n      />\n    )\n  }\n\n  return (\n    <ErrorElement\n      width={width}\n      name=\"Error fetching Streamlit Mapbox token\"\n      message={error.message}\n    />\n  )\n}\n\nexport default MapboxTokenError\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AlertElement from \"@streamlit/lib/src/components/elements/AlertElement\"\nimport { Kind } from \"@streamlit/lib/src/components/shared/AlertContainer\"\nimport { MapboxToken } from \"@streamlit/lib/src/hocs/withMapboxToken/MapboxToken\"\nimport { ensureError } from \"@streamlit/lib/src/util/ErrorHandling\"\nimport hoistNonReactStatics from \"hoist-non-react-statics\"\nimport React, { ComponentType, PureComponent, ReactNode } from \"react\"\nimport { SessionInfo } from \"@streamlit/lib/src/SessionInfo\"\nimport MapboxTokenError from \"./MapboxTokenError\"\n\ninterface InjectedProps {\n  mapboxToken: string\n}\n\ninterface State {\n  mapboxToken?: string\n  mapboxTokenError?: Error\n  isFetching: boolean\n}\n\n// We consume a Component that takes a \"mapboxToken\" prop, and create\n// a wrapped Component that takes a \"sessionInfo\" prop, and omits\n// the \"mapboxToken\" prop\nexport type WrappedMapboxProps<P extends InjectedProps> = Omit<\n  P,\n  \"mapboxToken\"\n> & {\n  sessionInfo: SessionInfo\n  width: number\n}\n\n/**\n * A higher-order component that fetches our mapbox token and passes\n * it through to the wrapped component. If the token fetch fails, an error\n * will be rendered in place of the wrapped component.\n *\n * @param {string} deltaType In case of an exception we show an error with this\n */\n\nconst withMapboxToken =\n  (deltaType: string) =>\n  <P extends InjectedProps>(WrappedComponent: ComponentType<P>) => {\n    // Return a wrapper that accepts the wrapped component's props, minus\n    // \"mapboxToken\". The wrapper will fetch the mapboxToken and inject it into\n    // the wrapped component automatically.\n    class WithMapboxToken extends PureComponent<WrappedMapboxProps<P>, State> {\n      public static readonly displayName = `withMapboxToken(${\n        WrappedComponent.displayName || WrappedComponent.name\n      })`\n\n      public constructor(props: WrappedMapboxProps<P>) {\n        super(props)\n\n        this.state = {\n          isFetching: true,\n          mapboxToken: undefined,\n          mapboxTokenError: undefined,\n        }\n\n        this.initMapboxToken()\n      }\n\n      /**\n       * Fetch our MapboxToken.\n       */\n      public initMapboxToken = async (): Promise<void> => {\n        try {\n          const mapboxToken = await MapboxToken.get(this.props.sessionInfo)\n\n          this.setState({\n            mapboxToken,\n            isFetching: false,\n          })\n        } catch (e) {\n          const error = ensureError(e)\n\n          this.setState({\n            mapboxTokenError: error,\n            isFetching: false,\n          })\n        }\n      }\n\n      public render = (): ReactNode => {\n        const { mapboxToken, mapboxTokenError, isFetching } = this.state\n        const { width } = this.props\n\n        // We got an error when fetching our mapbox token: show the error.\n        if (mapboxTokenError) {\n          return (\n            <MapboxTokenError\n              width={width}\n              error={mapboxTokenError}\n              deltaType={deltaType}\n            />\n          )\n        }\n\n        // If our mapboxToken hasn't been retrieved yet, show a loading alert.\n        if (isFetching) {\n          return (\n            <AlertElement body={\"Loading...\"} kind={Kind.INFO} width={width} />\n          )\n        }\n\n        // We have the mapbox token. Pass it through to our component.\n        return (\n          // (this.props as unknown as P) is required to work around a TS issue:\n          // https://github.com/microsoft/TypeScript/issues/28938#issuecomment-450636046\n          <WrappedComponent\n            {...(this.props as unknown as P)}\n            mapboxToken={mapboxToken}\n            width={width}\n          />\n        )\n      }\n    }\n\n    return hoistNonReactStatics(WithMapboxToken, WrappedComponent)\n  }\n\nexport default withMapboxToken\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\nimport { hasLightBackgroundColor } from \"@streamlit/lib/src/theme\"\n\nexport interface StyledDeckGlChartProps {\n  width: number\n  height: number\n}\n\nexport const StyledDeckGlChart = styled.div<StyledDeckGlChartProps>(\n  ({ width, height, theme }) => ({\n    marginTop: theme.spacing.sm,\n    position: \"relative\",\n    height,\n    width,\n  })\n)\n\nexport const StyledNavigationControlContainer = styled.div(({ theme }) => ({\n  position: \"absolute\",\n  right: \"2.625rem\",\n  top: theme.spacing.md,\n  zIndex: 1,\n\n  // Update zoom buttons based on the active theme\n  \"button:not(:disabled)\": {\n    background: theme.colors.bgColor,\n\n    // Add a separator between buttons\n    \"& + button\": {\n      borderTopColor: theme.colors.secondaryBg,\n    },\n\n    // On dark backgrounds, invert the color for the + and - symbols\n    \"& span\": {\n      filter: hasLightBackgroundColor(theme) ? \"\" : \"invert(100%)\",\n    },\n  },\n}))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { PureComponent, ReactNode } from \"react\"\nimport { DeckGL } from \"deck.gl\"\nimport JSON5 from \"json5\"\nimport isEqual from \"lodash/isEqual\"\nimport { MapContext, StaticMap, NavigationControl } from \"react-map-gl\"\nimport { withTheme } from \"@emotion/react\"\nimport {\n  hasLightBackgroundColor,\n  EmotionTheme,\n} from \"@streamlit/lib/src/theme\"\n// We don't have Typescript defs for these imports, which makes ESLint unhappy\n/* eslint-disable import/no-extraneous-dependencies */\nimport * as layers from \"@deck.gl/layers\"\nimport { JSONConverter } from \"@deck.gl/json\"\nimport * as geoLayers from \"@deck.gl/geo-layers\"\nimport * as aggregationLayers from \"@deck.gl/aggregation-layers\"\nimport * as meshLayers from \"@deck.gl/mesh-layers\"\n/* eslint-enable */\n\nimport { CSVLoader } from \"@loaders.gl/csv\"\nimport { GLTFLoader } from \"@loaders.gl/gltf\"\nimport { registerLoaders } from \"@loaders.gl/core\"\n\nimport withFullScreenWrapper from \"@streamlit/lib/src/hocs/withFullScreenWrapper\"\nimport withMapboxToken from \"@streamlit/lib/src/hocs/withMapboxToken\"\n\nimport { DeckGlJsonChart as DeckGlJsonChartProto } from \"@streamlit/lib/src/proto\"\nimport {\n  StyledDeckGlChart,\n  StyledNavigationControlContainer,\n} from \"./styled-components\"\n\nimport \"mapbox-gl/dist/mapbox-gl.css\"\n\ninterface PickingInfo {\n  object: {\n    [key: string]: string\n  }\n}\n\ninterface DeckObject {\n  initialViewState: {\n    height: number\n    width: number\n  }\n  layers: Record<string, unknown>[]\n  mapStyle?: string | Array<string>\n}\n\nconst configuration = {\n  classes: { ...layers, ...aggregationLayers, ...geoLayers, ...meshLayers },\n}\n\nregisterLoaders([CSVLoader, GLTFLoader])\n\nconst jsonConverter = new JSONConverter({ configuration })\n\nexport interface DeckGLProps {\n  width: number\n  theme: EmotionTheme\n  mapboxToken: string\n  element: DeckGlJsonChartProto\n  isFullScreen?: boolean\n}\n\nexport interface PropsWithHeight extends DeckGLProps {\n  height?: number\n}\n\nexport interface State {\n  viewState: Record<string, unknown>\n  initialized: boolean\n  initialViewState: Record<string, unknown>\n  id: string | undefined\n  pydeckJson: any\n  isFullScreen: boolean\n  isLightTheme: boolean\n}\n\nexport const DEFAULT_DECK_GL_HEIGHT = 500\n\nexport class DeckGlJsonChart extends PureComponent<PropsWithHeight, State> {\n  readonly state = {\n    viewState: {\n      bearing: 0,\n      pitch: 0,\n      zoom: 11,\n    },\n    initialized: false,\n    initialViewState: {},\n    id: undefined,\n    pydeckJson: undefined,\n    isFullScreen: false,\n    isLightTheme: hasLightBackgroundColor(this.props.theme),\n  }\n\n  componentDidMount = (): void => {\n    // HACK: Load layers a little after loading the map, to hack around a bug\n    // where HexagonLayers were not drawing on first load but did load when the\n    // script got re-executed.\n    this.setState({\n      initialized: true,\n    })\n  }\n\n  static getDerivedStateFromProps(\n    props: Readonly<PropsWithHeight>,\n    state: Partial<State>\n  ): Partial<State> | null {\n    const deck = DeckGlJsonChart.getDeckObject(props, state)\n\n    // If the ViewState on the server has changed, apply the diff to the current state\n    if (!isEqual(deck.initialViewState, state.initialViewState)) {\n      const diff = Object.keys(deck.initialViewState).reduce(\n        (diff, key): any => {\n          // @ts-expect-error\n          if (deck.initialViewState[key] === state.initialViewState[key]) {\n            return diff\n          }\n\n          return {\n            ...diff,\n            // @ts-expect-error\n            [key]: deck.initialViewState[key],\n          }\n        },\n        {}\n      )\n\n      return {\n        viewState: { ...state.viewState, ...diff },\n        initialViewState: deck.initialViewState,\n      }\n    }\n\n    return null\n  }\n\n  static getDeckObject = (\n    props: PropsWithHeight,\n    state: Partial<State>\n  ): DeckObject => {\n    const { element, width, height, theme, isFullScreen } = props\n\n    const currFullScreen = isFullScreen ?? false\n\n    // Only parse JSON when not transitioning to/from fullscreen, the element id changes, or theme changes\n    if (\n      element.id !== state.id ||\n      state.isFullScreen !== currFullScreen ||\n      state.isLightTheme !== hasLightBackgroundColor(theme)\n    ) {\n      state.pydeckJson = JSON5.parse(element.json)\n      state.id = element.id\n    }\n\n    // If unset, use either the Mapbox light or dark style based on Streamlit's theme\n    // For Mapbox styles, see https://docs.mapbox.com/api/maps/styles/#mapbox-styles\n    if (!state.pydeckJson?.mapStyle) {\n      state.pydeckJson.mapStyle = `mapbox://styles/mapbox/${\n        hasLightBackgroundColor(theme) ? \"light\" : \"dark\"\n      }-v9`\n    }\n\n    // Set width and height based on the fullscreen state\n    if (isFullScreen) {\n      Object.assign(state.pydeckJson?.initialViewState, { width, height })\n    } else {\n      if (!state.pydeckJson?.initialViewState?.height) {\n        state.pydeckJson.initialViewState.height = DEFAULT_DECK_GL_HEIGHT\n      }\n      if (element.useContainerWidth) {\n        state.pydeckJson.initialViewState.width = width\n      }\n    }\n\n    state.isFullScreen = isFullScreen\n    state.isLightTheme = hasLightBackgroundColor(theme)\n\n    delete state.pydeckJson?.views // We are not using views. This avoids a console warning.\n\n    return jsonConverter.convert(state.pydeckJson)\n  }\n\n  createTooltip = (info: PickingInfo): Record<string, unknown> | boolean => {\n    const { element } = this.props\n\n    if (!info || !info.object || !element.tooltip) {\n      return false\n    }\n\n    const tooltip = JSON5.parse(element.tooltip)\n\n    // NB: https://deckgl.readthedocs.io/en/latest/tooltip.html\n    if (tooltip.html) {\n      tooltip.html = this.interpolate(info, tooltip.html)\n    } else {\n      tooltip.text = this.interpolate(info, tooltip.text)\n    }\n\n    return tooltip\n  }\n\n  interpolate = (info: PickingInfo, body: string): string => {\n    const matchedVariables = body.match(/{(.*?)}/g)\n    if (matchedVariables) {\n      matchedVariables.forEach((match: string) => {\n        const variable = match.substring(1, match.length - 1)\n\n        if (info.object.hasOwnProperty(variable)) {\n          body = body.replace(match, info.object[variable])\n        }\n      })\n    }\n    return body\n  }\n\n  onViewStateChange = ({ viewState }: State): void => {\n    this.setState({ viewState })\n  }\n\n  render(): ReactNode {\n    const deck = DeckGlJsonChart.getDeckObject(this.props, this.state)\n    const { viewState } = this.state\n    return (\n      <StyledDeckGlChart\n        className=\"stDeckGlJsonChart\"\n        width={deck.initialViewState.width}\n        height={deck.initialViewState.height}\n        data-testid=\"stDeckGlJsonChart\"\n      >\n        <DeckGL\n          viewState={viewState}\n          onViewStateChange={this.onViewStateChange}\n          height={deck.initialViewState.height}\n          width={deck.initialViewState.width}\n          layers={this.state.initialized ? deck.layers : []}\n          getTooltip={this.createTooltip}\n          ContextProvider={MapContext.Provider}\n          controller\n        >\n          <StaticMap\n            height={deck.initialViewState.height}\n            width={deck.initialViewState.width}\n            mapStyle={\n              deck.mapStyle &&\n              (typeof deck.mapStyle === \"string\"\n                ? deck.mapStyle\n                : deck.mapStyle[0])\n            }\n            mapboxApiAccessToken={this.props.mapboxToken}\n          />\n          <StyledNavigationControlContainer>\n            <NavigationControl className=\"zoomButton\" showCompass={false} />\n          </StyledNavigationControlContainer>\n        </DeckGL>\n      </StyledDeckGlChart>\n    )\n  }\n}\n\nexport default withTheme(\n  withMapboxToken(\"st.pydeck_chart\")(withFullScreenWrapper(DeckGlJsonChart))\n)\n"],"names":["MapboxTokenNotProvidedError","Error","MapboxTokenFetchingError","MapboxToken","get","sessionInfo","commandLine","userMapboxToken","current","token","toLowerCase","this","fetchToken","url","tokenName","response","axios","data","concat","e","error","ensureError","message","_ref","width","deltaType","_jsx","ErrorElement","name","_jsxs","_Fragment","children","href","WrappedComponent","WithMapboxToken","PureComponent","constructor","props","super","initMapboxToken","async","mapboxToken","setState","isFetching","mapboxTokenError","render","state","MapboxTokenError","AlertElement","body","kind","Kind","undefined","displayName","hoistNonReactStatics","StyledDeckGlChart","_styled","target","height","theme","marginTop","spacing","sm","position","StyledNavigationControlContainer","_ref2","right","top","md","zIndex","background","colors","bgColor","borderTopColor","secondaryBg","filter","hasLightBackgroundColor","configuration","classes","layers","aggregationLayers","geoLayers","meshLayers","registerLoaders","CSVLoader","GLTFLoader","jsonConverter","JSONConverter","DeckGlJsonChart","arguments","viewState","bearing","pitch","zoom","initialized","initialViewState","id","pydeckJson","isFullScreen","isLightTheme","componentDidMount","createTooltip","info","element","object","tooltip","JSON5","html","interpolate","text","matchedVariables","match","forEach","variable","substring","length","hasOwnProperty","replace","onViewStateChange","getDerivedStateFromProps","deck","getDeckObject","isEqual","diff","Object","keys","reduce","key","className","DeckGL","getTooltip","ContextProvider","MapContext","controller","StaticMap","mapStyle","mapboxApiAccessToken","NavigationControl","showCompass","_state$pydeckJson","_state$pydeckJson4","currFullScreen","_state$pydeckJson2","_state$pydeckJson3","json","assign","useContainerWidth","views","convert","withTheme","withMapboxToken","withFullScreenWrapper"],"sourceRoot":""}