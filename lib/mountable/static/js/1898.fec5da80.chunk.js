var stlite;(()=>{"use strict";var e={22523:e=>{function t(e){if("string"!==typeof e)throw new TypeError("Path must be a string. Received "+JSON.stringify(e))}function r(e,t){for(var r,n="",o=0,a=-1,s=0,i=0;i<=e.length;++i){if(i<e.length)r=e.charCodeAt(i);else{if(47===r)break;r=47}if(47===r){if(a===i-1||1===s);else if(a!==i-1&&2===s){if(n.length<2||2!==o||46!==n.charCodeAt(n.length-1)||46!==n.charCodeAt(n.length-2))if(n.length>2){var l=n.lastIndexOf("/");if(l!==n.length-1){-1===l?(n="",o=0):o=(n=n.slice(0,l)).length-1-n.lastIndexOf("/"),a=i,s=0;continue}}else if(2===n.length||1===n.length){n="",o=0,a=i,s=0;continue}t&&(n.length>0?n+="/..":n="..",o=2)}else n.length>0?n+="/"+e.slice(a+1,i):n=e.slice(a+1,i),o=i-a-1;a=i,s=0}else 46===r&&-1!==s?++s:s=-1}return n}var n={resolve:function(){for(var e,n="",o=!1,a=arguments.length-1;a>=-1&&!o;a--){var s;a>=0?s=arguments[a]:(void 0===e&&(e=process.cwd()),s=e),t(s),0!==s.length&&(n=s+"/"+n,o=47===s.charCodeAt(0))}return n=r(n,!o),o?n.length>0?"/"+n:"/":n.length>0?n:"."},normalize:function(e){if(t(e),0===e.length)return".";var n=47===e.charCodeAt(0),o=47===e.charCodeAt(e.length-1);return 0!==(e=r(e,!n)).length||n||(e="."),e.length>0&&o&&(e+="/"),n?"/"+e:e},isAbsolute:function(e){return t(e),e.length>0&&47===e.charCodeAt(0)},join:function(){if(0===arguments.length)return".";for(var e,r=0;r<arguments.length;++r){var o=arguments[r];t(o),o.length>0&&(void 0===e?e=o:e+="/"+o)}return void 0===e?".":n.normalize(e)},relative:function(e,r){if(t(e),t(r),e===r)return"";if((e=n.resolve(e))===(r=n.resolve(r)))return"";for(var o=1;o<e.length&&47===e.charCodeAt(o);++o);for(var a=e.length,s=a-o,i=1;i<r.length&&47===r.charCodeAt(i);++i);for(var l=r.length-i,c=s<l?s:l,d=-1,g=0;g<=c;++g){if(g===c){if(l>c){if(47===r.charCodeAt(i+g))return r.slice(i+g+1);if(0===g)return r.slice(i+g)}else s>c&&(47===e.charCodeAt(o+g)?d=g:0===g&&(d=0));break}var p=e.charCodeAt(o+g);if(p!==r.charCodeAt(i+g))break;47===p&&(d=g)}var u="";for(g=o+d+1;g<=a;++g)g!==a&&47!==e.charCodeAt(g)||(0===u.length?u+="..":u+="/..");return u.length>0?u+r.slice(i+d):(i+=d,47===r.charCodeAt(i)&&++i,r.slice(i))},_makeLong:function(e){return e},dirname:function(e){if(t(e),0===e.length)return".";for(var r=e.charCodeAt(0),n=47===r,o=-1,a=!0,s=e.length-1;s>=1;--s)if(47===(r=e.charCodeAt(s))){if(!a){o=s;break}}else a=!1;return-1===o?n?"/":".":n&&1===o?"//":e.slice(0,o)},basename:function(e,r){if(void 0!==r&&"string"!==typeof r)throw new TypeError('"ext" argument must be a string');t(e);var n,o=0,a=-1,s=!0;if(void 0!==r&&r.length>0&&r.length<=e.length){if(r.length===e.length&&r===e)return"";var i=r.length-1,l=-1;for(n=e.length-1;n>=0;--n){var c=e.charCodeAt(n);if(47===c){if(!s){o=n+1;break}}else-1===l&&(s=!1,l=n+1),i>=0&&(c===r.charCodeAt(i)?-1===--i&&(a=n):(i=-1,a=l))}return o===a?a=l:-1===a&&(a=e.length),e.slice(o,a)}for(n=e.length-1;n>=0;--n)if(47===e.charCodeAt(n)){if(!s){o=n+1;break}}else-1===a&&(s=!1,a=n+1);return-1===a?"":e.slice(o,a)},extname:function(e){t(e);for(var r=-1,n=0,o=-1,a=!0,s=0,i=e.length-1;i>=0;--i){var l=e.charCodeAt(i);if(47!==l)-1===o&&(a=!1,o=i+1),46===l?-1===r?r=i:1!==s&&(s=1):-1!==r&&(s=-1);else if(!a){n=i+1;break}}return-1===r||-1===o||0===s||1===s&&r===o-1&&r===n+1?"":e.slice(r,o)},format:function(e){if(null===e||"object"!==typeof e)throw new TypeError('The "pathObject" argument must be of type Object. Received type '+typeof e);return function(e,t){var r=t.dir||t.root,n=t.base||(t.name||"")+(t.ext||"");return r?r===t.root?r+n:r+e+n:n}("/",e)},parse:function(e){t(e);var r={root:"",dir:"",base:"",ext:"",name:""};if(0===e.length)return r;var n,o=e.charCodeAt(0),a=47===o;a?(r.root="/",n=1):n=0;for(var s=-1,i=0,l=-1,c=!0,d=e.length-1,g=0;d>=n;--d)if(47!==(o=e.charCodeAt(d)))-1===l&&(c=!1,l=d+1),46===o?-1===s?s=d:1!==g&&(g=1):-1!==s&&(g=-1);else if(!c){i=d+1;break}return-1===s||-1===l||0===g||1===g&&s===l-1&&s===i+1?-1!==l&&(r.base=r.name=0===i&&a?e.slice(1,l):e.slice(i,l)):(0===i&&a?(r.name=e.slice(1,s),r.base=e.slice(1,l)):(r.name=e.slice(i,s),r.base=e.slice(i,l)),r.ext=e.slice(s,l)),i>0?r.dir=e.slice(0,i-1):a&&(r.dir="/"),r},sep:"/",delimiter:":",win32:null,posix:null};n.posix=n,e.exports=n}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var a=t[n]={exports:{}};return e[n](a,a.exports,r),a.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);(()=>{new RegExp("[[(<=>!~;@]");class e{constructor(){this.promise=new Promise(((e,t)=>{this.resolveInternal=e,this.rejectInternal=t}))}resolve(e){this.resolveInternal(e)}reject(e){this.rejectInternal(e)}}var t=r(22523),n=r.n(t);function o(e,t){const r=n().normalize(t),o=n().dirname(r).split("/"),a=[];for(const n of o){a.push(n);const t=a.join("/");if(e.FS.analyzePath(t).exists){if(e.FS.isDir(t))throw new Error(`"${t}" already exists and is not a directory.`)}else try{e.FS.mkdir(t)}catch(s){throw console.error(`Failed to create a directory "${t}"`),s}}}function a(e,t,r,n){o(e,t),e.FS.writeFile(t,r,n)}const s=new RegExp("[[(<=>!~;@]");function i(e){e.forEach((e=>{let t;try{t=new URL(e)}catch{return}if("emfs:"===t.protocol||"file:"===t.protocol)throw new Error(`"emfs:" and "file:" protocols are not allowed for the requirement (${e})`)}));return e.filter((e=>{const t="streamlit"===function(e){return e.split(s)[0].trim()}(e);return!t||(console.warn(`Streamlit is specified in the requirements ("${e}"), but it will be ignored. A built-in version of Streamlit will be used.`),!1)}))}async function l(e,t){const{scriptURL:r,pyodideIndexURL:n,isESModule:o}=await async function(e){var t;const r="undefined"!==typeof process&&(null===(t=process.versions)||void 0===t?void 0:t.node);let n;n=r?(await import("node:path")).sep:"/";const o=e.slice(0,e.lastIndexOf(n)+1);if(e.endsWith(".mjs")){if(r){const t=await import("node:path"),r=await import("node:url");!e.includes("://")&&t.isAbsolute(e)&&(e=r.pathToFileURL(e).href)}return{scriptURL:e,pyodideIndexURL:o,isESModule:!0}}return{scriptURL:e,pyodideIndexURL:o,isESModule:!1}}(e);let a;if(o){a=(await import(r)).loadPyodide}else importScripts(r),a=self.loadPyodide;return a({...t,indexURL:n})}async function c(e,t,r){const n=e.pyimport("pyodide"),o=r.map((e=>(e=>n.code.find_imports(e).toJs())(e))),a=Array.from(new Set(o.flat())).filter((t=>!e.runPython(`__import__('importlib').util.find_spec('${t}')`))).map((t=>e._api._import_name_to_package_name.get(t))).filter((e=>e));if(0===a.length)return;const s=new MessageChannel;t({type:"event:moduleAutoLoad",data:{packagesToLoad:a}},s.port2);try{const t=await e.loadPackage(a);return s.port1.postMessage({type:"moduleAutoLoad:success",data:{loadedPackages:t}}),void s.port1.close()}catch(i){throw s.port1.postMessage({type:"moduleAutoLoad:error",error:i}),s.port1.close(),i}}const d=r.g;function g(e,t,r){const n=c(e,t,r);d.__moduleAutoLoadPromise__=n,e.runPythonAsync("\nfrom streamlit.runtime.scriptrunner import script_runner\nfrom js import __moduleAutoLoadPromise__\n\nscript_runner.moduleAutoLoadPromise = __moduleAutoLoadPromise__\n")}const p=self.postMessage;self.onmessage=function(t,r,n){function s(e){r({type:"event:progress",data:{message:e}})}let c,p;const u=new e,m=async function(){var e,o;const m=await u.promise,f={...n,...m};console.debug("Initial data",f);const{entrypoint:h,files:_,archives:y,requirements:b,prebuiltPackageNames:v,wheels:w,pyodideUrl:k=t,streamlitConfig:S,idbfsMountpoints:A,nodefsMountpoints:P,moduleAutoLoad:C}=f,F=i(b);s("Loading Pyodide."),console.debug("Loading Pyodide"),c=await l(k,{stdout:console.log,stderr:console.error}),console.debug("Loaded Pyodide");let L=!1;A&&(L=!0,A.forEach((e=>{c.FS.mkdir(e),c.FS.mount(c.FS.filesystems.IDBFS,{},e)})),await new Promise(((e,t)=>{c.FS.syncfs(!0,(r=>{r?t(r):e()}))}))),P&&Object.entries(P).forEach((e=>{let[t,r]=e;c.FS.mkdir(t),c.FS.mount(c.FS.filesystems.NODEFS,{root:r},t)})),s("Mounting files.");const I=[];await Promise.all(Object.keys(_).map((async e=>{const t=_[e];let r;"url"in t?(console.debug(`Fetch a file from ${t.url}`),r=await fetch(t.url).then((e=>e.arrayBuffer())).then((e=>new Uint8Array(e)))):r=t.data;const{opts:n}=_[e];console.debug(`Write a file "${e}"`),a(c,e,r,n),e.endsWith(".py")&&I.push(e)}))),s("Unpacking archives."),await Promise.all(y.map((async e=>{let t;"url"in e?(console.debug(`Fetch an archive from ${e.url}`),t=await fetch(e.url).then((e=>e.arrayBuffer()))):t=e.buffer;const{format:r,options:n}=e;console.debug("Unpack an archive",{format:r,options:n}),c.unpackArchive(t,r,n)}))),await c.loadPackage("micropip");const E=c.pyimport("micropip");if(s("Mocking some packages."),console.debug("Mock pyarrow"),function(e){e.runPython('\nimport micropip\nmicropip.add_mock_package(\n    "pyarrow", "0.0.1",\n    modules={\n        "pyarrow": """\n__version__ = \'0.0.1\'  # TODO: Update when releasing\n\n\nclass Table:\n    @classmethod\n    def from_pandas(*args, **kwargs):\n        raise NotImplementedError("stlite is not supporting this method.")\n\n\nclass Array:\n    def __init__(self, *args, **kwargs):\n        raise NotImplementedError("stlite is not supporting PyArrow.Array")\n\n\nclass ChunkedArray:\n    def __init__(self, *args, **kwargs):\n        raise NotImplementedError("stlite is not supporting PyArrow.ChunkedArray")\n"""\n    }\n)\n')}(c),console.debug("Mocked pyarrow"),s("Installing packages."),console.debug("Installing the prebuilt packages:",v),await c.loadPackage(v),console.debug("Installed the prebuilt packages"),w?(console.debug("Installing the wheels:",w,"and the requirements:",F),await E.install.callKwargs([w.stliteLib,w.streamlit,...F],{keep_going:!0}),console.debug("Installed the wheels and the requirements")):(console.debug("Installing the requirements:",F),await E.install.callKwargs(F,{keep_going:!0}),console.debug("Installed the requirements")),C){const e=I.map((e=>c.FS.readFile(e,{encoding:"utf8"})));g(c,r,e)}await c.runPythonAsync("\nimport importlib\nimportlib.invalidate_caches()\n"),s("Loading streamlit package."),console.debug("Loading the Streamlit package"),await c.runPythonAsync("\nimport streamlit.runtime\n    "),console.debug("Loaded the Streamlit package"),s("Setting up the loggers."),console.debug("Setting the loggers"),await c.runPythonAsync('\nimport logging\nimport streamlit.logger\n\nstreamlit.logger.get_logger = logging.getLogger\nstreamlit.logger.setup_formatter = None\nstreamlit.logger.update_formatter = lambda *a, **k: None\nstreamlit.logger.set_log_level = lambda *a, **k: None\n\nfor name in streamlit.logger._loggers.keys():\n    if name == "root":\n        name = "streamlit"\n    logger = logging.getLogger(name)\n    logger.propagate = True\n    logger.handlers.clear()\n    logger.setLevel(logging.NOTSET)\n\nstreamlit.logger._loggers = {}\n'),d.__logCallback__=(e,t)=>{e>=40?console.error(t):e>=30?console.warn(t):e>=20?console.info(t):console.debug(t)},await c.runPythonAsync('\ndef setup_loggers(streamlit_level, streamlit_message_format):\n    from js import __logCallback__\n\n\n    class JsHandler(logging.Handler):\n        def emit(self, record):\n            msg = self.format(record)\n            __logCallback__(record.levelno, msg)\n\n\n    root_message_format = "%(levelname)s:%(name)s:%(message)s"\n\n    root_logger = logging.getLogger()\n    root_logger.handlers.clear()\n    root_formatter = logging.Formatter(root_message_format)\n    root_handler = JsHandler()\n    root_handler.setFormatter(root_formatter)\n    root_logger.addHandler(root_handler)\n    root_logger.setLevel(logging.DEBUG)\n\n    streamlit_logger = logging.getLogger("streamlit")\n    streamlit_logger.propagate = False\n    streamlit_logger.handlers.clear()\n    streamlit_formatter = logging.Formatter(streamlit_message_format)\n    streamlit_handler = JsHandler()\n    streamlit_handler.setFormatter(streamlit_formatter)\n    streamlit_logger.addHandler(streamlit_handler)\n    streamlit_logger.setLevel(streamlit_level.upper())\n');const R=(null!==(e=null===S||void 0===S?void 0:S["logger.level"])&&void 0!==e?e:"INFO").toString(),x=null!==(o=null===S||void 0===S?void 0:S["logger.messageFormat"])&&void 0!==o?o:"%(asctime)s %(message)s";if(c.globals.get("setup_loggers")(R,x),console.debug("Set the loggers"),s("Mocking some Streamlit functions for the browser environment."),console.debug("Mocking some Streamlit functions"),await c.runPythonAsync("\nimport streamlit\n\ndef is_cacheable_msg(msg):\n    return False\n\nstreamlit.runtime.runtime.is_cacheable_msg = is_cacheable_msg\n"),console.debug("Mocked some Streamlit functions"),L){s("Setting up the IndexedDB filesystem synchronizer."),console.debug("Setting up the IndexedDB filesystem synchronizer");let e=!1;d.__scriptFinishedCallback__=()=>{console.debug("The script has finished. Syncing the filesystem."),e||(e=!0,c.FS.syncfs(!1,(t=>{e=!1,t&&console.error(t)})))},await c.runPythonAsync('\nfrom streamlit.runtime.app_session import AppSession\nfrom streamlit.runtime.scriptrunner import ScriptRunnerEvent\nfrom js import __scriptFinishedCallback__\n\ndef wrap_app_session_on_scriptrunner_event(original_method):\n    def wrapped(self, *args, **kwargs):\n        if "event" in kwargs:\n            event = kwargs["event"]\n            if event == ScriptRunnerEvent.SCRIPT_STOPPED_WITH_SUCCESS or event == ScriptRunnerEvent.SCRIPT_STOPPED_FOR_RERUN or event == ScriptRunnerEvent.SHUTDOWN:\n                __scriptFinishedCallback__()\n        return original_method(self, *args, **kwargs)\n    return wrapped\n\nAppSession._on_scriptrunner_event = wrap_app_session_on_scriptrunner_event(AppSession._on_scriptrunner_event)\n'),console.debug("Set up the IndexedDB filesystem synchronizer")}s("Booting up the Streamlit server."),console.debug("Setting up the Streamlit configuration"),d.__streamlitFlagOptions__={"browser.gatherUsageStats":!1,...S,"runner.fastReruns":!1},await c.runPythonAsync(`\nfrom stlite_lib.bootstrap import load_config_options, prepare\nfrom js import __streamlitFlagOptions__\n\nflag_options = __streamlitFlagOptions__.to_py()\nload_config_options(flag_options)\n\nmain_script_path = "${h}"\nargs = []\n\nprepare(main_script_path, args)\n`),console.debug("Set up the Streamlit configuration"),console.debug("Booting up the Streamlit server");const O=c.pyimport("stlite_lib.server.Server");return p=O(h),await p.start(),console.debug("Booted up the Streamlit server"),r({type:"event:loaded"}),f}().catch((e=>{throw r({type:"event:error",data:{error:e}}),e}));return r({type:"event:start"}),async e=>{const t=e.data;if("initData"===t.type)return void u.resolve(t.data);const{moduleAutoLoad:n}=await m,s=e.ports[0];function l(e){s.postMessage(e)}try{switch(t.type){case"reboot":{console.debug("Reboot the Streamlit server",t.data);const{entrypoint:e}=t.data;p.stop(),console.debug("Booting up the Streamlit server");const r=c.pyimport("stlite_lib.server.Server");p=r(e),p.start(),console.debug("Booted up the Streamlit server"),l({type:"reply"});break}case"websocket:connect":{console.debug("websocket:connect",t.data);const{path:e}=t.data;p.start_websocket(e,((e,t)=>{if(t){const t=e,n=t.getBuffer("u8");t.destroy();const o=new Uint8ClampedArray(n.data.buffer,n.data.byteOffset,n.data.byteLength);r({type:"websocket:message",data:{payload:new Uint8Array(o)}})}else{r({type:"websocket:message",data:{payload:e}})}})),l({type:"reply"});break}case"websocket:send":{console.debug("websocket:send",t.data);const{payload:e}=t.data;p.receive_websocket_from_js(e);break}case"http:request":{console.debug("http:request",t.data);const{request:e}=t.data,r=(e,t,r)=>{const n=new Map(t.toJs()),o=r.toJs();console.debug({statusCode:e,headers:n,body:o}),l({type:"http:response",data:{response:{statusCode:e,headers:n,body:o}}})};p.receive_http_from_js(e.method,decodeURIComponent(e.path),e.headers,e.body,r);break}case"file:write":{const{path:e,data:o,opts:s}=t.data;n&&"string"===typeof o&&e.endsWith(".py")&&(console.debug(`Auto install the requirements in ${e}`),g(c,r,[o])),console.debug(`Write a file "${e}"`),a(c,e,o,s),l({type:"reply"});break}case"file:rename":{const{oldPath:e,newPath:r}=t.data;console.debug(`Rename "${e}" to ${r}`),function(e,t,r){o(e,r),e.FS.rename(t,r)}(c,e,r),l({type:"reply"});break}case"file:unlink":{const{path:e}=t.data;console.debug(`Remove "${e}`),c.FS.unlink(e),l({type:"reply"});break}case"file:read":{const{path:e,opts:r}=t.data;console.debug(`Read "${e}"`);l({type:"reply:file:read",data:{content:c.FS.readFile(e,r)}});break}case"install":{const{requirements:e}=t.data,r=c.pyimport("micropip"),n=i(e);console.debug("Install the requirements:",n),await r.install.callKwargs(n,{keep_going:!0}).then((()=>{console.debug("Successfully installed"),l({type:"reply"})}))}}}catch(d){if(console.error(d),!(d instanceof Error))throw d;const e=new Error(d.message);e.name=d.name,e.stack=d.stack,l({type:"reply",error:e})}}}("https://cdn.jsdelivr.net/pyodide/v0.26.2/full/pyodide.js",((e,t)=>p(e,t?[t]:void 0)))})(),stlite={}})();
//# sourceMappingURL=1898.fec5da80.chunk.js.map