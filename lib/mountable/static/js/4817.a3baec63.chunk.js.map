{"version":3,"file":"static/js/4817.a3baec63.chunk.js","mappings":"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","sources":["../../../node_modules/native-file-system-adapter/src/FileSystemDirectoryHandle.js","../../../node_modules/native-file-system-adapter/src/FileSystemFileHandle.js","../../../node_modules/native-file-system-adapter/src/FileSystemHandle.js","../../../node_modules/native-file-system-adapter/src/FileSystemWritableFileStream.js","../../../node_modules/native-file-system-adapter/src/config.js","../../../node_modules/native-file-system-adapter/src/showDirectoryPicker.js","../../../node_modules/native-file-system-adapter/src/showOpenFilePicker.js","../../../node_modules/native-file-system-adapter/src/showSaveFilePicker.js","../../../node_modules/native-file-system-adapter/src/getOriginPrivateDirectory.js","../../../node_modules/native-file-system-adapter/src/util.js"],"sourcesContent":["import FileSystemHandle from './FileSystemHandle.js'\nimport { errors } from './util.js'\n\nconst { GONE, MOD_ERR } = errors\n\nconst kAdapter = Symbol('adapter')\n\nclass FileSystemDirectoryHandle extends FileSystemHandle {\n  /** @type {FileSystemDirectoryHandle} */\n  [kAdapter]\n\n  constructor (adapter) {\n    super(adapter)\n    this[kAdapter] = adapter\n  }\n\n  /**\n   * @param {string} name Name of the directory\n   * @param {object} [options]\n   * @param {boolean} [options.create] create the directory if don't exist\n   * @returns {Promise<FileSystemDirectoryHandle>}\n   */\n  async getDirectoryHandle (name, options = {}) {\n    if (name === '') {\n      throw new TypeError(`Name can't be an empty string.`)\n    }\n    if (name === '.' || name === '..' || name.includes('/')) {\n      throw new TypeError(`Name contains invalid characters.`)\n    }\n    options.create = !!options.create\n    const handle = await this[kAdapter].getDirectoryHandle(name, options)\n    return new FileSystemDirectoryHandle(handle)\n  }\n\n  /** @returns {AsyncGenerator<[string, FileSystemHandle | FileSystemDirectoryHandle]>} */\n  async * entries () {\n    const {FileSystemFileHandle} = await import('./FileSystemFileHandle.js')\n\n    for await (const [_, entry] of this[kAdapter].entries())\n      yield [entry.name, entry.kind === 'file'\n        ? new FileSystemFileHandle(entry)\n        : new FileSystemDirectoryHandle(entry)]\n  }\n\n  /** @deprecated use .entries() instead */\n  async * getEntries() {\n    const {FileSystemFileHandle} = await import('./FileSystemFileHandle.js')\n    console.warn('deprecated, use .entries() instead')\n    for await (let entry of this[kAdapter].entries())\n      yield entry.kind === 'file'\n        ? new FileSystemFileHandle(entry)\n        : new FileSystemDirectoryHandle(entry)\n  }\n\n  /**\n   * @param {string} name Name of the file\n   * @param {object} [options]\n   * @param {boolean} [options.create] create the file if don't exist\n   */\n  async getFileHandle (name, options = {}) {\n    const {FileSystemFileHandle} = await import('./FileSystemFileHandle.js')\n    if (name === '') throw new TypeError(`Name can't be an empty string.`)\n    if (name === '.' || name === '..' || name.includes('/')) {\n      throw new TypeError(`Name contains invalid characters.`)\n    }\n    options.create = !!options.create\n    const handle = await this[kAdapter].getFileHandle(name, options)\n    return new FileSystemFileHandle(handle)\n  }\n\n  /**\n   * @param {string} name\n   * @param {object} [options]\n   * @param {boolean} [options.recursive]\n   */\n  async removeEntry (name, options = {}) {\n    if (name === '') {\n      throw new TypeError(`Name can't be an empty string.`)\n    }\n    if (name === '.' || name === '..' || name.includes('/')) {\n      throw new TypeError(`Name contains invalid characters.`)\n    }\n    options.recursive = !!options.recursive // cuz node's fs.rm require boolean\n    return this[kAdapter].removeEntry(name, options)\n  }\n\n  async resolve (possibleDescendant) {\n    if (await possibleDescendant.isSameEntry(this)) {\n      return []\n    }\n\n    const openSet = [{ handle: this, path: [] }]\n\n    while (openSet.length) {\n      let { handle: current, path } = openSet.pop()\n\n      for await (const entry of current.values()) {\n        if (await entry.isSameEntry(possibleDescendant)) {\n          return [...path, entry.name]\n        }\n        if (entry.kind === 'directory') {\n          openSet.push({ handle: entry, path: [...path, entry.name] })\n        }\n      }\n    }\n\n    return null\n  }\n\n  async * keys () {\n    for await (const [name] of this[kAdapter].entries())\n      yield name\n  }\n\n  async * values () {\n    for await (const [_, entry] of this)\n      yield entry\n  }\n\n  [Symbol.asyncIterator]() {\n    return this.entries()\n  }\n}\n\nObject.defineProperty(FileSystemDirectoryHandle.prototype, Symbol.toStringTag, {\n\tvalue: 'FileSystemDirectoryHandle',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n})\n\nObject.defineProperties(FileSystemDirectoryHandle.prototype, {\n\tgetDirectoryHandle: { enumerable: true },\n\tentries: { enumerable: true },\n\tgetFileHandle: { enumerable: true },\n\tremoveEntry: { enumerable: true }\n})\n\nif (globalThis.FileSystemDirectoryHandle) {\n  const proto = globalThis.FileSystemDirectoryHandle.prototype\n\n  proto.resolve = async function resolve (possibleDescendant) {\n    if (await possibleDescendant.isSameEntry(this)) {\n      return []\n    }\n\n    const openSet = [{ handle: this, path: [] }]\n\n    while (openSet.length) {\n      let { handle: current, path } = openSet.pop()\n\n      for await (const entry of current.values()) {\n        if (await entry.isSameEntry(possibleDescendant)) {\n          return [...path, entry.name]\n        }\n        if (entry.kind === 'directory') {\n          openSet.push({ handle: entry, path: [...path, entry.name] })\n        }\n      }\n    }\n\n    return null\n  }\n\n  // Safari allows us operate on deleted files,\n  // so we need to check if they still exist.\n  // Hope to remove this one day.\n  async function ensureDoActuallyStillExist (handle) {\n    const root = await navigator.storage.getDirectory()\n    const path = await root.resolve(handle)\n    if (path === null) { throw new DOMException(...GONE) }\n  }\n\n  const entries = proto.entries\n  proto.entries = async function * () {\n    await ensureDoActuallyStillExist(this)\n    yield * entries.call(this)\n  }\n  proto[Symbol.asyncIterator] = async function * () {\n    yield * this.entries()\n  }\n\n  const removeEntry = proto.removeEntry\n  proto.removeEntry = async function (name, options = {}) {\n    return removeEntry.call(this, name, options).catch(async err => {\n      const unknown = err instanceof DOMException && err.name === 'UnknownError'\n      if (unknown && !options.recursive) {\n        const empty = (await entries.call(this).next()).done\n        if (!empty) { throw new DOMException(...MOD_ERR) }\n      }\n      throw err\n    })\n  }\n}\n\nexport default FileSystemDirectoryHandle\nexport { FileSystemDirectoryHandle }\n","import FileSystemHandle from './FileSystemHandle.js'\nimport FileSystemWritableFileStream from './FileSystemWritableFileStream.js'\nimport { errors } from './util.js'\n\nconst { INVALID, SYNTAX, GONE } = errors\n\nconst kAdapter = Symbol('adapter')\n\nclass FileSystemFileHandle extends FileSystemHandle {\n  /** @type {FileSystemFileHandle} */\n  [kAdapter]\n\n  constructor (adapter) {\n    super(adapter)\n    this[kAdapter] = adapter\n  }\n\n  /**\n   * @param  {Object} [options={}]\n   * @param  {boolean} [options.keepExistingData]\n   * @returns {Promise<FileSystemWritableFileStream>}\n   */\n  async createWritable (options = {}) {\n    return new FileSystemWritableFileStream(\n      await this[kAdapter].createWritable(options)\n    )\n  }\n\n  /**\n   * @returns {Promise<File>}\n   */\n  async getFile () {\n    return this[kAdapter].getFile()\n  }\n}\n\nObject.defineProperty(FileSystemFileHandle.prototype, Symbol.toStringTag, {\n  value: 'FileSystemFileHandle',\n  writable: false,\n  enumerable: false,\n  configurable: true\n})\n\nObject.defineProperties(FileSystemFileHandle.prototype, {\n  createWritable: { enumerable: true },\n  getFile: { enumerable: true }\n})\n\n// Safari doesn't support async createWritable streams yet.\nif (\n  globalThis.FileSystemFileHandle &&\n  !globalThis.FileSystemFileHandle.prototype.createWritable\n) {\n  const wm = new WeakMap()\n\n  let workerUrl\n\n  // Worker code that should be inlined (can't use any external functions)\n  const code = () => {\n    let fileHandle, handle\n\n    onmessage = async evt => {\n      const port = evt.ports[0]\n      const cmd = evt.data\n      switch (cmd.type) {\n        case 'open':\n          const file = cmd.name\n\n          let dir = await navigator.storage.getDirectory()\n\n          for (const folder of cmd.path) {\n            dir = await dir.getDirectoryHandle(folder)\n          }\n\n          fileHandle = await dir.getFileHandle(file)\n          handle = await fileHandle.createSyncAccessHandle()\n          break\n        case 'write':\n          handle.write(cmd.data, { at: cmd.position })\n          handle.flush()\n          break\n        case 'truncate':\n          handle.truncate(cmd.size)\n          break\n        case 'abort':\n        case 'close':\n          handle.close()\n          break\n      }\n\n      port.postMessage(0)\n    }\n  }\n\n\n  globalThis.FileSystemFileHandle.prototype.createWritable = async function (options) {\n    // Safari only support writing data in a worker with sync access handle.\n    if (!workerUrl) {\n      const stringCode = `(${code.toString()})()`\n      const blob = new Blob([stringCode], {\n        type: 'text/javascript'\n      })\n      workerUrl = URL.createObjectURL(blob)\n    }\n    const worker = new Worker(workerUrl, { type: 'module' })\n\n    let position = 0\n    const textEncoder = new TextEncoder()\n    let size = await this.getFile().then(file => file.size)\n\n    const send = message => new Promise((resolve, reject) => {\n      const mc = new MessageChannel()\n      mc.port1.onmessage = evt => {\n        if (evt.data instanceof Error) reject(evt.data)\n        else resolve(evt.data)\n        mc.port1.close()\n        mc.port2.close()\n        mc.port1.onmessage = null\n      }\n      worker.postMessage(message, [mc.port2])\n    })\n\n    // Safari also don't support transferable file system handles.\n    // So we need to pass the path to the worker. This is a bit hacky and ugly.\n    const root = await navigator.storage.getDirectory()\n    const parent = await wm.get(this)\n    const path = await root.resolve(parent)\n\n    // Should likely never happen, but just in case...\n    if (path === null) throw new DOMException(...GONE)\n\n    let controller\n    await send({ type: 'open', path, name: this.name })\n\n    if (options?.keepExistingData === false) {\n      await send({ type: 'truncate', size: 0 })\n      size = 0\n    }\n\n    const ws = new FileSystemWritableFileStream({\n      start: ctrl => {\n        controller = ctrl\n      },\n      async write(chunk) {\n        const isPlainObject = chunk?.constructor === Object\n\n        if (isPlainObject) {\n          chunk = { ...chunk }\n        } else {\n          chunk = { type: 'write', data: chunk, position }\n        }\n\n        if (chunk.type === 'write') {\n          if (!('data' in chunk)) {\n            await send({ type: 'close' })\n            throw new DOMException(...SYNTAX('write requires a data argument'))\n          }\n\n          chunk.position ??= position\n\n          if (typeof chunk.data === 'string') {\n            chunk.data = textEncoder.encode(chunk.data)\n          }\n\n          else if (chunk.data instanceof ArrayBuffer) {\n            chunk.data = new Uint8Array(chunk.data)\n          }\n\n          else if (!(chunk.data instanceof Uint8Array) && ArrayBuffer.isView(chunk.data)) {\n            chunk.data = new Uint8Array(chunk.data.buffer, chunk.data.byteOffset, chunk.data.byteLength)\n          }\n\n          else if (!(chunk.data instanceof Uint8Array)) {\n            const ab = await new Response(chunk.data).arrayBuffer()\n            chunk.data = new Uint8Array(ab)\n          }\n\n          if (Number.isInteger(chunk.position) && chunk.position >= 0) {\n            position = chunk.position\n          }\n          position += chunk.data.byteLength\n          size += chunk.data.byteLength\n        } else if (chunk.type === 'seek') {\n          if (Number.isInteger(chunk.position) && chunk.position >= 0) {\n            if (size < chunk.position) {\n              throw new DOMException(...INVALID)\n            }\n            console.log('seeking', chunk)\n            position = chunk.position\n            return // Don't need to enqueue seek...\n          } else {\n            await send({ type: 'close' })\n            throw new DOMException(...SYNTAX('seek requires a position argument'))\n          }\n        } else if (chunk.type === 'truncate') {\n          if (Number.isInteger(chunk.size) && chunk.size >= 0) {\n            size = chunk.size\n            if (position > size) { position = size }\n          } else {\n            await send({ type: 'close' })\n            throw new DOMException(...SYNTAX('truncate requires a size argument'))\n          }\n        }\n\n        await send(chunk)\n      },\n      async close () {\n        await send({ type: 'close' })\n        worker.terminate()\n      },\n      async abort (reason) {\n        await send({ type: 'abort', reason })\n        worker.terminate()\n      },\n    })\n\n    return ws\n  }\n\n  const orig = FileSystemDirectoryHandle.prototype.getFileHandle\n  FileSystemDirectoryHandle.prototype.getFileHandle = async function (...args) {\n    const handle = await orig.call(this, ...args)\n    wm.set(handle, this)\n    return handle\n  }\n}\n\nexport default FileSystemFileHandle\nexport { FileSystemFileHandle }\n","const kAdapter = Symbol('adapter')\n\n/**\n * @typedef {Object} FileSystemHandlePermissionDescriptor\n * @property {('read'|'readwrite')} [mode='read']\n */\nclass FileSystemHandle {\n  /** @type {FileSystemHandle} */\n  [kAdapter]\n\n  /** @type {string} */\n  name\n  /** @type {('file'|'directory')} */\n  kind\n\n  /** @param {FileSystemHandle & {writable}} adapter */\n  constructor (adapter) {\n    this.kind = adapter.kind\n    this.name = adapter.name\n    this[kAdapter] = adapter\n  }\n\n  /** @param {FileSystemHandlePermissionDescriptor} descriptor */\n  async queryPermission (descriptor = {}) {\n    const { mode = 'read' } = descriptor\n    const handle = this[kAdapter]\n\n    if (handle.queryPermission) {\n      return handle.queryPermission({mode})\n    }\n\n    if (mode === 'read') {\n      return 'granted'\n    } else if (mode === 'readwrite') {\n      return handle.writable ? 'granted' : 'denied'\n    } else {\n      throw new TypeError(`Mode ${mode} must be 'read' or 'readwrite'`)\n    }\n  }\n\n  async requestPermission ({mode = 'read'} = {}) {\n    const handle = this[kAdapter]\n    if (handle.requestPermission) {\n      return handle.requestPermission({mode})\n    }\n\n    if (mode === 'read') {\n      return 'granted'\n    } else if (mode === 'readwrite') {\n      return handle.writable ? 'granted' : 'denied'\n    } else {\n      throw new TypeError(`Mode ${mode} must be 'read' or 'readwrite'`)\n    }\n  }\n\n  /**\n   * Attempts to remove the entry represented by handle from the underlying file system.\n   *\n   * @param {object} options\n   * @param {boolean} [options.recursive=false]\n   */\n  async remove (options = {}) {\n    await this[kAdapter].remove(options)\n  }\n\n  /**\n   * @param {FileSystemHandle} other\n   */\n  async isSameEntry (other) {\n    if (this === other) return true\n    if (\n      (!other) ||\n      (typeof other !== 'object') ||\n      (this.kind !== other.kind) ||\n      (!other[kAdapter])\n    ) return false\n    return this[kAdapter].isSameEntry(other[kAdapter])\n  }\n}\n\nObject.defineProperty(FileSystemHandle.prototype, Symbol.toStringTag, {\n  value: 'FileSystemHandle',\n  writable: false,\n  enumerable: false,\n  configurable: true\n})\n\n// Safari safari doesn't support writable streams yet.\nif (globalThis.FileSystemHandle) {\n  globalThis.FileSystemHandle.prototype.queryPermission ??= function (descriptor) {\n    return 'granted'\n  }\n}\n\nexport default FileSystemHandle\nexport { FileSystemHandle }\n","import config from './config.js'\n\nconst { WritableStream } = config\n\nclass FileSystemWritableFileStream extends WritableStream {\n  #writer\n  constructor (writer) {\n    super(writer)\n    this.#writer = writer\n    // Stupid Safari hack to extend native classes\n    // https://bugs.webkit.org/show_bug.cgi?id=226201\n    Object.setPrototypeOf(this, FileSystemWritableFileStream.prototype)\n\n    /** @private */\n    this._closed = false\n  }\n\n  async close () {\n    this._closed = true\n    const w = this.getWriter()\n    const p = w.close()\n    w.releaseLock()\n    return p\n    // return super.close ? super.close() : this.getWriter().close()\n  }\n\n  /** @param {number} position */\n  seek (position) {\n    return this.write({ type: 'seek', position })\n  }\n\n  /** @param {number} size */\n  truncate (size) {\n    return this.write({ type: 'truncate', size })\n  }\n\n  // The write(data) method steps are:\n  write (data) {\n    if (this._closed) {\n      return Promise.reject(new TypeError('Cannot write to a CLOSED writable stream'))\n    }\n\n    // 1. Let writer be the result of getting a writer for this.\n    const writer = this.getWriter()\n\n    // 2. Let result be the result of writing a chunk to writer given data.\n    const result = writer.write(data)\n\n    // 3. Release writer.\n    writer.releaseLock()\n\n    // 4. Return result.\n    return result\n  }\n}\n\nObject.defineProperty(FileSystemWritableFileStream.prototype, Symbol.toStringTag, {\n  value: 'FileSystemWritableFileStream',\n  writable: false,\n  enumerable: false,\n  configurable: true\n})\n\nObject.defineProperties(FileSystemWritableFileStream.prototype, {\n  close: { enumerable: true },\n  seek: { enumerable: true },\n  truncate: { enumerable: true },\n  write: { enumerable: true }\n})\n\n// Safari safari doesn't support writable streams yet.\nif (\n  globalThis.FileSystemFileHandle &&\n  !globalThis.FileSystemFileHandle.prototype.createWritable &&\n  !globalThis.FileSystemWritableFileStream\n) {\n  globalThis.FileSystemWritableFileStream = FileSystemWritableFileStream\n}\n\nexport default FileSystemWritableFileStream\nexport { FileSystemWritableFileStream }\n","const config = {\n  ReadableStream: globalThis.ReadableStream,\n  WritableStream: globalThis.WritableStream,\n  TransformStream: globalThis.TransformStream,\n  DOMException: globalThis.DOMException,\n  Blob: globalThis.Blob,\n  File: globalThis.File,\n}\n\nexport default config\n","/** @typedef {import('./FileSystemDirectoryHandle.js').default} FileSystemDirectoryHandle */\n\nconst native = globalThis.showDirectoryPicker\n\n/**\n * @param {Object} [options]\n * @param {boolean} [options._preferPolyfill] If you rather want to use the polyfill instead of the native\n * @returns {Promise<FileSystemDirectoryHandle>}\n */\nasync function showDirectoryPicker (options = {}) {\n  if (native && !options._preferPolyfill) {\n    return native(options)\n  }\n\n  const input = document.createElement('input')\n  input.type = 'file'\n  input.webkitdirectory = true\n  // Fallback to multiple files input for iOS Safari\n  input.multiple = true\n\n  // See https://stackoverflow.com/questions/47664777/javascript-file-input-onchange-not-working-ios-safari-only\n  input.style.position = 'fixed'\n  input.style.top = '-100000px'\n  input.style.left = '-100000px'\n  document.body.appendChild(input)\n\n  // Lazy load while the user is choosing the directory\n  const p = import('./util.js')\n\n  await new Promise(resolve => {\n    input.addEventListener('change', resolve)\n    input.click()\n  })\n\n  return p.then(mod => mod.getDirHandlesFromInput(input))\n}\n\nexport default showDirectoryPicker\nexport { showDirectoryPicker }\n","/** @typedef {import('./FileSystemFileHandle.js').default} FileSystemFileHandle */\n\nconst def = { accepts: [] }\nconst native = globalThis.showOpenFilePicker\n\n/**\n * @param {Object} [options]\n * @param {boolean} [options.multiple] If you want to allow more than one file\n * @param {boolean} [options.excludeAcceptAllOption=false] Prevent user for selecting any\n * @param {Object[]} [options.accepts] Files you want to accept\n * @param {boolean} [options._preferPolyfill] If you rather want to use the polyfill instead of the native\n * @returns {Promise<FileSystemFileHandle[]>}\n */\nasync function showOpenFilePicker (options = {}) {\n  const opts = { ...def, ...options }\n\n  if (native && !options._preferPolyfill) {\n    return native(opts)\n  }\n\n  const input = document.createElement('input')\n  input.type = 'file'\n  input.multiple = opts.multiple\n  input.accept = (opts.accepts || [])\n    .map(e => [\n      ...(e.extensions || []).map(e => '.' + e),\n      ...e.mimeTypes || []]\n    )\n    .flat()\n    .join(',')\n\n  // See https://stackoverflow.com/questions/47664777/javascript-file-input-onchange-not-working-ios-safari-only\n  Object.assign(input.style, {\n    position: 'fixed',\n    top: '-100000px',\n    left: '-100000px'\n  })\n\n  document.body.appendChild(input)\n\n  // Lazy load while the user is choosing the directory\n  const p = import('./util.js')\n\n  await new Promise(resolve => {\n    input.addEventListener('change', resolve, { once: true })\n    input.click()\n  })\n  input.remove()\n\n  return p.then(m => m.getFileHandlesFromInput(input))\n}\n\nexport default showOpenFilePicker\nexport { showOpenFilePicker }\n","/** @typedef {import('./FileSystemFileHandle.js').default} FileSystemFileHandle */\n\nconst native = globalThis.showSaveFilePicker\n\n/**\n * @param {Object} [options]\n * @param {boolean} [options.excludeAcceptAllOption=false] Prevent user for selecting any\n * @param {Object[]} [options.types] Files you want to accept\n * @param {string} [options.suggestedName] the name to fall back to when using polyfill\n * @param {string} [options._name] the name to fall back to when using polyfill\n * @param {boolean} [options._preferPolyfill] If you rather want to use the polyfill instead of the native\n * @return {Promise<FileSystemFileHandle>}\n */\nasync function showSaveFilePicker (options = {}) {\n  if (native && !options._preferPolyfill) {\n    return native(options)\n  }\n\n  if (options._name) {\n    console.warn('deprecated _name, spec now have `suggestedName`')\n    options.suggestedName = options._name\n  }\n\n  const { FileSystemFileHandle } = await import('./FileSystemFileHandle.js')\n  const { FileHandle } = await import('./adapters/downloader.js')\n  return new FileSystemFileHandle(new FileHandle(options.suggestedName))\n}\n\nexport default showSaveFilePicker\nexport { showSaveFilePicker }\n","/** @typedef {import('./FileSystemDirectoryHandle.js').default} FileSystemDirectoryHandle */\n\nif (globalThis.DataTransferItem && !DataTransferItem.prototype.getAsFileSystemHandle) {\n  DataTransferItem.prototype.getAsFileSystemHandle = async function () {\n    const entry = this.webkitGetAsEntry()\n    const [\n      { FileHandle, FolderHandle },\n      { FileSystemDirectoryHandle },\n      { FileSystemFileHandle }\n    ] = await Promise.all([\n      import('./adapters/sandbox.js'),\n      import('./FileSystemDirectoryHandle.js'),\n      import('./FileSystemFileHandle.js')\n    ])\n\n    return entry.isFile\n      ? new FileSystemFileHandle(new FileHandle(entry, false))\n      : new FileSystemDirectoryHandle(new FolderHandle(entry, false))\n  }\n}\n\n/**\n * @param {object=} driver\n * @return {Promise<FileSystemDirectoryHandle>}\n */\nasync function getOriginPrivateDirectory (driver, options = {}) {\n  if (!driver) {\n    return globalThis.navigator?.storage?.getDirectory() || globalThis.getOriginPrivateDirectory()\n  }\n  const {FileSystemDirectoryHandle} = await import('./FileSystemDirectoryHandle.js')\n  const module = await driver\n  const sandbox = await (module.default\n    ? module.default(options)\n    : module(options)\n  )\n  return new FileSystemDirectoryHandle(sandbox)\n}\n\nexport default getOriginPrivateDirectory\n","export const errors = {\n  INVALID: ['seeking position failed.', 'InvalidStateError'],\n  GONE: ['A requested file or directory could not be found at the time an operation was processed.', 'NotFoundError'],\n  MISMATCH: ['The path supplied exists, but was not an entry of requested type.', 'TypeMismatchError'],\n  MOD_ERR: ['The object can not be modified in this way.', 'InvalidModificationError'],\n  SYNTAX: m => [`Failed to execute 'write' on 'UnderlyingSinkBase': Invalid params passed. ${m}`, 'SyntaxError'],\n  SECURITY: ['It was determined that certain files are unsafe for access within a Web application, or that too many calls are being made on file resources.', 'SecurityError'],\n  DISALLOWED: ['The request is not allowed by the user agent or the platform in the current context.', 'NotAllowedError']\n}\n\nexport const config = {\n  writable: globalThis.WritableStream\n}\n\nexport async function fromDataTransfer (entries) {\n  console.warn('deprecated fromDataTransfer - use `dt.items[0].getAsFileSystemHandle()` instead')\n  const [memory, sandbox, fs] = await Promise.all([\n    import('./adapters/memory.js'),\n    import('./adapters/sandbox.js'),\n    import('./FileSystemDirectoryHandle.js')\n  ])\n\n  const folder = new memory.FolderHandle('', false)\n  folder._entries = entries.map(entry => entry.isFile\n    ? new sandbox.FileHandle(entry, false)\n    : new sandbox.FolderHandle(entry, false)\n  )\n\n  return new fs.FileSystemDirectoryHandle(folder)\n}\n\nexport async function getDirHandlesFromInput (input) {\n  const { FolderHandle, FileHandle } = await import('./adapters/memory.js')\n  const { FileSystemDirectoryHandle } = await import('./FileSystemDirectoryHandle.js')\n\n  const files = Array.from(input.files)\n  const rootName = files[0].webkitRelativePath.split('/', 1)[0]\n  const root = new FolderHandle(rootName, false)\n\n  files.forEach(file => {\n    const path = file.webkitRelativePath.split('/')\n    path.shift()\n    const name = path.pop()\n\n    const dir = path.reduce((dir, path) => {\n      if (!dir._entries[path]) dir._entries[path] = new FolderHandle(path, false)\n      return dir._entries[path]\n    }, root)\n\n    dir._entries[name] = new FileHandle(file.name, file, false)\n  })\n\n  return new FileSystemDirectoryHandle(root)\n}\n\nexport async function getFileHandlesFromInput (input) {\n  const { FileHandle } = await import('./adapters/memory.js')\n  const { FileSystemFileHandle } = await import('./FileSystemFileHandle.js')\n\n  return Array.from(input.files).map(file =>\n    new FileSystemFileHandle(new FileHandle(file.name, file, false))\n  )\n}\n"],"names":["GONE","MOD_ERR","errors","kAdapter","Symbol","FileSystemDirectoryHandle","FileSystemHandle","constructor","adapter","super","this","getDirectoryHandle","name","options","arguments","length","undefined","TypeError","includes","create","handle","entries","FileSystemFileHandle","_","entry","kind","getEntries","console","warn","getFileHandle","removeEntry","recursive","resolve","possibleDescendant","isSameEntry","openSet","path","current","pop","values","push","keys","asyncIterator","Object","defineProperty","prototype","toStringTag","value","writable","enumerable","configurable","defineProperties","globalThis","proto","async","ensureDoActuallyStillExist","root","navigator","storage","getDirectory","DOMException","call","catch","err","next","done","INVALID","SYNTAX","createWritable","FileSystemWritableFileStream","getFile","wm","WeakMap","workerUrl","code","fileHandle","onmessage","port","evt","ports","cmd","data","type","file","dir","folder","createSyncAccessHandle","write","at","position","flush","truncate","size","close","postMessage","stringCode","toString","blob","Blob","URL","createObjectURL","worker","Worker","textEncoder","TextEncoder","then","send","message","Promise","reject","mc","MessageChannel","port1","Error","port2","parent","get","controller","keepExistingData","start","ctrl","chunk","encode","ArrayBuffer","Uint8Array","isView","ab","Response","arrayBuffer","buffer","byteOffset","byteLength","Number","isInteger","log","terminate","abort","reason","orig","_len","args","Array","_key","set","queryPermission","descriptor","mode","requestPermission","remove","other","WritableStream","config","writer","setPrototypeOf","_closed","w","getWriter","p","releaseLock","seek","result","ReadableStream","TransformStream","File","native","showDirectoryPicker","_preferPolyfill","input","document","createElement","webkitdirectory","multiple","style","top","left","body","appendChild","addEventListener","click","mod","getDirHandlesFromInput","def","accepts","showOpenFilePicker","opts","accept","map","e","extensions","mimeTypes","flat","join","assign","once","m","getFileHandlesFromInput","showSaveFilePicker","_name","suggestedName","FileHandle","DataTransferItem","getAsFileSystemHandle","webkitGetAsEntry","FolderHandle","all","isFile","driver","getOriginPrivateDirectory","module","default","MISMATCH","SECURITY","DISALLOWED","fromDataTransfer","memory","sandbox","fs","_entries","files","from","rootName","webkitRelativePath","split","forEach","shift","reduce"],"sourceRoot":""}