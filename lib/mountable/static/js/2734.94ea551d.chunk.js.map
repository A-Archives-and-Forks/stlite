{"version":3,"file":"static/js/2734.94ea551d.chunk.js","mappings":"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","sources":["../../../streamlit/frontend/lib/src/components/shared/InputInstructions/styled-components.ts","../../../streamlit/frontend/lib/src/components/shared/InputInstructions/InputInstructions.tsx","../../../streamlit/frontend/lib/src/components/widgets/Form/FormClearHelper.ts","../../../streamlit/frontend/lib/src/components/widgets/NumberInput/styled-components.ts","../../../streamlit/frontend/lib/src/components/widgets/NumberInput/NumberInput.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { keyframes } from \"@emotion/react\"\nimport styled from \"@emotion/styled\"\n\nconst blink = keyframes`\n  50% {\n    color: rgba(0, 0, 0, 0);\n  }\n`\n\nexport interface StyledMessageProps {\n  includeDot: boolean\n  shouldBlink: boolean\n}\n\nexport const StyledMessage = styled.span<StyledMessageProps>(\n  ({ includeDot, shouldBlink, theme }) => ({\n    ...(includeDot\n      ? {\n          \"&::before\": {\n            opacity: 1,\n            content: '\"•\"',\n            animation: \"none\",\n            color: theme.colors.gray,\n            margin: `0 ${theme.spacing.twoXS}`,\n          },\n        }\n      : {}),\n    ...(shouldBlink\n      ? {\n          color: theme.colors.red,\n          animationName: `${blink}`,\n          animationDuration: \"0.5s\",\n          animationIterationCount: 5,\n        }\n      : {}),\n  })\n)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\n\nimport { isFromMac } from \"@streamlit/lib/src/util/utils\"\nimport { StyledWidgetInstructions } from \"@streamlit/lib/src/components/widgets/BaseWidget\"\n\nimport { StyledMessage } from \"./styled-components\"\n\nexport interface Props {\n  dirty: boolean\n  value: string\n  inForm: boolean\n  maxLength?: number\n  className?: string\n  type?: \"multiline\" | \"single\" | \"chat\"\n  allowEnterToSubmit?: boolean\n}\n\nconst InputInstructions = ({\n  dirty,\n  value,\n  inForm,\n  maxLength,\n  className,\n  type = \"single\",\n  allowEnterToSubmit = true,\n}: Props): ReactElement => {\n  const messages: ReactElement[] = []\n  const addMessage = (text: string, shouldBlink = false): void => {\n    messages.push(\n      <StyledMessage\n        key={messages.length}\n        includeDot={messages.length > 0}\n        shouldBlink={shouldBlink}\n      >\n        {text}\n      </StyledMessage>\n    )\n  }\n\n  // Show enter instruction if not a form or form allows Enter to submit\n  if (allowEnterToSubmit) {\n    const toSubmitFormOrApplyText = inForm ? \"submit form\" : \"apply\"\n    if (type === \"multiline\") {\n      const commandKey = isFromMac() ? \"⌘\" : \"Ctrl\"\n      addMessage(`Press ${commandKey}+Enter to ${toSubmitFormOrApplyText}`)\n    } else if (type === \"single\") {\n      addMessage(`Press Enter to ${toSubmitFormOrApplyText}`)\n    }\n  }\n\n  if (maxLength && (type !== \"chat\" || dirty)) {\n    addMessage(\n      `${value.length}/${maxLength}`,\n      dirty && value.length >= maxLength\n    )\n  }\n\n  return (\n    <StyledWidgetInstructions\n      data-testid=\"InputInstructions\"\n      className={className}\n    >\n      {messages}\n    </StyledWidgetInstructions>\n  )\n}\n\nexport default InputInstructions\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useEffect } from \"react\"\n\nimport { SignalConnection } from \"typed-signals\"\n\nimport {\n  isValidFormId,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\n\nexport class FormClearHelper {\n  private formClearListener?: SignalConnection\n\n  private lastWidgetMgr?: WidgetStateManager\n\n  private lastFormId?: string\n\n  /**\n   * Register the listener that will be called when the widget's form is cleared.\n   * This should be called in the `render` function of every class-based widget\n   * element - it mimics the behavior of a `useEffect` hook, and ensures that\n   * subscription and unsubscription happen correctly.\n   *\n   * Hooks-based widgets can just use `useEffect` and call\n   * `widgetMgr.addFormClearedListener` directly. Or just use the convenient\n   * hook `useFormClearHelper`, below.\n   */\n  public manageFormClearListener(\n    widgetMgr: WidgetStateManager,\n    formId: string,\n    listener: () => void\n  ): void {\n    // If we're already subscribed and our params haven't changed, early-out.\n    if (\n      notNullOrUndefined(this.formClearListener) &&\n      this.lastWidgetMgr === widgetMgr &&\n      this.lastFormId === formId\n    ) {\n      return\n    }\n\n    // Close our previous subscription, if we had one.\n    this.disconnect()\n\n    // If we're not part of a form, there's nothing to do.\n    if (!isValidFormId(formId)) {\n      return\n    }\n\n    // Make the new subscription.\n    this.formClearListener = widgetMgr.addFormClearedListener(formId, listener)\n    this.lastWidgetMgr = widgetMgr\n    this.lastFormId = formId\n  }\n\n  /**\n   * Disconnect from the form-clear signal, if we're connected.\n   * This should be called from the `componentWillUnmount` function of every\n   * element that uses it.\n   */\n  public disconnect(): void {\n    this.formClearListener?.disconnect()\n    this.formClearListener = undefined\n    this.lastWidgetMgr = undefined\n    this.lastFormId = undefined\n  }\n}\n\ninterface FormElementProtoInterface {\n  formId: string\n}\n\ninterface FormClearHelperArgs {\n  element: FormElementProtoInterface\n  widgetMgr: WidgetStateManager\n  onFormCleared: () => void\n}\n\nexport function useFormClearHelper({\n  element,\n  widgetMgr,\n  onFormCleared,\n}: FormClearHelperArgs): void {\n  useEffect(() => {\n    if (!isValidFormId(element.formId)) {\n      return\n    }\n\n    const formClearListener = widgetMgr.addFormClearedListener(\n      element.formId,\n      onFormCleared\n    )\n\n    return () => {\n      formClearListener.disconnect()\n    }\n  }, [element, widgetMgr, onFormCleared])\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nconst CONTROLS_WIDTH = 32 // px\n\nexport const StyledInputContainer = styled.div(({ theme }) => ({\n  display: \"flex\",\n  flexDirection: \"row\",\n  flexWrap: \"nowrap\",\n  alignItems: \"center\",\n  height: theme.sizes.minElementHeight,\n  // Mimic the baseweb's borders here, so we can apply the focus style\n  // to the entire container and not only the input itself\n  borderWidth: theme.sizes.borderWidth,\n  borderStyle: \"solid\",\n  // Mimic the logic from createThemeOverrides.\n  borderColor:\n    theme.colors.widgetBorderColor ||\n    theme.colors.widgetBackgroundColor ||\n    theme.colors.bgColor,\n  transitionDuration: \"200ms\",\n  transitionProperty: \"border\",\n  transitionTimingFunction: \"cubic-bezier(0.2, 0.8, 0.4, 1)\",\n  borderRadius: theme.radii.default,\n  overflow: \"hidden\", // Fix rounded corner being overlayed with corner of internal input.\n\n  \"&.focused\": {\n    borderColor: theme.colors.primary,\n  },\n\n  input: {\n    MozAppearance: \"textfield\",\n    \"&::-webkit-inner-spin-button, &::-webkit-outer-spin-button\": {\n      WebkitAppearance: \"none\",\n      margin: theme.spacing.none,\n    },\n  },\n}))\n\nexport const StyledInputControls = styled.div({\n  display: \"flex\",\n  flexDirection: \"row\",\n  alignSelf: \"stretch\",\n})\n\nexport const StyledInputControl = styled.button(({ theme }) => ({\n  margin: theme.spacing.none,\n  border: \"none\",\n  height: theme.sizes.full,\n  display: \"flex\",\n  alignItems: \"center\",\n  width: `${CONTROLS_WIDTH}px`,\n  justifyContent: \"center\",\n  color: theme.colors.bodyText,\n  transition: \"color 300ms, backgroundColor 300ms\",\n  // Mimic the logic from createThemeOverrides.\n  backgroundColor:\n    theme.colors.widgetBackgroundColor || theme.colors.secondaryBg,\n  \"&:hover:enabled, &:focus:enabled\": {\n    color: theme.colors.white,\n    backgroundColor: theme.colors.primary,\n    transition: \"none\",\n    outline: \"none\",\n  },\n  \"&:active\": {\n    outline: \"none\",\n    border: \"none\",\n  },\n  \"&:last-of-type\": {\n    borderTopRightRadius: theme.radii.default,\n    borderBottomRightRadius: theme.radii.default,\n  },\n  \"&:disabled\": {\n    cursor: \"not-allowed\",\n    color: theme.colors.fadedText40,\n  },\n}))\n\nexport interface StyledInstructionsContainerProps {\n  // If widget is clearable, the instruction needs to be moved a couple\n  // pixels to the left to avoid overlapping with the clear button.\n  clearable: boolean\n}\n\nexport const StyledInstructionsContainer =\n  styled.div<StyledInstructionsContainerProps>(({ theme, clearable }) => ({\n    position: \"absolute\",\n    marginRight: theme.spacing.twoXS,\n    left: 0,\n    right: `${CONTROLS_WIDTH * 2 + (clearable ? 12 : 0)}px`,\n  }))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {\n  ReactElement,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\"\n\nimport { Minus, Plus } from \"@emotion-icons/open-iconic\"\nimport { withTheme } from \"@emotion/react\"\nimport { sprintf } from \"sprintf-js\"\nimport { Input as UIInput } from \"baseui/input\"\nimport uniqueId from \"lodash/uniqueId\"\n\nimport {\n  isInForm,\n  isNullOrUndefined,\n  labelVisibilityProtoValueToEnum,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport { useFormClearHelper } from \"@streamlit/lib/src/components/widgets/Form\"\nimport { logWarning } from \"@streamlit/lib/src/util/log\"\nimport { NumberInput as NumberInputProto } from \"@streamlit/lib/src/proto\"\nimport {\n  Source,\n  WidgetStateManager,\n} from \"@streamlit/lib/src/WidgetStateManager\"\nimport TooltipIcon from \"@streamlit/lib/src/components/shared/TooltipIcon\"\nimport { Placement } from \"@streamlit/lib/src/components/shared/Tooltip\"\nimport Icon from \"@streamlit/lib/src/components/shared/Icon\"\nimport InputInstructions from \"@streamlit/lib/src/components/shared/InputInstructions/InputInstructions\"\nimport {\n  StyledWidgetLabelHelp,\n  WidgetLabel,\n} from \"@streamlit/lib/src/components/widgets/BaseWidget\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\n\nimport {\n  StyledInputContainer,\n  StyledInputControl,\n  StyledInputControls,\n  StyledInstructionsContainer,\n} from \"./styled-components\"\n\n/**\n * Return a string property from an element. If the string is\n * null or empty, return undefined instead.\n */\nfunction getNonEmptyString(\n  value: string | null | undefined\n): string | undefined {\n  return isNullOrUndefined(value) || value === \"\" ? undefined : value\n}\n\n/**\n * This function returns the initial value for the NumberInput widget\n * via the widget manager.\n */\nconst getInitialValue = (\n  props: Pick<Props, \"element\" | \"widgetMgr\">\n): number | null => {\n  const isIntData = props.element.dataType === NumberInputProto.DataType.INT\n  const storedValue = isIntData\n    ? props.widgetMgr.getIntValue(props.element)\n    : props.widgetMgr.getDoubleValue(props.element)\n  return storedValue ?? props.element.default ?? null\n}\n\nconst getStep = ({\n  step,\n  dataType,\n}: Pick<NumberInputProto, \"step\" | \"dataType\">): number => {\n  if (step) {\n    return step\n  }\n  if (dataType === NumberInputProto.DataType.INT) {\n    return 1\n  }\n  return 0.01\n}\n\n/**\n * Utilizes the sprintf library to format a number value\n * according to a given format string.\n */\nexport const formatValue = ({\n  value,\n  format,\n  step,\n  dataType,\n}: {\n  value: number | null\n  format?: string | null\n  step?: number\n  dataType: NumberInputProto.DataType\n}): string | null => {\n  if (isNullOrUndefined(value)) {\n    return null\n  }\n\n  let formatString = getNonEmptyString(format)\n\n  if (isNullOrUndefined(formatString) && notNullOrUndefined(step)) {\n    const strStep = step.toString()\n    if (\n      dataType === NumberInputProto.DataType.FLOAT &&\n      step !== 0 &&\n      strStep.includes(\".\")\n    ) {\n      const decimalPlaces = strStep.split(\".\")[1].length\n      formatString = `%0.${decimalPlaces}f`\n    }\n  }\n\n  if (isNullOrUndefined(formatString)) {\n    return value.toString()\n  }\n\n  try {\n    return sprintf(formatString, value)\n  } catch (e) {\n    logWarning(`Error in sprintf(${formatString}, ${value}): ${e}`)\n    return String(value)\n  }\n}\n\nexport const canDecrement = (\n  value: number | null,\n  step: number,\n  min: number\n): boolean => {\n  if (isNullOrUndefined(value)) {\n    return false\n  }\n  return value - step >= min\n}\n\nexport const canIncrement = (\n  value: number | null,\n  step: number,\n  max: number\n): boolean => {\n  if (isNullOrUndefined(value)) {\n    return false\n  }\n  return value + step <= max\n}\n\nexport interface Props {\n  disabled: boolean\n  element: NumberInputProto\n  widgetMgr: WidgetStateManager\n  width: number\n  theme: EmotionTheme\n  fragmentId?: string\n}\n\nexport const NumberInput: React.FC<Props> = ({\n  disabled,\n  element,\n  widgetMgr,\n  width,\n  theme,\n  fragmentId,\n}: Props): ReactElement => {\n  const {\n    dataType: elementDataType,\n    id: elementId,\n    formId: elementFormId,\n    default: elementDefault,\n    format: elementFormat,\n  } = element\n  const min = element.hasMin ? element.min : -Infinity\n  const max = element.hasMax ? element.max : +Infinity\n\n  const [step, setStep] = useState<number>(getStep(element))\n  const initialValue = getInitialValue({ element, widgetMgr })\n  const [dirty, setDirty] = useState(false)\n  const [value, setValue] = useState<number | null>(initialValue)\n  const [formattedValue, setFormattedValue] = useState<string | null>(\n    formatValue({ value: initialValue, ...element, step })\n  )\n  const [isFocused, setIsFocused] = useState(false)\n  const inputRef = useRef<HTMLInputElement | HTMLTextAreaElement>(null)\n  const id = useRef(uniqueId(\"number_input_\"))\n\n  const canDec = canDecrement(value, step, min)\n  const canInc = canIncrement(value, step, max)\n\n  const inForm = isInForm({ formId: elementFormId })\n  // Allows form submission on Enter & displays Enter instructions, or if not in form and state is dirty\n  const allowEnterToSubmit = inForm\n    ? widgetMgr.allowFormEnterToSubmit(elementFormId)\n    : dirty\n  // Hide input instructions for small widget sizes.\n  const shouldShowInstructions =\n    isFocused && width > theme.breakpoints.hideWidgetDetails\n\n  // Update the step if the props change\n  useEffect(() => {\n    setStep(getStep({ step: element.step, dataType: element.dataType }))\n  }, [element.dataType, element.step])\n\n  const commitValue = useCallback(\n    ({ value, source }: { value: number | null; source: Source }) => {\n      if (notNullOrUndefined(value) && (min > value || value > max)) {\n        inputRef.current?.reportValidity()\n      } else {\n        const newValue = value ?? elementDefault ?? null\n\n        switch (elementDataType) {\n          case NumberInputProto.DataType.INT:\n            widgetMgr.setIntValue(\n              { id: elementId, formId: elementFormId },\n              newValue,\n              source,\n              fragmentId\n            )\n            break\n          case NumberInputProto.DataType.FLOAT:\n            widgetMgr.setDoubleValue(\n              { id: elementId, formId: elementFormId },\n              newValue,\n              source,\n              fragmentId\n            )\n            break\n          default:\n            throw new Error(\"Invalid data type\")\n        }\n\n        setDirty(false)\n        setValue(newValue)\n        setFormattedValue(\n          formatValue({\n            value: newValue,\n            dataType: elementDataType,\n            format: elementFormat,\n            step,\n          })\n        )\n      }\n    },\n    [\n      min,\n      max,\n      inputRef,\n      widgetMgr,\n      fragmentId,\n      step,\n      elementDataType,\n      elementId,\n      elementFormId,\n      elementDefault,\n      elementFormat,\n    ]\n  )\n\n  const onBlur = useCallback((): void => {\n    if (dirty) {\n      commitValue({ value, source: { fromUi: true } })\n    }\n    setIsFocused(false)\n  }, [dirty, value, commitValue])\n\n  const onFocus = useCallback((): void => {\n    setIsFocused(true)\n  }, [])\n\n  const updateFromProtobuf = useCallback((): void => {\n    const { value } = element\n    element.setValue = false\n    setValue(value ?? null)\n    setFormattedValue(formatValue({ value: value ?? null, ...element, step }))\n    commitValue({ value: value ?? null, source: { fromUi: false } })\n  }, [element, step, commitValue])\n\n  // on component mount, we want to update the value from protobuf if setValue is true, otherwise commit current value\n  useEffect(() => {\n    if (element.setValue) {\n      updateFromProtobuf()\n    } else {\n      commitValue({ value, source: { fromUi: false } })\n    }\n\n    // I don't want to run this effect on every render, only on mount.\n    // Additionally, it's okay if commitValue changes, because we only call\n    // it once in the beginning anyways.\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, [])\n\n  // update from protobuf whenever component updates if element.setValue is truthy\n  if (element.setValue) {\n    updateFromProtobuf()\n  }\n\n  const clearable = isNullOrUndefined(element.default) && !disabled\n\n  const onFormCleared = useCallback(() => {\n    const newValue = element.default ?? null\n    setValue(newValue)\n    commitValue({ value: newValue, source: { fromUi: true } })\n  }, [element])\n\n  useFormClearHelper({\n    element,\n    widgetMgr,\n    onFormCleared,\n  })\n\n  const onChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ): void => {\n    const { value } = e.target\n\n    if (value === \"\") {\n      setDirty(true)\n      setValue(null)\n      setFormattedValue(null)\n    } else {\n      let numValue: number\n\n      if (element.dataType === NumberInputProto.DataType.INT) {\n        numValue = parseInt(value, 10)\n      } else {\n        numValue = parseFloat(value)\n      }\n\n      setDirty(true)\n      setValue(numValue)\n      setFormattedValue(value)\n    }\n  }\n\n  const increment = useCallback(() => {\n    if (canInc) {\n      setDirty(true)\n      commitValue({ value: (value ?? min) + step, source: { fromUi: true } })\n    }\n  }, [value, min, step, canInc])\n\n  const decrement = useCallback(() => {\n    if (canDec) {\n      setDirty(true)\n      commitValue({ value: (value ?? max) - step, source: { fromUi: true } })\n    }\n  }, [value, max, step, canDec])\n\n  const onKeyDown = useCallback(\n    (e: React.KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n      const { key } = e\n\n      switch (key) {\n        case \"ArrowUp\":\n          e.preventDefault()\n          increment()\n          break\n        case \"ArrowDown\":\n          e.preventDefault()\n          decrement()\n          break\n        default:\n      }\n    },\n    [increment, decrement]\n  )\n\n  const onKeyPress = useCallback(\n    (e: React.KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n      if (e.key === \"Enter\") {\n        if (dirty) {\n          commitValue({ value, source: { fromUi: true } })\n        }\n        if (widgetMgr.allowFormEnterToSubmit(elementFormId)) {\n          widgetMgr.submitForm(elementFormId, fragmentId)\n        }\n      }\n    },\n    [dirty, value, commitValue, widgetMgr, elementFormId, fragmentId]\n  )\n\n  return (\n    <div\n      className=\"stNumberInput\"\n      data-testid=\"stNumberInput\"\n      style={{ width }}\n    >\n      <WidgetLabel\n        label={element.label}\n        disabled={disabled}\n        labelVisibility={labelVisibilityProtoValueToEnum(\n          element.labelVisibility?.value\n        )}\n        htmlFor={id.current}\n      >\n        {element.help && (\n          <StyledWidgetLabelHelp>\n            <TooltipIcon\n              content={element.help}\n              placement={Placement.TOP_RIGHT}\n            />\n          </StyledWidgetLabelHelp>\n        )}\n      </WidgetLabel>\n      <StyledInputContainer\n        className={isFocused ? \"focused\" : \"\"}\n        data-testid=\"stNumberInputContainer\"\n      >\n        <UIInput\n          type=\"number\"\n          inputRef={inputRef}\n          value={formattedValue ?? \"\"}\n          placeholder={element.placeholder}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          onChange={onChange}\n          onKeyPress={onKeyPress}\n          onKeyDown={onKeyDown}\n          clearable={clearable}\n          clearOnEscape={clearable}\n          disabled={disabled}\n          aria-label={element.label}\n          id={id.current}\n          overrides={{\n            ClearIconContainer: {\n              style: {\n                padding: 0,\n              },\n            },\n            ClearIcon: {\n              props: {\n                overrides: {\n                  Svg: {\n                    style: {\n                      color: theme.colors.darkGray,\n                      // setting this width and height makes the clear-icon align with dropdown arrows of other input fields\n                      padding: theme.spacing.threeXS,\n                      height: theme.sizes.clearIconSize,\n                      width: theme.sizes.clearIconSize,\n                      \":hover\": {\n                        fill: theme.colors.bodyText,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n            Input: {\n              props: {\n                \"data-testid\": \"stNumberInputField\",\n                step: step,\n                min: min,\n                max: max,\n              },\n              style: {\n                lineHeight: theme.lineHeights.inputWidget,\n                // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n                paddingRight: theme.spacing.sm,\n                paddingLeft: theme.spacing.sm,\n                paddingBottom: theme.spacing.sm,\n                paddingTop: theme.spacing.sm,\n              },\n            },\n            InputContainer: {\n              style: () => ({\n                borderTopRightRadius: 0,\n                borderBottomRightRadius: 0,\n              }),\n            },\n            Root: {\n              style: {\n                // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n                borderTopRightRadius: 0,\n                borderBottomRightRadius: 0,\n                borderLeftWidth: 0,\n                borderRightWidth: 0,\n                borderTopWidth: 0,\n                borderBottomWidth: 0,\n                paddingRight: 0,\n              },\n            },\n          }}\n        />\n        {/* We only want to show the increment/decrement controls when there is sufficient room to display the value and these controls. */}\n        {width > theme.breakpoints.hideNumberInputControls && (\n          <StyledInputControls>\n            <StyledInputControl\n              data-testid=\"stNumberInputStepDown\"\n              onClick={decrement}\n              disabled={!canDec || disabled}\n              tabIndex={-1}\n            >\n              <Icon\n                content={Minus}\n                size=\"xs\"\n                color={canDec ? \"inherit\" : \"disabled\"}\n              />\n            </StyledInputControl>\n            <StyledInputControl\n              data-testid=\"stNumberInputStepUp\"\n              onClick={increment}\n              disabled={!canInc || disabled}\n              tabIndex={-1}\n            >\n              <Icon\n                content={Plus}\n                size=\"xs\"\n                color={canInc ? \"inherit\" : \"disabled\"}\n              />\n            </StyledInputControl>\n          </StyledInputControls>\n        )}\n      </StyledInputContainer>\n      {shouldShowInstructions && (\n        <StyledInstructionsContainer clearable={clearable}>\n          <InputInstructions\n            dirty={dirty}\n            value={formattedValue ?? \"\"}\n            inForm={inForm}\n            allowEnterToSubmit={allowEnterToSubmit}\n          />\n        </StyledInstructionsContainer>\n      )}\n    </div>\n  )\n}\n\nexport default withTheme(NumberInput)\n"],"names":["blink","keyframes","StyledMessage","_styled","target","_ref","includeDot","shouldBlink","theme","opacity","content","animation","color","colors","gray","margin","spacing","twoXS","red","animationName","animationDuration","animationIterationCount","dirty","value","inForm","maxLength","className","type","allowEnterToSubmit","messages","addMessage","text","arguments","length","undefined","push","_jsx","children","toSubmitFormOrApplyText","isFromMac","StyledWidgetInstructions","FormClearHelper","constructor","formClearListener","lastWidgetMgr","lastFormId","manageFormClearListener","widgetMgr","formId","listener","notNullOrUndefined","this","disconnect","isValidFormId","addFormClearedListener","_this$formClearListen","useFormClearHelper","element","onFormCleared","useEffect","StyledInputContainer","display","flexDirection","flexWrap","alignItems","height","sizes","minElementHeight","borderWidth","borderStyle","borderColor","widgetBorderColor","widgetBackgroundColor","bgColor","transitionDuration","transitionProperty","transitionTimingFunction","borderRadius","radii","default","overflow","primary","input","MozAppearance","WebkitAppearance","none","StyledInputControls","name","styles","StyledInputControl","_ref2","border","full","width","justifyContent","bodyText","transition","backgroundColor","secondaryBg","white","outline","borderTopRightRadius","borderBottomRightRadius","cursor","fadedText40","StyledInstructionsContainer","_ref3","clearable","position","marginRight","left","right","CONTROLS_WIDTH","getStep","step","dataType","NumberInputProto","DataType","INT","formatValue","format","isNullOrUndefined","formatString","getNonEmptyString","strStep","toString","FLOAT","includes","split","sprintf","e","logWarning","String","withTheme","_ref4","_element$labelVisibil","disabled","fragmentId","elementDataType","id","elementId","elementFormId","elementDefault","elementFormat","min","hasMin","Infinity","max","hasMax","setStep","useState","initialValue","props","storedValue","getIntValue","getDoubleValue","getInitialValue","setDirty","setValue","formattedValue","setFormattedValue","isFocused","setIsFocused","inputRef","useRef","uniqueId","canDec","canDecrement","canInc","canIncrement","isInForm","allowFormEnterToSubmit","shouldShowInstructions","breakpoints","hideWidgetDetails","commitValue","useCallback","_ref5","source","_inputRef$current","current","reportValidity","_ref6","newValue","setIntValue","setDoubleValue","Error","onBlur","fromUi","onFocus","updateFromProtobuf","_element$default","increment","decrement","onKeyDown","key","preventDefault","onKeyPress","submitForm","_jsxs","style","WidgetLabel","label","labelVisibility","labelVisibilityProtoValueToEnum","htmlFor","help","StyledWidgetLabelHelp","TooltipIcon","placement","Placement","TOP_RIGHT","UIInput","placeholder","onChange","numValue","parseInt","parseFloat","clearOnEscape","overrides","ClearIconContainer","padding","ClearIcon","Svg","darkGray","threeXS","clearIconSize","fill","Input","lineHeight","lineHeights","inputWidget","paddingRight","sm","paddingLeft","paddingBottom","paddingTop","InputContainer","Root","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth","hideNumberInputControls","onClick","tabIndex","Icon","Minus","size","Plus","InputInstructions"],"sourceRoot":""}