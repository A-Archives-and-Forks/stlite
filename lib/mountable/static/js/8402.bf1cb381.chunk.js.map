{"version":3,"file":"static/js/8402.bf1cb381.chunk.js","mappings":"qOAoFA,MAhDA,SAAwBA,GACtB,IAAQC,EAAwCD,EAAxCC,SAAUC,EAA8BF,EAA9BE,QAASC,EAAqBH,EAArBG,UACrBC,EAAQ,CAAEC,MADgCL,EAAVK,OAE9BC,GAAoBC,EAAAA,EAAAA,YAAWC,EAAAA,GAA/BF,gBAEFG,GAAeC,EAAAA,EAAAA,MAsBrB,OACE,gBAAKC,UAAU,8BAA8BP,MAAOA,EAAM,UACxD,SAACQ,EAAA,GAAa,CAACC,KAAMX,EAAQW,KAAK,UAChC,SAAC,KAAQ,CACPC,KAAMC,EAAAA,GAAAA,UACNC,KAAMC,EAAAA,GAAAA,MACNhB,SAAUA,EACViB,QA3BgC,WAKtC,GAFAf,EAAUgB,gBAAgBjB,EAAS,CAAEkB,QAAQ,IAEzClB,EAAQmB,IAAIC,WAAW,WACzBC,EAAAA,EAAAA,IAAuBd,EAAcP,EAAQmB,SAD/C,CAKA,IAAMG,EAAOC,SAASC,cAAc,KAC9BC,EAAG,WAAMC,EAAAA,EAAAA,IACb1B,EAAQmB,IACRf,KACD,kBAAUuB,mBAAmBJ,SAASK,QACvCN,EAAKO,aAAa,OAAQJ,GAC1BH,EAAKO,aAAa,SAAU,UAC5BP,EAAKQ,OATL,CAUF,EAUQC,WAAY/B,EAAQgC,oBAAqB,EAAM,UAE/C,SAACC,EAAA,EAAiB,CAChBC,OAAQlC,EAAQmC,MAChBC,WAAW,EACXC,UAAQ,SAMpB,C","sources":["../../../streamlit/frontend/src/components/widgets/DownloadButton/DownloadButton.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement, useContext } from \"react\"\nimport { DownloadButton as DownloadButtonProto } from \"src/autogen/proto\"\nimport AppContext from \"src/components/core/AppContext\"\nimport UIButton, {\n  ButtonTooltip,\n  Kind,\n  Size,\n} from \"src/components/shared/Button\"\nimport { WidgetStateManager } from \"src/lib/WidgetStateManager\"\nimport StreamlitMarkdown from \"src/components/shared/StreamlitMarkdown\"\nimport { buildMediaUri } from \"src/lib/UriUtil\"\nimport { useStliteKernel, downloadFileFromStlite } from \"@stlite/kernel\"\n\nexport interface Props {\n  disabled: boolean\n  element: DownloadButtonProto\n  widgetMgr: WidgetStateManager\n  width: number\n}\n\nfunction DownloadButton(props: Props): ReactElement {\n  const { disabled, element, widgetMgr, width } = props\n  const style = { width }\n  const { getBaseUriParts } = useContext(AppContext)\n\n  const stliteKernel = useStliteKernel()\n\n  const handleDownloadClick: () => void = () => {\n    // Downloads are only done on links, so create a hidden one and click it\n    // for the user.\n    widgetMgr.setTriggerValue(element, { fromUi: true })\n\n    if (element.url.startsWith(\"/media\")) {\n      downloadFileFromStlite(stliteKernel, element.url)\n      return\n    }\n\n    const link = document.createElement(\"a\")\n    const uri = `${buildMediaUri(\n      element.url,\n      getBaseUriParts()\n    )}?title=${encodeURIComponent(document.title)}`\n    link.setAttribute(\"href\", uri)\n    link.setAttribute(\"target\", \"_blank\")\n    link.click()\n  }\n\n  return (\n    <div className=\"row-widget stDownloadButton\" style={style}>\n      <ButtonTooltip help={element.help}>\n        <UIButton\n          kind={Kind.SECONDARY}\n          size={Size.SMALL}\n          disabled={disabled}\n          onClick={handleDownloadClick}\n          fluidWidth={element.useContainerWidth || false}\n        >\n          <StreamlitMarkdown\n            source={element.label}\n            allowHTML={false}\n            isButton\n          />\n        </UIButton>\n      </ButtonTooltip>\n    </div>\n  )\n}\n\nexport default DownloadButton\n"],"names":["props","disabled","element","widgetMgr","style","width","getBaseUriParts","useContext","AppContext","stliteKernel","useStliteKernel","className","Button","help","kind","Kind","size","Size","onClick","setTriggerValue","fromUi","url","startsWith","downloadFileFromStlite","link","document","createElement","uri","buildMediaUri","encodeURIComponent","title","setAttribute","click","fluidWidth","useContainerWidth","StreamlitMarkdown","source","label","allowHTML","isButton"],"sourceRoot":""}