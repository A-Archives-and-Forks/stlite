{"version":3,"file":"static/js/2963.726e71de.chunk.js","mappings":"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","sources":["../../../streamlit/frontend/lib/src/components/shared/ElementFullscreen/ElementFullscreenContext.tsx","../../../streamlit/frontend/lib/src/components/shared/FullScreenWrapper/styled-components.tsx","../../../streamlit/frontend/lib/src/components/shared/ElementFullscreen/ElementFullscreenWrapper.tsx","../../../streamlit/frontend/lib/src/components/shared/ElementFullscreen/useFullscreen.tsx","../../../streamlit/frontend/lib/src/components/shared/FullScreenWrapper/withFullScreenWrapper.tsx","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/utils.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/ObjectColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/TextColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/DateTimeColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/CheckboxColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/isIntegerType.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/NumberColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/SelectboxColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/ListColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/arrowUtils.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/ChartColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/ImageColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/LinkColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/ProgressColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/index.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useColumnLoader.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/EditingState.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useCustomTheme.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useDataLoader.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useColumnSort.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useSelectionHandler.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useDataExporter.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useDataEditor.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useTooltips.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useCustomRenderer.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useColumnSizer.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useTableSizer.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/cells/ImageCellEditor.tsx","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/Tooltip.tsx","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/styled-components.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/DataFrame.tsx","../../../streamlit/frontend/lib/src/hooks/useRequiredContext.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createContext } from \"react\"\n\ntype ElementFullscreenContextShape = {\n  width: number\n  height: number | undefined\n  expanded: boolean\n  expand: () => void\n  collapse: () => void\n}\n\nexport const ElementFullscreenContext =\n  createContext<ElementFullscreenContextShape | null>(null)\nElementFullscreenContext.displayName = \"ElementFullscreenContext\"\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport interface StyledFullScreenFrameProps {\n  isExpanded: boolean\n}\n\nexport const StyledFullScreenFrame = styled.div<StyledFullScreenFrameProps>(\n  ({ theme, isExpanded }) => ({\n    ...(isExpanded\n      ? {\n          position: \"fixed\",\n          top: 0,\n          left: 0,\n          bottom: 0,\n          right: 0,\n          background: theme.colors.bgColor,\n          zIndex: theme.zIndices.fullscreenWrapper,\n          padding: theme.spacing.md,\n          paddingTop: theme.sizes.fullScreenHeaderHeight,\n          overflow: [\"auto\", \"overlay\"],\n          display: \"flex\", // To avoid extra spaces that lead to scrollbars.\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }\n      : {}),\n  })\n)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { FC, PropsWithChildren, useMemo } from \"react\"\n\nimport { useTheme } from \"@emotion/react\"\n\nimport { StyledFullScreenFrame } from \"@streamlit/lib/src/components/shared/FullScreenWrapper/styled-components\"\nimport { ElementFullscreenContext } from \"@streamlit/lib/src/components/shared/ElementFullscreen/ElementFullscreenContext\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\n\nimport { useFullscreen } from \"./useFullscreen\"\n\ntype ElementFullscreenWrapperProps = PropsWithChildren<{\n  height?: number\n  width: number\n}>\n\nconst ElementFullscreenWrapper: FC<ElementFullscreenWrapperProps> = ({\n  children,\n  height,\n  width,\n}) => {\n  const theme: EmotionTheme = useTheme()\n  const { expanded, fullHeight, fullWidth, zoomIn, zoomOut } = useFullscreen()\n\n  const fullscreenContextValue = useMemo(() => {\n    return {\n      width: expanded ? fullWidth : width,\n      height: expanded ? fullHeight : height,\n      expanded,\n      expand: zoomIn,\n      collapse: zoomOut,\n    }\n  }, [expanded, fullHeight, fullWidth, height, width, zoomIn, zoomOut])\n\n  return (\n    <ElementFullscreenContext.Provider value={fullscreenContextValue}>\n      <StyledFullScreenFrame\n        isExpanded={expanded}\n        data-testid=\"stFullScreenFrame\"\n        theme={theme}\n      >\n        {children}\n      </StyledFullScreenFrame>\n    </ElementFullscreenContext.Provider>\n  )\n}\n\nexport default ElementFullscreenWrapper\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useCallback, useContext, useEffect, useMemo, useState } from \"react\"\n\nimport { LibContext } from \"@streamlit/lib/src/components/core/LibContext\"\nimport { WindowDimensionsContext } from \"@streamlit/lib/src/components/shared/WindowDimensions\"\nimport { useRequiredContext } from \"@streamlit/lib/src/hooks/useRequiredContext\"\n\nexport type UseEscapeToCollapseArgs = {\n  expanded: boolean\n  zoomOut: () => void\n}\n\nexport type UseFullscreenShape = {\n  expanded: boolean\n  fullHeight: number\n  fullWidth: number\n  zoomIn: () => void\n  zoomOut: () => void\n}\n\nexport const useFullscreen = (): UseFullscreenShape => {\n  const { setFullScreen } = useContext(LibContext)\n  const [expanded, setExpanded] = useState(false)\n  const { fullHeight, fullWidth } = useRequiredContext(WindowDimensionsContext)\n\n  const setExpandedState = useCallback(\n    (isExpanded: boolean) => {\n      // Set the local component-level state\n      setExpanded(isExpanded)\n      // Set the context-level state\n      setFullScreen(isExpanded)\n    },\n    [setFullScreen]\n  )\n\n  const zoomIn = useCallback(() => {\n    document.body.style.overflow = \"hidden\"\n    setExpandedState(true)\n  }, [setExpandedState])\n\n  const zoomOut = useCallback(() => {\n    document.body.style.overflow = \"unset\"\n    setExpandedState(false)\n  }, [setExpandedState])\n\n  const controlKeys = useCallback(\n    (event: KeyboardEvent) => {\n      /**\n       * keyCode 27 is the ESC key\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode\n       */\n      if (event.keyCode === 27 && expanded) {\n        // Exit fullscreen\n        zoomOut()\n      }\n    },\n    [zoomOut, expanded]\n  )\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", controlKeys, false)\n\n    return () => {\n      document.removeEventListener(\"keydown\", controlKeys, false)\n    }\n  }, [controlKeys])\n\n  return useMemo(() => {\n    return { expanded, zoomIn, zoomOut, fullHeight, fullWidth }\n  }, [expanded, zoomIn, zoomOut, fullHeight, fullWidth])\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ComponentType, ReactElement } from \"react\"\n\nimport hoistNonReactStatics from \"hoist-non-react-statics\"\n\nimport ElementFullscreenWrapper from \"@streamlit/lib/src/components/shared/ElementFullscreen/ElementFullscreenWrapper\"\n\nfunction withFullScreenWrapper<P extends { width: number }>(\n  WrappedComponent: ComponentType<React.PropsWithChildren<P>>\n): ComponentType<React.PropsWithChildren<P>> {\n  const ComponentWithFullScreenWrapper = (props: P): ReactElement => {\n    return (\n      <ElementFullscreenWrapper width={props.width}>\n        <WrappedComponent {...(props as P)}></WrappedComponent>\n      </ElementFullscreenWrapper>\n    )\n  }\n  ComponentWithFullScreenWrapper.displayName = `withFullScreenWrapper(${\n    WrappedComponent.displayName || WrappedComponent.name\n  })`\n\n  // Static methods must be copied over\n  // https://en.reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n  return hoistNonReactStatics(ComponentWithFullScreenWrapper, WrappedComponent)\n}\n\nexport default withFullScreenWrapper\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BaseGridCell,\n  Theme as GlideTheme,\n  GridCell,\n  GridCellKind,\n  GridColumn,\n  LoadingCell,\n  TextCell,\n} from \"@glideapps/glide-data-grid\"\nimport merge from \"lodash/merge\"\nimport toString from \"lodash/toString\"\nimport moment, { Moment } from \"moment\"\nimport \"moment-duration-format\"\nimport \"moment-timezone\"\nimport numbro from \"numbro\"\nimport { sprintf } from \"sprintf-js\"\n\nimport {\n  Type as ArrowType,\n  Quiver,\n} from \"@streamlit/lib/src/dataframes/Quiver\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\nimport {\n  isNullOrUndefined,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\n/**\n * Interface used for defining the properties (configuration options) of a column.\n * These options can also be used to overwrite from user-defined column config.\n */\nexport interface BaseColumnProps {\n  // The id of the column:\n  readonly id: string\n  // The name of the column from the original data:\n  readonly name: string\n  // The display title of the column:\n  readonly title: string\n  // The index number of the column:\n  readonly indexNumber: number\n  // The arrow data type of the column:\n  readonly arrowType: ArrowType\n  // If `True`, the column can be edited:\n  readonly isEditable: boolean\n  // If `True`, the column is hidden (will not be shown):\n  readonly isHidden: boolean\n  // If `True`, the column is a table index:\n  readonly isIndex: boolean\n  // If `True`, the column is a stretched:\n  readonly isStretched: boolean\n  // If `True`, a value is required before the cell or row can be submitted:\n  readonly isRequired?: boolean\n  // The initial width of the column:\n  readonly width?: number\n  // A help text that is displayed on hovering the column header.\n  readonly help?: string\n  // Configuration options related to the column type:\n  readonly columnTypeOptions?: Record<string, any>\n  // The content alignment of the column:\n  readonly contentAlignment?: \"left\" | \"center\" | \"right\"\n  // The default value of the column used when adding a new row:\n  readonly defaultValue?: string | number | boolean\n  // Theme overrides for this column:\n  readonly themeOverride?: Partial<GlideTheme>\n  // A custom icon to be displayed in the column header:\n  readonly icon?: string\n  // The group that this column belongs to.\n  readonly group?: string\n}\n\n/**\n * The interface that is implemented by any column type.\n */\nexport interface BaseColumn extends BaseColumnProps {\n  readonly kind: string\n  // Defines the sort mode that should be used for this column type:\n  // default: Sorts by interpreting all values as strings.\n  // smart: Detects if value is a number or a string and sorts accordingly.\n  // raw: Sorts based on the actual type of the cell data value.\n  readonly sortMode: \"default\" | \"raw\" | \"smart\"\n  // Validate the input data for compatibility with the column type:\n  // Either returns a boolean indicating if the data is valid or not, or\n  // returns the corrected value.\n  validateInput?(data?: any): boolean | any\n  // Get a cell with the provided data for the column type:\n  getCell(data?: any, validate?: boolean): GridCell\n  // Get the raw value of the given cell:\n  getCellValue(cell: GridCell): any | null\n}\n\n/**\n * A type that describes the function signature used to create a column based on\n * some column properties.\n */\nexport type ColumnCreator = {\n  (props: BaseColumnProps, theme: EmotionTheme): BaseColumn\n  readonly isEditableType: boolean\n}\n\n// See pydantic for inspiration: https://pydantic-docs.helpmanual.io/usage/types/#booleans\nconst BOOLEAN_TRUE_VALUES = [\"true\", \"t\", \"yes\", \"y\", \"on\", \"1\"]\nconst BOOLEAN_FALSE_VALUES = [\"false\", \"f\", \"no\", \"n\", \"off\", \"0\"]\n\n/**\n * Interface used for indicating if a cell contains an error.\n */\ninterface ErrorCell extends TextCell {\n  readonly isError: true\n}\n\n/**\n * Returns a cell with an error message.\n *\n * @param errorMsg: A short error message to use as display value.\n * @param errorDetails: The full error message to show when the user\n *                     clicks on a cell.\n *\n * @return a read-only GridCell object that can be used by glide-data-grid.\n */\nexport function getErrorCell(errorMsg: string, errorDetails = \"\"): ErrorCell {\n  errorMsg = `⚠️ ${errorMsg}`\n  return {\n    kind: GridCellKind.Text,\n    readonly: true,\n    allowOverlay: true,\n    data: errorMsg + (errorDetails ? `\\n\\n${errorDetails}\\n` : \"\"),\n    displayData: errorMsg,\n    isError: true,\n  } as ErrorCell\n}\n\n/**\n * Returns `true` if the given cell contains an error.\n * This can happen if the value type is not compatible with\n * the given value type.\n */\nexport function isErrorCell(cell: GridCell): cell is ErrorCell {\n  return cell.hasOwnProperty(\"isError\") && (cell as ErrorCell).isError\n}\n\ninterface CellWithTooltip extends BaseGridCell {\n  readonly tooltip: string\n}\n\n/**\n * Returns `true` if the given cell has a tooltip\n */\nexport function hasTooltip(cell: BaseGridCell): cell is CellWithTooltip {\n  return (\n    cell.hasOwnProperty(\"tooltip\") && (cell as CellWithTooltip).tooltip !== \"\"\n  )\n}\n/**\n * Interface used for indicating if a cell contains no value.\n */\ninterface MissingValueCell extends BaseGridCell {\n  readonly isMissingValue: true\n}\n\n/**\n * Returns `true` if the given cell contains no value (-> missing value).\n * For example, a number cell that contains null is interpreted as a missing value.\n */\nexport function isMissingValueCell(\n  cell: BaseGridCell\n): cell is MissingValueCell {\n  return (\n    cell.hasOwnProperty(\"isMissingValue\") &&\n    (cell as MissingValueCell).isMissingValue\n  )\n}\n\n/**\n * Returns an empty cell.\n */\nexport function getEmptyCell(missingCell = false): LoadingCell {\n  if (missingCell) {\n    return {\n      kind: GridCellKind.Loading,\n      allowOverlay: false,\n      isMissingValue: true,\n    } as LoadingCell\n  }\n\n  return {\n    kind: GridCellKind.Loading,\n    allowOverlay: false,\n  } as LoadingCell\n}\n\n/**\n * Returns an empty text cell.\n *\n * @param readonly: If true, returns a read-only version of the cell.\n * @param faded: If true, returns a faded version of the cell.\n *\n * @return a GridCell object that can be used by glide-data-grid.\n */\nexport function getTextCell(readonly: boolean, faded: boolean): TextCell {\n  const style = faded ? \"faded\" : \"normal\"\n  return {\n    kind: GridCellKind.Text,\n    data: \"\",\n    displayData: \"\",\n    allowOverlay: true,\n    readonly,\n    style,\n  } as TextCell\n}\n\n/**\n * Converts from our BaseColumn format to the glide-data-grid compatible GridColumn.\n */\nexport function toGlideColumn(column: BaseColumn): GridColumn {\n  return {\n    id: column.id,\n    title: column.title,\n    hasMenu: false,\n    themeOverride: column.themeOverride,\n    icon: column.icon,\n    group: column.group,\n    ...(column.isStretched && {\n      grow: column.isIndex ? 1 : 3,\n    }),\n    ...(column.width && {\n      width: column.width,\n    }),\n  } as GridColumn\n}\n\n/**\n * Merges the default column parameters with the user-defined column parameters.\n *\n * @param defaultParams - The default column parameters.\n * @param userParams - The user-defined column parameters.\n *\n * @returns The merged column parameters.\n */\nexport function mergeColumnParameters(\n  defaultParams: Record<string, any> | undefined | null,\n  userParams: Record<string, any> | undefined | null\n): Record<string, any> {\n  if (isNullOrUndefined(defaultParams)) {\n    return userParams || {}\n  }\n\n  if (isNullOrUndefined(userParams)) {\n    return defaultParams || {}\n  }\n\n  return merge(defaultParams, userParams)\n}\n\n/**\n * Converts the given value of unknown type to an array without\n * the risks of any exceptions.\n *\n * @param data - The value to convert to an array.\n *\n * @returns The converted array or an empty array if the value cannot be interpreted as an array.\n */\nexport function toSafeArray(data: any): any[] {\n  if (isNullOrUndefined(data)) {\n    return []\n  }\n\n  if (typeof data === \"number\" || typeof data === \"boolean\") {\n    // Single number or boolean\n    return [data]\n  }\n\n  if (data instanceof Uint8Array) {\n    // Stlite: Uint8Array is used for any list data in fastparquet.\n    // It stores a json string representation in the Uint8Array.\n    // We need to convert this to a string first\n    // to later have it load as json.\n    data = new TextDecoder(\"utf-8\").decode(data)\n  }\n\n  if (typeof data === \"string\") {\n    if (data === \"\") {\n      // Empty string\n      return []\n    }\n\n    // Try to parse string to an array\n    if (data.trim().startsWith(\"[\") && data.trim().endsWith(\"]\")) {\n      // Support for JSON arrays: [\"foo\", 1, null, \"test\"]\n      try {\n        return JSON.parse(data)\n      } catch (error) {\n        return [data]\n      }\n    } else {\n      // Support for comma-separated values: \"foo,1,,test\"\n      return data.split(\",\")\n    }\n  }\n\n  try {\n    const parsedData = JSON.parse(\n      JSON.stringify(data, (_key, value) =>\n        typeof value === \"bigint\" ? Number(value) : value\n      )\n    )\n    if (!Array.isArray(parsedData)) {\n      return [toSafeString(parsedData)]\n    }\n\n    return parsedData.map((value: any) =>\n      [\"string\", \"number\", \"boolean\", \"null\"].includes(typeof value)\n        ? value\n        : toSafeString(value)\n    )\n  } catch (error) {\n    return [toSafeString(data)]\n  }\n}\n\n/**\n * Converts the given value of unknown type to a string without\n * the risks of any exceptions.\n *\n * @param data - The value to convert to a string.\n *\n * @return The converted string or a string showing the type of the object as fallback.\n */\nexport function toSafeString(data: any): string {\n  try {\n    try {\n      return toString(data)\n    } catch (error) {\n      return JSON.stringify(data, (_key, value) =>\n        typeof value === \"bigint\" ? Number(value) : value\n      )\n    }\n  } catch (error) {\n    // This is most likely an object that cannot be converted to a string\n    // console.log converts this to `[object Object]` which we are doing here as well:\n    return `[${typeof data}]`\n  }\n}\n\n/**\n * Converts the given value of unknown type to a boolean without\n * the risks of any exceptions.\n *\n * @param value - The value to convert to a boolean.\n *\n * @return The converted boolean, null if the value is empty or undefined if the\n *         value cannot be interpreted as a boolean.\n */\nexport function toSafeBoolean(value: any): boolean | null | undefined {\n  if (isNullOrUndefined(value)) {\n    return null\n  }\n\n  if (typeof value === \"boolean\") {\n    return value\n  }\n\n  const cleanedValue = toSafeString(value).toLowerCase().trim()\n  if (cleanedValue === \"\") {\n    return null\n  } else if (BOOLEAN_TRUE_VALUES.includes(cleanedValue)) {\n    return true\n  } else if (BOOLEAN_FALSE_VALUES.includes(cleanedValue)) {\n    return false\n  }\n  // The value cannot be interpreted as boolean\n  return undefined\n}\n\n/**\n * Converts the given value of unknown type to a number without\n * the risks of any exceptions.\n *\n * @param value - The value to convert to a number.\n *\n * @returns The converted number or null if the value is empty or undefined or NaN if the\n *          value cannot be interpreted as a number.\n */\nexport function toSafeNumber(value: any): number | null {\n  // TODO(lukasmasuch): Should this return null as replacement for NaN?\n\n  if (isNullOrUndefined(value)) {\n    return null\n  }\n\n  if (Array.isArray(value)) {\n    return NaN\n  }\n\n  if (typeof value === \"string\") {\n    if (value.trim().length === 0) {\n      // Empty string should return null\n      return null\n    }\n\n    try {\n      // Try to convert string to number via numbro:\n      // https://numbrojs.com/old-format.html#unformat\n      const unformattedValue = numbro.unformat(value.trim())\n      if (notNullOrUndefined(unformattedValue)) {\n        return unformattedValue\n      }\n    } catch (error) {\n      // Do nothing here\n    }\n  } else if (value instanceof Int32Array) {\n    // int values need to be extracted this way:\n    // eslint-disable-next-line prefer-destructuring\n    return Number(value[0])\n  }\n\n  return Number(value)\n}\n\n/**\n * Formats the given number to a string based on a provided format or the default format.\n *\n * @param value - The number to format.\n * @param format - The format to use. If not provided, the default format is used.\n * @param maxPrecision - The maximum number of decimals to show. This is only used by the default format.\n *                     If not provided, the default is 4 decimals and trailing zeros are hidden.\n *\n * @returns The formatted number as a string.\n */\nexport function formatNumber(\n  value: number,\n  format?: string | undefined,\n  maxPrecision?: number | undefined\n): string {\n  if (Number.isNaN(value) || !Number.isFinite(value)) {\n    return \"\"\n  }\n\n  if (isNullOrUndefined(format) || format === \"\") {\n    if (maxPrecision === 0) {\n      // Numbro is unable to format the number with 0 decimals.\n      value = Math.round(value)\n    }\n    return numbro(value).format(\n      notNullOrUndefined(maxPrecision)\n        ? `0,0.${\"0\".repeat(maxPrecision)}`\n        : `0,0.[0000]` // If no precision is given, use 4 decimals and hide trailing zeros\n    )\n  }\n\n  if (format === \"percent\") {\n    return new Intl.NumberFormat(undefined, {\n      style: \"percent\",\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(value)\n  } else if ([\"compact\", \"scientific\", \"engineering\"].includes(format)) {\n    return new Intl.NumberFormat(undefined, {\n      notation: format as any,\n    }).format(value)\n  } else if (format === \"duration[ns]\") {\n    return moment.duration(value / (1000 * 1000), \"milliseconds\").humanize()\n  } else if (format.startsWith(\"period[\")) {\n    return Quiver.formatPeriodType(BigInt(value), format as any)\n  }\n\n  return sprintf(format, value)\n}\n\n/**\n * Formats the given date to a string with the given format.\n *\n * @param momentDate The moment date to format.\n * @param format The format to use.\n *   If the format is `locale` the date will be formatted according to the user's locale.\n *   If the format is `relative` the date will be formatted as a relative time (e.g. \"2 hours ago\").\n *   Otherwise, it is interpreted as momentJS format string: https://momentjs.com/docs/#/displaying/format/\n * @returns The formatted date as a string.\n */\nexport function formatMoment(momentDate: Moment, format: string): string {\n  if (format === \"locale\") {\n    return new Intl.DateTimeFormat(undefined, {\n      dateStyle: \"medium\",\n      timeStyle: \"medium\",\n    }).format(momentDate.toDate())\n  } else if (format === \"distance\") {\n    return momentDate.fromNow()\n  } else if (format === \"relative\") {\n    return momentDate.calendar()\n  }\n  return momentDate.format(format)\n}\n\n/**\n * Converts the given value of unknown type to a date without\n * the risks of any exceptions.\n *\n * Note: Unix timestamps are only supported in seconds.\n *\n * @param value - The value to convert to a date.\n *\n * @returns The converted date or null if the value cannot be interpreted as a date.\n */\nexport function toSafeDate(value: any): Date | null | undefined {\n  if (isNullOrUndefined(value)) {\n    return null\n  }\n\n  // Return the value as-is if it is already a date\n  if (value instanceof Date) {\n    if (!isNaN(value.getTime())) {\n      return value\n    }\n    return undefined\n  }\n\n  if (typeof value === \"string\" && value.trim().length === 0) {\n    // Empty string should return null\n    return null\n  }\n\n  try {\n    const parsedTimestamp = Number(value)\n    if (!isNaN(parsedTimestamp)) {\n      // Unix timestamps can be have different units.\n      // As default, we handle the unit as second, but\n      // if it larger than a certain threshold, we assume\n      // a different unit. This is not 100% accurate, but\n      // should be good enough since it is unlikely that\n      // users are actually referring to years >= 5138.\n      let timestampInSeconds = parsedTimestamp\n      if (parsedTimestamp >= 10 ** 18) {\n        // Assume that the timestamp is in nanoseconds\n        // and adjust to seconds\n        timestampInSeconds = parsedTimestamp / 1000 ** 3\n      } else if (parsedTimestamp >= 10 ** 15) {\n        // Assume that the timestamp is in microseconds\n        // and adjust to seconds\n        timestampInSeconds = parsedTimestamp / 1000 ** 2\n      } else if (parsedTimestamp >= 10 ** 12) {\n        // Assume that the timestamp is in milliseconds\n        // and adjust to seconds\n        timestampInSeconds = parsedTimestamp / 1000\n      }\n\n      // Parse it as a unix timestamp in seconds\n      const parsedMomentDate = moment.unix(timestampInSeconds).utc()\n      if (parsedMomentDate.isValid()) {\n        return parsedMomentDate.toDate()\n      }\n    }\n\n    if (typeof value === \"string\") {\n      // Try to parse string via momentJS:\n      const parsedMomentDate = moment.utc(value)\n      if (parsedMomentDate.isValid()) {\n        return parsedMomentDate.toDate()\n      }\n      // The pasted value was not a valid date string\n      // Try to interpret value as time string instead (HH:mm:ss)\n      const parsedMomentTime = moment.utc(value, [\n        moment.HTML5_FMT.TIME_MS, // HH:mm:ss.SSS\n        moment.HTML5_FMT.TIME_SECONDS, // HH:mm:ss\n        moment.HTML5_FMT.TIME, // HH:mm\n      ])\n      if (parsedMomentTime.isValid()) {\n        return parsedMomentTime.toDate()\n      }\n    }\n  } catch (error) {\n    return undefined\n  }\n\n  // Unable to interpret this value as a date:\n  return undefined\n}\n\n/**\n * Count the number of decimals in a number.\n *\n * @param {number} value - The number to count the decimals for.\n *\n * @returns {number} The number of decimals.\n */\nexport function countDecimals(value: number): number {\n  if (value % 1 === 0) {\n    return 0\n  }\n\n  let numberStr = value.toString()\n\n  if (numberStr.indexOf(\"e\") !== -1) {\n    // Handle scientific notation\n    numberStr = value.toLocaleString(\"fullwide\", {\n      useGrouping: false,\n      maximumFractionDigits: 20,\n    })\n  }\n\n  if (numberStr.indexOf(\".\") === -1) {\n    // Fallback to 0 decimals, this can happen with\n    // extremely large or small numbers\n    return 0\n  }\n\n  return numberStr.split(\".\")[1].length\n}\n\n/**\n * Truncates a number to a specified number of decimal places without rounding.\n *\n * @param {number} value - The number to be truncated.\n * @param {number} decimals - The number of decimal places to preserve after truncation.\n *\n * @returns {number} The truncated number.\n *\n * @example\n * truncateDecimals(3.14159265, 2); // returns 3.14\n * truncateDecimals(123.456, 0); // returns 123\n */\nexport function truncateDecimals(value: number, decimals: number): number {\n  return decimals === 0\n    ? Math.trunc(value)\n    : Math.trunc(value * 10 ** decimals) / 10 ** decimals\n}\n\nconst LINE_BREAK_REGEX = new RegExp(/(\\r\\n|\\n|\\r)/gm)\n\n/**\n * Removes all line breaks from the given text.\n * @param text - The text to remove line breaks from.\n * @returns The text without line breaks.\n */\nexport function removeLineBreaks(text: string): string {\n  if (text.indexOf(\"\\n\") !== -1) {\n    return text.replace(LINE_BREAK_REGEX, \" \")\n  }\n  return text\n}\n\n/**\n * Determines the correct value to display in a link cell based on the `href` and `regexPattern` parameters.\n *\n * @param href - The raw url value.\n * @param displayTextRegex - The regex pattern which will be applied to the `href`. If no match is found, then we return the `href`.\n * @returns - The string value to be displayed in the cell.\n *\n * * @example\n * const regex = new RegExp(\"https:\\/\\/(.*?)\\.streamlit\\.app\")\n * const regex2 = new RegExp(\"https:\\/\\/roadmap\\.(.*?)\\.app\")\n * getLinkDisplayValueFromRegex(regex, \"https://roadmap.streamlit.app\"); // returns \"roadmap\"\n * getLinkDisplayValueFromRegex(regex, \"https://roadmap.streamlit.app\"); // returns \"streamlit\"\n */\nexport function getLinkDisplayValueFromRegex(\n  displayTextRegex: RegExp,\n  href?: string | null\n): string {\n  if (isNullOrUndefined(href)) {\n    return \"\"\n  }\n\n  try {\n    // apply the regex pattern to display the value\n    const patternMatch = href.match(displayTextRegex)\n    if (patternMatch && patternMatch[1] !== undefined) {\n      // return the first matching group\n      // Since this might be a URI encoded value, we decode it.\n      return decodeURI(patternMatch[1])\n    }\n\n    // if the regex doesn't find a match with the url, just use the url as display value\n    return href\n  } catch (error) {\n    // if there was any error return the href\n    return href\n  }\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, GridCellKind, TextCell } from \"@glideapps/glide-data-grid\"\n\nimport {\n  isNullOrUndefined,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  removeLineBreaks,\n  toSafeString,\n} from \"./utils\"\n\n/**\n * A column type for read-only cells used as a fallback\n * for data types that are currently not supported for editing.\n */\nfunction ObjectColumn(props: BaseColumnProps): BaseColumn {\n  const cellTemplate = {\n    kind: GridCellKind.Text,\n    data: \"\",\n    displayData: \"\",\n    allowOverlay: true,\n    contentAlignment: props.contentAlignment,\n    readonly: true,\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as TextCell\n  return {\n    ...props,\n    kind: \"object\",\n    sortMode: \"default\",\n    isEditable: false, // Object columns are read-only.\n    getCell(data?: any): GridCell {\n      try {\n        const cellData = notNullOrUndefined(data) ? toSafeString(data) : null\n        const displayData = notNullOrUndefined(cellData)\n          ? removeLineBreaks(cellData) // Remove line breaks to show all content in the cell\n          : \"\"\n        return {\n          ...cellTemplate,\n          data: cellData,\n          displayData,\n          isMissingValue: isNullOrUndefined(data),\n        } as TextCell\n      } catch (error) {\n        return getErrorCell(\n          toSafeString(data),\n          `The value cannot be interpreted as a string. Error: ${error}`\n        )\n      }\n    },\n    getCellValue(cell: TextCell): string | null {\n      return cell.data === undefined ? null : cell.data\n    },\n  }\n}\n\nObjectColumn.isEditableType = false\n\nexport default ObjectColumn\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, GridCellKind, TextCell } from \"@glideapps/glide-data-grid\"\n\nimport {\n  isNullOrUndefined,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  removeLineBreaks,\n  toSafeString,\n} from \"./utils\"\n\nexport interface TextColumnParams {\n  // The maximum number of characters the user can enter into the text input.\n  readonly max_chars?: number\n  // Regular expression that the input's value must match for the value to pass\n  readonly validate?: string\n}\n\n/**\n * A column that supports rendering & editing of text values.\n */\nfunction TextColumn(props: BaseColumnProps): BaseColumn {\n  const parameters = (props.columnTypeOptions as TextColumnParams) || {}\n\n  let validateRegex: RegExp | string | undefined = undefined\n\n  if (parameters.validate) {\n    // Prepare the validation regex:\n    try {\n      // u flag allows unicode characters\n      // s flag allows . to match newlines\n      validateRegex = new RegExp(parameters.validate, \"us\")\n    } catch (error) {\n      // Put error message in validateRegex so we can display it in the cell\n      validateRegex = `Invalid validate regex: ${parameters.validate}.\\nError: ${error}`\n    }\n  }\n\n  const cellTemplate = {\n    kind: GridCellKind.Text,\n    data: \"\",\n    displayData: \"\",\n    allowOverlay: true,\n    contentAlignment: props.contentAlignment,\n    readonly: !props.isEditable,\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as TextCell\n\n  const validateInput = (data?: any): boolean | string => {\n    if (isNullOrUndefined(data)) {\n      if (props.isRequired) {\n        return false\n      }\n      return true\n    }\n\n    let cellData = toSafeString(data)\n    // A flag to indicate whether the value has been auto-corrected.\n    // This is used to decide if we should return the corrected value or true.\n    // But we still run all other validations on the corrected value below.\n    let corrected = false\n\n    if (parameters.max_chars && cellData.length > parameters.max_chars) {\n      cellData = cellData.slice(0, parameters.max_chars)\n      corrected = true\n    }\n\n    if (\n      validateRegex instanceof RegExp &&\n      validateRegex.test(cellData) === false\n    ) {\n      return false\n    }\n\n    return corrected ? cellData : true\n  }\n\n  return {\n    ...props,\n    kind: \"text\",\n    sortMode: \"default\",\n    validateInput,\n    getCell(data?: any, validate?: boolean): GridCell {\n      if (typeof validateRegex === \"string\") {\n        // The regex is invalid, we return an error to indicate this\n        // to the developer:\n        return getErrorCell(toSafeString(data), validateRegex)\n      }\n\n      if (validate) {\n        const validationResult = validateInput(data)\n        if (validationResult === false) {\n          // The input is invalid, we return an error cell which will\n          // prevent this cell to be inserted into the table.\n          // This cell should never be actually displayed to the user.\n          // It's mostly used internally to prevent invalid input to be\n          // inserted into the table.\n          return getErrorCell(toSafeString(data), \"Invalid input.\")\n        } else if (typeof validationResult === \"string\") {\n          // Apply corrections:\n          data = validationResult\n        }\n      }\n\n      try {\n        const cellData = notNullOrUndefined(data) ? toSafeString(data) : null\n        const displayData = notNullOrUndefined(cellData)\n          ? removeLineBreaks(cellData) // Remove line breaks to show all content in the cell\n          : \"\"\n        return {\n          ...cellTemplate,\n          isMissingValue: isNullOrUndefined(cellData),\n          data: cellData,\n          displayData,\n        } as TextCell\n      } catch (error) {\n        // This should never happen, but if it does, we want to show an error\n        return getErrorCell(\n          \"Incompatible value\",\n          `The value cannot be interpreted as string. Error: ${error}`\n        )\n      }\n    },\n    getCellValue(cell: TextCell): string | null {\n      return cell.data === undefined ? null : cell.data\n    },\n  }\n}\n\nTextColumn.isEditableType = true\n\nexport default TextColumn\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, GridCellKind } from \"@glideapps/glide-data-grid\"\nimport { DatePickerType } from \"@glideapps/glide-data-grid-cells\"\nimport moment, { Moment } from \"moment-timezone\"\n\nimport {\n  isNullOrUndefined,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  formatMoment,\n  getErrorCell,\n  mergeColumnParameters,\n  toSafeDate,\n  toSafeString,\n} from \"./utils\"\n\n/**\n * Apply a timezone to a MomentJS date.\n *\n * @param momentDate The date to apply the timezone to\n * @param timezone The timezone to apply. This can be a timezone name\n * (e.g. \"America/New_York\" or \"UTC\") or a UTC offset (e.g. \"+05:00\" or \"-08:00\")\n * @returns The date with the timezone applied\n */\nfunction applyTimezone(momentDate: Moment, timezone: string): Moment {\n  if (timezone.startsWith(\"+\") || timezone.startsWith(\"-\")) {\n    // Timezone is a UTC offset (e.g. \"+05:00\" or \"-08:00\")\n    momentDate = momentDate.utcOffset(timezone, false)\n  } else {\n    // Timezone is a timezone name (e.g. \"America/New_York\" or \"UTC\")\n    momentDate = momentDate.tz(timezone)\n  }\n  return momentDate\n}\n\nexport interface DateTimeColumnParams {\n  // A momentJS formatting syntax to format the display value.\n  readonly format?: string\n  // Specifies the granularity that the value must adhere.\n  // For time and datetime, this is the number of seconds between each allowed value.\n  // For date, this is the number of days between each allowed value.\n  readonly step?: number\n  // A timezone identifier, e.g. \"America/New_York\", \"+05:00\", or \"UTC\"\n  readonly timezone?: string\n  // The minimum allowed value for editing. This needs to be an ISO formatted datetime/date/time string (UTC).\n  readonly min_value?: string\n  // The maximum allowed value for editing. This needs to be an ISO formatted datetime/date/time string (UTC).\n  readonly max_value?: string\n}\n\n/**\n * Base class for datetime columns. This class is not meant to be used directly.\n * Instead, use the DateColumn, TimeColumn, or DateTimeColumn classes.\n *\n * @param kind The kind of column. This should be one of \"date\", \"time\", or \"datetime\".\n * @param props The column properties\n * @param defaultFormat The default format to use for rendering and copy data\n * @param defaultStep The default step to use, can be overridden by the user\n * @param inputType The type of input to use for editing. This should be one of \"datetime-local\", \"time\", or \"date\".\n * @param toISOString A function that converts a Date object to an ISO formatted string\n * @param timezone The timezone to use to make the datetime values timezone aware.\n *\n * @returns A BaseColumn object\n */\nfunction BaseDateTimeColumn(\n  kind: string,\n  props: BaseColumnProps,\n  defaultFormat: string, // used for rendering and copy data\n  defaultStep: number,\n  inputType: \"datetime-local\" | \"time\" | \"date\",\n  toISOString: (date: Date) => string,\n  timezone?: string\n): BaseColumn {\n  const parameters = mergeColumnParameters(\n    // Default parameters:\n    {\n      format: defaultFormat,\n      step: defaultStep,\n      timezone,\n    },\n    // User parameters:\n    props.columnTypeOptions\n  ) as DateTimeColumnParams\n\n  let defaultTimezoneOffset: number | undefined = undefined\n  if (notNullOrUndefined(parameters.timezone)) {\n    // We try to determine the timezone offset based on today's date\n    // This is needed for the date picker to work correctly when the value is null\n    // TODO(lukasmasuch): But this might not be correct for dates in the past or future\n    // since the timezone offset might have changed based on a timezone name.\n    try {\n      defaultTimezoneOffset =\n        applyTimezone(moment(), parameters.timezone)?.utcOffset() || undefined\n    } catch (error) {\n      // Do nothing\n    }\n  }\n\n  let minDate: Date | undefined = undefined\n  if (notNullOrUndefined(parameters.min_value)) {\n    minDate = toSafeDate(parameters.min_value) || undefined\n  }\n\n  let maxDate: Date | undefined = undefined\n  if (notNullOrUndefined(parameters.max_value)) {\n    maxDate = toSafeDate(parameters.max_value) || undefined\n  }\n\n  const cellTemplate = {\n    kind: GridCellKind.Custom,\n    allowOverlay: true,\n    copyData: \"\",\n    readonly: !props.isEditable,\n    contentAlign: props.contentAlignment,\n    style: props.isIndex ? \"faded\" : \"normal\",\n    data: {\n      kind: \"date-picker-cell\",\n      date: undefined,\n      displayDate: \"\",\n      step: parameters.step?.toString() || \"1\",\n      format: inputType,\n      min: minDate,\n      max: maxDate,\n    },\n  } as DatePickerType\n\n  const validateInput = (data?: any): boolean | Date => {\n    const cellData: Date | null | undefined = toSafeDate(data)\n    if (cellData === null) {\n      if (props.isRequired) {\n        return false\n      }\n      return true\n    }\n\n    if (cellData === undefined) {\n      // Input cannot be interpreted as a date\n      return false\n    }\n\n    // Apply min_value configuration option:\n    if (\n      notNullOrUndefined(minDate) &&\n      // We compare on a string level so that it also works correctly for time and date values\n      toISOString(cellData) < toISOString(minDate)\n    ) {\n      return false\n    }\n\n    // Apply min_value configuration option:\n    if (\n      notNullOrUndefined(maxDate) &&\n      toISOString(cellData) > toISOString(maxDate)\n    ) {\n      return false\n    }\n\n    // TODO: validate step size\n\n    return true\n  }\n\n  return {\n    ...props,\n    kind,\n    sortMode: \"default\",\n    validateInput,\n    getCell(data?: any, validate?: boolean): GridCell {\n      if (validate === true) {\n        const validationResult = validateInput(data)\n        if (validationResult === false) {\n          // The input is invalid, we return an error cell which will\n          // prevent this cell to be inserted into the table.\n          return getErrorCell(toSafeString(data), \"Invalid input.\")\n        } else if (validationResult instanceof Date) {\n          // Apply corrections:\n          data = validationResult\n        }\n      }\n\n      const cellData = toSafeDate(data)\n\n      let copyData = \"\"\n      let displayDate = \"\"\n      // Initialize with default offset base on today's date\n      let timezoneOffset = defaultTimezoneOffset\n\n      if (cellData === undefined) {\n        return getErrorCell(\n          toSafeString(data),\n          \"The value cannot be interpreted as a datetime object.\"\n        )\n      }\n\n      if (cellData !== null) {\n        // Convert to moment object\n        let momentDate = moment.utc(cellData)\n\n        if (!momentDate.isValid()) {\n          // The moment date should never be invalid here.\n          return getErrorCell(\n            toSafeString(cellData),\n            `This should never happen. Please report this bug. \\nError: ${momentDate.toString()}`\n          )\n        }\n\n        if (parameters.timezone) {\n          try {\n            momentDate = applyTimezone(momentDate, parameters.timezone)\n          } catch (error) {\n            return getErrorCell(\n              momentDate.toISOString(),\n              `Failed to adjust to the provided timezone: ${parameters.timezone}. \\nError: ${error}`\n            )\n          }\n\n          timezoneOffset = momentDate.utcOffset()\n        }\n\n        try {\n          displayDate = formatMoment(\n            momentDate,\n            parameters.format || defaultFormat\n          )\n        } catch (error) {\n          return getErrorCell(\n            momentDate.toISOString(),\n            `Failed to format the date for rendering with: ${parameters.format}. \\nError: ${error}`\n          )\n        }\n        // Copy data should always use the default format\n        copyData = formatMoment(momentDate, defaultFormat)\n      }\n\n      return {\n        ...cellTemplate,\n        copyData,\n        isMissingValue: isNullOrUndefined(cellData),\n        data: {\n          ...cellTemplate.data,\n          date: cellData,\n          displayDate,\n          timezoneOffset,\n        },\n      } as DatePickerType\n    },\n    getCellValue(cell: DatePickerType): string | null {\n      return isNullOrUndefined(cell?.data?.date)\n        ? null\n        : toISOString(cell.data.date)\n    },\n  }\n}\n\n/**\n * Creates a new datetime column.\n * A datetime column supports optimized rendering and editing for datetime values.\n *\n * @param props The column properties.\n * @returns The new column.\n */\nexport default function DateTimeColumn(props: BaseColumnProps): BaseColumn {\n  // Do a smart selection of the default format based on the step size\n  let defaultFormat = \"YYYY-MM-DD HH:mm:ss\"\n  if (props.columnTypeOptions?.step >= 60) {\n    defaultFormat = \"YYYY-MM-DD HH:mm\"\n  } else if (props.columnTypeOptions?.step < 1) {\n    defaultFormat = \"YYYY-MM-DD HH:mm:ss.SSS\"\n  }\n\n  const timezone: string | undefined = props.arrowType?.meta?.timezone\n  const hasTimezone: boolean =\n    notNullOrUndefined(timezone) ||\n    // Timezone can also be configure by the user:\n    notNullOrUndefined(props?.columnTypeOptions?.timezone)\n\n  return BaseDateTimeColumn(\n    \"datetime\",\n    props,\n    hasTimezone ? defaultFormat + \"Z\" : defaultFormat,\n    1,\n    \"datetime-local\",\n    (date: Date): string => {\n      if (hasTimezone) {\n        return date.toISOString()\n      }\n      return date.toISOString().replace(\"Z\", \"\")\n    },\n    timezone\n  )\n}\n\nDateTimeColumn.isEditableType = true\n\n/**\n * Creates a new time column.\n * A time column supports optimized rendering and editing for time values.\n *\n * @param props The column properties.\n * @returns The new column.\n */\nexport function TimeColumn(props: BaseColumnProps): BaseColumn {\n  // Do a smart selection of the default format based on the step size\n  let defaultFormat = \"HH:mm:ss\"\n  if (props.columnTypeOptions?.step >= 60) {\n    defaultFormat = \"HH:mm\"\n  } else if (props.columnTypeOptions?.step < 1) {\n    defaultFormat = \"HH:mm:ss.SSS\"\n  }\n\n  return BaseDateTimeColumn(\n    \"time\",\n    props,\n    defaultFormat,\n    1,\n    \"time\",\n    (date: Date): string => {\n      // Only return the time part of the ISO string:\n      return date.toISOString().split(\"T\")[1].replace(\"Z\", \"\")\n    }\n  )\n}\n\nTimeColumn.isEditableType = true\n\n/**\n * Creates a new date column.\n * A date column supports optimized rendering and editing for date values.\n *\n * @param props The column properties.\n * @returns The new column.\n */\nexport function DateColumn(props: BaseColumnProps): BaseColumn {\n  return BaseDateTimeColumn(\n    \"date\",\n    props,\n    \"YYYY-MM-DD\",\n    1,\n    \"date\",\n    (date: Date): string => {\n      // Only return the date part of the ISO string:\n      return date.toISOString().split(\"T\")[0]\n    }\n  )\n}\n\nDateColumn.isEditableType = true\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BooleanCell,\n  GridCell,\n  GridCellKind,\n} from \"@glideapps/glide-data-grid\"\n\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  toSafeBoolean,\n  toSafeString,\n} from \"./utils\"\n\n/**\n * A column type that supports optimized rendering and editing for boolean values\n * by using checkboxes.\n */\nfunction CheckboxColumn(props: BaseColumnProps): BaseColumn {\n  const cellTemplate = {\n    kind: GridCellKind.Boolean,\n    data: false,\n    allowOverlay: false, // no overlay possible\n    contentAlign: props.contentAlignment,\n    readonly: !props.isEditable,\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as BooleanCell\n\n  return {\n    ...props,\n    kind: \"checkbox\",\n    sortMode: \"default\",\n    getCell(data?: any): GridCell {\n      let cellData = null\n\n      cellData = toSafeBoolean(data)\n      if (cellData === undefined) {\n        return getErrorCell(\n          toSafeString(data),\n          `The value cannot be interpreted as boolean.`\n        )\n      }\n\n      // We are not setting isMissingValue here because the checkbox column\n      // does not work with the missing cell rendering.\n      return {\n        ...cellTemplate,\n        data: cellData,\n        isMissingValue: isNullOrUndefined(cellData),\n      } as BooleanCell\n    },\n    getCellValue(cell: BooleanCell): boolean | null {\n      return cell.data === undefined ? null : cell.data\n    },\n  }\n}\n\nCheckboxColumn.isEditableType = true\n\nexport default CheckboxColumn\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns true if a given arrow type name is an integer type.\n */\nexport function isIntegerType(arrowTypeName: string): boolean {\n  return (\n    (arrowTypeName.startsWith(\"int\") &&\n      !arrowTypeName.startsWith(\"interval\")) ||\n    arrowTypeName === \"range\" ||\n    arrowTypeName.startsWith(\"uint\")\n  )\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, GridCellKind, NumberCell } from \"@glideapps/glide-data-grid\"\n\nimport { Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport {\n  isNullOrUndefined,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport { isIntegerType } from \"@streamlit/lib/src/components/widgets/DataFrame/isIntegerType\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  countDecimals,\n  formatNumber,\n  getErrorCell,\n  mergeColumnParameters,\n  toSafeNumber,\n  toSafeString,\n  truncateDecimals,\n} from \"./utils\"\n\nexport interface NumberColumnParams {\n  // The minimum allowed value for editing. Is set to 0 for unsigned values.\n  readonly min_value?: number\n  // The maximum allowed value for editing.\n  readonly max_value?: number\n  // A formatting syntax (e.g. sprintf) to format the display value.\n  // This can be used for adding prefix or suffix, or changing the number of decimals of the display value.\n  readonly format?: string\n  // Specifies the granularity that the value must adhere.\n  // This will also influence the maximum precision. This will impact the number of decimals\n  // allowed to be entered as well as the number of decimals displayed (if format is not specified).\n  // This is set to 1 for integer types.\n  readonly step?: number\n}\n\n/**\n * A column types that supports optimized rendering and editing for numbers.\n * This supports float, integer, and unsigned integer types.\n */\nfunction NumberColumn(props: BaseColumnProps): BaseColumn {\n  const arrowTypeName = Quiver.getTypeName(props.arrowType)\n  let format = undefined\n  if (arrowTypeName === \"timedelta64[ns]\") {\n    // Use duration formatting for timedelta64[ns] type:\n    format = \"duration[ns]\"\n  } else if (arrowTypeName.startsWith(\"period[\")) {\n    // Use period formatting for period types:\n    format = arrowTypeName\n  }\n  const parameters = mergeColumnParameters(\n    // Default parameters:\n    {\n      // Set step to 1 for integer types\n      step: isIntegerType(arrowTypeName) ? 1 : undefined,\n      // if uint (unsigned int), only positive numbers are allowed\n      min_value: arrowTypeName.startsWith(\"uint\") ? 0 : undefined,\n      format,\n    } as NumberColumnParams,\n    // User parameters:\n    props.columnTypeOptions\n  ) as NumberColumnParams\n\n  const allowNegative =\n    isNullOrUndefined(parameters.min_value) || parameters.min_value < 0\n\n  const fixedDecimals =\n    notNullOrUndefined(parameters.step) && !Number.isNaN(parameters.step)\n      ? countDecimals(parameters.step)\n      : undefined\n\n  const cellTemplate = {\n    kind: GridCellKind.Number,\n    data: undefined,\n    displayData: \"\",\n    readonly: !props.isEditable,\n    allowOverlay: true,\n    contentAlign: props.contentAlignment || \"right\",\n    style: props.isIndex ? \"faded\" : \"normal\",\n    allowNegative,\n    fixedDecimals,\n    // We don't want to show any thousand separators\n    // in the cell overlay/editor:\n    thousandSeparator: \"\",\n  } as NumberCell\n\n  const validateInput = (data?: any): boolean | number => {\n    let cellData: number | null = toSafeNumber(data)\n\n    if (isNullOrUndefined(cellData)) {\n      if (props.isRequired) {\n        return false\n      }\n      return true\n    }\n\n    if (Number.isNaN(cellData)) {\n      return false\n    }\n\n    // A flag to indicate whether the value has been auto-corrected.\n    // This is used to decide if we should return the corrected value or true.\n    // But we still run all other validations on the corrected value below.\n    let corrected = false\n\n    // Apply max_value configuration option:\n    if (\n      notNullOrUndefined(parameters.max_value) &&\n      cellData > parameters.max_value\n    ) {\n      cellData = parameters.max_value\n      corrected = true\n    }\n\n    // Apply min_value configuration option:\n    if (\n      notNullOrUndefined(parameters.min_value) &&\n      cellData < parameters.min_value\n    ) {\n      // Only return false, since correcting it negatively impacts\n      // the user experience.\n      return false\n    }\n\n    // TODO(lukasmasuch): validate step size?\n    // if (notNullOrUndefined(parameters.step) && parameters.step !== 1)\n\n    return corrected ? cellData : true\n  }\n\n  return {\n    ...props,\n    kind: \"number\",\n    sortMode: \"smart\",\n    validateInput,\n    getCell(data?: any, validate?: boolean): GridCell {\n      if (validate === true) {\n        const validationResult = validateInput(data)\n        if (validationResult === false) {\n          // The input is invalid, we return an error cell which will\n          // prevent this cell to be inserted into the table.\n          // This cell should never be actually displayed to the user.\n          // It's mostly used internally to prevent invalid input to be\n          // inserted into the table.\n          return getErrorCell(toSafeString(data), \"Invalid input.\")\n        } else if (typeof validationResult === \"number\") {\n          // Apply corrections:\n          data = validationResult\n        }\n      }\n\n      let cellData: number | null = toSafeNumber(data)\n      let displayData = \"\"\n\n      if (notNullOrUndefined(cellData)) {\n        if (Number.isNaN(cellData)) {\n          return getErrorCell(\n            toSafeString(data),\n            \"The value cannot be interpreted as a number.\"\n          )\n        }\n\n        // Cut decimals:\n        if (notNullOrUndefined(fixedDecimals)) {\n          cellData = truncateDecimals(cellData, fixedDecimals)\n        }\n\n        // Check if the value is larger than the maximum supported value:\n        if (Number.isInteger(cellData) && !Number.isSafeInteger(cellData)) {\n          return getErrorCell(\n            toSafeString(data),\n            \"The value is larger than the maximum supported integer values in number columns (2^53).\"\n          )\n        }\n\n        try {\n          displayData = formatNumber(\n            cellData,\n            parameters.format,\n            fixedDecimals\n          )\n        } catch (error) {\n          return getErrorCell(\n            toSafeString(cellData),\n            notNullOrUndefined(parameters.format)\n              ? `Failed to format the number based on the provided format configuration: (${parameters.format}). Error: ${error}`\n              : `Failed to format the number. Error: ${error}`\n          )\n        }\n      }\n\n      return {\n        ...cellTemplate,\n        data: cellData,\n        displayData,\n        isMissingValue: isNullOrUndefined(cellData),\n        // We want to enforce the raw number without formatting when its copied:\n        copyData: isNullOrUndefined(cellData) ? \"\" : toSafeString(cellData),\n      } as NumberCell\n    },\n    getCellValue(cell: NumberCell): number | null {\n      return cell.data === undefined ? null : cell.data\n    },\n  }\n}\n\nNumberColumn.isEditableType = true\n\nexport default NumberColumn\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, GridCellKind } from \"@glideapps/glide-data-grid\"\nimport { DropdownCellType } from \"@glideapps/glide-data-grid-cells\"\n\nimport { Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport {\n  isNullOrUndefined,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  mergeColumnParameters,\n  toSafeBoolean,\n  toSafeNumber,\n  toSafeString,\n} from \"./utils\"\n\nexport interface SelectboxColumnParams {\n  /** A list of options available in the selectbox.\n   * Every value in the column needs to match one of the options.\n   */\n  readonly options: (string | number | boolean)[]\n}\n\n/**\n * A column type that supports optimized rendering and editing for categorical values\n * by using a selectbox. This is automatically used by categorical columns (Pandas).\n *\n */\nfunction SelectboxColumn(props: BaseColumnProps): BaseColumn {\n  // The selectbox column can be either string, number or boolean type\n  // based on the options type.\n  let dataType: \"number\" | \"boolean\" | \"string\" = \"string\"\n\n  const parameters = mergeColumnParameters(\n    // Default parameters:\n    {\n      options:\n        Quiver.getTypeName(props.arrowType) === \"bool\" ? [true, false] : [],\n    },\n    // User parameters:\n    props.columnTypeOptions\n  ) as SelectboxColumnParams\n\n  const uniqueTypes = new Set(parameters.options.map(x => typeof x))\n  if (uniqueTypes.size === 1) {\n    if (uniqueTypes.has(\"number\") || uniqueTypes.has(\"bigint\")) {\n      dataType = \"number\"\n    } else if (uniqueTypes.has(\"boolean\")) {\n      dataType = \"boolean\"\n    }\n  }\n\n  const cellTemplate = {\n    kind: GridCellKind.Custom,\n    allowOverlay: true,\n    copyData: \"\",\n    contentAlign: props.contentAlignment,\n    readonly: !props.isEditable,\n    style: props.isIndex ? \"faded\" : \"normal\",\n    data: {\n      kind: \"dropdown-cell\",\n      allowedValues: [\n        // Add empty option if the column is not configured as required:\n        ...(props.isRequired !== true ? [null] : []),\n        ...parameters.options\n          .filter(opt => opt !== null && opt !== \"\") // ignore empty option if it exists\n          .map(opt => toSafeString(opt)), // convert everything to string\n      ],\n      value: \"\",\n    },\n  } as DropdownCellType\n\n  return {\n    ...props,\n    kind: \"selectbox\",\n    sortMode: \"default\",\n    getCell(data?: any, validate?: boolean): GridCell {\n      // Empty string refers to a missing value\n      let cellData = null\n      if (notNullOrUndefined(data) && data !== \"\") {\n        cellData = toSafeString(data)\n      }\n\n      if (validate && !cellTemplate.data.allowedValues.includes(cellData)) {\n        return getErrorCell(\n          toSafeString(cellData),\n          `The value is not part of the allowed options.`\n        )\n      }\n\n      return {\n        ...cellTemplate,\n        isMissingValue: cellData === null,\n        copyData: cellData || \"\", // Column sorting is done via the copyData value\n        data: {\n          ...cellTemplate.data,\n          value: cellData,\n        },\n      } as DropdownCellType\n    },\n    getCellValue(cell: DropdownCellType): string | number | boolean | null {\n      if (isNullOrUndefined(cell.data?.value) || cell.data?.value === \"\") {\n        return null\n      }\n      if (dataType === \"number\") {\n        return toSafeNumber(cell.data?.value) ?? null\n      } else if (dataType === \"boolean\") {\n        return toSafeBoolean(cell.data?.value) ?? null\n      }\n      return cell.data?.value\n    },\n  }\n}\n\nSelectboxColumn.isEditableType = true\n\nexport default SelectboxColumn\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BubbleCell, GridCell, GridCellKind } from \"@glideapps/glide-data-grid\"\n\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  isMissingValueCell,\n  toSafeArray,\n  toSafeString,\n} from \"./utils\"\n\n/**\n * A column type that supports optimized rendering values of array/list types.\n */\nfunction ListColumn(props: BaseColumnProps): BaseColumn {\n  const cellTemplate = {\n    kind: GridCellKind.Bubble,\n    data: [],\n    allowOverlay: true,\n    contentAlign: props.contentAlignment,\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as BubbleCell\n\n  return {\n    ...props,\n    kind: \"list\",\n    sortMode: \"default\",\n    isEditable: false, // List column is always readonly\n    getCell(data?: any): GridCell {\n      const cellData = isNullOrUndefined(data) ? [] : toSafeArray(data)\n\n      return {\n        ...cellTemplate,\n        data: cellData,\n        isMissingValue: isNullOrUndefined(data),\n        copyData: isNullOrUndefined(data)\n          ? \"\"\n          : toSafeString(\n              cellData.map((x: any) =>\n                // Replace commas with spaces since commas are used to\n                // separate the list items.\n                typeof x === \"string\" && x.includes(\",\")\n                  ? x.replace(/,/g, \" \")\n                  : x\n              )\n            ),\n      } as BubbleCell\n    },\n    getCellValue(cell: BubbleCell): string[] | null {\n      if (isNullOrUndefined(cell.data) || isMissingValueCell(cell)) {\n        return null\n      }\n\n      return cell.data\n    },\n  }\n}\n\nListColumn.isEditableType = false\n\nexport default ListColumn\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Theme as GlideTheme,\n  GridCell,\n  GridCellKind,\n  NumberCell,\n  TextCell,\n  UriCell,\n} from \"@glideapps/glide-data-grid\"\nimport { DatePickerType } from \"@glideapps/glide-data-grid-cells\"\nimport moment from \"moment\"\n\nimport {\n  Type as ArrowType,\n  DataFrameCell,\n  Quiver,\n} from \"@streamlit/lib/src/dataframes/Quiver\"\nimport {\n  isNullOrUndefined,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  CheckboxColumn,\n  ColumnCreator,\n  DateColumn,\n  DateTimeColumn,\n  DateTimeColumnParams,\n  isErrorCell,\n  LinkColumnParams,\n  ListColumn,\n  NumberColumn,\n  NumberColumnParams,\n  ObjectColumn,\n  removeLineBreaks,\n  SelectboxColumn,\n  TextColumn,\n  TimeColumn,\n} from \"./columns\"\n\n/**\n * Extracts a CSS property value from a given CSS style string by using a regex.\n *\n * @param htmlElementId - The ID of the HTML element to extract the property for.\n * @param property - The css property to extract the value for.\n * @param cssStyle - The css style string.\n *\n * @return the CSS property value or undefined if the property is not found.\n */\nexport function extractCssProperty(\n  htmlElementId: string,\n  property: string,\n  cssStyle: string\n): string | undefined {\n  // This regex is supposed to extract the value of a CSS property\n  // for a specified HTML element ID from a CSS style string:\n  const regex = new RegExp(\n    `${htmlElementId}[,\\\\s].*{(?:[^}]*[\\\\s;]{1})?${property}:\\\\s*([^;}]+)[;]?.*}`,\n    \"gm\"\n  )\n  // Makes the regex simpler to match the element correctly:\n  cssStyle = cssStyle.replace(/{/g, \" {\")\n\n  const match = regex.exec(cssStyle)\n  if (match) {\n    return match[1].trim()\n  }\n\n  return undefined\n}\n/**\n * Applies pandas styler CSS to style the cell.\n *\n * @param cell: The cell to style.\n * @param cssId: The css ID of the cell.\n * @param cssStyles: All CSS styles from pandas styler.\n *\n * @return a styled grid cell.\n */\nexport function applyPandasStylerCss(\n  cell: GridCell,\n  cssId: string,\n  cssStyles: string\n): GridCell {\n  const themeOverride = {} as Partial<GlideTheme>\n\n  // Extract and apply the font color\n  const fontColor = extractCssProperty(cssId, \"color\", cssStyles)\n  if (fontColor) {\n    themeOverride.textDark = fontColor\n  }\n\n  // Extract and apply the background color\n  const backgroundColor = extractCssProperty(\n    cssId,\n    \"background-color\",\n    cssStyles\n  )\n  if (backgroundColor) {\n    themeOverride.bgCell = backgroundColor\n  }\n\n  if (backgroundColor === \"yellow\" && fontColor === undefined) {\n    // Yellow is used by pandas styler as the default highlight color.\n    // But yellow won't work well with our default font color in dark mode.\n    // Therefore, we are overriding the font color to our dark font color which\n    // always works well with yellow background.\n    themeOverride.textDark = \"#31333F\"\n  }\n\n  if (themeOverride) {\n    // Apply the background and font color in the theme override\n    return {\n      ...cell,\n      themeOverride,\n    }\n  }\n  return cell\n}\n\n/**\n * Maps the data type from Arrow to a column type.\n */\nexport function getColumnTypeFromArrow(arrowType: ArrowType): ColumnCreator {\n  let typeName = arrowType ? Quiver.getTypeName(arrowType) : null\n\n  if (!typeName) {\n    // Use object column as fallback\n    return ObjectColumn\n  }\n\n  typeName = typeName.toLowerCase().trim()\n  // Match based on arrow types\n  if ([\"unicode\", \"empty\", \"large_string[pyarrow]\"].includes(typeName)) {\n    return TextColumn\n  }\n\n  if ([\"datetime\", \"datetimetz\"].includes(typeName)) {\n    return DateTimeColumn\n  }\n  if (typeName === \"time\") {\n    return TimeColumn\n  }\n  if (typeName === \"date\") {\n    return DateColumn\n  }\n  if ([\"object\", \"bytes\"].includes(typeName)) {\n    return ObjectColumn\n  }\n  if ([\"bool\"].includes(typeName)) {\n    return CheckboxColumn\n  }\n  if (\n    [\n      \"int8\",\n      \"int16\",\n      \"int32\",\n      \"int64\",\n      \"uint8\",\n      \"uint16\",\n      \"uint32\",\n      \"uint64\",\n      \"float16\",\n      \"float32\",\n      \"float64\",\n      \"float96\",\n      \"float128\",\n      \"range\", // The default index in pandas uses a range type.\n      \"decimal\",\n    ].includes(typeName)\n  ) {\n    return NumberColumn\n  }\n  if (typeName === \"categorical\") {\n    return SelectboxColumn\n  }\n  if (typeName.startsWith(\"list\")) {\n    return ListColumn\n  }\n\n  return ObjectColumn\n}\n\n/**\n * Creates the column props for an index column from the Arrow metadata.\n *\n * @param data - The Arrow data.\n * @param indexPosition - The numeric position of the index column.\n *\n * @return the column props for the index column.\n */\nexport function getIndexFromArrow(\n  data: Quiver,\n  indexPosition: number\n): BaseColumnProps {\n  const arrowType = data.types.index[indexPosition]\n  const title = data.indexNames[indexPosition]\n  let isEditable = true\n\n  if (Quiver.getTypeName(arrowType) === \"range\") {\n    // Range indices are not editable\n    isEditable = false\n  }\n\n  return {\n    id: `index-${indexPosition}`,\n    name: title,\n    title,\n    isEditable,\n    arrowType,\n    isIndex: true,\n    isHidden: false,\n  } as BaseColumnProps\n}\n\n/**\n * Creates the column props for a data column from the Arrow metadata.\n *\n * @param data - The Arrow data.\n * @param columnPosition - The numeric position of the data column.\n *        Starts with 0 at the first non-index column.\n *\n * @return the column props for the data column.\n */\nexport function getColumnFromArrow(\n  data: Quiver,\n  columnPosition: number\n): BaseColumnProps {\n  // data.columns refers to the header rows (not sure about why it is named this way)\n  // It is a matrix of column names.\n  const columnHeaderNames = data.columns.map(column => column[columnPosition])\n  const title =\n    columnHeaderNames.length > 0\n      ? columnHeaderNames[columnHeaderNames.length - 1]\n      : \"\"\n\n  // If there are > 1 header columns, join all these headers with a \"/\"\n  // and use it as the group name, but ignore empty strings headers.\n  // This does not include the last column, which we use as the actual\n  // column name. E.g.\n  // columnHeaders = [\"a\", \"b\", \"c\"] -> group = \"a / b\" name: \"c\"\n  // columnHeaders = [\"\", \"b\", \"c\"] -> group = \"b\" name: \"c\"\n\n  const group =\n    columnHeaderNames.length > 1\n      ? columnHeaderNames\n          .filter(column => column !== \"\")\n          .slice(0, -1)\n          .join(\" / \")\n      : undefined\n\n  let arrowType = data.types.data[columnPosition]\n\n  if (isNullOrUndefined(arrowType)) {\n    // Use empty column type as fallback\n    arrowType = {\n      meta: null,\n      numpy_type: \"object\",\n      pandas_type: \"object\",\n    } as ArrowType\n  }\n\n  let columnTypeOptions\n  if (Quiver.getTypeName(arrowType) === \"categorical\") {\n    // Get the available categories and use it in column type metadata\n    const options = data.getCategoricalOptions(columnPosition)\n    if (notNullOrUndefined(options)) {\n      columnTypeOptions = {\n        options,\n      }\n    }\n  }\n\n  return {\n    id: `column-${title}-${columnPosition}`,\n    name: title,\n    title,\n    isEditable: true,\n    arrowType,\n    columnTypeOptions,\n    isIndex: false,\n    isHidden: false,\n    group,\n  } as BaseColumnProps\n}\n\n/**\n * Creates the column props for an empty index column.\n * This is used for DataFrames that don't have any index.\n * At least one column is required for glide.\n */\nexport function getEmptyIndexColumn(): BaseColumnProps {\n  return {\n    id: `empty-index`,\n    title: \"\",\n    indexNumber: 0,\n    isEditable: false,\n    isIndex: true,\n  } as BaseColumnProps\n}\n\n/**\n * Creates the column props for all columns from the Arrow metadata.\n *\n * @param data - The Arrow data.\n * @return the column props for all columns.\n */\nexport function getAllColumnsFromArrow(data: Quiver): BaseColumnProps[] {\n  const columns: BaseColumnProps[] = []\n\n  const { dimensions } = data\n  const numIndices = dimensions.headerColumns\n  const numColumns = dimensions.dataColumns\n\n  if (numIndices === 0 && numColumns === 0) {\n    // Tables that don't have any columns cause an exception in glide-data-grid.\n    // As a workaround, we are adding an empty index column in this case.\n    columns.push(getEmptyIndexColumn())\n    return columns\n  }\n\n  for (let i = 0; i < numIndices; i++) {\n    const column = {\n      ...getIndexFromArrow(data, i),\n      indexNumber: i,\n    } as BaseColumnProps\n\n    columns.push(column)\n  }\n\n  for (let i = 0; i < numColumns; i++) {\n    const column = {\n      ...getColumnFromArrow(data, i),\n      indexNumber: i + numIndices,\n    } as BaseColumnProps\n\n    columns.push(column)\n  }\n  return columns\n}\n\n/**\n * Returns a glide-data-grid compatible cell object based on the\n * cell data from the Quiver (Arrow) object. Different types of data will\n * result in different cell types.\n *\n * @param column - The colum of the cell.\n * @param arrowCell - The dataframe cell object from Arrow.\n * @param cssStyles - Optional css styles to apply on the cell.\n *\n * @return a GridCell object that can be used by glide-data-grid.\n */\nexport function getCellFromArrow(\n  column: BaseColumn,\n  arrowCell: DataFrameCell,\n  cssStyles: string | undefined = undefined\n): GridCell {\n  const typeName = column.arrowType\n    ? Quiver.getTypeName(column.arrowType)\n    : null\n\n  let cellTemplate\n  if (column.kind === \"object\") {\n    // Always use display value from Quiver for object types\n    // these are special types that the dataframe only support in read-only mode.\n    cellTemplate = column.getCell(\n      notNullOrUndefined(arrowCell.content)\n        ? removeLineBreaks(\n            Quiver.format(\n              arrowCell.content,\n              arrowCell.contentType,\n              arrowCell.field\n            )\n          )\n        : null\n    )\n  } else if (\n    [\"time\", \"date\", \"datetime\"].includes(column.kind) &&\n    notNullOrUndefined(arrowCell.content) &&\n    (typeof arrowCell.content === \"number\" ||\n      typeof arrowCell.content === \"bigint\")\n  ) {\n    // This is a special case where we want to already parse a numerical timestamp\n    // to a date object based on the arrow field metadata.\n    // Our implementation only supports unix timestamps in seconds, so we need to\n    // do some custom conversion here.\n    let parsedDate\n    if (\n      typeName === \"time\" &&\n      notNullOrUndefined(arrowCell.field?.type?.unit)\n    ) {\n      // Time values needs to be adjusted to seconds based on the unit\n      parsedDate = moment\n        .unix(\n          Quiver.convertToSeconds(\n            arrowCell.content,\n            arrowCell.field?.type?.unit ?? 0\n          )\n        )\n        .utc()\n        .toDate()\n    } else {\n      // All other datetime related values are assumed to be in milliseconds\n      parsedDate = moment.utc(Number(arrowCell.content)).toDate()\n    }\n\n    cellTemplate = column.getCell(parsedDate)\n  } else if (typeName === \"decimal\") {\n    // This is a special case where we want to already prepare a decimal value\n    // to a number string based on the arrow field metadata. This is required\n    // because we don't have access to the required scale in the number column.\n    const decimalStr = isNullOrUndefined(arrowCell.content)\n      ? null\n      : Quiver.format(\n          arrowCell.content,\n          arrowCell.contentType,\n          arrowCell.field\n        )\n    cellTemplate = column.getCell(decimalStr)\n  } else {\n    cellTemplate = column.getCell(arrowCell.content)\n  }\n\n  if (isErrorCell(cellTemplate)) {\n    // Directly return error cells without any additional modification\n    return cellTemplate\n  }\n\n  if (!column.isEditable) {\n    // Only apply display content and css styles to non-editable cells.\n    if (notNullOrUndefined(arrowCell.displayContent)) {\n      const displayData = removeLineBreaks(arrowCell.displayContent)\n      // If the display content is set, use that instead of the content.\n      // This is only supported for text, object, date, datetime, time and number cells.\n      // Non-editable datetime cells will use the text cell kind\n      // so we don't need to handle date-time-cell cells extra here.\n      if (cellTemplate.kind === GridCellKind.Text) {\n        cellTemplate = {\n          ...cellTemplate,\n          displayData,\n        } as TextCell\n      } else if (\n        cellTemplate.kind === GridCellKind.Number &&\n        // Only apply styler value if format was not explicitly set by the user.\n        isNullOrUndefined(\n          (column.columnTypeOptions as NumberColumnParams)?.format\n        )\n      ) {\n        cellTemplate = {\n          ...cellTemplate,\n          displayData,\n        } as NumberCell\n      } else if (\n        cellTemplate.kind === GridCellKind.Uri &&\n        // Only apply styler value if display text was not explicitly set by the user.\n        isNullOrUndefined(\n          (column.columnTypeOptions as LinkColumnParams)?.display_text\n        )\n      ) {\n        cellTemplate = {\n          ...cellTemplate,\n          displayData,\n        } as UriCell\n      } else if (\n        cellTemplate.kind === GridCellKind.Custom &&\n        (cellTemplate as DatePickerType).data?.kind === \"date-picker-cell\" &&\n        // Only apply styler value if format was not explicitly set by the user.\n        isNullOrUndefined(\n          (column.columnTypeOptions as DateTimeColumnParams)?.format\n        )\n      ) {\n        cellTemplate = {\n          ...cellTemplate,\n          data: {\n            ...(cellTemplate as DatePickerType).data,\n            displayDate: displayData,\n          },\n        } as DatePickerType\n      }\n    }\n\n    if (cssStyles && arrowCell.cssId) {\n      cellTemplate = applyPandasStylerCss(\n        cellTemplate,\n        arrowCell.cssId,\n        cssStyles\n      )\n    }\n  }\n  return cellTemplate\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  GridCellKind,\n  LoadingCell,\n} from \"@glideapps/glide-data-grid\"\nimport { SparklineCellType } from \"@glideapps/glide-data-grid-cells\"\n\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  formatNumber,\n  getEmptyCell,\n  getErrorCell,\n  mergeColumnParameters,\n  toSafeArray,\n  toSafeNumber,\n  toSafeString,\n} from \"./utils\"\n\nexport const LINE_CHART_TYPE = \"line_chart\"\nexport const AREA_CHART_TYPE = \"area_chart\"\nexport const BAR_CHART_TYPE = \"bar_chart\"\n\nexport interface ChartColumnParams {\n  // The minimum value used for plotting the chart. Defaults to 0.\n  readonly y_min?: number\n  // The maximum value used for plotting the chart. Defaults to 1.\n  readonly y_max?: number\n}\n\n/**\n * Base class for chart columns. This class is not meant to be used directly.\n * Instead, use the LineChartColumn and BarChartColumn classes.\n */\nfunction BaseChartColumn(\n  kind: string,\n  props: BaseColumnProps,\n  chart_type: \"line\" | \"bar\" | \"area\"\n): BaseColumn {\n  const parameters = mergeColumnParameters(\n    // Default parameters:\n    {\n      y_min: 0,\n      y_max: 1,\n    },\n    // User parameters:\n    props.columnTypeOptions\n  ) as ChartColumnParams\n\n  const cellTemplate = {\n    kind: GridCellKind.Custom,\n    allowOverlay: false,\n    copyData: \"\",\n    contentAlign: props.contentAlignment,\n    data: {\n      kind: \"sparkline-cell\",\n      values: [],\n      displayValues: [],\n      graphKind: chart_type,\n      yAxis: [parameters.y_min, parameters.y_max],\n    },\n  } as SparklineCellType\n\n  return {\n    ...props,\n    kind,\n    sortMode: \"default\",\n    isEditable: false, // Chart column is always read-only\n    getCell(data?: any): GridCell {\n      if (\n        isNullOrUndefined(parameters.y_min) ||\n        isNullOrUndefined(parameters.y_max) ||\n        Number.isNaN(parameters.y_min) ||\n        Number.isNaN(parameters.y_max) ||\n        parameters.y_min >= parameters.y_max\n      ) {\n        return getErrorCell(\n          \"Invalid min/max y-axis configuration\",\n          `The y_min (${parameters.y_min}) and y_max (${parameters.y_max}) configuration options must be valid numbers.`\n        )\n      }\n\n      if (isNullOrUndefined(data)) {\n        // TODO(lukasmasuch): Use a missing cell?\n        return getEmptyCell()\n      }\n\n      const chartData = toSafeArray(data)\n\n      const convertedChartData: number[] = []\n      let normalizedChartData: number[] = []\n      if (chartData.length === 0) {\n        return getEmptyCell()\n      }\n\n      // Initialize with smallest and biggest number\n      let maxValue = Number.MIN_SAFE_INTEGER\n      let minValue = Number.MAX_SAFE_INTEGER\n\n      // Try to convert all values to numbers and find min/max\n      for (let i = 0; i < chartData.length; i++) {\n        const convertedValue = toSafeNumber(chartData[i])\n        if (\n          Number.isNaN(convertedValue) ||\n          isNullOrUndefined(convertedValue)\n        ) {\n          return getErrorCell(\n            toSafeString(chartData),\n            `The value cannot be interpreted as a numeric array. ${toSafeString(\n              convertedValue\n            )} is not a number.`\n          )\n        }\n\n        if (convertedValue > maxValue) {\n          maxValue = convertedValue\n        }\n\n        if (convertedValue < minValue) {\n          minValue = convertedValue\n        }\n\n        convertedChartData.push(convertedValue)\n      }\n\n      if (\n        convertedChartData.length > 0 &&\n        (maxValue > parameters.y_max || minValue < parameters.y_min)\n      ) {\n        // Normalize values between the configured range\n        normalizedChartData = convertedChartData.map(v =>\n          maxValue - minValue === 0 // Prevent division by zero\n            ? maxValue > (parameters.y_max || 1)\n              ? parameters.y_max || 1 // Use max value\n              : parameters.y_min || 0 // Use min value\n            : ((parameters.y_max || 1) - (parameters.y_min || 0)) *\n                ((v - minValue) / (maxValue - minValue)) +\n              (parameters.y_min || 0)\n        )\n      } else {\n        // Values are already in the configured range\n        normalizedChartData = convertedChartData\n      }\n\n      return {\n        ...cellTemplate,\n        copyData: convertedChartData.join(\",\"), // Column sorting is done via the copyData value\n        data: {\n          ...cellTemplate.data,\n          values: normalizedChartData,\n          displayValues: convertedChartData.map(v => formatNumber(v)),\n        },\n        isMissingValue: isNullOrUndefined(data),\n      } as SparklineCellType\n    },\n    getCellValue(\n      cell: SparklineCellType | LoadingCell\n    ): readonly number[] | null {\n      if (cell.kind === GridCellKind.Loading) {\n        return null\n      }\n\n      return cell.data?.values === undefined ? null : cell.data?.values\n    },\n  }\n}\n\n/**\n * A column type that renders the cell value as a line-chart.\n * The data is expected to be a numeric array.\n *\n * This column type is currently read-only.\n */\nexport function LineChartColumn(props: BaseColumnProps): BaseColumn {\n  return BaseChartColumn(LINE_CHART_TYPE, props, \"line\")\n}\n\nLineChartColumn.isEditableType = false\n\n/**\n * A column type that renders the cell value as a bar-chart.\n * The data is expected to be a numeric array.\n *\n * This column type is currently read-only.\n */\nexport function BarChartColumn(props: BaseColumnProps): BaseColumn {\n  return BaseChartColumn(BAR_CHART_TYPE, props, \"bar\")\n}\n\nBarChartColumn.isEditableType = false\n\n/**\n * A column type that renders the cell value as an area-chart.\n * The data is expected to be a numeric array.\n *\n * This column type is currently read-only.\n */\nexport function AreaChartColumn(props: BaseColumnProps): BaseColumn {\n  return BaseChartColumn(AREA_CHART_TYPE, props, \"area\")\n}\n\nAreaChartColumn.isEditableType = false\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, GridCellKind, ImageCell } from \"@glideapps/glide-data-grid\"\n\nimport { notNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nimport { BaseColumn, BaseColumnProps, toSafeString } from \"./utils\"\n\n/**\n * A column type that renders an image as a cell value. On cell selection, open\n * the cell overlay with a full version of the image.\n *\n * This column type is currently read-only.\n */\nfunction ImageColumn(props: BaseColumnProps): BaseColumn {\n  const cellTemplate = {\n    kind: GridCellKind.Image,\n    data: [],\n    displayData: [],\n    readonly: true,\n    allowOverlay: true,\n    contentAlign: props.contentAlignment || \"center\",\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as ImageCell\n\n  return {\n    ...props,\n    kind: \"image\",\n    sortMode: \"default\",\n    isEditable: false, // Image columns are always read-only\n    getCell(data?: any): GridCell {\n      // The native image cell implementation in glide-data-grid expects an array\n      // of image URLs. For our usecase, we only support single images. We\n      // need to wrap the image URL in an array to have it compatible with the\n      // implementation in glide-data-grid.\n      const imageUrls = notNullOrUndefined(data) ? [toSafeString(data)] : []\n\n      return {\n        ...cellTemplate,\n        data: imageUrls,\n        isMissingValue: !notNullOrUndefined(data),\n        displayData: imageUrls,\n      } as ImageCell\n    },\n    getCellValue(cell: ImageCell): string | null {\n      if (cell.data === undefined || cell.data.length === 0) {\n        return null\n      }\n\n      // We use the image cell only for single images,\n      // so we can safely return just the first element\n      return cell.data[0]\n    },\n  }\n}\n\nImageColumn.isEditableType = false\n\nexport default ImageColumn\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, GridCellKind, UriCell } from \"@glideapps/glide-data-grid\"\n\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  getLinkDisplayValueFromRegex,\n  toSafeString,\n} from \"./utils\"\n\nexport interface LinkColumnParams {\n  // The maximum number of characters the user can enter into the text input.\n  readonly max_chars?: number\n  // Regular expression that the input's value must match for the value to pass\n  readonly validate?: string\n  // a value to display in the link cell. Can be a regex to parse out a specific substring of the url to be displayed\n  readonly display_text?: string\n}\n\n/**\n * The link column is a special column that interprets the cell content as\n * an hyperlink / url and allows the user to click on it.\n */\nfunction LinkColumn(props: BaseColumnProps): BaseColumn {\n  const parameters = (props.columnTypeOptions as LinkColumnParams) || {}\n\n  let validateRegex: RegExp | string | undefined = undefined\n\n  if (parameters.validate) {\n    // Prepare the validation regex:\n    try {\n      // u flag allows unicode characters\n      // s flag allows . to match newlines\n      validateRegex = new RegExp(parameters.validate, \"us\")\n    } catch (error) {\n      // Put error message in validateRegex so we can display it in the cell\n      validateRegex = `Invalid validate regex: ${parameters.validate}.\\nError: ${error}`\n    }\n  }\n\n  // Determine if the user's provided display text is a regexp pattern or not.\n  let displayTextRegex: RegExp | undefined = undefined\n  if (\n    !isNullOrUndefined(parameters.display_text) &&\n    parameters.display_text.includes(\"(\") &&\n    parameters.display_text.includes(\")\")\n  ) {\n    try {\n      displayTextRegex = new RegExp(parameters.display_text, \"us\")\n    } catch (error) {\n      // The regex is invalid, interpret it as static display text.\n      displayTextRegex = undefined\n    }\n  }\n\n  const cellTemplate = {\n    kind: GridCellKind.Uri,\n    readonly: !props.isEditable,\n    allowOverlay: true,\n    contentAlign: props.contentAlignment,\n    style: props.isIndex ? \"faded\" : \"normal\",\n    hoverEffect: true,\n    data: \"\",\n    displayData: \"\",\n    copyData: \"\",\n  } as UriCell\n\n  const validateInput = (href?: string): boolean => {\n    if (isNullOrUndefined(href)) {\n      if (props.isRequired) {\n        return false\n      }\n      return true\n    }\n\n    const cellHref = toSafeString(href)\n\n    if (parameters.max_chars && cellHref.length > parameters.max_chars) {\n      // value is too long\n      return false\n    }\n\n    if (\n      validateRegex instanceof RegExp &&\n      validateRegex.test(cellHref) === false\n    ) {\n      return false\n    }\n\n    return true\n  }\n\n  return {\n    ...props,\n    kind: \"link\",\n    sortMode: \"default\",\n    validateInput,\n    getCell(data?: any, validate?: boolean): GridCell {\n      if (isNullOrUndefined(data)) {\n        return {\n          ...cellTemplate,\n          data: null as any,\n          isMissingValue: true,\n          onClickUri: () => {},\n        } as UriCell\n      }\n\n      const href: string = data\n      if (typeof validateRegex === \"string\") {\n        // The regex is invalid, we return an error to indicate this\n        // to the developer:\n        return getErrorCell(toSafeString(href), validateRegex)\n      }\n\n      if (validate) {\n        const validationResult = validateInput(href)\n        if (validationResult === false) {\n          // The input is invalid, we return an error cell which will\n          // prevent this cell to be inserted into the table.\n          // This cell should never be actually displayed to the user.\n          // It's mostly used internally to prevent invalid input to be\n          // inserted into the table.\n          return getErrorCell(toSafeString(href), \"Invalid input.\")\n        }\n      }\n\n      let displayText = \"\"\n      if (href) {\n        if (displayTextRegex !== undefined) {\n          // Set display value to be the regex extracted portion of the href.\n          displayText = getLinkDisplayValueFromRegex(displayTextRegex, href)\n        } else {\n          // Use user provided display_text unless it's null, undefined, or an empty string.\n          // If it's any of those falsy values, use the href.\n          displayText = parameters.display_text || href\n        }\n      }\n\n      return {\n        ...cellTemplate,\n        data: href,\n        displayData: displayText,\n        isMissingValue: isNullOrUndefined(href),\n        onClickUri: a => {\n          window.open(\n            href.startsWith(\"www.\") ? `https://${href}` : href,\n            \"_blank\",\n            \"noopener,noreferrer\"\n          )\n          a.preventDefault()\n        },\n        copyData: href,\n      } as UriCell\n    },\n    getCellValue(cell: UriCell): string | null {\n      return isNullOrUndefined(cell.data) ? null : cell.data\n    },\n  }\n}\n\nLinkColumn.isEditableType = true\n\nexport default LinkColumn\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  GridCellKind,\n  LoadingCell,\n} from \"@glideapps/glide-data-grid\"\nimport { RangeCellType } from \"@glideapps/glide-data-grid-cells\"\n\nimport { Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport {\n  isNullOrUndefined,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport { isIntegerType } from \"@streamlit/lib/src/components/widgets/DataFrame/isIntegerType\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  countDecimals,\n  formatNumber,\n  getEmptyCell,\n  getErrorCell,\n  mergeColumnParameters,\n  toSafeNumber,\n  toSafeString,\n} from \"./utils\"\n\nexport interface ProgressColumnParams {\n  // The minimum permitted value. Defaults to 0.\n  readonly min_value?: number\n  // The maximum permitted value. Defaults to 100 if the underlying data is integer,\n  // or 1 for all others types.\n  readonly max_value?: number\n  // A formatting syntax (e.g. sprintf) to format the display value.\n  // This can be used for adding prefix or suffix, or changing the number of decimals of the display value.\n  readonly format?: string\n  // The stepping interval. Defaults to 0.01.\n  // Mainly useful once we provide editing capabilities.\n  readonly step?: number\n}\n\n/**\n * A read-only column type to support rendering values that have a defined\n * range. This is rendered via a progress-bar-like visualization.\n */\nfunction ProgressColumn(props: BaseColumnProps): BaseColumn {\n  const arrowTypeName = Quiver.getTypeName(props.arrowType)\n  const isInteger = isIntegerType(arrowTypeName)\n\n  const parameters = mergeColumnParameters(\n    // Default parameters:\n    {\n      min_value: 0,\n      max_value: isInteger ? 100 : 1,\n      step: isInteger ? 1 : 0.01,\n      format: isInteger ? \"%3d%%\" : \"percent\",\n    } as ProgressColumnParams,\n    // User parameters:\n    props.columnTypeOptions\n  ) as ProgressColumnParams\n\n  // Measure the display value of the max value, so that all progress bars are aligned correctly:\n  let measureLabel: string\n  try {\n    measureLabel = formatNumber(\n      parameters.max_value as number,\n      parameters.format\n    )\n  } catch (error) {\n    measureLabel = toSafeString(parameters.max_value)\n  }\n\n  const fixedDecimals =\n    isNullOrUndefined(parameters.step) || Number.isNaN(parameters.step)\n      ? undefined\n      : countDecimals(parameters.step)\n\n  const cellTemplate = {\n    kind: GridCellKind.Custom,\n    allowOverlay: false,\n    copyData: \"\",\n    contentAlign: props.contentAlignment,\n    data: {\n      kind: \"range-cell\",\n      min: parameters.min_value,\n      max: parameters.max_value,\n      step: parameters.step,\n      value: parameters.min_value,\n      label: String(parameters.min_value),\n      measureLabel,\n      readonly: true,\n    },\n  } as RangeCellType\n\n  return {\n    ...props,\n    kind: \"progress\",\n    sortMode: \"smart\",\n    isEditable: false, // Progress column is always readonly\n    getCell(data?: any): GridCell {\n      if (isNullOrUndefined(data)) {\n        // TODO(lukasmasuch): Use a missing cell?\n        return getEmptyCell()\n      }\n\n      if (\n        isNullOrUndefined(parameters.min_value) ||\n        isNullOrUndefined(parameters.max_value) ||\n        Number.isNaN(parameters.min_value) ||\n        Number.isNaN(parameters.max_value) ||\n        parameters.min_value >= parameters.max_value\n      ) {\n        return getErrorCell(\n          \"Invalid min/max parameters\",\n          `The min_value (${parameters.min_value}) and max_value (${parameters.max_value}) parameters must be valid numbers.`\n        )\n      }\n\n      if (\n        isNullOrUndefined(parameters.step) ||\n        Number.isNaN(parameters.step)\n      ) {\n        return getErrorCell(\n          \"Invalid step parameter\",\n          `The step parameter (${parameters.step}) must be a valid number.`\n        )\n      }\n\n      const cellData = toSafeNumber(data)\n\n      if (Number.isNaN(cellData) || isNullOrUndefined(cellData)) {\n        return getErrorCell(\n          toSafeString(data),\n          \"The value cannot be interpreted as a number.\"\n        )\n      }\n\n      // Check if the value is larger than the maximum supported value:\n      if (Number.isInteger(cellData) && !Number.isSafeInteger(cellData)) {\n        return getErrorCell(\n          toSafeString(data),\n          \"The value is larger than the maximum supported integer values in number columns (2^53).\"\n        )\n      }\n\n      let displayData = \"\"\n\n      try {\n        displayData = formatNumber(cellData, parameters.format, fixedDecimals)\n      } catch (error) {\n        return getErrorCell(\n          toSafeString(cellData),\n          notNullOrUndefined(parameters.format)\n            ? `Failed to format the number based on the provided format configuration: (${parameters.format}). Error: ${error}`\n            : `Failed to format the number. Error: ${error}`\n        )\n      }\n\n      // If the value is outside the range, we scale it to the min/max\n      // for the visualization.\n      const normalizeCellValue = Math.min(\n        parameters.max_value,\n        Math.max(parameters.min_value, cellData)\n      )\n\n      return {\n        ...cellTemplate,\n        isMissingValue: isNullOrUndefined(data),\n        copyData: String(cellData), // Column sorting is done via the copyData value\n        data: {\n          ...cellTemplate.data,\n          value: normalizeCellValue,\n          label: displayData,\n        },\n      } as RangeCellType\n    },\n    getCellValue(cell: RangeCellType | LoadingCell): number | null {\n      if (cell.kind === GridCellKind.Loading) {\n        return null\n      }\n      return cell.data?.value === undefined ? null : cell.data?.value\n    },\n  }\n}\n\nProgressColumn.isEditableType = false\n\nexport default ProgressColumn\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AreaChartColumn,\n  BarChartColumn,\n  LineChartColumn,\n} from \"./ChartColumn\"\nimport CheckboxColumn from \"./CheckboxColumn\"\nimport DateTimeColumn, { DateColumn, TimeColumn } from \"./DateTimeColumn\"\nimport ImageColumn from \"./ImageColumn\"\nimport LinkColumn from \"./LinkColumn\"\nimport ListColumn from \"./ListColumn\"\nimport NumberColumn from \"./NumberColumn\"\nimport ObjectColumn from \"./ObjectColumn\"\nimport ProgressColumn from \"./ProgressColumn\"\nimport SelectboxColumn from \"./SelectboxColumn\"\nimport TextColumn from \"./TextColumn\"\nimport { ColumnCreator } from \"./utils\"\n\nexport { ImageCellEditor } from \"./cells/ImageCellEditor\"\nexport type { DateTimeColumnParams } from \"./DateTimeColumn\"\nexport type { LinkColumnParams } from \"./LinkColumn\"\nexport type { NumberColumnParams } from \"./NumberColumn\"\n\nexport * from \"./utils\"\n\n/**\n * All available column types need to be registered here.\n *\n * These names must match the column names used in the backend.\n */\nexport const ColumnTypes = new Map<string, ColumnCreator>(\n  Object.entries({\n    object: ObjectColumn,\n    text: TextColumn,\n    checkbox: CheckboxColumn,\n    selectbox: SelectboxColumn,\n    list: ListColumn,\n    number: NumberColumn,\n    link: LinkColumn,\n    datetime: DateTimeColumn,\n    date: DateColumn,\n    time: TimeColumn,\n    line_chart: LineChartColumn,\n    bar_chart: BarChartColumn,\n    area_chart: AreaChartColumn,\n    image: ImageColumn,\n    progress: ProgressColumn,\n  })\n)\n\nexport const CustomCells = []\n\nexport {\n  AreaChartColumn,\n  BarChartColumn,\n  CheckboxColumn,\n  DateColumn,\n  DateTimeColumn,\n  ImageColumn,\n  LineChartColumn,\n  LinkColumn,\n  ListColumn,\n  NumberColumn,\n  ObjectColumn,\n  ProgressColumn,\n  SelectboxColumn,\n  TextColumn,\n  TimeColumn,\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\"\n\nimport merge from \"lodash/merge\"\nimport { useTheme } from \"@emotion/react\"\n\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\nimport { Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport { Arrow as ArrowProto } from \"@streamlit/lib/src/proto\"\nimport {\n  isNullOrUndefined,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport { logError, logWarning } from \"@streamlit/lib/src/util/log\"\nimport {\n  getAllColumnsFromArrow,\n  getColumnTypeFromArrow,\n  getEmptyIndexColumn,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/arrowUtils\"\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  ColumnCreator,\n  ColumnTypes,\n  ObjectColumn,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\n\n// Using this ID for column config will apply the config to all index columns\nexport const INDEX_IDENTIFIER = \"_index\"\n// Prefix used in the config column mapping when referring to a column via the numeric position\nexport const COLUMN_POSITION_PREFIX = \"_pos:\"\n\n// Predefined column widths configurable by the user\nexport const COLUMN_WIDTH_MAPPING = {\n  small: 75,\n  medium: 200,\n  large: 400,\n}\n\n/**\n * Options to configure columns.\n *\n * This needs to be kept in sync with the ColumnConfig TypeDict in the backend.\n * This will be eventually replaced with a proto message.\n */\nexport interface ColumnConfigProps {\n  label?: string\n  width?: \"small\" | \"medium\" | \"large\" | number\n  help?: string\n  hidden?: boolean\n  disabled?: boolean\n  required?: boolean\n  default?: number | string | boolean\n  alignment?: \"left\" | \"center\" | \"right\"\n  // uses snake_case to match the property names in the backend:\n  type_config?: Record<string, unknown>\n}\n\n/**\n * Parse the user-defined width configuration and return the width in pixels.\n */\nfunction parseWidthConfig(\n  width?: \"small\" | \"medium\" | \"large\" | number\n): number | undefined {\n  if (isNullOrUndefined(width)) {\n    return undefined\n  }\n\n  if (typeof width === \"number\") {\n    return width\n  }\n\n  if (width in COLUMN_WIDTH_MAPPING) {\n    return COLUMN_WIDTH_MAPPING[width]\n  }\n\n  return undefined\n}\n\n/**\n * Apply the user-defined column configuration if supplied.\n *\n * @param columnProps - The column properties to apply the config to.\n * @param columnConfigMapping - The user-defined column configuration mapping.\n *\n * @return the column properties with the config applied.\n */\nexport function applyColumnConfig(\n  columnProps: BaseColumnProps,\n  columnConfigMapping: Map<string | number, ColumnConfigProps>\n): BaseColumnProps {\n  if (!columnConfigMapping) {\n    // No column config configured\n    return columnProps\n  }\n\n  let columnConfig\n  if (\n    columnConfigMapping.has(columnProps.name) &&\n    columnProps.name !== INDEX_IDENTIFIER // \"index\" is not supported as name for normal columns\n  ) {\n    // Config is configured based on the column name\n    columnConfig = columnConfigMapping.get(columnProps.name)\n  } else if (\n    columnConfigMapping.has(\n      `${COLUMN_POSITION_PREFIX}${columnProps.indexNumber}`\n    )\n  ) {\n    // Config is configured based on the column position, e.g. col:0 -> first column\n    columnConfig = columnConfigMapping.get(\n      `${COLUMN_POSITION_PREFIX}${columnProps.indexNumber}`\n    )\n  } else if (\n    columnProps.isIndex &&\n    columnConfigMapping.has(INDEX_IDENTIFIER)\n  ) {\n    // Config is configured for the index column (or all index columns for multi-index)\n    columnConfig = columnConfigMapping.get(INDEX_IDENTIFIER)\n  }\n\n  if (!columnConfig) {\n    // No column config found for this column\n    return columnProps\n  }\n\n  // This will update all column props with the user-defined config for all\n  // configuration options that are not undefined:\n  return merge({ ...columnProps }, {\n    title: columnConfig.label,\n    width: parseWidthConfig(columnConfig.width),\n    isEditable: notNullOrUndefined(columnConfig.disabled)\n      ? !columnConfig.disabled\n      : undefined,\n    isHidden: columnConfig.hidden,\n    isRequired: columnConfig.required,\n    columnTypeOptions: columnConfig.type_config,\n    contentAlignment: columnConfig.alignment,\n    defaultValue: columnConfig.default,\n    help: columnConfig.help,\n  } as BaseColumnProps) as BaseColumnProps\n}\n\n/**\n * Extracts the user-defined column configuration from the JSON config.\n *\n * @param configJson - the column config JSON from the proto.\n *\n * @returns the user-defined column configuration.\n */\nexport function getColumnConfig(configJson: string): Map<string, any> {\n  if (!configJson) {\n    return new Map()\n  }\n  try {\n    return new Map(Object.entries(JSON.parse(configJson)))\n  } catch (error) {\n    // This is not expected to happen, but if it does, we'll return an empty map\n    // and log the error to the console.\n    logError(error)\n    return new Map()\n  }\n}\n\ntype ColumnLoaderReturn = {\n  columns: BaseColumn[]\n}\n\n/**\n * Get the column type (creator class of column type) for the given column properties.\n *\n * @param column - The column properties.\n *\n * @returns the column creator of the corresponding column type.\n */\nexport function getColumnType(column: BaseColumnProps): ColumnCreator {\n  const customType = column.columnTypeOptions?.type as string\n  // Create a column instance based on the column properties\n  let ColumnType: ColumnCreator | undefined\n  if (notNullOrUndefined(customType)) {\n    if (ColumnTypes.has(customType)) {\n      ColumnType = ColumnTypes.get(customType)\n    } else {\n      logWarning(\n        `Unknown column type configured in column configuration: ${customType}`\n      )\n    }\n  }\n  if (isNullOrUndefined(ColumnType)) {\n    // Load based on arrow type\n    ColumnType = getColumnTypeFromArrow(column.arrowType)\n  }\n  return ColumnType\n}\n\n/**\n * Custom hook that handles loads and configures all table columns from the Arrow table.\n *\n * @param element - The proto message of the dataframe element\n * @param data - The Arrow data extracted from the proto message\n * @param disabled - Whether the widget is disabled\n *\n * @returns the columns and the cell content getter compatible with glide-data-grid.\n */\nfunction useColumnLoader(\n  element: ArrowProto,\n  data: Quiver,\n  disabled: boolean\n): ColumnLoaderReturn {\n  const theme: EmotionTheme = useTheme()\n\n  const columnConfigMapping = React.useMemo(() => {\n    return getColumnConfig(element.columns)\n  }, [element.columns])\n\n  const stretchColumns: boolean =\n    element.useContainerWidth ||\n    (notNullOrUndefined(element.width) && element.width > 0)\n\n  // Converts the columns from Arrow into columns compatible with glide-data-grid\n  const columns: BaseColumn[] = React.useMemo(() => {\n    let configuredColumns = getAllColumnsFromArrow(data)\n      .map(column => {\n        // Apply column configurations\n        let updatedColumn = {\n          ...column,\n          ...applyColumnConfig(column, columnConfigMapping),\n          isStretched: stretchColumns,\n        } as BaseColumnProps\n\n        const ColumnType = getColumnType(updatedColumn)\n\n        // Make sure editing is deactivated if the column is read-only, disabled,\n        // or a not editable type.\n        if (\n          element.editingMode === ArrowProto.EditingMode.READ_ONLY ||\n          disabled ||\n          ColumnType.isEditableType === false\n        ) {\n          updatedColumn = {\n            ...updatedColumn,\n            isEditable: false,\n          }\n        }\n\n        if (\n          element.editingMode !== ArrowProto.EditingMode.READ_ONLY &&\n          updatedColumn.isEditable == true\n        ) {\n          // Set editable icon for all editable columns:\n          updatedColumn = {\n            ...updatedColumn,\n            icon: \"editable\",\n          }\n\n          // Make sure that required columns are not hidden when editing mode is dynamic:\n          if (\n            updatedColumn.isRequired &&\n            element.editingMode === ArrowProto.EditingMode.DYNAMIC\n          ) {\n            updatedColumn = {\n              ...updatedColumn,\n              isHidden: false,\n            }\n          }\n        }\n\n        return ColumnType(updatedColumn, theme)\n      })\n      .filter(column => {\n        // Filter out all columns that are hidden\n        return !column.isHidden\n      })\n\n    // Reorder columns based on the user configuration:\n    if (element.columnOrder && element.columnOrder.length > 0) {\n      const orderedColumns: BaseColumn[] = []\n\n      // Add all index columns to the beginning of the list:\n      configuredColumns.forEach(column => {\n        if (column.isIndex) {\n          orderedColumns.push(column)\n        }\n      })\n\n      // Reorder non-index columns based on the configured column order:\n      element.columnOrder.forEach(columnName => {\n        const column = configuredColumns.find(\n          column => column.name === columnName\n        )\n        if (column && !column.isIndex) {\n          orderedColumns.push(column)\n        }\n      })\n\n      configuredColumns = orderedColumns\n    }\n\n    // If all columns got filtered out, we add an empty index column\n    // to prevent errors from glide-data-grid.\n    return configuredColumns.length > 0\n      ? configuredColumns\n      : [ObjectColumn(getEmptyIndexColumn())]\n  }, [\n    data,\n    columnConfigMapping,\n    stretchColumns,\n    disabled,\n    element.editingMode,\n    element.columnOrder,\n    theme,\n  ])\n\n  return {\n    columns,\n  }\n}\n\nexport default useColumnLoader\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell } from \"@glideapps/glide-data-grid\"\n\nimport {\n  isNullOrUndefined,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\nimport { BaseColumn, isMissingValueCell } from \"./columns\"\nimport { INDEX_IDENTIFIER } from \"./hooks/useColumnLoader\"\n\n/**\n * Get the column name for a given column to use in the widget state.\n * This is either the column name or the index identifier for index columns.\n */\nexport function getColumnName(column: BaseColumn): string {\n  // TODO(lukasmasuch): We need to adapt this once we want to support multi-index columns.\n  return column.isIndex\n    ? INDEX_IDENTIFIER\n    : isNullOrUndefined(column.name)\n    ? \"\"\n    : column.name\n}\n\n/**\n * The editing state keeps track of all table edits applied by the user.\n */\nclass EditingState {\n  // row -> column -> GridCell\n  // Using [number, number] as a key for a Map would not work.\n  private editedCells: Map<number, Map<number, GridCell>> = new Map()\n\n  // List of rows represented by of column -> GridCell mappings\n  private addedRows: Array<Map<number, GridCell>> = []\n\n  // List of deleted row IDs\n  private deletedRows: number[] = []\n\n  // The original number of rows in the table (without potential additions & deletions)\n  private numRows = 0\n\n  constructor(numRows: number) {\n    this.numRows = numRows\n  }\n\n  /**\n   * Convert the current editing state to a JSON string.\n   *\n   * @param columns - The columns of the table\n   * @returns JSON string\n   */\n  toJson(columns: BaseColumn[]): string {\n    const columnsByIndex = new Map<number, BaseColumn>()\n    columns.forEach(column => {\n      columnsByIndex.set(column.indexNumber, column)\n    })\n\n    const currentState = {\n      // We use snake case here since this is the widget state\n      // that is sent and used in the backend. Therefore, it should\n      // conform with the Python naming conventions.\n      edited_rows: {} as Record<number, Record<string, any>>,\n      added_rows: [] as Record<string, any>[],\n      deleted_rows: [] as number[],\n    }\n\n    // Loop through all edited cells and transform into the structure\n    // we use for the JSON-compatible widget state:\n    // row position -> column name -> edited value\n    this.editedCells.forEach(\n      (row: Map<number, GridCell>, rowIndex: number, _map) => {\n        const editedRow: Record<string, any> = {}\n        row.forEach((cell: GridCell, colIndex: number, _map) => {\n          const column = columnsByIndex.get(colIndex)\n          if (column) {\n            editedRow[getColumnName(column)] = column.getCellValue(cell)\n          }\n        })\n        currentState.edited_rows[rowIndex] = editedRow\n      }\n    )\n\n    // Loop through all added rows and transform into the format that\n    // we use for the JSON-compatible widget state:\n    // List of column name -> edited value\n    this.addedRows.forEach((row: Map<number, GridCell>) => {\n      const addedRow: Record<string, any> = {}\n      // This flags is used to check if the row is incomplete\n      // (i.e. missing required values) and should therefore not be included in\n      // the current state version.\n      let isIncomplete = false\n      row.forEach((cell: GridCell, colIndex: number, _map) => {\n        const column = columnsByIndex.get(colIndex)\n        if (column) {\n          const cellValue = column.getCellValue(cell)\n\n          if (\n            column.isRequired &&\n            column.isEditable &&\n            isMissingValueCell(cell)\n          ) {\n            // If the cell is missing a required value, the row is incomplete\n            isIncomplete = true\n          }\n\n          if (notNullOrUndefined(cellValue)) {\n            addedRow[getColumnName(column)] = cellValue\n          }\n        }\n      })\n      if (!isIncomplete) {\n        currentState.added_rows.push(addedRow)\n      }\n    })\n\n    // The deleted rows don't need to be transformed\n    currentState.deleted_rows = this.deletedRows\n\n    // Convert undefined values to null, otherwise this is removed here since\n    // undefined does not exist in JSON.\n    const json = JSON.stringify(currentState, (_k, v) =>\n      v === undefined ? null : v\n    )\n    return json\n  }\n\n  /**\n   * Load the editing state from a JSON string.\n   *\n   * @param columns - The columns of the table\n   * @returns JSON string\n   */\n  fromJson(editingStateJson: string, columns: BaseColumn[]): void {\n    // Clear existing state:\n    this.editedCells = new Map()\n    this.addedRows = []\n    this.deletedRows = []\n\n    // Parse JSON editing string:\n    const editingState = JSON.parse(editingStateJson)\n    // Map columns to column index\n    const columnsByIndex = new Map<number, BaseColumn>()\n    columns.forEach(column => {\n      columnsByIndex.set(column.indexNumber, column)\n    })\n\n    // Map column name to columns\n    const columnsByName = new Map<string, BaseColumn>()\n    columns.forEach(column => {\n      columnsByName.set(getColumnName(column), column)\n    })\n\n    // Loop through all edited cells and transform into the structure\n    // we use for the editing state:\n    // row -> column -> GridCell\n    Object.keys(editingState.edited_rows).forEach(key => {\n      const rowIndex = Number(key)\n      const editedRow = editingState.edited_rows[key]\n      Object.keys(editedRow).forEach((colName: string) => {\n        const cellValue = editedRow[colName]\n        const column = columnsByName.get(colName)\n        if (column) {\n          const cell = column.getCell(cellValue)\n          if (cell) {\n            if (!this.editedCells.has(rowIndex)) {\n              this.editedCells.set(rowIndex, new Map())\n            }\n            this.editedCells.get(rowIndex)?.set(column.indexNumber, cell)\n          }\n        }\n      })\n    })\n\n    // Loop through all added rows and transform into the format that\n    // we use for the editing state:\n    // List of column index -> edited value\n    editingState.added_rows.forEach((row: Record<string, any>) => {\n      const addedRow: Map<number, GridCell> = new Map()\n      // Initialize all columns with null (empty) values first\n      // This is necessary to ensure that all columns are present in the added row.\n      // We will overwrite the empty values with the actual values below\n      // if the actual value exists. We need to do this since we are only\n      // putting none-empty values in the widget state for optimization reasons.\n      columns.forEach(column => {\n        addedRow.set(column.indexNumber, column.getCell(null))\n      })\n\n      // Set the cells that were actually edited in the row\n      Object.keys(row).forEach(colName => {\n        const cellValue = row[colName]\n\n        const column = columnsByName.get(colName)\n\n        if (column) {\n          const cell = column.getCell(cellValue)\n          if (cell) {\n            addedRow.set(column.indexNumber, cell)\n          }\n        }\n      })\n      this.addedRows.push(addedRow)\n    })\n\n    // The deleted rows don't need to be transformed\n    this.deletedRows = editingState.deleted_rows\n  }\n\n  /**\n   * Returns true if the given row was added by the user through the UI.\n   */\n  isAddedRow(row: number): boolean {\n    return row >= this.numRows\n  }\n\n  /**\n   * Returns the cell at the given column and row,\n   * in case the cell was edited or added.\n   *\n   * @param col - The column index\n   * @param row - The row index\n   *\n   * @returns The edited cell at the given column and row\n   */\n  getCell(col: number, row: number): GridCell | undefined {\n    if (this.isAddedRow(row)) {\n      // Added rows have their own editing state\n      return this.addedRows[row - this.numRows].get(col)\n    }\n\n    const rowCache = this.editedCells.get(row)\n    if (rowCache === undefined) {\n      return undefined\n    }\n\n    return rowCache.get(col)\n  }\n\n  /**\n   * Adds a cell to the editing state for the given column and row index.\n   *\n   * @param col - The column index\n   * @param row - The row index\n   * @param cell - The cell to add to the editing state\n   */\n  setCell(col: number, row: number, cell: GridCell): void {\n    if (this.isAddedRow(row)) {\n      if (row - this.numRows >= this.addedRows.length) {\n        // Added row does not exist. This is only expected to happen\n        // in relation to a trailing row issue in glide-data-grid.\n        return\n      }\n      // Added rows have their own editing state\n      this.addedRows[row - this.numRows].set(col, cell)\n    } else {\n      if (this.editedCells.get(row) === undefined) {\n        this.editedCells.set(row, new Map())\n      }\n\n      const rowCache = this.editedCells.get(row) as Map<number, GridCell>\n      rowCache.set(col, cell)\n    }\n  }\n\n  /**\n   * Adds a new row to the editing state.\n   *\n   * @param rowCells - The cells of the row to add\n   */\n  addRow(rowCells: Map<number, GridCell>): void {\n    this.addedRows.push(rowCells)\n  }\n\n  /**\n   * Deletes the given rows from the editing state.\n   *\n   * @param rows - The rows to delete\n   */\n  deleteRows(rows: number[]): void {\n    // Delete row one by one starting from the row with the highest index\n    rows\n      .sort((a, b) => b - a)\n      .forEach(row => {\n        this.deleteRow(row)\n      })\n  }\n\n  /**\n   * Deletes the given row from the editing state.\n   *\n   * @param row - The row to delete\n   */\n  deleteRow(row: number): void {\n    if (isNullOrUndefined(row) || row < 0) {\n      // This should never happen\n      return\n    }\n\n    if (this.isAddedRow(row)) {\n      // Remove from added rows:\n      this.addedRows.splice(row - this.numRows, 1)\n      // there is nothing more we have to do\n      return\n    }\n\n    if (!this.deletedRows.includes(row)) {\n      // Add to the set\n      this.deletedRows.push(row)\n      // Sort the deleted rows (important for calculation of the original row index)\n      this.deletedRows = this.deletedRows.sort((a, b) => a - b)\n    }\n\n    // Remove all cells from cell state associated with this row:\n    this.editedCells.delete(row)\n  }\n\n  /**\n   * Returns the original row index of the given row.\n   * Since the user can delete rows, the original row index and the\n   * current one can diverge.\n   *\n   * @param row - The row index from the current state\n   *\n   * @returns The original row index\n   */\n  getOriginalRowIndex(row: number): number {\n    // Just count all deleted rows before this row to determine the original row index:\n    let originalIndex = row\n    for (let i = 0; i < this.deletedRows.length; i++) {\n      if (this.deletedRows[i] > originalIndex) {\n        break\n      }\n      originalIndex += 1\n    }\n    return originalIndex\n  }\n\n  /**\n   * Returns the total number of rows of the current state.\n   */\n  getNumRows(): number {\n    return this.numRows + this.addedRows.length - this.deletedRows.length\n  }\n}\n\nexport default EditingState\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\"\n\nimport { useTheme } from \"@emotion/react\"\nimport { Theme as GlideTheme, SpriteMap } from \"@glideapps/glide-data-grid\"\nimport { transparentize } from \"color2k\"\n\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\n\ntype CustomThemeReturn = {\n  theme: Partial<GlideTheme>\n  tableBorderRadius: string\n  tableBorderWidth: string\n  headerIcons: SpriteMap\n}\n\n/**\n * Creates a glide-data-grid compatible theme based on our theme configuration.\n *\n * @return a glide-data-grid compatible theme.\n */\nfunction useCustomTheme(): CustomThemeReturn {\n  const theme: EmotionTheme = useTheme()\n\n  const headerIcons = React.useMemo<SpriteMap>(() => {\n    return {\n      // Material design icon `edit_note`:\n      // https://fonts.google.com/icons?selected=Material%20Symbols%20Outlined%3Aedit_note%3AFILL%400%3Bwght%40400%3BGRAD%400%3Bopsz%4048\n      // We need to provide this as string as explained explained here: https://github.com/glideapps/glide-data-grid/blob/main/packages/core/API.md#headericons\n      editable: p =>\n        `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"40\" viewBox=\"0 96 960 960\" width=\"40\" fill=\"${p.bgColor}\"><path d=\"m800.641 679.743-64.384-64.384 29-29q7.156-6.948 17.642-6.948 10.485 0 17.742 6.948l29 29q6.948 7.464 6.948 17.95 0 10.486-6.948 17.434l-29 29Zm-310.64 246.256v-64.383l210.82-210.821 64.384 64.384-210.821 210.82h-64.383Zm-360-204.872v-50.254h289.743v50.254H130.001Zm0-162.564v-50.255h454.615v50.255H130.001Zm0-162.307v-50.255h454.615v50.255H130.001Z\"/></svg>`,\n    }\n  }, [])\n\n  const glideTheme = React.useMemo<Partial<GlideTheme>>(() => {\n    return {\n      // Explanations: https://github.com/glideapps/glide-data-grid/blob/main/packages/core/API.md#theme\n      accentColor: theme.colors.primary,\n      accentFg: theme.colors.white,\n      accentLight: transparentize(theme.colors.primary, 0.9),\n      borderColor: theme.colors.borderColorLight,\n      horizontalBorderColor: theme.colors.borderColorLight,\n      fontFamily: theme.genericFonts.bodyFont,\n      bgSearchResult: transparentize(theme.colors.primary, 0.9),\n      resizeIndicatorColor: theme.colors.primary,\n      // Header styling:\n      bgIconHeader: theme.colors.fadedText60,\n      fgIconHeader: theme.colors.white,\n      bgHeader: theme.colors.bgMix,\n      bgHeaderHasFocus: theme.colors.secondaryBg,\n      bgHeaderHovered: theme.colors.secondaryBg,\n      textHeader: theme.colors.fadedText60,\n      textHeaderSelected: theme.colors.white,\n      textGroupHeader: theme.colors.fadedText60,\n      headerFontStyle: `${theme.fontSizes.sm}`,\n      // Cell styling:\n      baseFontStyle: theme.fontSizes.sm,\n      editorFontSize: theme.fontSizes.sm,\n      textDark: theme.colors.bodyText,\n      textMedium: transparentize(theme.colors.bodyText, 0.2),\n      textLight: theme.colors.fadedText40,\n      textBubble: theme.colors.fadedText60,\n      bgCell: theme.colors.bgColor,\n      bgCellMedium: theme.colors.bgColor, // uses same as bgCell to always have the same background color\n      cellHorizontalPadding: 8,\n      cellVerticalPadding: 3,\n      // Special cells:\n      bgBubble: theme.colors.secondaryBg,\n      bgBubbleSelected: theme.colors.secondaryBg,\n      linkColor: theme.colors.linkText,\n      drilldownBorder: theme.colors.darkenedBgMix25,\n      // Unused settings:\n      // lineHeight\n      // headerIconSize: number;\n      // markerFontStyle: string;\n      // resizeIndicatorColor?: string;\n      // headerBottomBorderColor?: string;\n    }\n  }, [theme])\n\n  return {\n    theme: glideTheme,\n    tableBorderRadius: theme.radii.default,\n    tableBorderWidth: theme.sizes.borderWidth,\n    // Configure custom SVG icons used in the column header:\n    headerIcons,\n  }\n}\n\nexport default useCustomTheme\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport { DataEditorProps, GridCell } from \"@glideapps/glide-data-grid\"\n\nimport { getCellFromArrow } from \"@streamlit/lib/src/components/widgets/DataFrame/arrowUtils\"\nimport {\n  BaseColumn,\n  getErrorCell,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\nimport EditingState from \"@streamlit/lib/src/components/widgets/DataFrame/EditingState\"\nimport { Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport { notNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\ntype DataLoaderReturn = Pick<DataEditorProps, \"getCellContent\">\n\n/**\n * Custom hook that handles all data loading capabilities for the interactive data table.\n * This also includes the logic to load and configure columns.\n *\n * @param data - The Arrow data extracted from the proto message\n * @param numRows - The number of rows of the current state (includes row additions/deletions)\n * @param editingState - The editing state of the data editor\n *\n * @returns the columns and the cell content getter compatible with glide-data-grid.\n */\nfunction useDataLoader(\n  data: Quiver,\n  columns: BaseColumn[],\n  numRows: number,\n  editingState: React.MutableRefObject<EditingState>\n): DataLoaderReturn {\n  // data.columns refers to the header rows (not sure about why it is named this way)\n  const numHeaderRows = data.columns.length\n  const getCellContent = React.useCallback(\n    ([col, row]: readonly [number, number]): GridCell => {\n      if (col > columns.length - 1) {\n        return getErrorCell(\n          \"Column index out of bounds.\",\n          \"This should never happen. Please report this bug.\"\n        )\n      }\n\n      if (row > numRows - 1) {\n        return getErrorCell(\n          \"Row index out of bounds.\",\n          \"This should never happen. Please report this bug.\"\n        )\n      }\n      const column = columns[col]\n\n      const originalCol = column.indexNumber\n      const originalRow = editingState.current.getOriginalRowIndex(row)\n      const isAddedRow = editingState.current.isAddedRow(originalRow)\n      // Use editing state if editable or if it is an appended row\n      if (column.isEditable || isAddedRow) {\n        const editedCell = editingState.current.getCell(\n          originalCol,\n          originalRow\n        )\n        if (notNullOrUndefined(editedCell)) {\n          return editedCell\n        } else if (isAddedRow) {\n          // This is not expected to happen. All cells to added rows should\n          // be defined. If not, we return a specific error cell.\n          return getErrorCell(\n            \"Error during cell creation.\",\n            \"This should never happen. Please report this bug. \" +\n              `No cell found for an added row: col=${originalCol}; row=${originalRow}`\n          )\n        }\n      }\n\n      try {\n        // We skip all header rows to get to to the actual data rows.\n        // in th Arrow data.\n        const arrowCell = data.getCell(\n          originalRow + numHeaderRows,\n          originalCol\n        )\n        return getCellFromArrow(column, arrowCell, data.cssStyles)\n      } catch (error) {\n        return getErrorCell(\n          \"Error during cell creation.\",\n          `This should never happen. Please report this bug. \\nError: ${error}`\n        )\n      }\n    },\n    [columns, numRows, data, editingState, numHeaderRows]\n  )\n\n  return {\n    getCellContent,\n  }\n}\n\nexport default useDataLoader\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport {\n  DataEditorProps,\n  GridCell,\n  GridColumn,\n} from \"@glideapps/glide-data-grid\"\nimport { useColumnSort as useGlideColumnSort } from \"@glideapps/glide-data-grid-source\"\n\nimport {\n  BaseColumn,\n  toGlideColumn,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\n\n/**\n * Configuration type for column sorting hook.\n */\ntype ColumnSortConfig = {\n  column: GridColumn\n  mode?: \"default\" | \"raw\" | \"smart\"\n  direction?: \"asc\" | \"desc\"\n}\n\n/**\n * Updates the column headers based on the sorting configuration.\n *\n * @param columns - The columns of the table.\n * @param sort - The current sorting configuration.\n *\n * @returns The updated list of columns.\n */\nfunction updateSortingHeader(\n  columns: BaseColumn[],\n  sort: ColumnSortConfig | undefined\n): BaseColumn[] {\n  if (sort === undefined) {\n    return columns\n  }\n  return columns.map(column => {\n    if (column.id === sort.column.id) {\n      return {\n        ...column,\n        title:\n          sort.direction === \"asc\" ? `↑ ${column.title}` : `↓ ${column.title}`,\n      }\n    }\n    return column\n  })\n}\n\ntype ColumnSortReturn = {\n  columns: BaseColumn[]\n  sortColumn: (index: number) => void\n  getOriginalIndex: (index: number) => number\n} & Pick<DataEditorProps, \"getCellContent\">\n\n/**\n * A React hook that provides column sorting functionality.\n *\n * @param numRows - The number of rows in the table.\n * @param columns - The columns of the table.\n *\n * @returns An object containing the following properties:\n * - `columns`: The updated list of columns.\n * - `sortColumn`: A function that sorts the column at the given index.\n * - `getOriginalIndex`: A function that returns the original index of the row at the given index.\n * - `getCellContent`: An updated function that returns the content of the cell at the given column and row indices.\n */\nfunction useColumnSort(\n  numRows: number,\n  columns: BaseColumn[],\n  getCellContent: ([col, row]: readonly [number, number]) => GridCell\n): ColumnSortReturn {\n  const [sort, setSort] = React.useState<ColumnSortConfig>()\n\n  const { getCellContent: getCellContentSorted, getOriginalIndex } =\n    useGlideColumnSort({\n      columns: columns.map(column => toGlideColumn(column)),\n      getCellContent,\n      rows: numRows,\n      sort,\n    })\n\n  const updatedColumns = React.useMemo(() => {\n    return updateSortingHeader(columns, sort)\n  }, [columns, sort])\n\n  const sortColumn = React.useCallback(\n    (index: number) => {\n      let sortDirection = \"asc\"\n      const clickedColumn = updatedColumns[index]\n\n      if (sort && sort.column.id === clickedColumn.id) {\n        // The clicked column is already sorted\n        if (sort.direction === \"asc\") {\n          // Sort column descending\n          sortDirection = \"desc\"\n        } else {\n          // Remove sorting of column\n          setSort(undefined)\n          return\n        }\n      }\n\n      setSort({\n        column: toGlideColumn(clickedColumn),\n        direction: sortDirection,\n        mode: clickedColumn.sortMode,\n      } as ColumnSortConfig)\n    },\n    [sort, updatedColumns]\n  )\n\n  return {\n    columns: updatedColumns,\n    sortColumn,\n    getOriginalIndex,\n    getCellContent: getCellContentSorted,\n  }\n}\n\nexport default useColumnSort\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport { CompactSelection, GridSelection } from \"@glideapps/glide-data-grid\"\nimport isEqual from \"lodash/isEqual\"\n\nimport { BaseColumn } from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\nimport { Arrow as ArrowProto } from \"@streamlit/lib/src/proto\"\n\nexport type SelectionHandlerReturn = {\n  // The current selection state\n  gridSelection: GridSelection\n  // True, if row selection is activated\n  isRowSelectionActivated: boolean\n  // True, if multi row selection is activated\n  isMultiRowSelectionActivated: boolean\n  // True, if column selection is activated\n  isColumnSelectionActivated: boolean\n  // True, if multi column selections is activated\n  isMultiColumnSelectionActivated: boolean\n  // True, if at least one row is selected\n  isRowSelected: boolean\n  // True, if at least one column is selected\n  isColumnSelected: boolean\n  // True, if at least one cell is selected\n  isCellSelected: boolean\n  // Callback to clear selections\n  clearSelection: (keepRows?: boolean, keepColumns?: boolean) => void\n  // Callback to process selection changes from the grid\n  processSelectionChange: (newSelection: GridSelection) => void\n}\n\n/**\n * Custom hook that handles all selection capabilities for the interactive data table.\n *\n * @param element - The Arrow proto message\n * @param isEmptyTable - Whether the table is empty\n * @param isDisabled - Whether the table is disabled\n * @param columns - The columns of the table.\n * @param syncSelectionState - The callback to sync the selection state\n *\n * @returns the selection handler return object\n */\nfunction useSelectionHandler(\n  element: ArrowProto,\n  isEmptyTable: boolean,\n  isDisabled: boolean,\n  columns: BaseColumn[],\n  syncSelectionState: (newSelection: GridSelection) => void\n): SelectionHandlerReturn {\n  const [gridSelection, setGridSelection] = React.useState<GridSelection>({\n    columns: CompactSelection.empty(),\n    rows: CompactSelection.empty(),\n    current: undefined,\n  })\n\n  const isRowSelectionActivated =\n    !isEmptyTable &&\n    !isDisabled &&\n    (element.selectionMode.includes(ArrowProto.SelectionMode.MULTI_ROW) ||\n      element.selectionMode.includes(ArrowProto.SelectionMode.SINGLE_ROW))\n  const isMultiRowSelectionActivated =\n    isRowSelectionActivated &&\n    element.selectionMode.includes(ArrowProto.SelectionMode.MULTI_ROW)\n\n  const isColumnSelectionActivated =\n    !isEmptyTable &&\n    !isDisabled &&\n    (element.selectionMode.includes(ArrowProto.SelectionMode.SINGLE_COLUMN) ||\n      element.selectionMode.includes(ArrowProto.SelectionMode.MULTI_COLUMN))\n  const isMultiColumnSelectionActivated =\n    isColumnSelectionActivated &&\n    element.selectionMode.includes(ArrowProto.SelectionMode.MULTI_COLUMN)\n\n  const isRowSelected = gridSelection.rows.length > 0\n  const isColumnSelected = gridSelection.columns.length > 0\n  const isCellSelected = gridSelection.current !== undefined\n\n  /**\n   * This callback is used to process selection changes and - if activated -\n   * trigger a sync of the state with the widget state\n   */\n  const processSelectionChange = React.useCallback(\n    (newSelection: GridSelection) => {\n      const rowSelectionChanged = !isEqual(\n        newSelection.rows.toArray(),\n        gridSelection.rows.toArray()\n      )\n\n      const columnSelectionChanged = !isEqual(\n        newSelection.columns.toArray(),\n        gridSelection.columns.toArray()\n      )\n\n      const cellSelectionChanged = !isEqual(\n        newSelection.current,\n        gridSelection.current\n      )\n\n      // A flag to determine if the selection should be synced with the widget state\n      let syncSelection =\n        (isRowSelectionActivated && rowSelectionChanged) ||\n        (isColumnSelectionActivated && columnSelectionChanged)\n\n      let updatedSelection = newSelection\n      if (\n        (isRowSelectionActivated || isColumnSelectionActivated) &&\n        newSelection.current !== undefined &&\n        cellSelectionChanged\n      ) {\n        // The default behavior is that row selections are cleared when a cell is selected.\n        // This is not desired when row selection is activated. Instead, we want to keep the\n        // row selection and only update the cell selection.\n        updatedSelection = {\n          ...newSelection,\n          rows: gridSelection.rows,\n          columns: gridSelection.columns,\n        }\n        // It should not sync the selection\n        // when only the cell selection changes\n        syncSelection = false\n      }\n\n      if (\n        rowSelectionChanged &&\n        newSelection.rows.length > 0 &&\n        columnSelectionChanged &&\n        newSelection.columns.length === 0\n      ) {\n        // Keep the column selection if row selection was changed\n        updatedSelection = {\n          ...updatedSelection,\n          columns: gridSelection.columns,\n        }\n        syncSelection = true\n      }\n      if (\n        columnSelectionChanged &&\n        newSelection.columns.length > 0 &&\n        rowSelectionChanged &&\n        newSelection.rows.length === 0\n      ) {\n        // Keep the row selection if column selection was changed\n        updatedSelection = {\n          ...updatedSelection,\n          rows: gridSelection.rows,\n        }\n\n        syncSelection = true\n      }\n\n      if (columnSelectionChanged && updatedSelection.columns.length >= 0) {\n        // Remove all index columns from the column selection\n        // We don't want to allow selection of index columns.\n        let cleanedColumns = updatedSelection.columns\n        columns.forEach((column, idx) => {\n          if (column.isIndex) {\n            cleanedColumns = cleanedColumns.remove(idx)\n          }\n        })\n        if (cleanedColumns.length < updatedSelection.columns.length) {\n          updatedSelection = {\n            ...updatedSelection,\n            columns: cleanedColumns,\n          }\n        }\n      }\n\n      setGridSelection(updatedSelection)\n\n      if (syncSelection) {\n        syncSelectionState(updatedSelection)\n      }\n    },\n    [\n      gridSelection,\n      isRowSelectionActivated,\n      isColumnSelectionActivated,\n      syncSelectionState,\n      columns,\n    ]\n  )\n\n  /**\n   * This callback is used to selections (row/column/cell)\n   * and sync the state with the widget state if column or row selections\n   * are activated and the selection has changed.\n   *\n   * @param keepRows - Whether to keep the row selection (default: false)\n   * @param keepColumns - Whether to keep the column selection (default: false)\n   */\n  const clearSelection = React.useCallback(\n    (keepRows = false, keepColumns = false) => {\n      const emptySelection: GridSelection = {\n        columns: keepColumns\n          ? gridSelection.columns\n          : CompactSelection.empty(),\n        rows: keepRows ? gridSelection.rows : CompactSelection.empty(),\n        current: undefined,\n      }\n      setGridSelection(emptySelection)\n      if (\n        (!keepRows && isRowSelectionActivated) ||\n        (!keepColumns && isColumnSelectionActivated)\n      ) {\n        syncSelectionState(emptySelection)\n      }\n    },\n    [\n      gridSelection,\n      isRowSelectionActivated,\n      isColumnSelectionActivated,\n      syncSelectionState,\n    ]\n  )\n\n  return {\n    gridSelection,\n    isRowSelectionActivated,\n    isMultiRowSelectionActivated,\n    isColumnSelectionActivated,\n    isMultiColumnSelectionActivated,\n    isRowSelected,\n    isColumnSelected,\n    isCellSelected,\n    clearSelection,\n    processSelectionChange,\n  }\n}\n\nexport default useSelectionHandler\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport { DataEditorProps } from \"@glideapps/glide-data-grid\"\n\nimport createDownloadLinkElement from \"@streamlit/lib/src/util/createDownloadLinkElement\"\nimport {\n  BaseColumn,\n  toSafeString,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\nimport { logError, logWarning } from \"@streamlit/lib/src/util/log\"\n\n// Delimiter between cells\nconst CSV_DELIMITER = \",\"\n// Quote character for cell values containing special characters\nconst CSV_QUOTE_CHAR = '\"'\n// The character used to escape the quote character within a cell\nconst CSV_ESCAPE_CHAR = '\"'\n// Delimiter between rows (newline)\nconst CSV_ROW_DELIMITER = \"\\n\"\n// Used to indicate Unicode encoding of a text file (for excel compatibility)\nconst CSV_UTF8_BOM = \"\\ufeff\"\n// Regex to check if a value contains special characters that need to be escaped\nconst CSV_SPECIAL_CHARS_REGEX = new RegExp(\n  `[${[CSV_DELIMITER, CSV_QUOTE_CHAR, CSV_ROW_DELIMITER].join(\"\")}]`\n)\n\nexport function toCsvRow(rowValues: any[]): string {\n  return (\n    rowValues.map(cell => escapeValue(cell)).join(CSV_DELIMITER) +\n    CSV_ROW_DELIMITER\n  )\n}\n\n/**\n * Escapes a cell value for CSV export.\n *\n * Makes sure that the value is a string, and special characters are escaped correctly.\n */\nfunction escapeValue(value: any): string {\n  if (isNullOrUndefined(value)) {\n    return \"\"\n  }\n  const strValue = toSafeString(value)\n\n  // Special chars need to be escaped:\n  if (CSV_SPECIAL_CHARS_REGEX.test(strValue)) {\n    // Add quotes around the value:\n    return `${CSV_QUOTE_CHAR}${strValue.replace(\n      // Escape all quote chars if inside a quoted string:\n      new RegExp(CSV_QUOTE_CHAR, \"g\"),\n      CSV_ESCAPE_CHAR + CSV_QUOTE_CHAR\n    )}${CSV_QUOTE_CHAR}`\n  }\n\n  return strValue\n}\n\ntype DataExporterReturn = {\n  // A callback to trigger the data download as CSV\n  exportToCsv: () => void\n}\n\n/**\n * Writes CSV data to a specified writable stream using provided data table parameters.\n * Initiates by writing a UTF-8 Byte Order Mark (BOM) for Excel compatibility, followed by\n * column headers and rows constructed from the cell values obtained through `getCellContent`.\n * The function handles encoding and CSV formatting, concluding by closing the writable stream.\n *\n * @param {WritableStreamDefaultWriter} writable - Target stream for CSV data.\n * @param {DataEditorProps[\"getCellContent\"]} getCellContent - The cell content getter compatible with glide-data-grid.\n * @param {BaseColumn[]} columns - The columns of the table.\n * @param {number} numRows - The number of rows of the current state.\n *\n * @returns {Promise<void>} Promise that resolves when the CSV has been fully written.\n */\nasync function writeCsv(\n  writable: WritableStreamDefaultWriter,\n  getCellContent: DataEditorProps[\"getCellContent\"],\n  columns: BaseColumn[],\n  numRows: number\n): Promise<void> {\n  const textEncoder = new TextEncoder()\n\n  // Write UTF-8 BOM for excel compatibility:\n  await writable.write(textEncoder.encode(CSV_UTF8_BOM))\n\n  // Write headers:\n  const headers: string[] = columns.map(column => column.name)\n  await writable.write(textEncoder.encode(toCsvRow(headers)))\n\n  for (let row = 0; row < numRows; row++) {\n    const rowData: any[] = []\n    columns.forEach((column: BaseColumn, col: number, _map) => {\n      rowData.push(column.getCellValue(getCellContent([col, row])))\n    })\n    // Write row to CSV:\n    await writable.write(textEncoder.encode(toCsvRow(rowData)))\n  }\n\n  await writable.close()\n}\n/**\n * Custom hook that handles all the data export/download logic.\n *\n * @param getCellContent - The cell content getter compatible with glide-data-grid.\n * @param columns - The columns of the table.\n * @param numRows - The number of rows of the current state.\n *\n * @returns a callback to trigger the data download as CSV.\n */\nfunction useDataExporter(\n  getCellContent: DataEditorProps[\"getCellContent\"],\n  columns: BaseColumn[],\n  numRows: number,\n  enforceDownloadInNewTab: boolean\n): DataExporterReturn {\n  const exportToCsv = React.useCallback(async () => {\n    const timestamp = new Date().toISOString().slice(0, 16).replace(\":\", \"-\")\n    const suggestedName = `${timestamp}_export.csv`\n    try {\n      // Lazy import to prevent weird breakage in some niche cases\n      // (e.g. usage within the replay.io browser). The package works well\n      // in all of the common browser, but might cause some trouble in\n      // less common browsers. To not crash the whole app, we just lazy import\n      // this here.\n      const nativeFileSystemAdapter = await import(\n        \"native-file-system-adapter\"\n      )\n      const fileHandle = await nativeFileSystemAdapter.showSaveFilePicker({\n        suggestedName,\n        types: [{ accept: { \"text/csv\": [\".csv\"] } }],\n        excludeAcceptAllOption: false,\n      })\n\n      const writer = await fileHandle.createWritable()\n\n      await writeCsv(writer, getCellContent, columns, numRows)\n    } catch (error) {\n      if (error instanceof Error && error.name === \"AbortError\") {\n        // The user has canceled the save dialog. Do nothing.\n        return\n      }\n\n      try {\n        logWarning(\n          \"Failed to export data as CSV with FileSystem API, trying fallback method\",\n          error\n        )\n        // Simulated WritableStream that builds CSV content in-memory for the Blob fallback method\n        let csvContent = \"\"\n\n        const inMemoryWriter = new WritableStream({\n          write: async chunk => {\n            csvContent += new TextDecoder(\"utf-8\").decode(chunk)\n          },\n          close: async () => {},\n        })\n\n        await writeCsv(\n          inMemoryWriter.getWriter(),\n          getCellContent,\n          columns,\n          numRows\n        )\n\n        // Fallback to the old browser download method:\n        const blob = new Blob([csvContent], {\n          type: \"text/csv;charset=utf-8;\",\n        })\n        const url = URL.createObjectURL(blob)\n\n        const link = createDownloadLinkElement({\n          enforceDownloadInNewTab,\n          url,\n          filename: suggestedName,\n        })\n\n        link.style.display = \"none\"\n\n        document.body.appendChild(link) // Required for FF\n        link.click()\n        document.body.removeChild(link) // Clean up\n        URL.revokeObjectURL(url) // Free up memory\n      } catch (error) {\n        logError(\"Failed to export data as CSV\", error)\n      }\n    }\n  }, [columns, numRows, getCellContent, enforceDownloadInNewTab])\n\n  return {\n    exportToCsv,\n  }\n}\n\nexport default useDataExporter\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport {\n  DataEditorProps,\n  EditableGridCell,\n  GridCell,\n  GridSelection,\n  Item,\n  ValidatedGridCell,\n} from \"@glideapps/glide-data-grid\"\n\nimport { logWarning } from \"@streamlit/lib/src/util/log\"\nimport { notNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\nimport {\n  BaseColumn,\n  isErrorCell,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\nimport EditingState from \"@streamlit/lib/src/components/widgets/DataFrame/EditingState\"\n\n/**\n * Create return type for useDataLoader hook based on the DataEditorProps.\n */\ntype DataEditorReturn = Pick<\n  DataEditorProps,\n  \"onCellEdited\" | \"onPaste\" | \"onRowAppended\" | \"onDelete\" | \"validateCell\"\n>\n\n/**\n * Custom hook to handle all aspects related to data editing. This includes editing cells,\n * pasting from clipboard, and appending & deleting rows.\n *\n * @param columns - The columns of the table.\n * @param fixedNumRows - Whether the number of rows is fixed. This means that rows cannot be added or deleted.\n * @param editingState - The editing state of the data editor.\n * @param getCellContent - Function to get a specific cell.\n * @param getOriginalIndex - Function to map a row ID of the current state to the original row ID.\n *                           This mainly changed by sorting of columns.\n * @param updateNumRows - Callback to sync the number of rows from editing state with the component state.\n * @param refreshCells - Callback that allows to trigger a UI refresh of a selection of cells.\n * @param syncEditState - Callback that needs to be called on all edits. This will also trigger a rerun\n *                     and send widget state to the backend.\n *\n * @returns Glide-data-grid compatible functions for editing capabilities.\n */\nfunction useDataEditor(\n  columns: BaseColumn[],\n  fixedNumRows: boolean,\n  editingState: React.MutableRefObject<EditingState>,\n  getCellContent: ([col, row]: readonly [number, number]) => GridCell,\n  getOriginalIndex: (index: number) => number,\n  refreshCells: (\n    cells: {\n      cell: [number, number]\n    }[]\n  ) => void,\n  updateNumRows: () => void,\n  syncEditState: () => void,\n  clearSelection: () => void\n): DataEditorReturn {\n  const onCellEdited = React.useCallback(\n    (\n      [col, row]: readonly [number, number],\n      updatedCell: EditableGridCell\n    ): void => {\n      const column = columns[col]\n\n      if (!column.isEditable) {\n        return\n      }\n\n      const originalCol = column.indexNumber\n\n      // We need to apply two different mappings here. One for the case that\n      // the user has sorted a column, and another one from the editing state\n      // to get the correct row ID when the user has deleted rows.\n      const originalRow = editingState.current.getOriginalRowIndex(\n        getOriginalIndex(row)\n      )\n      const currentCell = getCellContent([col, row])\n      const currentValue = column.getCellValue(currentCell)\n      const newValue = column.getCellValue(updatedCell)\n      if (!isErrorCell(currentCell) && newValue === currentValue) {\n        // No editing is required since the values did not change\n        return\n      }\n\n      const newCell = column.getCell(newValue, true)\n      // Only update the cell if the new cell is not causing any errors:\n      if (!isErrorCell(newCell)) {\n        editingState.current.setCell(originalCol, originalRow, {\n          ...newCell,\n          lastUpdated: performance.now(),\n        })\n\n        syncEditState()\n      } else {\n        logWarning(\n          `Not applying the cell edit since it causes this error:\\n ${newCell.data}`\n        )\n      }\n    },\n    [columns, editingState, getOriginalIndex, getCellContent, syncEditState]\n  )\n\n  /**\n   * Appends a new empty row to the end of the table.\n   */\n  const appendEmptyRow = React.useCallback(() => {\n    if (fixedNumRows) {\n      // Appending rows is not supported\n      return\n    }\n\n    const newRow: Map<number, GridCell> = new Map()\n    columns.forEach(column => {\n      // For the default value, we trust the developer to make a valid choice,\n      // so we do not validate the value here.\n      newRow.set(column.indexNumber, column.getCell(column.defaultValue))\n    })\n    editingState.current.addRow(newRow)\n    updateNumRows()\n  }, [columns, editingState, fixedNumRows, updateNumRows])\n\n  /**\n   * Callback used by glide-data-grid when the user adds a new row in the table UI.\n   */\n  const onRowAppended = React.useCallback(() => {\n    if (fixedNumRows) {\n      // Appending rows is not supported\n      return\n    }\n\n    appendEmptyRow()\n    syncEditState()\n  }, [appendEmptyRow, syncEditState, fixedNumRows])\n\n  /**\n   * Callback used by glide-data-grid when the user deletes a row or cell value in the table UI.\n   */\n  const onDelete = React.useCallback(\n    (selection: GridSelection): GridSelection | boolean => {\n      if (selection.rows.length > 0) {\n        // User has selected one or more rows\n        if (fixedNumRows) {\n          // Deleting rows is not supported\n          return true\n        }\n\n        const rowsToDelete = selection.rows.toArray().map(row => {\n          return editingState.current.getOriginalRowIndex(\n            getOriginalIndex(row)\n          )\n        })\n        // We need to delete all rows at once, so that the indexes work correct\n        editingState.current.deleteRows(rowsToDelete)\n        updateNumRows()\n        clearSelection()\n        syncEditState()\n        return false\n      }\n      if (selection.current?.range) {\n        // User has selected one or more cells\n        const updatedCells: { cell: [number, number] }[] = []\n        const selectedArea = selection.current.range\n        for (\n          let row = selectedArea.y;\n          row < selectedArea.y + selectedArea.height;\n          row++\n        ) {\n          for (\n            let col = selectedArea.x;\n            col < selectedArea.x + selectedArea.width;\n            col++\n          ) {\n            const column = columns[col]\n            // Only allow deletion if the column is editable and not configured as required\n            if (column.isEditable && !column.isRequired) {\n              updatedCells.push({\n                cell: [col, row],\n              })\n              onCellEdited(\n                [col, row],\n                column.getCell(null) as EditableGridCell\n              )\n            }\n          }\n        }\n\n        if (updatedCells.length > 0) {\n          syncEditState()\n          refreshCells(updatedCells)\n        }\n        return false\n      }\n      return true\n    },\n    [\n      columns,\n      editingState,\n      fixedNumRows,\n      refreshCells,\n      getOriginalIndex,\n      syncEditState,\n      onCellEdited,\n      clearSelection,\n      updateNumRows,\n    ]\n  )\n\n  /**\n   * Callback used by glide-data-grid when the user pastes data into the table.\n   */\n  const onPaste = React.useCallback(\n    (target: Item, values: readonly (readonly string[])[]): boolean => {\n      const [targetCol, targetRow] = target\n\n      const updatedCells: { cell: [number, number] }[] = []\n\n      for (let row = 0; row < values.length; row++) {\n        const rowData = values[row]\n        if (row + targetRow >= editingState.current.getNumRows()) {\n          if (fixedNumRows) {\n            // Only add new rows if editing mode is dynamic, otherwise break here\n            break\n          }\n          // Adding rows during paste would not work currently. However, we already disallow\n          // sorting in dynamic mode, so we don't have to do anything here.\n          appendEmptyRow()\n        }\n        for (let col = 0; col < rowData.length; col++) {\n          const pasteDataValue = rowData[col]\n\n          const rowIndex = row + targetRow\n          const colIndex = col + targetCol\n\n          if (colIndex >= columns.length) {\n            // We could potentially add new columns here in the future.\n            break\n          }\n\n          const column = columns[colIndex]\n          // Only add to columns that are editable:\n          if (column.isEditable) {\n            const newCell = column.getCell(pasteDataValue, true)\n\n            // We are not editing cells if the pasted value leads to an error:\n            if (notNullOrUndefined(newCell) && !isErrorCell(newCell)) {\n              const originalCol = column.indexNumber\n              const originalRow = editingState.current.getOriginalRowIndex(\n                getOriginalIndex(rowIndex)\n              )\n              const currentValue = column.getCellValue(\n                getCellContent([colIndex, rowIndex])\n              )\n              const newValue = column.getCellValue(newCell)\n              // Edit the cell only if the value actually changed:\n              if (newValue !== currentValue) {\n                editingState.current.setCell(originalCol, originalRow, {\n                  ...newCell,\n                  lastUpdated: performance.now(),\n                })\n\n                updatedCells.push({\n                  cell: [colIndex, rowIndex],\n                })\n              }\n            }\n          }\n        }\n\n        if (updatedCells.length > 0) {\n          syncEditState()\n          refreshCells(updatedCells)\n        }\n      }\n\n      return false\n    },\n    [\n      columns,\n      editingState,\n      fixedNumRows,\n      getOriginalIndex,\n      getCellContent,\n      appendEmptyRow,\n      syncEditState,\n      refreshCells,\n    ]\n  )\n\n  /**\n   * Callback used by glide-data-grid to validate the data inputted into a cell by the user.\n   */\n  const validateCell = React.useCallback(\n    (cell: Item, newValue: EditableGridCell) => {\n      const col = cell[0]\n      if (col >= columns.length) {\n        // This should never happen.\n        // But we return true (default) to avoid any unknown issues.\n        return true\n      }\n\n      const column = columns[col]\n      if (column.validateInput) {\n        // We get the actual raw value of the new cell and\n        // validate it based on the column validateInput implementation:\n        const validationResult = column.validateInput(\n          column.getCellValue(newValue)\n        )\n        if (validationResult === true || validationResult === false) {\n          // Only return if the validation result is a valid boolean value (true or false)\n          // validationResult can also be other values, so we need to check this specifically.\n          return validationResult\n        }\n        // If it is any other value, we return it as a corrected cell:\n        return column.getCell(validationResult) as ValidatedGridCell\n      }\n      // If no validation is implemented, we accept the value:\n      return true\n    },\n    [columns]\n  )\n\n  return {\n    onCellEdited,\n    onPaste,\n    onRowAppended,\n    onDelete,\n    validateCell,\n  }\n}\n\nexport default useDataEditor\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport {\n  DataEditorProps,\n  GridCell,\n  GridMouseEventArgs,\n} from \"@glideapps/glide-data-grid\"\n\nimport { notNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\nimport {\n  BaseColumn,\n  hasTooltip,\n  isMissingValueCell,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\n\n// Debounce time for triggering the tooltip on hover.\nexport const DEBOUNCE_TIME_MS = 600\n// Tooltip message for required cells that are empty.\nexport const REQUIRED_CELL_TOOLTIP = \"⚠️ Please fill out this cell.\"\n\nexport type TooltipsReturn = {\n  // The tooltip to show (if any):\n  tooltip: { content: string; left: number; top: number } | undefined\n  // A callback to clear the tooltip:\n  clearTooltip: () => void\n  // The glide-data-grid function that is called when a cell is hovered:\n} & Pick<DataEditorProps, \"onItemHovered\">\n\n/**\n * Hook that can show a tooltip when hovering over a cell or header if configured.\n *\n * The tooltip is shown after a delay, and is cleared when the user clicks outside,\n * fires escape, or moves outside of the target cell.\n *\n * @param columns columns of the datagrid\n * @param getCellContent function that returns the cell content for a given cell position\n * @returns the tooltip to show (if any), a callback to clear the tooltip, and the\n * onItemHovered callback to pass to the datagrid\n */\nfunction useTooltips(\n  columns: BaseColumn[],\n  getCellContent: ([col, row]: readonly [number, number]) => GridCell\n): TooltipsReturn {\n  const [tooltip, setTooltip] = React.useState<\n    { content: string; left: number; top: number } | undefined\n  >()\n  const timeoutRef = React.useRef<any>(null)\n\n  const onItemHovered = React.useCallback(\n    (args: GridMouseEventArgs) => {\n      // Always reset the tooltips on any change here\n      clearTimeout(timeoutRef.current)\n      timeoutRef.current = 0\n      setTooltip(undefined)\n\n      if ((args.kind === \"header\" || args.kind === \"cell\") && args.location) {\n        const colIdx = args.location[0]\n        const rowIdx = args.location[1]\n        let tooltipContent: string | undefined\n\n        if (colIdx < 0 || colIdx >= columns.length) {\n          // Ignore negative column index (Row index column)\n          // and column index that is out of bounds\n          return\n        }\n\n        const column = columns[colIdx]\n\n        if (args.kind === \"header\" && notNullOrUndefined(column)) {\n          tooltipContent = column.help\n        } else if (args.kind === \"cell\") {\n          // TODO(lukasmasuch): Ignore the last row if num_rows=dynamic (trailing row).\n\n          const cell = getCellContent([colIdx, rowIdx])\n          if (\n            column.isRequired &&\n            column.isEditable &&\n            isMissingValueCell(cell)\n          ) {\n            tooltipContent = REQUIRED_CELL_TOOLTIP\n          } else if (hasTooltip(cell)) {\n            tooltipContent = cell.tooltip\n          }\n        }\n\n        if (tooltipContent) {\n          timeoutRef.current = setTimeout(() => {\n            if (tooltipContent) {\n              setTooltip({\n                content: tooltipContent,\n                left: args.bounds.x + args.bounds.width / 2,\n                top: args.bounds.y,\n              })\n            }\n          }, DEBOUNCE_TIME_MS)\n        }\n      }\n    },\n    [columns, getCellContent, setTooltip, timeoutRef]\n  )\n\n  const clearTooltip = React.useCallback(() => {\n    setTooltip(undefined)\n  }, [setTooltip])\n\n  return {\n    tooltip,\n    clearTooltip,\n    onItemHovered,\n  }\n}\n\nexport default useTooltips\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport {\n  BaseDrawArgs,\n  DataEditorProps,\n  DrawCellCallback,\n  drawTextCell,\n  Theme as GlideTheme,\n  Rectangle,\n} from \"@glideapps/glide-data-grid\"\nimport {\n  DatePickerCell,\n  DropdownCell,\n  RangeCell,\n  SparklineCell,\n} from \"@glideapps/glide-data-grid-cells\"\n\nimport {\n  BaseColumn,\n  CustomCells,\n  isMissingValueCell,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\n\n// Token used for missing values (null, NaN, etc.)\nconst NULL_VALUE_TOKEN = \"None\"\n\n/**\n * Draw a red indicator in the top right corner of the cell\n * to indicate that the cell is required.\n */\nexport function drawRequiredIndicator(\n  ctx: CanvasRenderingContext2D,\n  rect: Rectangle,\n  theme: GlideTheme\n): void {\n  ctx.save()\n  ctx.beginPath()\n  // We are first moving the drawing position under the top right corner\n  // 8 pixels from left side (this is the size triangle)\n  // and 1 pixel from top side (to be under the cell border).\n  ctx.moveTo(rect.x + rect.width - 8, rect.y + 1)\n  // We draw the first line to the top right corner.\n  ctx.lineTo(rect.x + rect.width, rect.y + 1)\n  // We draw the second line 8 pixel down on the right cell border\n  ctx.lineTo(rect.x + rect.width, rect.y + 1 + 8)\n  // And now its enough to just fill it with a color to get a triangle.\n  ctx.fillStyle = theme.accentColor\n  ctx.fill()\n  ctx.restore()\n}\n\n/**\n * If a cell is marked as missing, we draw a placeholder symbol with a faded text color.\n */\nexport const drawMissingPlaceholder = (args: BaseDrawArgs): void => {\n  const { cell, theme, ctx } = args\n  drawTextCell(\n    {\n      ...args,\n      theme: {\n        ...theme,\n        textDark: theme.textLight,\n        headerFontFull: `${theme.headerFontStyle} ${theme.fontFamily}`,\n        baseFontFull: `${theme.baseFontStyle} ${theme.fontFamily}`,\n        markerFontFull: `${theme.markerFontStyle} ${theme.fontFamily}`,\n      },\n      // The following props are just added for technical reasons:\n      // @ts-expect-error\n      spriteManager: {},\n      hyperWrapping: false,\n    },\n    NULL_VALUE_TOKEN,\n    cell.contentAlign\n  )\n  // Reset fill style to the original one\n  ctx.fillStyle = theme.textDark\n}\n\n/**\n * Create return type for useCustomRenderer hook based on the DataEditorProps.\n */\ntype CustomRendererReturn = Pick<\n  DataEditorProps,\n  \"drawCell\" | \"customRenderers\"\n>\n\n/**\n * Custom hook that creates some custom cell renderers compatible with glide-data-grid.\n *\n * This includes capabilities like showing a faded placeholder for missing values or\n * a red indicator for required cells.\n *\n * @param columns - The columns of the table.\n *\n * @returns An object containing the following properties:\n * - `drawCell`: A function that overwrites some rendering that can be\n *    passed to the `DataEditor` component.\n * - `customRenderers`: A map of custom cell renderers used by custom cells\n *    that can be passed to the `DataEditor` component.\n */\nfunction useCustomRenderer(columns: BaseColumn[]): CustomRendererReturn {\n  const drawCell: DrawCellCallback = React.useCallback(\n    (args, draw) => {\n      const { cell, theme, ctx, rect } = args\n      const colPos = args.col\n      if (isMissingValueCell(cell) && colPos < columns.length) {\n        const column = columns[colPos]\n\n        // We explicitly ignore some cell types here (e.g. checkbox, progress...) since\n        // they are taking care of rendering their missing value state themselves (usually as empty cell).\n        // All other cell types are rendered with a placeholder symbol and a faded text color via drawMissingPlaceholder.\n        if (\n          [\"checkbox\", \"line_chart\", \"bar_chart\", \"progress\"].includes(\n            column.kind\n          )\n        ) {\n          draw()\n        } else {\n          drawMissingPlaceholder(args as BaseDrawArgs)\n        }\n\n        if (column.isRequired && column.isEditable) {\n          // If the cell value is missing, and it is configured as required & editable,\n          // we draw a red indicator in the top right corner of the cell.\n          drawRequiredIndicator(ctx, rect, theme)\n        }\n        return\n      }\n      draw()\n    },\n    [columns]\n  )\n\n  // Load extra cell renderers from the glide-data-grid-cells package:\n  const customRenderers = React.useMemo(\n    () =>\n      [\n        SparklineCell,\n        DropdownCell,\n        RangeCell,\n        DatePickerCell,\n        ...CustomCells,\n      ] as DataEditorProps[\"customRenderers\"],\n    // This doesn't change during the lifetime of the component,\n    // so we can just run it once at creation time.\n    /* eslint-disable react-hooks/exhaustive-deps */\n    []\n  )\n\n  return {\n    drawCell,\n    customRenderers,\n  }\n}\n\nexport default useCustomRenderer\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useState } from \"react\"\n\nimport { DataEditorProps, GridColumn } from \"@glideapps/glide-data-grid\"\n\ntype ColumnSizerReturn = Pick<DataEditorProps, \"columns\" | \"onColumnResize\">\n\n/**\n * Hook to manage the interactive column resizing capabilities.\n *\n * @param columns - The columns of the table.\n *\n * @returns An object containing the following properties:\n * - columns: The updated list of columns.\n * - onColumnResize: The callback function to be called when a column is resized.\n */\nfunction useColumnSizer(columns: GridColumn[]): ColumnSizerReturn {\n  // The columns with the corresponding empty template for every type:\n  const [columnSizes, setColumnSizes] = useState<Map<string, number>>(\n    () => new Map()\n  )\n\n  const onColumnResize = React.useCallback(\n    (\n      column: GridColumn,\n      _newSize: number,\n      _colIndex: number,\n      newSizeWithGrow: number\n    ) => {\n      if (column.id) {\n        setColumnSizes(new Map(columnSizes).set(column.id, newSizeWithGrow))\n      }\n    },\n    [columnSizes]\n  )\n\n  const sizedColumns = React.useMemo(() => {\n    return columns.map(column => {\n      if (\n        column.id &&\n        columnSizes.has(column.id) &&\n        columnSizes.get(column.id) !== undefined\n      ) {\n        return {\n          ...column,\n          width: columnSizes.get(column.id),\n          // Deactivate grow whenever a column gets manually resized\n          grow: 0,\n        } as GridColumn\n      }\n      return column\n    })\n  }, [columns, columnSizes])\n\n  return {\n    columns: sizedColumns,\n    onColumnResize,\n  }\n}\n\nexport default useColumnSizer\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// TODO: fix incorrect hook usage and delete this lint suppression\n/* eslint-disable react-hooks/exhaustive-deps */\n\nimport React from \"react\"\n\nimport { Size as ResizableSize } from \"re-resizable\"\n\nimport { Arrow as ArrowProto } from \"@streamlit/lib/src/proto\"\nimport { notNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\n// Min column width used for manual and automatic resizing\nexport const MIN_COLUMN_WIDTH = 50\n// Max column width used for manual resizing\nexport const MAX_COLUMN_WIDTH = 1000\n// Max column width used for automatic column sizing\nexport const MAX_COLUMN_AUTO_WIDTH = 500\n// The border size in pixels (2)\n// to prevent overlap problem with selection ring.\nexport const BORDER_THRESHOLD = 2\n// The default row height in pixels\nexport const ROW_HEIGHT = 35\n// Min width for the resizable table container:\n// Based on one column at minimum width + borders\nexport const MIN_TABLE_WIDTH = MIN_COLUMN_WIDTH + BORDER_THRESHOLD\n// Min height for the resizable table container:\n// Based on header + one column, and border threshold\nconst MIN_TABLE_HEIGHT = 2 * ROW_HEIGHT + BORDER_THRESHOLD\n// The default maximum height of the table:\nconst DEFAULT_TABLE_HEIGHT = 400\n\nexport type AutoSizerReturn = {\n  // The minimum height that the data grid can be resized to\n  minHeight: number\n  // The maximum height of the data grid can be resized to\n  maxHeight: number\n  // The minimum width of the data grid can be resized to\n  minWidth: number\n  // The maximum width of the data grid can be resized to\n  maxWidth: number\n  // The current (or initial) size of the data grid\n  resizableSize: ResizableSize\n  // A callback function to change the size of the data grid.\n  setResizableSize: React.Dispatch<React.SetStateAction<ResizableSize>>\n}\n\nexport function calculateMaxHeight(numRows: number): number {\n  return Math.max(numRows * ROW_HEIGHT + BORDER_THRESHOLD, MIN_TABLE_HEIGHT)\n}\n/**\n * A custom React hook that manages all aspects related to the size of the table.\n *\n * @param element - The ArrowProto element\n * @param numRows - The number of rows in the table\n * @param usesGroupRow - Whether the table uses a group row to display multiple column headers.\n * @param containerWidth - The width of the surrounding container\n * @param containerHeight - The height of the surrounding container\n * @param isFullScreen - Whether the table is in fullscreen mode\n *\n * @returns The row height, min/max height & width, and the current size of the resizable container.\n */\nfunction useTableSizer(\n  element: ArrowProto,\n  numRows: number,\n  usesGroupRow: boolean,\n  containerWidth: number,\n  containerHeight?: number,\n  isFullScreen?: boolean\n): AutoSizerReturn {\n  // Group row + column header row\n  const numHeaderRows = usesGroupRow ? 2 : 1\n  const numTrailingRows =\n    element.editingMode === ArrowProto.EditingMode.DYNAMIC ? 1 : 0\n  // Calculate the maximum height of the table based on the number of rows:\n  let maxHeight = calculateMaxHeight(numRows + numHeaderRows + numTrailingRows)\n\n  // The initial height is either the default table height or the maximum\n  // (full) height based if its smaller than the default table height.\n  // The reason why we have initial height is that the table itself is\n  // resizable by the user. So, it starts with initial height but can be\n  // resized between min and max height.\n  let initialHeight = Math.min(maxHeight, DEFAULT_TABLE_HEIGHT)\n\n  if (element.height) {\n    // User has explicitly configured a height\n    initialHeight = Math.max(element.height, MIN_TABLE_HEIGHT)\n    maxHeight = Math.max(element.height, maxHeight)\n  }\n\n  if (containerHeight) {\n    // If container height is set (e.g. when used in fullscreen)\n    // The maxHeight and height should not be larger than container height\n    initialHeight = Math.min(initialHeight, containerHeight)\n    maxHeight = Math.min(maxHeight, containerHeight)\n\n    if (!element.height) {\n      // If no explicit height is set, set height to max height (fullscreen mode)\n      initialHeight = maxHeight\n    }\n  }\n\n  // The available width should be at least the minimum table width\n  // to prevent \"maximum update depth exceeded\" error. The reason\n  // is that the container width can be -1 in some edge cases\n  // caused by the resize observer in the Block component.\n  // This can trigger the \"maximum update depth exceeded\" error\n  // within the grid component.\n  const availableWidth = Math.max(containerWidth, MIN_TABLE_WIDTH)\n\n  // The initial width of the data grid.\n  // If not set, the data grid will be auto adapted to its content.\n  // The reason why we have initial width is that the data grid itself\n  // is resizable by the user. It starts with initial width but can be\n  // resized between min and max width.\n  let initialWidth: number | undefined\n  // The maximum width of the data grid can be resized to.\n  let maxWidth = availableWidth\n\n  if (element.useContainerWidth) {\n    // If user has set use_container_width,\n    // use the full container (available) width.\n    initialWidth = availableWidth\n  } else if (element.width) {\n    // The user has explicitly configured a width\n    // use it but keep between the MIN_TABLE_WIDTH\n    // and the available width.\n    initialWidth = Math.min(\n      Math.max(element.width, MIN_TABLE_WIDTH),\n      availableWidth\n    )\n    // Make sure that the max width we configure is between the user\n    // configured width and the available (container) width.\n    maxWidth = Math.min(Math.max(element.width, maxWidth), availableWidth)\n  }\n\n  const [resizableSize, setResizableSize] = React.useState<ResizableSize>({\n    // If user hasn't specified a width via `width` or `use_container_width`,\n    // we configure the table to 100%. Which will cause the data grid to\n    // calculate the best size on the content and use that.\n    width: initialWidth || \"100%\",\n    height: initialHeight,\n  })\n\n  React.useLayoutEffect(() => {\n    // This prevents weird table resizing behavior if the container width\n    // changes and the table uses the full container width.\n    if (element.useContainerWidth && resizableSize.width === \"100%\") {\n      setResizableSize({\n        width: availableWidth,\n        height: resizableSize.height,\n      })\n    }\n  }, [availableWidth])\n\n  // Reset the height if the number of rows changes (e.g. via add_rows):\n  React.useLayoutEffect(() => {\n    setResizableSize({\n      width: resizableSize.width,\n      height: initialHeight,\n    })\n  }, [numRows])\n\n  // Reset the width if the element width parameter was changed:\n  React.useLayoutEffect(() => {\n    setResizableSize({\n      width: initialWidth || \"100%\",\n      height: resizableSize.height,\n    })\n  }, [initialWidth])\n\n  // Reset the height if the element height parameter was changed:\n  React.useLayoutEffect(() => {\n    setResizableSize({\n      width: resizableSize.width,\n      height: initialHeight,\n    })\n  }, [initialHeight])\n\n  // Change sizing if the fullscreen mode is activated or deactivated:\n  React.useLayoutEffect(() => {\n    if (isFullScreen) {\n      const stretchColumns: boolean =\n        element.useContainerWidth ||\n        (notNullOrUndefined(element.width) && element.width > 0)\n      setResizableSize({\n        width: stretchColumns ? maxWidth : \"100%\",\n        height: maxHeight,\n      })\n    } else {\n      setResizableSize({\n        width: initialWidth || \"100%\",\n        height: initialHeight,\n      })\n    }\n  }, [isFullScreen])\n\n  return {\n    minHeight: MIN_TABLE_HEIGHT,\n    maxHeight,\n    minWidth: MIN_TABLE_WIDTH,\n    maxWidth,\n    resizableSize,\n    setResizableSize,\n  }\n}\n\nexport default useTableSizer\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\"\n\nimport { ImageEditorType } from \"@glideapps/glide-data-grid\"\nimport styled from \"@emotion/styled\"\n\nconst StyledImage = styled.img({\n  maxWidth: \"100%\",\n  maxHeight: \"37.5rem\",\n  objectFit: \"scale-down\",\n})\n\nexport const ImageCellEditor: ImageEditorType = ({ urls }) => {\n  const imageData = urls && urls.length > 0 ? urls[0] : \"\"\n  // Allow external image links to be opened in a new tab on click\n  if (imageData.startsWith(\"http\")) {\n    return (\n      <a href={imageData} target=\"_blank\" rel=\"noreferrer noopener\">\n        <StyledImage src={imageData}></StyledImage>\n      </a>\n    )\n  }\n\n  return <StyledImage src={imageData}></StyledImage>\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\n\nimport { useTheme } from \"@emotion/react\"\nimport { ACCESSIBILITY_TYPE, PLACEMENT, Popover } from \"baseui/popover\"\n\nimport StreamlitMarkdown from \"@streamlit/lib/src/components/shared/StreamlitMarkdown/StreamlitMarkdown\"\nimport { StyledTooltipContentWrapper } from \"@streamlit/lib/src/components/shared/Tooltip/styled-components\"\nimport {\n  EmotionTheme,\n  hasLightBackgroundColor,\n} from \"@streamlit/lib/src/theme\"\n\nexport interface TooltipProps {\n  // The top position of the tooltip.\n  top: number\n  // The left position of the tooltip.\n  left: number\n  // The markdown content of the tooltip.\n  content: string\n  // Callback from useTooltips hook to clear the tooltip\n  clearTooltip: () => void\n}\n\n/**\n * A tooltip that can be positioned anywhere on the screen.\n *\n * This is mostly the same as the shared tooltip implementation, but\n * we cannot use that one since it is a StatefulTooltip and requires\n * a target component and cannot be triggered programmatically.\n * We need to be able to position the tooltip anywhere on the screen, so we use a Popover\n * instead. Since Popover doesn't support positioning to a virtual position,\n * we are using an invisible div as a workaround.\n *\n * @param top The top position of the tooltip.\n * @param left The left position of the tooltip.\n * @param content The markdown content of the tooltip.\n * @returns The tooltip react element.\n */\nfunction Tooltip({\n  top,\n  left,\n  content,\n  clearTooltip,\n}: TooltipProps): ReactElement {\n  const [open, setOpen] = React.useState(true)\n  const theme: EmotionTheme = useTheme()\n  const { colors, fontSizes, radii, fontWeights } = theme\n\n  const closeTooltip = React.useCallback((): void => {\n    setOpen(false)\n    clearTooltip()\n  }, [clearTooltip, setOpen])\n\n  return (\n    <Popover\n      content={\n        <StyledTooltipContentWrapper data-testid=\"stDataFrameTooltipContent\">\n          <StreamlitMarkdown\n            style={{ fontSize: fontSizes.sm }}\n            source={content}\n            allowHTML={false}\n          />\n        </StyledTooltipContentWrapper>\n      }\n      placement={PLACEMENT.top}\n      accessibilityType={ACCESSIBILITY_TYPE.tooltip}\n      showArrow={false}\n      popoverMargin={5}\n      onClickOutside={closeTooltip}\n      onEsc={closeTooltip}\n      overrides={{\n        Body: {\n          style: {\n            // This is annoying, but a bunch of warnings get logged when the\n            // shorthand version `borderRadius` is used here since the long\n            // names are used by BaseWeb and mixing the two is apparently\n            // bad :(\n            borderTopLeftRadius: radii.default,\n            borderTopRightRadius: radii.default,\n            borderBottomLeftRadius: radii.default,\n            borderBottomRightRadius: radii.default,\n\n            paddingTop: \"0 !important\",\n            paddingBottom: \"0 !important\",\n            paddingLeft: \"0 !important\",\n            paddingRight: \"0 !important\",\n\n            backgroundColor: \"transparent\",\n          },\n        },\n        Inner: {\n          style: {\n            backgroundColor: hasLightBackgroundColor(theme)\n              ? colors.bgColor\n              : colors.secondaryBg,\n            color: colors.bodyText,\n            fontSize: fontSizes.sm,\n            fontWeight: fontWeights.normal,\n            // See the long comment about `borderRadius`. The same applies here\n            // to `padding`.\n            paddingTop: \"0 !important\",\n            paddingBottom: \"0 !important\",\n            paddingLeft: \"0 !important\",\n            paddingRight: \"0 !important\",\n          },\n        },\n      }}\n      isOpen={open}\n    >\n      <div\n        data-testid=\"stDataFrameTooltipTarget\"\n        style={{\n          // This is an invisible div that's used to position the tooltip.\n          // The position is provided from outside via the `top` and `left` properties.\n          // This a workaround for the fact that BaseWeb's Popover  doesn't support\n          // positioning to a virtual position and always requires a target\n          // component for positioning.\n          position: \"fixed\",\n          top,\n          left,\n        }}\n      ></div>\n    </Popover>\n  )\n}\n\nexport default Tooltip\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport interface StyledResizableContainerProps {\n  hasCustomizedScrollbars: boolean\n}\n\n/**\n * A resizable data grid container component.\n */\nexport const StyledResizableContainer =\n  styled.div<StyledResizableContainerProps>(\n    ({ hasCustomizedScrollbars, theme }) => ({\n      position: \"relative\",\n      display: \"inline-block\",\n\n      \"& .stDataFrameGlideDataEditor\": {\n        height: \"100%\",\n        minWidth: \"100%\",\n        borderRadius: theme.radii.default,\n      },\n\n      \"& .dvn-scroller\": {\n        // We only want to configure scrollbar aspects for browsers that\n        // don't support custom scrollbars (e.g. Firefox). Also, applying this\n        // in Chrome causes the scrollbar to change to the default scrollbar style.\n        ...(!hasCustomizedScrollbars && { scrollbarWidth: \"thin\" }),\n        [\"overflowX\" as any]: \"auto !important\",\n        [\"overflowY\" as any]: \"auto !important\",\n      },\n    })\n  )\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\n\nimport {\n  CompactSelection,\n  DataEditorRef,\n  DataEditor as GlideDataEditor,\n  GridCell,\n  Item as GridCellPosition,\n  GridMouseEventArgs,\n  GridSelection,\n} from \"@glideapps/glide-data-grid\"\nimport { Resizable } from \"re-resizable\"\nimport {\n  Add,\n  Close,\n  Delete,\n  FileDownload,\n  Search,\n} from \"@emotion-icons/material-outlined\"\n\nimport { useFormClearHelper } from \"@streamlit/lib/src/components/widgets/Form\"\nimport { withFullScreenWrapper } from \"@streamlit/lib/src/components/shared/FullScreenWrapper\"\nimport { Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport { Arrow as ArrowProto } from \"@streamlit/lib/src/proto\"\nimport {\n  WidgetInfo,\n  WidgetStateManager,\n} from \"@streamlit/lib/src/WidgetStateManager\"\nimport { debounce, isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\nimport Toolbar, {\n  ToolbarAction,\n} from \"@streamlit/lib/src/components/shared/Toolbar\"\nimport { LibContext } from \"@streamlit/lib/src/components/core/LibContext\"\nimport { ElementFullscreenContext } from \"@streamlit/lib/src/components/shared/ElementFullscreen/ElementFullscreenContext\"\nimport { useRequiredContext } from \"@streamlit/lib/src/hooks/useRequiredContext\"\n\nimport EditingState, { getColumnName } from \"./EditingState\"\nimport {\n  useColumnLoader,\n  useColumnSizer,\n  useColumnSort,\n  useCustomRenderer,\n  useCustomTheme,\n  useDataEditor,\n  useDataExporter,\n  useDataLoader,\n  useSelectionHandler,\n  useTableSizer,\n  useTooltips,\n} from \"./hooks\"\nimport {\n  BORDER_THRESHOLD,\n  MAX_COLUMN_AUTO_WIDTH,\n  MAX_COLUMN_WIDTH,\n  MIN_COLUMN_WIDTH,\n  ROW_HEIGHT,\n} from \"./hooks/useTableSizer\"\nimport {\n  BaseColumn,\n  getTextCell,\n  ImageCellEditor,\n  toGlideColumn,\n} from \"./columns\"\nimport Tooltip from \"./Tooltip\"\nimport { StyledResizableContainer } from \"./styled-components\"\n\nimport \"@glideapps/glide-data-grid/dist/index.css\"\nimport \"@glideapps/glide-data-grid-cells/dist/index.css\"\n\n// Debounce time for triggering a widget state update\n// This prevents rapid updates to the widget state.\nconst DEBOUNCE_TIME_MS = 150\n// Number of rows that triggers some optimization features\n// for large tables.\nconst LARGE_TABLE_ROWS_THRESHOLD = 150000\n// The size in px of the customized webkit scrollbar (defined in globalStyles)\nconst WEBKIT_SCROLLBAR_SIZE = 6\n\n// This is the state that is sent to the backend\n// This needs to be the same structure that is also defined\n// in the Python code.\nexport interface DataframeState {\n  selection: {\n    rows: number[]\n    // We use column names instead of indices to make\n    // it easier to use and unify with how data editor edits\n    // are stored.\n    columns: string[]\n  }\n}\n\nexport interface DataFrameProps {\n  element: ArrowProto\n  data: Quiver\n  disabled: boolean\n  widgetMgr: WidgetStateManager\n  disableFullscreenMode?: boolean\n  fragmentId?: string\n  width: number\n  height?: number\n}\n\n/**\n * The main component used by dataframe & data_editor to render an editable table.\n *\n * @param element - The element's proto message\n * @param data - The Arrow data to render (extracted from the proto message)\n * @param disabled - Whether the widget is disabled\n * @param widgetMgr - The widget manager\n */\nfunction DataFrame({\n  element,\n  data,\n  disabled,\n  widgetMgr,\n  disableFullscreenMode,\n  fragmentId,\n}: Readonly<DataFrameProps>): ReactElement {\n  const {\n    expanded: isFullScreen,\n    expand,\n    collapse,\n    width: containerWidth,\n    height: containerHeight,\n  } = useRequiredContext(ElementFullscreenContext)\n\n  const resizableRef = React.useRef<Resizable>(null)\n  const dataEditorRef = React.useRef<DataEditorRef>(null)\n  const resizableContainerRef = React.useRef<HTMLDivElement>(null)\n\n  const { theme, headerIcons, tableBorderRadius, tableBorderWidth } =\n    useCustomTheme()\n\n  const {\n    libConfig: { enforceDownloadInNewTab = false }, // Default to false, if no libConfig, e.g. for tests\n  } = React.useContext(LibContext)\n\n  const [isFocused, setIsFocused] = React.useState<boolean>(true)\n  const [showSearch, setShowSearch] = React.useState(false)\n  const [hasVerticalScroll, setHasVerticalScroll] =\n    React.useState<boolean>(false)\n  const [hasHorizontalScroll, setHasHorizontalScroll] =\n    React.useState<boolean>(false)\n\n  // Determine if the device is primary using touch as input:\n  const isTouchDevice = React.useMemo<boolean>(\n    () => window.matchMedia && window.matchMedia(\"(pointer: coarse)\").matches,\n    []\n  )\n\n  // Determine if it uses customized scrollbars (webkit browsers):\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/::-webkit-scrollbar#css.selectors.-webkit-scrollbar\n  const hasCustomizedScrollbars = React.useMemo<boolean>(\n    () =>\n      (window.navigator.userAgent.includes(\"Mac OS\") &&\n        window.navigator.userAgent.includes(\"Safari\")) ||\n      window.navigator.userAgent.includes(\"Chrome\"),\n    []\n  )\n\n  // This is done to keep some backwards compatibility\n  // so that old arrow proto messages from the st.dataframe\n  // would still work. Those messages don't have the\n  // editingMode field defined.\n  if (isNullOrUndefined(element.editingMode)) {\n    element.editingMode = ArrowProto.EditingMode.READ_ONLY\n  }\n\n  const { READ_ONLY, DYNAMIC } = ArrowProto.EditingMode\n\n  // Number of rows of the table minus 1 for the header row:\n  const dataDimensions = data.dimensions\n  const originalNumRows = Math.max(0, dataDimensions.dataRows)\n\n  // For empty tables, we show an extra row that\n  // contains \"empty\" as a way to indicate that the table is empty.\n  const isEmptyTable =\n    originalNumRows === 0 &&\n    // We don't show empty state for dynamic mode with a table that has\n    // data columns defined.\n    !(element.editingMode === DYNAMIC && dataDimensions.dataColumns > 0)\n\n  // For large tables, we apply some optimizations to handle large data\n  const isLargeTable = originalNumRows > LARGE_TABLE_ROWS_THRESHOLD\n\n  const editingState = React.useRef<EditingState>(\n    new EditingState(originalNumRows)\n  )\n\n  const [numRows, setNumRows] = React.useState(\n    editingState.current.getNumRows()\n  )\n\n  React.useEffect(() => {\n    editingState.current = new EditingState(originalNumRows)\n    setNumRows(editingState.current.getNumRows())\n  }, [originalNumRows])\n\n  const resetEditingState = React.useCallback(() => {\n    editingState.current = new EditingState(originalNumRows)\n    setNumRows(editingState.current.getNumRows())\n  }, [originalNumRows])\n\n  const { columns: originalColumns } = useColumnLoader(element, data, disabled)\n\n  /**\n   * On the first rendering, try to load initial widget state if\n   * it exists. This is required in the case that other elements\n   * are inserted before this widget. In this case, it can happen\n   * that the dataframe component is unmounted and thereby loses\n   * its state. Once the same element is rendered again, we try to\n   * reconstruct the state from the widget manager values.\n   */\n  React.useEffect(\n    () => {\n      if (element.editingMode === READ_ONLY) {\n        // We don't need to load the initial widget state\n        // for read-only dataframes.\n        return\n      }\n\n      const initialWidgetValue = widgetMgr.getStringValue({\n        id: element.id,\n        formId: element.formId,\n      } as WidgetInfo)\n\n      if (!initialWidgetValue) {\n        // No initial widget value was saved in the widget manager.\n        // No need to reconstruct something.\n        return\n      }\n\n      editingState.current.fromJson(initialWidgetValue, originalColumns)\n      setNumRows(editingState.current.getNumRows())\n    },\n    // We only want to run this effect once during the initial component load\n    // so we disable the eslint rule.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  )\n\n  const { getCellContent: getOriginalCellContent } = useDataLoader(\n    data,\n    originalColumns,\n    numRows,\n    editingState\n  )\n\n  const { columns, sortColumn, getOriginalIndex, getCellContent } =\n    useColumnSort(originalNumRows, originalColumns, getOriginalCellContent)\n\n  /**\n   * This callback is used to synchronize the selection state with the state\n   * of the widget state of the component. This might also send a rerun message\n   * to the backend if the selection state has changed.\n   *\n   * @param newSelection - The new selection state\n   */\n  // The debounce method doesn't allow dependency inspection. Therefore, we\n  // need to disable the eslint rule for exhaustive-deps.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const syncSelectionState = React.useCallback(\n    // Use debounce to prevent rapid updates to the widget state.\n    debounce(DEBOUNCE_TIME_MS, (newSelection: GridSelection) => {\n      // If we want to support selections also with the editable mode,\n      // we would need to integrate the `syncEditState` and `syncSelections` functions\n      // into a single function that updates the widget state with both the editing\n      // state and the selection state.\n\n      const selectionState: DataframeState = {\n        selection: {\n          rows: [] as number[],\n          columns: [] as string[],\n        },\n      }\n\n      selectionState.selection.rows = newSelection.rows.toArray().map(row => {\n        return getOriginalIndex(row)\n      })\n      selectionState.selection.columns = newSelection.columns\n        .toArray()\n        .map(columnIdx => {\n          return getColumnName(columns[columnIdx])\n        })\n      const newWidgetState = JSON.stringify(selectionState)\n      const currentWidgetState = widgetMgr.getStringValue({\n        id: element.id,\n        formId: element.formId,\n      } as WidgetInfo)\n\n      // Only update if there is actually a difference to the previous selection state\n      if (\n        currentWidgetState === undefined ||\n        currentWidgetState !== newWidgetState\n      ) {\n        widgetMgr.setStringValue(\n          {\n            id: element.id,\n            formId: element.formId,\n          } as WidgetInfo,\n          newWidgetState,\n          {\n            fromUi: true,\n          },\n          fragmentId\n        )\n      }\n    }),\n    [\n      element.id,\n      element.formId,\n      widgetMgr,\n      fragmentId,\n      getOriginalIndex,\n      getColumnName,\n    ]\n  )\n\n  const {\n    gridSelection,\n    isRowSelectionActivated,\n    isMultiRowSelectionActivated,\n    isColumnSelectionActivated,\n    isMultiColumnSelectionActivated,\n    isRowSelected,\n    isColumnSelected,\n    isCellSelected,\n    clearSelection,\n    processSelectionChange,\n  } = useSelectionHandler(\n    element,\n    isEmptyTable,\n    disabled,\n    columns,\n    syncSelectionState\n  )\n\n  React.useEffect(() => {\n    // Clear cell selections if fullscreen mode changes\n    // but keep row & column selections.\n    // In the past we saw some weird side-effects, so we decided to clean\n    // it when entering fullscreen-mode. If we decide to change this, we have\n    // to play around and get to the bottom of it.\n    clearSelection(true, true)\n    // Only run this on changes to the fullscreen mode:\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isFullScreen])\n\n  // This callback is used to refresh the rendering of specified cells\n  const refreshCells = React.useCallback(\n    (\n      cells: {\n        cell: GridCellPosition\n      }[]\n    ) => {\n      dataEditorRef.current?.updateCells(cells)\n    },\n    []\n  )\n\n  /**\n   * On the first rendering, try to load initial selection state\n   * from the widget state if it exists. This is required in the\n   * case that other elements are inserted before this widget.\n   *\n   * This effect needs to run after the fullscreen effect that\n   * clears cell selections, since both modify the same state object.\n   */\n  React.useEffect(\n    () => {\n      if (!isRowSelectionActivated && !isColumnSelectionActivated) {\n        // Only run this if selections are activated.\n        return\n      }\n\n      const initialWidgetValue = widgetMgr.getStringValue({\n        id: element.id,\n        formId: element.formId,\n      } as WidgetInfo)\n\n      if (initialWidgetValue) {\n        const columnNames: string[] = columns.map(column => {\n          return getColumnName(column)\n        })\n\n        const selectionState: DataframeState = JSON.parse(initialWidgetValue)\n\n        let rowSelection = CompactSelection.empty()\n        let columnSelection = CompactSelection.empty()\n\n        selectionState.selection?.rows?.forEach(row => {\n          rowSelection = rowSelection.add(row)\n        })\n\n        selectionState.selection?.columns?.forEach(column => {\n          columnSelection = columnSelection.add(columnNames.indexOf(column))\n        })\n\n        if (rowSelection.length > 0 || columnSelection.length > 0) {\n          // Update the initial selection state if something was selected\n          const initialSelection: GridSelection = {\n            rows: rowSelection,\n            columns: columnSelection,\n            current: undefined,\n          }\n          processSelectionChange(initialSelection)\n        }\n      }\n    },\n    // We only want to run this effect once during the initial component load\n    // so we disable the eslint rule.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  )\n\n  /**\n   * This callback is used to update the number of rows based\n   * on the latest editing state. This is required to keep the\n   * component state in sync with the editing state.\n   */\n  const updateNumRows = React.useCallback(() => {\n    if (numRows !== editingState.current.getNumRows()) {\n      // Reset the number of rows if it has been changed in the editing state\n      setNumRows(editingState.current.getNumRows())\n    }\n  }, [numRows])\n\n  /**\n   * This callback is used to synchronize the editing state with\n   * the widget state of the component. This might also send a rerun message\n   * to the backend if the editing state has changed.\n   */\n  // The debounce method doesn't allow dependency inspection. Therefore, we\n  // need to disable the eslint rule for exhaustive-deps.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const syncEditState = React.useCallback(\n    // Use debounce to prevent rapid updates to the widget state.\n    debounce(DEBOUNCE_TIME_MS, () => {\n      const currentEditingState = editingState.current.toJson(columns)\n      let currentWidgetState = widgetMgr.getStringValue({\n        id: element.id,\n        formId: element.formId,\n      } as WidgetInfo)\n\n      if (currentWidgetState === undefined) {\n        // Create an empty widget state\n        currentWidgetState = new EditingState(0).toJson([])\n      }\n\n      // Only update if there is actually a difference between editing and widget state\n      if (currentEditingState !== currentWidgetState) {\n        widgetMgr.setStringValue(\n          {\n            id: element.id,\n            formId: element.formId,\n          } as WidgetInfo,\n          currentEditingState,\n          {\n            fromUi: true,\n          },\n          fragmentId\n        )\n      }\n    }),\n    [\n      element.id,\n      element.formId,\n      widgetMgr,\n      fragmentId,\n      columns,\n      editingState.current,\n    ]\n  )\n\n  const { exportToCsv } = useDataExporter(\n    getCellContent,\n    columns,\n    numRows,\n    enforceDownloadInNewTab\n  )\n\n  const { onCellEdited, onPaste, onRowAppended, onDelete, validateCell } =\n    useDataEditor(\n      columns,\n      element.editingMode !== DYNAMIC,\n      editingState,\n      getCellContent,\n      getOriginalIndex,\n      refreshCells,\n      updateNumRows,\n      syncEditState,\n      clearSelection\n    )\n\n  const { tooltip, clearTooltip, onItemHovered } = useTooltips(\n    columns,\n    getCellContent\n  )\n\n  const { drawCell, customRenderers } = useCustomRenderer(columns)\n\n  const transformedColumns = React.useMemo(\n    () => columns.map(column => toGlideColumn(column)),\n    [columns]\n  )\n  const { columns: glideColumns, onColumnResize } =\n    useColumnSizer(transformedColumns)\n\n  // data.columns refers to the header rows, and\n  // not the data columns. Not sure why it is named this way.\n  // To activate the group row feature, we need at least two header rows.\n  const usesGroupRow = data.columns.length > 1\n  const {\n    minHeight,\n    maxHeight,\n    minWidth,\n    maxWidth,\n    resizableSize,\n    setResizableSize,\n  } = useTableSizer(\n    element,\n    numRows,\n    usesGroupRow,\n    containerWidth,\n    containerHeight,\n    isFullScreen\n  )\n\n  // This is used as fallback in case the table is empty to\n  // insert cells indicating this state:\n  const getEmptyStateContent = React.useCallback(\n    ([_col, _row]: readonly [number, number]): GridCell => {\n      return {\n        ...getTextCell(true, false),\n        displayData: \"empty\",\n        contentAlign: \"center\",\n        allowOverlay: false,\n        themeOverride: {\n          textDark: theme.textLight,\n        },\n        span: [0, Math.max(columns.length - 1, 0)],\n      } as GridCell\n    },\n    [columns, theme.textLight]\n  )\n\n  const onFormCleared = React.useCallback(() => {\n    // Clear the editing state and the selection state\n    resetEditingState()\n    clearSelection()\n  }, [resetEditingState, clearSelection])\n\n  useFormClearHelper({ element, widgetMgr, onFormCleared })\n\n  const isDynamicAndEditable =\n    !isEmptyTable && element.editingMode === DYNAMIC && !disabled\n\n  // The index columns are always at the beginning of the table,\n  // so we can just count them to determine the number of columns\n  // that should be frozen.\n  const freezeColumns = isEmptyTable\n    ? 0\n    : columns.filter((col: BaseColumn) => col.isIndex).length\n\n  // Determine if the table requires horizontal or vertical scrolling:\n  React.useEffect(() => {\n    // The setTimeout is a workaround to get the scroll area bounding box\n    // after the grid has been rendered. Otherwise, the scroll area div\n    // (dvn-stack) might not have been created yet.\n    setTimeout(() => {\n      if (resizableContainerRef.current && dataEditorRef.current) {\n        // Get the bounds of the glide-data-grid scroll area (dvn-stack):\n        const scrollAreaBounds = resizableContainerRef.current\n          ?.querySelector(\".dvn-stack\")\n          ?.getBoundingClientRect()\n\n        // We might also be able to use the following as an alternative,\n        // but it seems to cause \"Maximum update depth exceeded\" when scrollbars\n        // are activated or deactivated.\n        // const scrollAreaBounds = dataEditorRef.current?.getBounds()\n        // Also see: https://github.com/glideapps/glide-data-grid/issues/784\n\n        if (scrollAreaBounds) {\n          setHasVerticalScroll(\n            scrollAreaBounds.height >\n              resizableContainerRef.current.clientHeight\n          )\n          setHasHorizontalScroll(\n            scrollAreaBounds.width > resizableContainerRef.current.clientWidth\n          )\n        }\n      }\n    }, 1)\n  }, [resizableSize, numRows, glideColumns])\n\n  return (\n    <StyledResizableContainer\n      className=\"stDataFrame\"\n      data-testid=\"stDataFrame\"\n      hasCustomizedScrollbars={hasCustomizedScrollbars}\n      ref={resizableContainerRef}\n      onMouseDown={e => {\n        if (resizableContainerRef.current && hasCustomizedScrollbars) {\n          // Prevent clicks on the scrollbar handle to propagate to the grid:\n          const boundingClient =\n            resizableContainerRef.current.getBoundingClientRect()\n\n          if (\n            // For whatever reason, we are still able to use the scrollbars even\n            // if the mouse is one pixel outside of the scrollbar. Therefore, we add\n            // an additional pixel.\n            hasHorizontalScroll &&\n            boundingClient.height - (WEBKIT_SCROLLBAR_SIZE + 1) <\n              e.clientY - boundingClient.top\n          ) {\n            e.stopPropagation()\n          }\n          if (\n            hasVerticalScroll &&\n            boundingClient.width - (WEBKIT_SCROLLBAR_SIZE + 1) <\n              e.clientX - boundingClient.left\n          ) {\n            e.stopPropagation()\n          }\n        }\n      }}\n      onBlur={event => {\n        // If the container loses focus, clear the current selection.\n        // Touch screen devices have issues with this, so we don't clear\n        // the selection on those devices.\n        // We also don't want to clear the selection if the user clicks on\n        // on the toolbar by checking that relatedTarget is not a children of\n        // this element. Unfortunately, this check isn't working reliably in Safari.\n        if (\n          !isFocused &&\n          !isTouchDevice &&\n          !event.currentTarget.contains(\n            event.relatedTarget as HTMLElement | null\n          )\n        ) {\n          // Clear cell selections, but keep row & column selections.\n          clearSelection(true, true)\n        }\n      }}\n    >\n      <Toolbar\n        isFullScreen={isFullScreen}\n        disableFullscreenMode={disableFullscreenMode}\n        // Lock the toolbar in some specific situations:\n        locked={\n          (isRowSelected && !isRowSelectionActivated) ||\n          isCellSelected ||\n          (isTouchDevice && isFocused)\n        }\n        onExpand={expand}\n        onCollapse={collapse}\n        target={StyledResizableContainer}\n      >\n        {((isRowSelectionActivated && isRowSelected) ||\n          (isColumnSelectionActivated && isColumnSelected)) && (\n          // Add clear selection action if selections are active\n          // and a valid selections currently exists. Cell selections\n          // are not relevant since they are not synced to the backend\n          // at the moment.\n          <ToolbarAction\n            label=\"Clear selection\"\n            icon={Close}\n            onClick={() => {\n              clearSelection()\n              clearTooltip()\n            }}\n          />\n        )}\n        {isDynamicAndEditable && isRowSelected && (\n          <ToolbarAction\n            label=\"Delete row(s)\"\n            icon={Delete}\n            onClick={() => {\n              if (onDelete) {\n                onDelete(gridSelection)\n                clearTooltip()\n              }\n            }}\n          />\n        )}\n        {isDynamicAndEditable && !isRowSelected && (\n          <ToolbarAction\n            label=\"Add row\"\n            icon={Add}\n            onClick={() => {\n              if (onRowAppended) {\n                setIsFocused(true)\n                onRowAppended()\n                clearTooltip()\n              }\n            }}\n          />\n        )}\n        {!isLargeTable && !isEmptyTable && (\n          <ToolbarAction\n            label=\"Download as CSV\"\n            icon={FileDownload}\n            onClick={() => exportToCsv()}\n          />\n        )}\n        {!isEmptyTable && (\n          <ToolbarAction\n            label=\"Search\"\n            icon={Search}\n            onClick={() => {\n              if (!showSearch) {\n                setIsFocused(true)\n                setShowSearch(true)\n              } else {\n                setShowSearch(false)\n              }\n              clearTooltip()\n            }}\n          />\n        )}\n      </Toolbar>\n      <Resizable\n        data-testid=\"stDataFrameResizable\"\n        ref={resizableRef}\n        defaultSize={resizableSize}\n        style={{\n          border: `${tableBorderWidth} solid ${theme.borderColor}`,\n          borderRadius: `${tableBorderRadius}`,\n        }}\n        minHeight={minHeight}\n        maxHeight={maxHeight}\n        minWidth={minWidth}\n        maxWidth={maxWidth}\n        size={resizableSize}\n        enable={{\n          top: false,\n          right: false,\n          bottom: false,\n          left: false,\n          topRight: false,\n          bottomRight: true,\n          bottomLeft: false,\n          topLeft: false,\n        }}\n        grid={[1, ROW_HEIGHT]}\n        snapGap={ROW_HEIGHT / 3}\n        onResizeStop={(_event, _direction, _ref, _delta) => {\n          if (resizableRef.current) {\n            setResizableSize({\n              width: resizableRef.current.size.width,\n              height:\n                // Add additional pixels if it is stretched to full width\n                // to allow the full cell border to be visible\n                maxHeight - resizableRef.current.size.height ===\n                BORDER_THRESHOLD\n                  ? resizableRef.current.size.height + BORDER_THRESHOLD\n                  : resizableRef.current.size.height,\n            })\n          }\n        }}\n      >\n        <GlideDataEditor\n          // The className is used in styled components:\n          className=\"stDataFrameGlideDataEditor\"\n          data-testid=\"stDataFrameGlideDataEditor\"\n          ref={dataEditorRef}\n          columns={glideColumns}\n          rows={isEmptyTable ? 1 : numRows}\n          minColumnWidth={MIN_COLUMN_WIDTH}\n          maxColumnWidth={MAX_COLUMN_WIDTH}\n          maxColumnAutoWidth={MAX_COLUMN_AUTO_WIDTH}\n          rowHeight={ROW_HEIGHT}\n          headerHeight={ROW_HEIGHT}\n          getCellContent={isEmptyTable ? getEmptyStateContent : getCellContent}\n          onColumnResize={isTouchDevice ? undefined : onColumnResize}\n          // Configure resize indicator to only show on the header:\n          resizeIndicator={\"header\"}\n          // Freeze all index columns:\n          freezeColumns={freezeColumns}\n          smoothScrollX={true}\n          smoothScrollY={true}\n          // Show borders between cells:\n          verticalBorder={true}\n          // Activate copy to clipboard functionality:\n          getCellsForSelection={true}\n          // Deactivate row markers and numbers:\n          rowMarkers={\"none\"}\n          // Deactivate selections:\n          rangeSelect={isTouchDevice ? \"cell\" : \"rect\"}\n          columnSelect={\"none\"}\n          rowSelect={\"none\"}\n          // Enable tooltips on hover of a cell or column header:\n          onItemHovered={onItemHovered}\n          // Activate keybindings:\n          keybindings={{ downFill: true }}\n          // Search needs to be activated manually, to support search\n          // via the toolbar:\n          onKeyDown={event => {\n            if ((event.ctrlKey || event.metaKey) && event.key === \"f\") {\n              setShowSearch(cv => !cv)\n              event.stopPropagation()\n              event.preventDefault()\n            }\n          }}\n          showSearch={showSearch}\n          onSearchClose={() => {\n            setShowSearch(false)\n            clearTooltip()\n          }}\n          // Header click is used for column sorting:\n          onHeaderClicked={(colIndex: number, _event) => {\n            if (isEmptyTable || isLargeTable || isColumnSelectionActivated) {\n              // Deactivate sorting for empty state, for large dataframes, or\n              // when column selection is activated.\n              return\n            }\n\n            if (isRowSelectionActivated && isRowSelected) {\n              // Keeping row selections when sorting columns is not supported at the moment.\n              // So we need to clear the selection before we do the sorting.\n              // The reason is that the user would expect the selection to be kept on\n              // the same row after sorting, hover that would require us to map the selection\n              // to the new index of the selected row which adds complexity.\n              clearSelection()\n            }\n            sortColumn(colIndex)\n          }}\n          gridSelection={gridSelection}\n          // We don't have to react to \"onSelectionCleared\" since\n          // we already correctly process selections in\n          // the \"onGridSelectionChange\" callback.\n          onGridSelectionChange={(newSelection: GridSelection) => {\n            // Only allow selection changes if the grid is focused.\n            // This is mainly done because there is a bug when overlay click actions\n            // are outside of the bounds of the table (e.g. select dropdown or date picker).\n            // This results in the first cell being selected for a short period of time\n            // But for touch devices, preventing this can cause issues to select cells.\n            // So we allow selection changes for touch devices even when it is not focused.\n            if (isFocused || isTouchDevice) {\n              processSelectionChange(newSelection)\n              if (tooltip !== undefined) {\n                // Remove the tooltip on every grid selection change:\n                clearTooltip()\n              }\n            }\n          }}\n          theme={theme}\n          onMouseMove={(args: GridMouseEventArgs) => {\n            // Determine if the dataframe is focused or not\n            if (args.kind === \"out-of-bounds\" && isFocused) {\n              setIsFocused(false)\n            } else if (args.kind !== \"out-of-bounds\" && !isFocused) {\n              setIsFocused(true)\n            }\n          }}\n          // Add shadow for index columns and header on scroll:\n          fixedShadowX={true}\n          fixedShadowY={true}\n          experimental={{\n            // We use overflow scrollbars, so we need to deactivate the native\n            // scrollbar override:\n            scrollbarWidthOverride: 0,\n            ...(hasCustomizedScrollbars && {\n              // Add negative padding to the right and bottom to allow the scrollbars in\n              // webkit to overlay the table:\n              paddingBottom: hasHorizontalScroll\n                ? -WEBKIT_SCROLLBAR_SIZE\n                : undefined,\n              paddingRight: hasVerticalScroll\n                ? -WEBKIT_SCROLLBAR_SIZE\n                : undefined,\n            }),\n          }}\n          // Apply custom rendering (e.g. for missing or required cells):\n          drawCell={drawCell}\n          // Add support for additional cells:\n          customRenderers={customRenderers}\n          // Custom image editor to render single images:\n          imageEditorOverride={ImageCellEditor}\n          // Add our custom SVG header icons:\n          headerIcons={headerIcons}\n          // Add support for user input validation:\n          validateCell={validateCell}\n          // The default setup is read only, and therefore we deactivate paste here:\n          onPaste={false}\n          // Activate features required for row selection:\n          {...(isRowSelectionActivated && {\n            rowMarkers: {\n              // Apply style settings for the row markers column:\n              kind: \"checkbox\",\n              checkboxStyle: \"square\",\n              theme: {\n                bgCell: theme.bgHeader,\n                bgCellMedium: theme.bgHeader,\n              },\n            },\n            rowSelectionMode: isMultiRowSelectionActivated ? \"multi\" : \"auto\",\n            rowSelect: disabled\n              ? \"none\"\n              : isMultiRowSelectionActivated\n              ? \"multi\"\n              : \"single\",\n            rowSelectionBlending: \"mixed\",\n            // Deactivate the combination of row selections\n            // and cell selections. This will automatically clear\n            // selected cells when a row is selected.\n            // We are doing this to prevent some issues with drag\n            // and drop selection.\n            rangeSelectionBlending: \"exclusive\",\n          })}\n          // Activate features required for column selection:\n          {...(isColumnSelectionActivated && {\n            columnSelect: disabled\n              ? \"none\"\n              : isMultiColumnSelectionActivated\n              ? \"multi\"\n              : \"single\",\n            columnSelectionBlending: \"mixed\",\n            // Deactivate the combination of column selections\n            // and cell selections. This will automatically clear\n            // selected cells when a column is selected.\n            // We are doing this to prevent some issues with drag\n            // and drop selection.\n            rangeSelectionBlending: \"exclusive\",\n          })}\n          // If element is editable, enable editing features:\n          {...(!isEmptyTable &&\n            element.editingMode !== READ_ONLY &&\n            !disabled && {\n              // Support fill handle for bulk editing:\n              fillHandle: !isTouchDevice,\n              // Support editing:\n              onCellEdited,\n              // Support pasting data for bulk editing:\n              onPaste,\n              // Support deleting cells & rows:\n              onDelete,\n            })}\n          // If element is dynamic, enable adding & deleting rows:\n          {...(!isEmptyTable &&\n            element.editingMode === DYNAMIC && {\n              // Support adding rows:\n              trailingRowOptions: {\n                sticky: false,\n                tint: true,\n              },\n              rowMarkers: {\n                kind: \"checkbox\",\n                checkboxStyle: \"square\",\n                theme: {\n                  bgCell: theme.bgHeader,\n                  bgCellMedium: theme.bgHeader,\n                },\n              },\n              rowSelectionMode: \"multi\",\n              rowSelect: disabled ? \"none\" : \"multi\",\n              // Support adding rows:\n              onRowAppended: disabled ? undefined : onRowAppended,\n              // Deactivate sorting, since it is not supported with dynamic editing:\n              onHeaderClicked: undefined,\n            })}\n        />\n      </Resizable>\n      {tooltip && tooltip.content && (\n        <Tooltip\n          top={tooltip.top}\n          left={tooltip.left}\n          content={tooltip.content}\n          clearTooltip={clearTooltip}\n        ></Tooltip>\n      )}\n    </StyledResizableContainer>\n  )\n}\n\nexport default withFullScreenWrapper(DataFrame)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, useContext } from \"react\"\n\nexport const useRequiredContext = <R,>(context: Context<R | null>): R => {\n  const foundContext = useContext(context)\n\n  if (foundContext === null || foundContext === undefined) {\n    throw new Error(\n      `useRequiredContext: ${context.displayName ?? \"context\"} not found`\n    )\n  }\n\n  return foundContext\n}\n"],"names":["ElementFullscreenContext","createContext","displayName","StyledFullScreenFrame","_styled","target","_ref","theme","isExpanded","position","top","left","bottom","right","background","colors","bgColor","zIndex","zIndices","fullscreenWrapper","padding","spacing","md","paddingTop","sizes","fullScreenHeaderHeight","overflow","display","alignItems","justifyContent","children","height","width","useTheme","expanded","fullHeight","fullWidth","zoomIn","zoomOut","useFullscreen","setFullScreen","useContext","LibContext","setExpanded","useState","useRequiredContext","WindowDimensionsContext","setExpandedState","useCallback","document","body","style","controlKeys","event","keyCode","useEffect","addEventListener","removeEventListener","useMemo","fullscreenContextValue","expand","collapse","_jsx","Provider","value","WrappedComponent","ComponentWithFullScreenWrapper","props","ElementFullscreenWrapper","name","hoistNonReactStatics","BOOLEAN_TRUE_VALUES","BOOLEAN_FALSE_VALUES","getErrorCell","errorMsg","errorDetails","arguments","length","undefined","kind","GridCellKind","Text","readonly","allowOverlay","data","displayData","isError","isErrorCell","cell","hasOwnProperty","isMissingValueCell","isMissingValue","getEmptyCell","Loading","getTextCell","faded","toGlideColumn","column","id","title","hasMenu","themeOverride","icon","group","isStretched","grow","isIndex","mergeColumnParameters","defaultParams","userParams","isNullOrUndefined","merge","toSafeArray","Uint8Array","TextDecoder","decode","trim","startsWith","endsWith","split","JSON","parse","error","parsedData","stringify","_key","Number","Array","isArray","map","includes","toSafeString","toString","toSafeBoolean","cleanedValue","toLowerCase","toSafeNumber","NaN","unformattedValue","numbro","notNullOrUndefined","Int32Array","formatNumber","format","maxPrecision","isNaN","isFinite","Math","round","repeat","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","notation","moment","humanize","Quiver","formatPeriodType","BigInt","sprintf","formatMoment","momentDate","DateTimeFormat","dateStyle","timeStyle","toDate","fromNow","calendar","toSafeDate","Date","getTime","parsedTimestamp","timestampInSeconds","parsedMomentDate","utc","isValid","parsedMomentTime","TIME_MS","TIME_SECONDS","TIME","countDecimals","numberStr","indexOf","toLocaleString","useGrouping","LINE_BREAK_REGEX","RegExp","removeLineBreaks","text","replace","ObjectColumn","cellTemplate","contentAlignment","sortMode","isEditable","getCell","cellData","getCellValue","isEditableType","TextColumn","parameters","columnTypeOptions","validateRegex","validate","validateInput","isRequired","corrected","max_chars","slice","test","validationResult","applyTimezone","timezone","utcOffset","tz","BaseDateTimeColumn","defaultFormat","defaultStep","inputType","toISOString","_parameters$step","step","defaultTimezoneOffset","minDate","maxDate","_applyTimezone","min_value","max_value","Custom","copyData","contentAlign","date","displayDate","min","max","timezoneOffset","_cell$data","DateTimeColumn","_props$columnTypeOpti","_props$columnTypeOpti2","_props$arrowType","_props$arrowType$meta","_props$columnTypeOpti3","arrowType","meta","hasTimezone","TimeColumn","_props$columnTypeOpti4","_props$columnTypeOpti5","DateColumn","CheckboxColumn","Boolean","isIntegerType","arrowTypeName","NumberColumn","getTypeName","allowNegative","fixedDecimals","thousandSeparator","decimals","trunc","isInteger","isSafeInteger","SelectboxColumn","dataType","options","uniqueTypes","Set","x","size","has","allowedValues","filter","opt","_cell$data2","_cell$data5","_toSafeNumber","_cell$data3","_toSafeBoolean","_cell$data4","ListColumn","Bubble","extractCssProperty","htmlElementId","property","cssStyle","regex","match","exec","getIndexFromArrow","indexPosition","types","index","indexNames","isHidden","getColumnFromArrow","columnPosition","columnHeaderNames","columns","join","numpy_type","pandas_type","getCategoricalOptions","getCellFromArrow","arrowCell","cssStyles","typeName","content","contentType","field","_arrowCell$field","_arrowCell$field$type","parsedDate","_arrowCell$field$type2","_arrowCell$field2","_arrowCell$field2$typ","type","unit","convertToSeconds","decimalStr","displayContent","_column$columnTypeOpt","_column$columnTypeOpt2","_data","_column$columnTypeOpt3","Uri","display_text","cssId","fontColor","textDark","backgroundColor","bgCell","applyPandasStylerCss","BaseChartColumn","chart_type","y_min","y_max","values","displayValues","graphKind","yAxis","chartData","convertedChartData","normalizedChartData","maxValue","MIN_SAFE_INTEGER","minValue","MAX_SAFE_INTEGER","i","convertedValue","push","v","LineChartColumn","BarChartColumn","AreaChartColumn","ImageColumn","Image","imageUrls","LinkColumn","displayTextRegex","hoverEffect","href","cellHref","onClickUri","displayText","patternMatch","decodeURI","getLinkDisplayValueFromRegex","a","window","open","preventDefault","ProgressColumn","measureLabel","label","String","normalizeCellValue","ColumnTypes","Map","Object","entries","object","checkbox","selectbox","list","number","link","datetime","time","line_chart","bar_chart","area_chart","image","progress","CustomCells","INDEX_IDENTIFIER","COLUMN_POSITION_PREFIX","COLUMN_WIDTH_MAPPING","small","medium","large","parseWidthConfig","applyColumnConfig","columnProps","columnConfigMapping","columnConfig","get","indexNumber","disabled","hidden","required","type_config","alignment","defaultValue","default","help","getColumnType","customType","ColumnType","logWarning","getColumnTypeFromArrow","element","React","configJson","logError","getColumnConfig","stretchColumns","useContainerWidth","configuredColumns","dimensions","numIndices","headerColumns","numColumns","dataColumns","getAllColumnsFromArrow","updatedColumn","editingMode","ArrowProto","EditingMode","READ_ONLY","DYNAMIC","columnOrder","orderedColumns","forEach","columnName","find","getColumnName","constructor","numRows","editedCells","addedRows","deletedRows","this","toJson","columnsByIndex","set","currentState","edited_rows","added_rows","deleted_rows","row","rowIndex","_map","editedRow","colIndex","addedRow","isIncomplete","cellValue","_k","fromJson","editingStateJson","editingState","columnsByName","keys","key","colName","_this$editedCells$get","isAddedRow","col","rowCache","setCell","addRow","rowCells","deleteRows","rows","sort","b","deleteRow","splice","delete","getOriginalRowIndex","originalIndex","getNumRows","headerIcons","editable","p","accentColor","primary","accentFg","white","accentLight","transparentize","borderColor","borderColorLight","horizontalBorderColor","fontFamily","genericFonts","bodyFont","bgSearchResult","resizeIndicatorColor","bgIconHeader","fadedText60","fgIconHeader","bgHeader","bgMix","bgHeaderHasFocus","secondaryBg","bgHeaderHovered","textHeader","textHeaderSelected","textGroupHeader","headerFontStyle","fontSizes","sm","baseFontStyle","editorFontSize","bodyText","textMedium","textLight","fadedText40","textBubble","bgCellMedium","cellHorizontalPadding","cellVerticalPadding","bgBubble","bgBubbleSelected","linkColor","linkText","drilldownBorder","darkenedBgMix25","tableBorderRadius","radii","tableBorderWidth","borderWidth","numHeaderRows","getCellContent","originalCol","originalRow","current","editedCell","setSort","getCellContentSorted","getOriginalIndex","useGlideColumnSort","updatedColumns","direction","updateSortingHeader","sortColumn","sortDirection","clickedColumn","mode","isEmptyTable","isDisabled","syncSelectionState","gridSelection","setGridSelection","CompactSelection","empty","isRowSelectionActivated","selectionMode","SelectionMode","MULTI_ROW","SINGLE_ROW","isMultiRowSelectionActivated","isColumnSelectionActivated","SINGLE_COLUMN","MULTI_COLUMN","isMultiColumnSelectionActivated","isRowSelected","isColumnSelected","isCellSelected","processSelectionChange","newSelection","rowSelectionChanged","isEqual","toArray","columnSelectionChanged","cellSelectionChanged","syncSelection","updatedSelection","cleanedColumns","idx","remove","clearSelection","keepRows","keepColumns","emptySelection","CSV_DELIMITER","CSV_QUOTE_CHAR","CSV_ESCAPE_CHAR","CSV_ROW_DELIMITER","CSV_UTF8_BOM","CSV_SPECIAL_CHARS_REGEX","toCsvRow","rowValues","strValue","escapeValue","async","writeCsv","writable","textEncoder","TextEncoder","write","encode","headers","rowData","close","enforceDownloadInNewTab","exportToCsv","suggestedName","nativeFileSystemAdapter","fileHandle","showSaveFilePicker","accept","excludeAcceptAllOption","writer","createWritable","Error","csvContent","inMemoryWriter","WritableStream","chunk","getWriter","blob","Blob","url","URL","createObjectURL","createDownloadLinkElement","filename","appendChild","click","removeChild","revokeObjectURL","fixedNumRows","refreshCells","updateNumRows","syncEditState","onCellEdited","updatedCell","currentCell","currentValue","newValue","newCell","lastUpdated","performance","now","appendEmptyRow","newRow","onRowAppended","onDelete","selection","_selection$current","rowsToDelete","range","updatedCells","selectedArea","y","onPaste","targetCol","targetRow","pasteDataValue","validateCell","tooltip","setTooltip","timeoutRef","onItemHovered","args","clearTimeout","location","colIdx","rowIdx","tooltipContent","hasTooltip","setTimeout","bounds","clearTooltip","drawCell","draw","ctx","rect","colPos","drawTextCell","headerFontFull","baseFontFull","markerFontFull","markerFontStyle","spriteManager","hyperWrapping","fillStyle","drawMissingPlaceholder","save","beginPath","moveTo","lineTo","fill","restore","drawRequiredIndicator","customRenderers","SparklineCell","DropdownCell","RangeCell","DatePickerCell","columnSizes","setColumnSizes","onColumnResize","_newSize","_colIndex","newSizeWithGrow","BORDER_THRESHOLD","ROW_HEIGHT","MIN_TABLE_WIDTH","MIN_TABLE_HEIGHT","usesGroupRow","containerWidth","containerHeight","isFullScreen","maxHeight","calculateMaxHeight","initialHeight","availableWidth","initialWidth","maxWidth","resizableSize","setResizableSize","minHeight","minWidth","StyledImage","styles","ImageCellEditor","urls","imageData","rel","src","setOpen","fontWeights","closeTooltip","Popover","StyledTooltipContentWrapper","StreamlitMarkdown","fontSize","source","allowHTML","placement","PLACEMENT","accessibilityType","ACCESSIBILITY_TYPE","showArrow","popoverMargin","onClickOutside","onEsc","overrides","Body","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","paddingBottom","paddingLeft","paddingRight","Inner","hasLightBackgroundColor","color","fontWeight","normal","isOpen","StyledResizableContainer","hasCustomizedScrollbars","borderRadius","scrollbarWidth","withFullScreenWrapper","_ref2","widgetMgr","disableFullscreenMode","fragmentId","resizableRef","dataEditorRef","resizableContainerRef","useCustomTheme","libConfig","isFocused","setIsFocused","showSearch","setShowSearch","hasVerticalScroll","setHasVerticalScroll","hasHorizontalScroll","setHasHorizontalScroll","isTouchDevice","matchMedia","matches","navigator","userAgent","dataDimensions","originalNumRows","dataRows","isLargeTable","EditingState","setNumRows","resetEditingState","originalColumns","useColumnLoader","initialWidgetValue","getStringValue","formId","getOriginalCellContent","useDataLoader","useColumnSort","debounce","selectionState","columnIdx","newWidgetState","currentWidgetState","setStringValue","fromUi","useSelectionHandler","cells","_dataEditorRef$curren","updateCells","_selectionState$selec","_selectionState$selec2","_selectionState$selec3","_selectionState$selec4","columnNames","rowSelection","columnSelection","add","currentEditingState","useDataExporter","useDataEditor","useTooltips","useCustomRenderer","transformedColumns","glideColumns","useColumnSizer","useTableSizer","getEmptyStateContent","_ref3","_col","_row","span","onFormCleared","useFormClearHelper","isDynamicAndEditable","freezeColumns","_resizableContainerRe","_resizableContainerRe2","scrollAreaBounds","querySelector","getBoundingClientRect","clientHeight","clientWidth","_jsxs","className","ref","onMouseDown","e","boundingClient","clientY","stopPropagation","clientX","onBlur","currentTarget","contains","relatedTarget","Toolbar","locked","onExpand","onCollapse","ToolbarAction","Close","onClick","Delete","Add","FileDownload","Search","Resizable","defaultSize","border","enable","topRight","bottomRight","bottomLeft","topLeft","grid","snapGap","onResizeStop","_event","_direction","_delta","GlideDataEditor","minColumnWidth","maxColumnWidth","maxColumnAutoWidth","rowHeight","headerHeight","resizeIndicator","smoothScrollX","smoothScrollY","verticalBorder","getCellsForSelection","rowMarkers","rangeSelect","columnSelect","rowSelect","keybindings","downFill","onKeyDown","ctrlKey","metaKey","cv","onSearchClose","onHeaderClicked","onGridSelectionChange","onMouseMove","fixedShadowX","fixedShadowY","experimental","scrollbarWidthOverride","imageEditorOverride","checkboxStyle","rowSelectionMode","rowSelectionBlending","rangeSelectionBlending","columnSelectionBlending","fillHandle","trailingRowOptions","sticky","tint","Tooltip","context","foundContext","_context$displayName"],"sourceRoot":""}