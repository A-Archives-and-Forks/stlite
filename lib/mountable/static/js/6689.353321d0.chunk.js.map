{"version":3,"file":"static/js/6689.353321d0.chunk.js","mappings":"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","sources":["../../../streamlit/frontend/lib/src/components/elements/GraphVizChart/styled-components.ts","../../../streamlit/frontend/lib/src/components/elements/GraphVizChart/GraphVizChart.tsx","../../../streamlit/frontend/lib/src/components/shared/FullScreenWrapper/styled-components.ts","../../../streamlit/frontend/lib/src/components/shared/FullScreenWrapper/FullScreenWrapper.tsx","../../../streamlit/frontend/lib/src/components/shared/FullScreenWrapper/withFullScreenWrapper.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\ninterface StyledGraphVizChartProps {\n  isFullScreen: boolean\n}\n\nexport const StyledGraphVizChart = styled.div<StyledGraphVizChartProps>(\n  ({ theme, isFullScreen }) => ({\n    \"& *\": {\n      fontFamily: theme.genericFonts.bodyFont,\n      // Font sizes inside the SVG element are getting huge for some reason.\n      // Hacking together a number by eyeballing it:\n      // 12px in the SVG looks like 1rem outside, so 9.6px ~= 0.8rem.\n      fontSize: \"9.6px\",\n    },\n\n    // Ensure SVG is allowed the full width/height in full screen mode\n    \"& svg\": {\n      maxWidth: \"100%\",\n      width: isFullScreen ? \"100%\" : \"auto\",\n      height: isFullScreen ? \"100%\" : \"auto\",\n    },\n    width: isFullScreen ? \"100%\" : \"auto\",\n    height: isFullScreen ? \"100%\" : \"auto\",\n  })\n)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement, useEffect } from \"react\"\n\nimport { select } from \"d3\"\nimport { Engine, graphviz } from \"d3-graphviz\"\n\nimport { logError } from \"@streamlit/lib/src/util/log\"\nimport { withFullScreenWrapper } from \"@streamlit/lib/src/components/shared/FullScreenWrapper\"\nimport { GraphVizChart as GraphVizChartProto } from \"@streamlit/lib/src/proto\"\n\nimport { StyledGraphVizChart } from \"./styled-components\"\n\nexport interface GraphVizChartProps {\n  element: GraphVizChartProto\n  isFullScreen: boolean\n}\n\nexport function GraphVizChart({\n  element,\n  isFullScreen,\n}: Readonly<GraphVizChartProps>): ReactElement {\n  const chartId = `st-graphviz-chart-${element.elementId}`\n\n  useEffect(() => {\n    try {\n      graphviz(`#${chartId}`)\n        .zoom(false)\n        .fit(true)\n        .scale(1)\n        .engine(element.engine as Engine)\n        .renderDot(element.spec)\n\n      if (isFullScreen || element.useContainerWidth) {\n        const node = select(`#${chartId} > svg`).node() as SVGGraphicsElement\n        // We explicitly remove width and height to let CSS and the SVG viewBox\n        // define its dimensions\n        node.removeAttribute(\"width\")\n        node.removeAttribute(\"height\")\n      }\n    } catch (error) {\n      logError(error)\n    }\n  }, [\n    chartId,\n    element.engine,\n    element.spec,\n    element.useContainerWidth,\n    isFullScreen,\n  ])\n\n  return (\n    <StyledGraphVizChart\n      className=\"stGraphVizChart\"\n      data-testid=\"stGraphVizChart\"\n      id={chartId}\n      isFullScreen={isFullScreen}\n    />\n  )\n}\n\nexport default withFullScreenWrapper(GraphVizChart)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport interface StyledFullScreenButtonProps {\n  isExpanded: boolean\n}\n\nexport const StyledFullScreenButton =\n  styled.button<StyledFullScreenButtonProps>(({ isExpanded, theme }) => {\n    const variableProps = isExpanded\n      ? {\n          right: \"0.4rem\",\n          top: \"0.5rem\",\n          backgroundColor: \"transparent\",\n        }\n      : {\n          right: \"-3.0rem\",\n          top: \"-0.375rem\",\n          opacity: 0,\n          transform: \"scale(0)\",\n          backgroundColor: theme.colors.lightenedBg05,\n        }\n\n    return {\n      position: \"absolute\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n\n      zIndex: theme.zIndices.sidebar + 1,\n      height: \"2.5rem\",\n      width: \"2.5rem\",\n      transition: \"opacity 300ms 150ms, transform 300ms 150ms\",\n      border: \"none\",\n      color: theme.colors.fadedText60,\n      borderRadius: \"50%\",\n\n      ...variableProps,\n\n      \"&:focus\": {\n        outline: \"none\",\n      },\n\n      \"&:active, &:focus-visible, &:hover\": {\n        opacity: 1,\n        outline: \"none\",\n        transform: \"scale(1)\",\n        color: theme.colors.bodyText,\n        transition: \"none\",\n      },\n    }\n  })\n\nexport interface StyledFullScreenFrameProps {\n  isExpanded: boolean\n}\n\nexport const StyledFullScreenFrame = styled.div<StyledFullScreenFrameProps>(\n  ({ theme, isExpanded }) => ({\n    \"&:hover\": {\n      [StyledFullScreenButton as any]: {\n        opacity: 1,\n        transform: \"scale(1)\",\n        transition: \"none\",\n      },\n    },\n\n    ...(isExpanded\n      ? {\n          position: \"fixed\",\n          top: 0,\n          left: 0,\n          bottom: 0,\n          right: 0,\n          background: theme.colors.bgColor,\n          zIndex: theme.zIndices.fullscreenWrapper,\n          padding: theme.spacing.md,\n          paddingTop: theme.sizes.fullScreenHeaderHeight,\n          overflow: [\"auto\", \"overlay\"],\n          display: \"flex\", // To avoid extra spaces that lead to scrollbars.\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }\n      : {}),\n  })\n)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { PureComponent } from \"react\"\n\nimport { withTheme } from \"@emotion/react\"\nimport { FullscreenEnter, FullscreenExit } from \"@emotion-icons/open-iconic\"\n\nimport Icon from \"@streamlit/lib/src/components/shared/Icon\"\nimport { LibContext } from \"@streamlit/lib/src/components/core/LibContext\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\n\nimport {\n  StyledFullScreenButton,\n  StyledFullScreenFrame,\n} from \"./styled-components\"\n\nexport type Size = {\n  width: number\n  expanded: boolean\n  height?: number\n  expand: () => void\n  collapse: () => void\n}\n\n/*\n * Function responsible for rendering children.\n * This function should implement the following signature:\n * ({ height, width }) => PropTypes.element\n */\nexport interface FullScreenWrapperProps {\n  children: (props: Size) => React.ReactNode\n  width: number\n  height?: number\n  theme: EmotionTheme\n  disableFullscreenMode?: boolean\n}\n\ninterface State {\n  expanded: boolean\n  fullWidth: number\n  fullHeight: number\n}\n\n/*\n * A component that draws a button on the top right of the\n * wrapper element. OnClick, change the element container\n * to fixed and cover all screen, updating wrapped element height and width\n */\nclass FullScreenWrapper extends PureComponent<FullScreenWrapperProps, State> {\n  public context!: React.ContextType<typeof LibContext>\n\n  public static contextType = LibContext\n\n  public constructor(props: FullScreenWrapperProps) {\n    super(props)\n    this.state = {\n      expanded: false,\n      ...this.getWindowDimensions(),\n    }\n  }\n\n  public componentDidMount(): void {\n    window.addEventListener(\"resize\", this.updateWindowDimensions)\n    document.addEventListener(\"keydown\", this.controlKeys, false)\n  }\n\n  public componentWillUnmount(): void {\n    window.removeEventListener(\"resize\", this.updateWindowDimensions)\n    document.removeEventListener(\"keydown\", this.controlKeys, false)\n  }\n\n  private controlKeys = (event: any): void => {\n    const { expanded } = this.state\n\n    if (event.keyCode === 27 && expanded) {\n      // Exit fullscreen\n      this.zoomOut()\n    }\n  }\n\n  private zoomIn = (): void => {\n    document.body.style.overflow = \"hidden\"\n    this.context.setFullScreen(true)\n    this.setState({ expanded: true })\n  }\n\n  private zoomOut = (): void => {\n    document.body.style.overflow = \"unset\"\n    this.context.setFullScreen(false)\n    this.setState({ expanded: false })\n  }\n\n  private convertScssRemValueToPixels = (scssValue: string): number => {\n    const remValue = parseFloat(scssValue)\n    return (\n      remValue *\n      parseFloat(getComputedStyle(document.documentElement).fontSize)\n    )\n  }\n\n  private getWindowDimensions = (): Pick<\n    State,\n    \"fullWidth\" | \"fullHeight\"\n  > => {\n    const padding = this.convertScssRemValueToPixels(\n      this.props.theme.spacing.md\n    )\n    const paddingTop = this.convertScssRemValueToPixels(\n      this.props.theme.sizes.fullScreenHeaderHeight\n    )\n\n    return {\n      fullWidth: window.innerWidth - padding * 2, // Left and right\n      fullHeight: window.innerHeight - (padding + paddingTop), // Bottom and Top\n    }\n  }\n\n  private updateWindowDimensions = (): void => {\n    this.setState(this.getWindowDimensions())\n  }\n\n  public render(): JSX.Element {\n    const { expanded, fullWidth, fullHeight } = this.state\n    const { children, width, height, disableFullscreenMode } = this.props\n\n    let buttonImage = FullscreenEnter\n    let buttonOnClick = this.zoomIn\n    let buttonTitle = \"View fullscreen\"\n\n    if (expanded) {\n      buttonImage = FullscreenExit\n      buttonOnClick = this.zoomOut\n      buttonTitle = \"Exit fullscreen\"\n    }\n\n    return (\n      <StyledFullScreenFrame\n        isExpanded={expanded}\n        data-testid=\"stFullScreenFrame\"\n      >\n        {!disableFullscreenMode && (\n          <StyledFullScreenButton\n            data-testid=\"StyledFullScreenButton\"\n            onClick={buttonOnClick}\n            title={buttonTitle}\n            isExpanded={expanded}\n          >\n            <Icon content={buttonImage} />\n          </StyledFullScreenButton>\n        )}\n        {expanded\n          ? children({\n              width: fullWidth,\n              height: fullHeight,\n              expanded,\n              expand: this.zoomIn,\n              collapse: this.zoomOut,\n            })\n          : children({\n              width,\n              height,\n              expanded,\n              expand: this.zoomIn,\n              collapse: this.zoomOut,\n            })}\n      </StyledFullScreenFrame>\n    )\n  }\n}\n\nexport default withTheme(FullScreenWrapper)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ComponentType, PureComponent, ReactNode } from \"react\"\n\nimport hoistNonReactStatics from \"hoist-non-react-statics\"\n\nimport FullScreenWrapper from \"./FullScreenWrapper\"\n\nexport interface Props {\n  width: number\n  height?: number\n  disableFullscreenMode?: boolean\n}\n\n// Our wrapper takes the wrapped component's props, plus \"width\", \"height?\".\n// It will pass \"isFullScreen\" to the wrapped component automatically\n// (but the wrapped component is free to ignore that prop).\ntype WrapperProps<P> = Omit<P & Props, \"isFullScreen\" | \"collapse\" | \"expand\">\n\nfunction withFullScreenWrapper<P>(\n  WrappedComponent: ComponentType<React.PropsWithChildren<P>>,\n  forceDisableFullScreenMode = false\n): ComponentType<React.PropsWithChildren<WrapperProps<P>>> {\n  class ComponentWithFullScreenWrapper extends PureComponent<WrapperProps<P>> {\n    public static readonly displayName = `withFullScreenWrapper(${\n      WrappedComponent.displayName || WrappedComponent.name\n    })`\n\n    public render = (): ReactNode => {\n      const { width, height, disableFullscreenMode } = this.props\n\n      return (\n        <FullScreenWrapper\n          width={width}\n          height={height}\n          disableFullscreenMode={\n            forceDisableFullScreenMode || disableFullscreenMode\n          }\n        >\n          {({ width, height, expanded, expand, collapse }) => (\n            // `(this.props as P)` is required due to a TS bug:\n            // https://github.com/microsoft/TypeScript/issues/28938#issuecomment-450636046\n            <WrappedComponent\n              {...(this.props as P)}\n              width={width}\n              height={height}\n              isFullScreen={expanded}\n              expand={expand}\n              collapse={collapse}\n            />\n          )}\n        </FullScreenWrapper>\n      )\n    }\n  }\n\n  // Static methods must be copied over\n  // https://en.reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n  return hoistNonReactStatics(ComponentWithFullScreenWrapper, WrappedComponent)\n}\n\nexport default withFullScreenWrapper\n"],"names":["StyledGraphVizChart","_styled","target","_ref","theme","isFullScreen","fontFamily","genericFonts","bodyFont","fontSize","maxWidth","width","height","withFullScreenWrapper","element","chartId","elementId","useEffect","graphviz","zoom","fit","scale","engine","renderDot","spec","useContainerWidth","node","select","removeAttribute","error","logError","_jsx","className","id","StyledFullScreenButton","isExpanded","variableProps","right","top","backgroundColor","opacity","transform","colors","lightenedBg05","position","display","alignItems","justifyContent","zIndex","zIndices","sidebar","transition","border","color","fadedText60","borderRadius","outline","bodyText","StyledFullScreenFrame","_ref2","left","bottom","background","bgColor","fullscreenWrapper","padding","spacing","md","paddingTop","sizes","fullScreenHeaderHeight","overflow","FullScreenWrapper","PureComponent","constructor","props","super","context","controlKeys","event","expanded","this","state","keyCode","zoomOut","zoomIn","document","body","style","setFullScreen","setState","convertScssRemValueToPixels","scssValue","parseFloat","getComputedStyle","documentElement","getWindowDimensions","fullWidth","window","innerWidth","fullHeight","innerHeight","updateWindowDimensions","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","children","disableFullscreenMode","buttonImage","FullscreenEnter","buttonOnClick","buttonTitle","FullscreenExit","_jsxs","onClick","title","Icon","content","expand","collapse","contextType","LibContext","withTheme","WrappedComponent","forceDisableFullScreenMode","arguments","length","undefined","ComponentWithFullScreenWrapper","displayName","name","hoistNonReactStatics"],"sourceRoot":""}