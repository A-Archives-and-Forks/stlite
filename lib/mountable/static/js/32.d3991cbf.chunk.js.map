{"version":3,"sources":["../../../streamlit/frontend/src/components/elements/PlotlyChart/CustomTheme.tsx","../../../streamlit/frontend/src/components/elements/PlotlyChart/PlotlyChart.tsx"],"names":["replaceTemporaryColors","spec","theme","elementTheme","DIVERGING_0","DIVERGING_1","DIVERGING_2","DIVERGING_3","DIVERGING_4","DIVERGING_5","DIVERGING_6","DIVERGING_7","DIVERGING_8","DIVERGING_9","DIVERGING_10","divergingColors","getDivergingColorsArray","replaceAll","replaceDivergingColors","SEQUENTIAL_0","SEQUENTIAL_1","SEQUENTIAL_2","SEQUENTIAL_3","SEQUENTIAL_4","SEQUENTIAL_5","SEQUENTIAL_6","SEQUENTIAL_7","SEQUENTIAL_8","SEQUENTIAL_9","sequentialColors","getSequentialColorsArray","replaceSequentialColors","CATEGORY_0","CATEGORY_1","CATEGORY_2","CATEGORY_3","CATEGORY_4","CATEGORY_5","CATEGORY_6","CATEGORY_7","CATEGORY_8","CATEGORY_9","categoryColors","getCategoricalColorsArray","replaceCategoricalColors","getIncreasingGreen","getDecreasingRed","hasLightBackgroundColor","colors","blue80","blue40","getGray30","getGray70","getGray90","bgColor","fadedText05","bgMix","replaceGOSpecificColors","applyStreamlitTheme","layout","genericFonts","fontSizes","streamlitTheme","font","color","family","bodyFont","size","twoSmPx","title","headingColor","subtitleColor","bodyText","headingFont","mdPx","pad","l","spacing","twoXSPx","xanchor","x","legend","side","valign","bordercolor","transparent","borderwidth","nonePx","paper_bgcolor","plot_bgcolor","yaxis","ticklabelposition","zerolinecolor","smPx","standoff","twoXLPx","tickcolor","tickfont","gridcolor","minor","automargin","xaxis","showgrid","zeroline","rangeselector","bgcolor","margin","lgPx","r","hoverlabel","fadedText10","coloraxis","colorbar","thickness","xpad","outlinecolor","outlinewidth","len","y","ternary","aaxis","linecolor","baxis","caxis","merge","applyStreamlitThemeTemplateLayout","template","e","err","ensureError","logError","text","renderFigure","element","width","height","figure","isFullScreen","useTheme","generateSpec","JSON","parse","initialHeight","initialWidth","useContainerWidth","themeDefaults","secondaryBg","layoutWithThemeDefaults","useState","config","setConfig","setSpec","useLayoutEffect","data","frames","className","withFullScreenWrapper","chart","url","src","style","renderIFrame","Error"],"mappings":"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","file":"static/js/32.d3991cbf.chunk.js","sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { merge } from \"lodash\"\n\nimport {\n  getDecreasingRed,\n  getGray30,\n  getGray70,\n  getGray90,\n  getIncreasingGreen,\n  hasLightBackgroundColor,\n  Theme,\n  getSequentialColorsArray,\n  getCategoricalColorsArray,\n  getDivergingColorsArray,\n} from \"src/theme\"\nimport { ensureError } from \"src/lib/ErrorHandling\"\nimport { logError } from \"src/lib/log\"\n\n/**\n * This applies general layout changes to things such as x axis,\n * y axis, legends, titles, grid changes, background, etc.\n * @param layout - spec.layout.template.layout\n * @param theme - Theme from useTheme()\n */\nexport function applyStreamlitThemeTemplateLayout(\n  layout: any,\n  theme: Theme\n): void {\n  const { genericFonts, colors, fontSizes } = theme\n\n  const streamlitTheme = {\n    font: {\n      color: getGray70(theme),\n      family: genericFonts.bodyFont,\n      size: fontSizes.twoSmPx,\n    },\n    title: {\n      color: colors.headingColor,\n      subtitleColor: colors.bodyText,\n      font: {\n        family: genericFonts.headingFont,\n        size: fontSizes.mdPx,\n        color: colors.headingColor,\n      },\n      pad: {\n        l: theme.spacing.twoXSPx,\n      },\n      xanchor: \"left\",\n      x: 0,\n    },\n    legend: {\n      title: {\n        font: {\n          size: fontSizes.twoSmPx,\n          color: getGray70(theme),\n        },\n        side: \"top\",\n      },\n      valign: \"top\",\n      bordercolor: colors.transparent,\n      borderwidth: theme.spacing.nonePx,\n      font: {\n        size: fontSizes.twoSmPx,\n        color: getGray90(theme),\n      },\n    },\n    paper_bgcolor: colors.bgColor,\n    plot_bgcolor: colors.bgColor,\n    yaxis: {\n      ticklabelposition: \"outside\",\n      zerolinecolor: getGray30(theme),\n      title: {\n        font: {\n          color: getGray70(theme),\n          size: fontSizes.smPx,\n        },\n        standoff: theme.spacing.twoXLPx,\n      },\n      tickcolor: getGray30(theme),\n      tickfont: {\n        color: getGray70(theme),\n        size: fontSizes.twoSmPx,\n      },\n      gridcolor: getGray30(theme),\n      minor: {\n        gridcolor: getGray30(theme),\n      },\n      automargin: true,\n    },\n    xaxis: {\n      zerolinecolor: getGray30(theme),\n      gridcolor: getGray30(theme),\n      showgrid: false,\n      tickfont: {\n        color: getGray70(theme),\n        size: fontSizes.twoSmPx,\n      },\n      tickcolor: getGray30(theme),\n      title: {\n        font: {\n          color: getGray70(theme),\n          size: fontSizes.smPx,\n        },\n        standoff: theme.spacing.mdPx,\n      },\n      minor: {\n        gridcolor: getGray30(theme),\n      },\n      zeroline: false,\n      automargin: true,\n      rangeselector: {\n        bgcolor: colors.bgColor,\n        bordercolor: getGray30(theme),\n        borderwidth: 1,\n        x: 0,\n      },\n    },\n    margin: {\n      pad: theme.spacing.lgPx,\n      r: theme.spacing.nonePx,\n      l: theme.spacing.nonePx,\n    },\n    hoverlabel: {\n      bgcolor: colors.bgColor,\n      bordercolor: colors.fadedText10,\n      font: {\n        color: getGray70(theme),\n        family: genericFonts.bodyFont,\n        size: fontSizes.twoSmPx,\n      },\n    },\n    coloraxis: {\n      colorbar: {\n        thickness: 16,\n        xpad: theme.spacing.twoXLPx,\n        ticklabelposition: \"outside\",\n        outlinecolor: colors.transparent,\n        outlinewidth: 8,\n        len: 0.75,\n        y: 0.5745,\n        title: {\n          font: {\n            color: getGray70(theme),\n            size: fontSizes.smPx,\n          },\n        },\n        tickfont: {\n          color: getGray70(theme),\n          size: fontSizes.twoSmPx,\n        },\n      },\n    },\n    // specifically for the ternary graph\n    ternary: {\n      gridcolor: getGray70(theme),\n      bgcolor: colors.bgColor,\n      title: {\n        font: {\n          family: genericFonts.bodyFont,\n          size: fontSizes.smPx,\n        },\n      },\n      color: getGray70(theme),\n      aaxis: {\n        gridcolor: getGray70(theme),\n        linecolor: getGray70(theme),\n        tickfont: {\n          family: genericFonts.bodyFont,\n          size: fontSizes.twoSmPx,\n        },\n      },\n      baxis: {\n        linecolor: getGray70(theme),\n        gridcolor: getGray70(theme),\n        tickfont: {\n          family: genericFonts.bodyFont,\n          size: fontSizes.twoSmPx,\n        },\n      },\n      caxis: {\n        linecolor: getGray70(theme),\n        gridcolor: getGray70(theme),\n        tickfont: {\n          family: genericFonts.bodyFont,\n          size: fontSizes.twoSmPx,\n        },\n      },\n    },\n  }\n\n  merge(layout, streamlitTheme)\n}\n\n/**\n * Replace the colors that we are using from streamlit_plotly_theme.py.\n * This is done so that we change colors based on the background color\n * as the backend has no idea of the background color.\n * @param spec the spec that we want to update\n * @param theme\n * @param elementTheme element.theme\n * @returns the updated spec with the correct theme colors\n */\nfunction replaceCategoricalColors(\n  spec: string,\n  theme: Theme,\n  elementTheme: string\n): string {\n  // All the placeholder constants defined here are matching the placeholders in the python implementation.\n  const CATEGORY_0 = \"#000001\"\n  const CATEGORY_1 = \"#000002\"\n  const CATEGORY_2 = \"#000003\"\n  const CATEGORY_3 = \"#000004\"\n  const CATEGORY_4 = \"#000005\"\n  const CATEGORY_5 = \"#000006\"\n  const CATEGORY_6 = \"#000007\"\n  const CATEGORY_7 = \"#000008\"\n  const CATEGORY_8 = \"#000009\"\n  const CATEGORY_9 = \"#000010\"\n\n  if (elementTheme === \"streamlit\") {\n    const categoryColors = getCategoricalColorsArray(theme)\n    spec = spec.replaceAll(CATEGORY_0, categoryColors[0])\n    spec = spec.replaceAll(CATEGORY_1, categoryColors[1])\n    spec = spec.replaceAll(CATEGORY_2, categoryColors[2])\n    spec = spec.replaceAll(CATEGORY_3, categoryColors[3])\n    spec = spec.replaceAll(CATEGORY_4, categoryColors[4])\n    spec = spec.replaceAll(CATEGORY_5, categoryColors[5])\n    spec = spec.replaceAll(CATEGORY_6, categoryColors[6])\n    spec = spec.replaceAll(CATEGORY_7, categoryColors[7])\n    spec = spec.replaceAll(CATEGORY_8, categoryColors[8])\n    spec = spec.replaceAll(CATEGORY_9, categoryColors[9])\n  } else {\n    // Default plotly colors\n    spec = spec.replaceAll(CATEGORY_0, \"#636efa\")\n    spec = spec.replaceAll(CATEGORY_1, \"#EF553B\")\n    spec = spec.replaceAll(CATEGORY_2, \"#00cc96\")\n    spec = spec.replaceAll(CATEGORY_3, \"#ab63fa\")\n    spec = spec.replaceAll(CATEGORY_4, \"#FFA15A\")\n    spec = spec.replaceAll(CATEGORY_5, \"#19d3f3\")\n    spec = spec.replaceAll(CATEGORY_6, \"#FF6692\")\n    spec = spec.replaceAll(CATEGORY_7, \"#B6E880\")\n    spec = spec.replaceAll(CATEGORY_8, \"#FF97FF\")\n    spec = spec.replaceAll(CATEGORY_9, \"#FECB52\")\n  }\n  return spec\n}\n\nfunction replaceSequentialColors(\n  spec: string,\n  theme: Theme,\n  elementTheme: string\n): string {\n  // All the placeholder constants defined here are matching the placeholders in the python implementation.\n  const SEQUENTIAL_0 = \"#000011\"\n  const SEQUENTIAL_1 = \"#000012\"\n  const SEQUENTIAL_2 = \"#000013\"\n  const SEQUENTIAL_3 = \"#000014\"\n  const SEQUENTIAL_4 = \"#000015\"\n  const SEQUENTIAL_5 = \"#000016\"\n  const SEQUENTIAL_6 = \"#000017\"\n  const SEQUENTIAL_7 = \"#000018\"\n  const SEQUENTIAL_8 = \"#000019\"\n  const SEQUENTIAL_9 = \"#000020\"\n\n  if (elementTheme === \"streamlit\") {\n    const sequentialColors = getSequentialColorsArray(theme)\n    spec = spec.replaceAll(SEQUENTIAL_0, sequentialColors[0])\n    spec = spec.replaceAll(SEQUENTIAL_1, sequentialColors[1])\n    spec = spec.replaceAll(SEQUENTIAL_2, sequentialColors[2])\n    spec = spec.replaceAll(SEQUENTIAL_3, sequentialColors[3])\n    spec = spec.replaceAll(SEQUENTIAL_4, sequentialColors[4])\n    spec = spec.replaceAll(SEQUENTIAL_5, sequentialColors[5])\n    spec = spec.replaceAll(SEQUENTIAL_6, sequentialColors[6])\n    spec = spec.replaceAll(SEQUENTIAL_7, sequentialColors[7])\n    spec = spec.replaceAll(SEQUENTIAL_8, sequentialColors[8])\n    spec = spec.replaceAll(SEQUENTIAL_9, sequentialColors[9])\n  } else {\n    // Default plotly colors\n    spec = spec.replaceAll(SEQUENTIAL_0, \"#0d0887\")\n    spec = spec.replaceAll(SEQUENTIAL_1, \"#46039f\")\n    spec = spec.replaceAll(SEQUENTIAL_2, \"#7201a8\")\n    spec = spec.replaceAll(SEQUENTIAL_3, \"#9c179e\")\n    spec = spec.replaceAll(SEQUENTIAL_4, \"#bd3786\")\n    spec = spec.replaceAll(SEQUENTIAL_5, \"#d8576b\")\n    spec = spec.replaceAll(SEQUENTIAL_6, \"#ed7953\")\n    spec = spec.replaceAll(SEQUENTIAL_7, \"#fb9f3a\")\n    spec = spec.replaceAll(SEQUENTIAL_8, \"#fdca26\")\n    spec = spec.replaceAll(SEQUENTIAL_9, \"#f0f921\")\n  }\n  return spec\n}\n\nfunction replaceDivergingColors(\n  spec: string,\n  theme: Theme,\n  elementTheme: string\n): string {\n  // All the placeholder constants defined here are matching the placeholders in the python implementation.\n  const DIVERGING_0 = \"#000021\"\n  const DIVERGING_1 = \"#000022\"\n  const DIVERGING_2 = \"#000023\"\n  const DIVERGING_3 = \"#000024\"\n  const DIVERGING_4 = \"#000025\"\n  const DIVERGING_5 = \"#000026\"\n  const DIVERGING_6 = \"#000027\"\n  const DIVERGING_7 = \"#000028\"\n  const DIVERGING_8 = \"#000029\"\n  const DIVERGING_9 = \"#000030\"\n  const DIVERGING_10 = \"#000031\"\n\n  if (elementTheme === \"streamlit\") {\n    const divergingColors = getDivergingColorsArray(theme)\n    spec = spec.replaceAll(DIVERGING_0, divergingColors[0])\n    spec = spec.replaceAll(DIVERGING_1, divergingColors[1])\n    spec = spec.replaceAll(DIVERGING_2, divergingColors[2])\n    spec = spec.replaceAll(DIVERGING_3, divergingColors[3])\n    spec = spec.replaceAll(DIVERGING_4, divergingColors[4])\n    spec = spec.replaceAll(DIVERGING_5, divergingColors[5])\n    spec = spec.replaceAll(DIVERGING_6, divergingColors[6])\n    spec = spec.replaceAll(DIVERGING_7, divergingColors[7])\n    spec = spec.replaceAll(DIVERGING_8, divergingColors[8])\n    spec = spec.replaceAll(DIVERGING_9, divergingColors[9])\n    spec = spec.replaceAll(DIVERGING_10, divergingColors[10])\n  } else {\n    // Default plotly colors\n    spec = spec.replaceAll(DIVERGING_0, \"#8e0152\")\n    spec = spec.replaceAll(DIVERGING_1, \"#c51b7d\")\n    spec = spec.replaceAll(DIVERGING_2, \"#de77ae\")\n    spec = spec.replaceAll(DIVERGING_3, \"#f1b6da\")\n    spec = spec.replaceAll(DIVERGING_4, \"#fde0ef\")\n    spec = spec.replaceAll(DIVERGING_5, \"#f7f7f7\")\n    spec = spec.replaceAll(DIVERGING_6, \"#e6f5d0\")\n    spec = spec.replaceAll(DIVERGING_7, \"#b8e186\")\n    spec = spec.replaceAll(DIVERGING_8, \"#7fbc41\")\n    spec = spec.replaceAll(DIVERGING_9, \"#4d9221\")\n    spec = spec.replaceAll(DIVERGING_10, \"#276419\")\n  }\n  return spec\n}\n\n/**\n * Because Template.layout doesn't affect the go(plotly.graph_objects) graphs,\n * we use this method to specifically replace these graph properties.\n * */\nfunction replaceGOSpecificColors(spec: string, theme: Theme): string {\n  // All the placeholder constants defined here are matching the placeholders in the python implementation.\n  const INCREASING = \"#000032\"\n  const DECREASING = \"#000033\"\n  const TOTAL = \"#000034\"\n\n  const GRAY_30 = \"#000035\"\n  const GRAY_70 = \"#000036\"\n  const GRAY_90 = \"#000037\"\n  const BG_COLOR = \"#000038\"\n  const FADED_TEXT_05 = \"#000039\"\n  const BG_MIX = \"#000040\"\n\n  spec = spec.replaceAll(INCREASING, getIncreasingGreen(theme))\n  spec = spec.replaceAll(DECREASING, getDecreasingRed(theme))\n  spec = spec.replaceAll(\n    TOTAL,\n    hasLightBackgroundColor(theme) ? theme.colors.blue80 : theme.colors.blue40\n  )\n\n  spec = spec.replaceAll(GRAY_30, getGray30(theme))\n  spec = spec.replaceAll(GRAY_70, getGray70(theme))\n  spec = spec.replaceAll(GRAY_90, getGray90(theme))\n\n  spec = spec.replaceAll(BG_COLOR, theme.colors.bgColor)\n  spec = spec.replaceAll(FADED_TEXT_05, theme.colors.fadedText05)\n  spec = spec.replaceAll(BG_MIX, theme.colors.bgMix)\n  return spec\n}\n\nexport function replaceTemporaryColors(\n  spec: string,\n  theme: Theme,\n  elementTheme: string\n): string {\n  spec = replaceGOSpecificColors(spec, theme)\n  spec = replaceCategoricalColors(spec, theme, elementTheme)\n  spec = replaceSequentialColors(spec, theme, elementTheme)\n  spec = replaceDivergingColors(spec, theme, elementTheme)\n  return spec\n}\n\n/**\n * Applies the Streamlit theme by overriding properties in\n * spec.data, spec.layout.template.data, and spec.layout.template.layout\n * @param spec - spec\n */\nexport function applyStreamlitTheme(spec: any, theme: Theme): void {\n  try {\n    applyStreamlitThemeTemplateLayout(spec.layout.template.layout, theme)\n  } catch (e) {\n    const err = ensureError(e)\n    logError(err)\n  }\n  if (\"title\" in spec.layout) {\n    spec.layout.title = { text: `<b>${spec.layout.title.text}</b>` }\n  }\n}\n\n/**\n * Apply minimum changes to graph to fit streamlit\n * @param layout - spec.layout\n * @param theme - theme from useTheme()\n * @returns modified spec.layout\n */\nexport function layoutWithThemeDefaults(layout: any, theme: Theme): any {\n  const { colors, genericFonts } = theme\n\n  const themeDefaults = {\n    font: {\n      color: colors.bodyText,\n      family: genericFonts.bodyFont,\n    },\n    paper_bgcolor: colors.bgColor,\n    plot_bgcolor: colors.secondaryBg,\n  }\n\n  // Fill in theme defaults where the user didn't specify layout options.\n  return {\n    ...layout,\n    font: {\n      ...themeDefaults.font,\n      ...layout.font,\n    },\n    paper_bgcolor: layout.paper_bgcolor || themeDefaults.paper_bgcolor,\n    plot_bgcolor: layout.plot_bgcolor || themeDefaults.plot_bgcolor,\n  }\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement, useLayoutEffect, useState } from \"react\"\nimport { useTheme } from \"@emotion/react\"\nimport { Theme } from \"src/theme\"\nimport {\n  Figure as FigureProto,\n  PlotlyChart as PlotlyChartProto,\n} from \"src/autogen/proto\"\nimport withFullScreenWrapper from \"src/hocs/withFullScreenWrapper\"\nimport Plot from \"react-plotly.js\"\nimport {\n  applyStreamlitTheme,\n  layoutWithThemeDefaults,\n  replaceTemporaryColors,\n} from \"./CustomTheme\"\n\nexport interface PlotlyChartProps {\n  width: number\n  element: PlotlyChartProto\n  height: number | undefined\n}\n\nexport interface PlotlyIFrameProps {\n  width: number\n  height: number | undefined\n  url: string\n}\n\nexport const DEFAULT_HEIGHT = 450\n\nfunction renderIFrame({\n  url,\n  width,\n  height: propHeight,\n}: PlotlyIFrameProps): ReactElement {\n  const height = propHeight || DEFAULT_HEIGHT\n  return <iframe title=\"Plotly\" src={url} style={{ width, height }} />\n}\n\nfunction renderFigure({\n  element,\n  width,\n  height,\n}: PlotlyChartProps): ReactElement {\n  const figure = element.figure as FigureProto\n  const isFullScreen = (): boolean => !!height\n\n  const theme: Theme = useTheme()\n\n  const generateSpec = (): any => {\n    const spec = JSON.parse(\n      replaceTemporaryColors(figure.spec, theme, element.theme)\n    )\n    const initialHeight = spec.layout.height\n    const initialWidth = spec.layout.width\n\n    if (isFullScreen()) {\n      spec.layout.width = width\n      spec.layout.height = height\n    } else if (element.useContainerWidth) {\n      spec.layout.width = width\n    } else {\n      spec.layout.width = initialWidth\n      spec.layout.height = initialHeight\n    }\n    if (element.theme === \"streamlit\") {\n      applyStreamlitTheme(spec, theme)\n    } else {\n      // Apply minor theming improvements to work better with Streamlit\n      spec.layout = layoutWithThemeDefaults(spec.layout, theme)\n    }\n\n    return spec\n  }\n\n  const [config, setConfig] = useState(JSON.parse(figure.config))\n  const [spec, setSpec] = useState(generateSpec())\n\n  // Update config and spec references iff the theme or props change\n  // Use useLayoutEffect to synchronize rerender by updating state\n  // More information: https://kentcdodds.com/blog/useeffect-vs-uselayouteffect\n  useLayoutEffect(() => {\n    setConfig(JSON.parse(figure.config))\n    setSpec(generateSpec())\n  }, [element, theme, height, width])\n\n  const { data, layout, frames } = spec\n\n  return (\n    <Plot\n      key={isFullScreen() ? \"fullscreen\" : \"original\"}\n      className=\"stPlotlyChart\"\n      data={data}\n      layout={layout}\n      config={config}\n      frames={frames}\n    />\n  )\n}\n\nexport function PlotlyChart({\n  width,\n  element,\n  height,\n}: PlotlyChartProps): ReactElement {\n  switch (element.chart) {\n    case \"url\":\n      return renderIFrame({\n        url: element.url as string,\n        height,\n        width,\n      })\n    case \"figure\":\n      return renderFigure({ element, height, width })\n    default:\n      throw new Error(`Unrecognized PlotlyChart type: ${element.chart}`)\n  }\n}\n\nexport default withFullScreenWrapper(PlotlyChart)\n"],"sourceRoot":""}