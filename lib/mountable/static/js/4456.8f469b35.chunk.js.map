{"version":3,"file":"static/js/4456.8f469b35.chunk.js","mappings":"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","sources":["../../../streamlit/frontend/lib/src/components/elements/DataFrame/SortDirection.ts","../../../streamlit/frontend/lib/src/components/elements/DataFrame/styled-components.ts","../../../streamlit/frontend/lib/src/vendor/dom-helpers.ts","../../../streamlit/frontend/lib/src/components/elements/DataFrame/DataFrameUtil.tsx","../../../node_modules/@emotion-icons/open-iconic/ChevronTop/ChevronTop.esm.js","../../../node_modules/@emotion-icons/open-iconic/ChevronBottom/ChevronBottom.esm.js","../../../streamlit/frontend/lib/src/components/elements/DataFrame/DataFrameCell.tsx","../../../streamlit/frontend/lib/src/components/elements/DataFrame/DataFrame.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum SortDirection {\n  ASCENDING = \"ascending\",\n  DESCENDING = \"descending\",\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled, { CSSObject } from \"@emotion/styled\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\n\nexport interface StyledDataFrameContainerProps {\n  width: number\n}\n\nexport const StyledDataFrameContainer =\n  styled.div<StyledDataFrameContainerProps>(({ width, theme }) => ({\n    width,\n    border: `1px solid ${theme.colors.fadedText05}`,\n    boxSizing: \"content-box\",\n\n    \"& .table-top-right\": {\n      // Hide scrollbar manually rather than with the hideTopRightGridScrollbar property of React\n      // Multigrid because the latter does show a scrollbar in some cases, for some reason.\n      overflow: \"hidden !important\",\n      paddingRight: \"6px\", // Scrollbar size\n    },\n\n    \"& .table-bottom-left\": {\n      // Hide scrollbar manually rather than with the hideTopRightGridScrollbar property of React\n      // Multigrid because the latter does show a scrollbar in some cases, for some reason.\n      overflow: \"hidden !important\",\n      paddingBottom: \"6px\", // Scrollbar size\n    },\n\n    // Only this area should ever show a scrollbar.\n    \"& .table-bottom-right\": {\n      // Like all our scrollbar mods (see globalStyles.ts) this only works in Webkit and Blink.\n      overflow: \"overlay !important\",\n    },\n\n    // Remove visible outline from click, since there's no click target/action anyway.\n    \"& .table-bottom-right:focus-visible\": {\n      outline: \"none\",\n    },\n    \"& .table-bottom-right:focus\": {\n      outline: \"none\",\n    },\n  }))\n\nconst StyledDataFrameCell = styled.div(({ theme }) => ({\n  padding: `${theme.spacing.twoXS} ${theme.spacing.xs}`,\n  borderBottom: `1px solid ${theme.colors.fadedText05}`,\n  borderRight: `1px solid ${theme.colors.fadedText05}`,\n  fontSize: theme.fontSizes.md,\n  fontFamily: theme.genericFonts.bodyFont,\n  lineHeight: theme.lineHeights.table,\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"flex-start\",\n}))\n\nconst headerCellFormatter = (theme: EmotionTheme): CSSObject => ({\n  color: theme.colors.fadedText60,\n  borderBottom: `1px solid ${theme.colors.fadedText05}`,\n  borderRight: `1px solid ${theme.colors.fadedText05}`,\n  zIndex: 1,\n})\n\nconst cellTextFormatter = (theme: EmotionTheme): CSSObject => ({\n  overflow: \"hidden\",\n  whiteSpace: \"nowrap\",\n  textOverflow: \"ellipsis\",\n  lineHeight: theme.lineHeights.table,\n})\n\nexport const StyledDataFrameCornerCell = styled(StyledDataFrameCell)(\n  ({ theme }) => headerCellFormatter(theme)\n)\n\nexport const StyledDataFrameColHeaderCell = styled(StyledDataFrameCell)(\n  ({ theme }) => ({\n    /* Row headers are click-to-sort, so we make the text unselectable.\n     Column headers are also unselectable, so that clicking to sort the\n     column's row header doesn't result in the entire column being selected */\n    userSelect: \"none\",\n    ...headerCellFormatter(theme),\n    ...cellTextFormatter(theme),\n  })\n)\n\nexport const StyledDataFrameRowHeaderCell = styled(StyledDataFrameCell)(\n  ({ theme }) => ({\n    /* Row headers are click-to-sort, so we make the text unselectable.\n     Column headers are also unselectable, so that clicking to sort the\n     column's row header doesn't result in the entire column being selected */\n    userSelect: \"none\",\n    ...headerCellFormatter(theme),\n    ...cellTextFormatter(theme),\n  })\n)\n\nexport const StyledDataFrameDataCell = styled(StyledDataFrameCell)(\n  ({ theme }) => cellTextFormatter(theme)\n)\n\nexport interface StyledFixupProps {\n  verticalLocator: \"top\" | \"bottom\"\n  horizontalLocator: \"left\" | \"right\"\n  width: number\n  height: number\n}\n\nexport const StyledFixup = styled.div<StyledFixupProps>(\n  ({ verticalLocator, horizontalLocator, width, height }) => ({\n    position: \"absolute\",\n    [verticalLocator]: \"0px\",\n    [horizontalLocator]: \"0px\",\n    width,\n    height,\n  })\n)\n\nexport const StyledEmptyDataframe = styled.div(({ theme }) => ({\n  fontFamily: theme.genericFonts.codeFont,\n  color: theme.colors.fadedText60,\n  fontStyle: \"italic\",\n  fontSize: theme.fontSizes.md,\n  textAlign: \"center\",\n}))\n\nexport const StyledSortIcon = styled.span(({ theme }) => ({\n  color: theme.colors.fadedText05,\n  verticalAlign: \"top\",\n}))\n","/* eslint-disable */\n\n// We only need a single function from https://github.com/react-bootstrap/dom-helpers,\n// so we copy it here instead of adding a new dependency.\n\nconst canUseDOM = !!(\n  typeof window !== \"undefined\" &&\n  window.document &&\n  window.document.createElement\n)\n\nlet size: number\n\n// https://github.com/react-bootstrap/dom-helpers/blob/3f509a03c5e330faa93bcf8acf30976b5a7bacac/src/scrollbarSize.ts#L5\nexport function scrollbarSize(recalc?: boolean) {\n  if ((!size && size !== 0) || recalc) {\n    if (canUseDOM) {\n      const scrollDiv = document.createElement(\"div\")\n\n      scrollDiv.style.position = \"absolute\"\n      scrollDiv.style.top = \"-9999px\"\n      scrollDiv.style.width = \"50px\"\n      scrollDiv.style.height = \"50px\"\n      scrollDiv.style.overflow = \"scroll\"\n\n      document.body.appendChild(scrollDiv)\n      size = scrollDiv.offsetWidth - scrollDiv.clientWidth\n      document.body.removeChild(scrollDiv)\n    }\n  }\n\n  return size\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DataFrameCellType,\n  dataFrameGet,\n  dataFrameGetDimensions,\n} from \"@streamlit/lib/src/dataframes/dataFrameProto\"\nimport { toFormattedString } from \"@streamlit/lib/src/util/format\"\nimport { logWarning } from \"@streamlit/lib/src/util/log\"\nimport { scrollbarSize } from \"@streamlit/lib/src/vendor/dom-helpers\"\nimport React, { ReactElement, ComponentType } from \"react\"\nimport { Map as ImmutableMap } from \"immutable\"\nimport { fontSizes } from \"@streamlit/lib/src/theme/primitives/typography\"\nimport {\n  StyledDataFrameRowHeaderCell,\n  StyledDataFrameDataCell,\n  StyledDataFrameColHeaderCell,\n  StyledDataFrameCornerCell,\n} from \"./styled-components\"\n\n/**\n * Size of the optional sort icon displayed in column headers\n */\nconst SORT_ICON_WIDTH_PX = 10\n\n/**\n * Height of dataframe row.\n */\nexport const ROW_HEIGHT = fontSizes.smPx * 2\n\n/**\n * Minimum size of a dataframe cell.\n */\nexport const MIN_CELL_WIDTH_PX = 25\n\n/**\n * Maximum size of a dataframe cell.\n */\nconst MAX_CELL_WIDTH_PX = 200\n\n/**\n * Maximum size of a dataframe cell in a 1-column dataframe.\n */\nconst MAX_LONELY_CELL_WIDTH_PX = 400\n\nexport interface CellContents {\n  Component: ComponentType\n  styles: Record<string, unknown>\n  contents: string\n}\n\nexport interface CellContentsGetter {\n  (columnIndex: number, rowIndex: number): CellContents\n}\nexport interface CellContentsGetterProps {\n  element: ImmutableMap<string, any>\n  headerRows: number\n  sortedDataRowIndices?: number[]\n}\nexport interface CellRendererInput {\n  columnIndex: number\n  key: string\n  rowIndex: number\n  style: React.CSSProperties\n}\n\nexport interface CellRenderer {\n  (input: CellRendererInput): ReactElement\n}\n\ninterface Dimensions {\n  rowHeight: number\n  headerHeight: number\n  border: number\n  height: number\n  elementWidth: number\n  columnWidth: ({ index }: { index: number }) => number\n  headerWidth: number\n}\n\ninterface ComputedWidths {\n  elementWidth: number\n  columnWidth: ({ index }: { index: number }) => number\n  headerWidth: number\n}\n\nconst DEFAULT_HEIGHT = 300\n\n/**\n * Returns rendering dimensions for a DataFrame\n */\nexport const getDimensions = (\n  height: number | undefined,\n  width: number,\n  element: ImmutableMap<string, any>,\n  cellContentsGetter: CellContentsGetter\n): Dimensions => {\n  const { headerRows, headerCols, dataRows, cols, rows } =\n    dataFrameGetDimensions(element)\n\n  // Rendering constants.\n  const headerHeight = ROW_HEIGHT * headerRows\n  const border = 2\n\n  // Reserve enough space to render the dataframe border as well as a vertical\n  // scrollbar if necessary.\n  const availableWidth = width - border - scrollbarSize()\n  const widths = getWidths(\n    cols,\n    rows,\n    headerCols,\n    headerRows,\n    availableWidth,\n    cellContentsGetter\n  )\n\n  let { elementWidth, columnWidth, headerWidth } = widths\n\n  // Add space for the \"empty\" text when the table is empty.\n  const EMPTY_WIDTH = 60 // px\n  if (dataRows === 0 && elementWidth < EMPTY_WIDTH) {\n    elementWidth = EMPTY_WIDTH\n    headerWidth = EMPTY_WIDTH\n    let totalWidth = 0\n    for (let i = 0; i < cols; i++) {\n      totalWidth += columnWidth({ index: i })\n    }\n    if (totalWidth < EMPTY_WIDTH) {\n      columnWidth = () => EMPTY_WIDTH / cols\n    }\n  }\n\n  // Allocate extra space for horizontal and vertical scrollbars, if needed.\n  const totalHeight = rows * ROW_HEIGHT\n  const maxHeight = (height || DEFAULT_HEIGHT) - border\n\n  height = Math.min(totalHeight, maxHeight)\n\n  const needsVerticalScrollbar = totalHeight > maxHeight\n  elementWidth += needsVerticalScrollbar ? scrollbarSize() : 0\n\n  return {\n    rowHeight: ROW_HEIGHT,\n    headerHeight,\n    border,\n    columnWidth,\n    headerWidth,\n    elementWidth,\n    height,\n  }\n}\n\nconst typeToStyledComponent: Record<DataFrameCellType, ComponentType> = {\n  corner: StyledDataFrameCornerCell,\n  \"col-header\": StyledDataFrameColHeaderCell,\n  \"row-header\": StyledDataFrameRowHeaderCell,\n  data: StyledDataFrameDataCell,\n}\n\n/**\n * Returns a function which can access individual cell data in a DataFrame.\n *\n * The returned function has the form:\n *\n * cellContentsGetter(columnIndex: int, rowIndex: int) -> {\n *    classes: str - a css class string\n *    styles: {property1: value1, ...} - css styles to apply to the cell\n *    contents: str - the cell's formatted display string\n * }\n *\n * element              - a DataFrame\n * headerRows           - the number of frozen rows\n * headerCols           - the number of frozen columns\n * sortedDataRowIndices - (optional) an array containing an ordering for row indices\n */\nexport function getCellContentsGetter({\n  element,\n  headerRows,\n  sortedDataRowIndices,\n}: CellContentsGetterProps): CellContentsGetter {\n  return (columnIndex: number, rowIndex: number): CellContents => {\n    if (sortedDataRowIndices != null && rowIndex >= headerRows) {\n      // If we have a sortedDataRowIndices Array, it contains a mapping of row indices for\n      // all *data* (non-header) rows.\n      const sortIdx = rowIndex - headerRows\n      if (sortIdx >= 0 && sortIdx < sortedDataRowIndices.length) {\n        rowIndex = sortedDataRowIndices[sortIdx]\n        rowIndex += headerRows\n      } else {\n        logWarning(\n          `Bad sortedDataRowIndices (` +\n            `rowIndex=${rowIndex}, ` +\n            `headerRows=${headerRows}, ` +\n            `sortedDataRowIndices.length=${sortedDataRowIndices.length}`\n        )\n      }\n    }\n\n    const { contents, styles, type } = dataFrameGet(\n      element,\n      columnIndex,\n      rowIndex\n    )\n\n    // All table elements have class 'dataframe'.\n    const Component = typeToStyledComponent[type]\n\n    // Format floating point numbers nicely.\n    const fsContents = toFormattedString(contents)\n\n    // Put it all together\n    return { Component, styles, contents: fsContents }\n  }\n}\n\n/**\n * Computes various dimensions for the table.\n *\n * First of all we create an array containing all the calculated column widths,\n * if the difference between the total of columns and the container width is negative\n * we put a width limit, if not, we divide the remaining space by each exceeding width\n */\nexport function getWidths(\n  cols: number,\n  rows: number,\n  headerCols: number,\n  headerRows: number,\n  containerWidth: number,\n  cellContentsGetter: CellContentsGetter\n): ComputedWidths {\n  const minWidth = MIN_CELL_WIDTH_PX\n  const maxWidth =\n    cols > 2 // 2 because 1 column is the index.\n      ? MAX_CELL_WIDTH_PX\n      : MAX_LONELY_CELL_WIDTH_PX\n\n  // Calculate column width based on character count alone.\n  const calculateColumnWidth = ({ index }: { index: number }): number => {\n    const colIndex = index\n    const fontSize = 10\n    const charWidth = (fontSize * 8) / 10\n    const padding = 14 + SORT_ICON_WIDTH_PX // 14 for whitespace; an extra 10 for the optional sort arrow icon\n\n    // Set the colWidth to the maximum width of a column.\n    const maxRows = 100\n    let colWidth = minWidth\n    for (let i = 0; i < Math.min(rows, maxRows); i++) {\n      let rowIndex = -1\n      if (i < headerRows) {\n        // Always measure all the header rows.\n        rowIndex = i\n      } else if (rows > maxRows) {\n        // If there are a lot of rows, then pick some at random.\n        rowIndex = Math.floor(Math.random() * rows)\n      } else {\n        // Otherwise, just measure every row.\n        rowIndex = i\n      }\n      const { contents } = cellContentsGetter(colIndex, rowIndex)\n      const nChars = contents ? contents.length : 0\n      const cellWidth = nChars * charWidth + padding\n\n      if (cellWidth > colWidth) {\n        colWidth = cellWidth\n      }\n    }\n    return colWidth\n  }\n\n  let distributedTable: Array<number> = []\n  const tableColumnWidth: Array<number> = Array.from(Array(cols), (_, index) =>\n    calculateColumnWidth({ index })\n  )\n  const totalTableWidth = tableColumnWidth.reduce((a, b) => a + b, 0)\n  const remainingSpace = containerWidth - totalTableWidth\n  const getColumnsThatExceedMaxWidth = (\n    columns: Array<number>\n  ): Array<number> => columns.filter(width => width > maxWidth)\n\n  if (remainingSpace < 0) {\n    distributedTable = tableColumnWidth.map(width =>\n      width > maxWidth ? maxWidth : width\n    )\n  } else {\n    const columnsThatExceed = getColumnsThatExceedMaxWidth(tableColumnWidth)\n    const remainingSpaceByColumn = remainingSpace / columnsThatExceed.length\n\n    distributedTable = tableColumnWidth.map((width, id) => {\n      if (id in columnsThatExceed.keys()) {\n        return width + remainingSpaceByColumn\n      }\n\n      return width\n    })\n  }\n\n  let distributedTableTotal = distributedTable.reduce((a, b) => a + b, 0)\n  if (\n    distributedTableTotal > containerWidth * (2 / 3) &&\n    distributedTableTotal < containerWidth\n  ) {\n    const remainingSpace = (containerWidth - distributedTableTotal) / cols\n    distributedTable = distributedTable.map(width => width + remainingSpace)\n    distributedTableTotal = distributedTable.reduce((a, b) => a + b, 0)\n  }\n\n  const elementWidth = Math.min(distributedTableTotal, containerWidth)\n  const columnWidth = ({ index }: { index: number }): number =>\n    distributedTable[index]\n\n  const headerWidth = distributedTable\n    .slice(0, headerCols)\n    .reduce((prev, curr) => prev + curr)\n\n  return {\n    elementWidth,\n    columnWidth,\n    headerWidth,\n  }\n}\n","import _extends from \"@babel/runtime/helpers/extends\";\nimport * as React from 'react';\nimport { EmotionIconBase } from '@emotion-icons/emotion-icon';\nexport var ChevronTop = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var attrs = {\n    \"fill\": \"currentColor\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  };\n  return /*#__PURE__*/React.createElement(EmotionIconBase, _extends({\n    iconAttrs: attrs,\n    iconVerticalAlign: \"middle\",\n    iconViewBox: \"0 0 8 8\"\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4 1L0 5l1.5 1.5L4 4l2.5 2.5L8 5 4 1z\"\n  }));\n});\nChevronTop.displayName = 'ChevronTop';\nexport var ChevronTopDimensions = {\n  height: 8,\n  width: 8\n};","import _extends from \"@babel/runtime/helpers/extends\";\nimport * as React from 'react';\nimport { EmotionIconBase } from '@emotion-icons/emotion-icon';\nexport var ChevronBottom = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var attrs = {\n    \"fill\": \"currentColor\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  };\n  return /*#__PURE__*/React.createElement(EmotionIconBase, _extends({\n    iconAttrs: attrs,\n    iconVerticalAlign: \"middle\",\n    iconViewBox: \"0 0 8 8\"\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1.5 1L0 2.5l4 4 4-4L6.5 1 4 3.5 1.5 1z\"\n  }));\n});\nChevronBottom.displayName = 'ChevronBottom';\nexport var ChevronBottomDimensions = {\n  height: 8,\n  width: 8\n};","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ComponentType, ReactElement } from \"react\"\nimport { ChevronTop, ChevronBottom } from \"@emotion-icons/open-iconic\"\nimport Icon from \"@streamlit/lib/src/components/shared/Icon\"\nimport { SortDirection } from \"./SortDirection\"\nimport { StyledSortIcon } from \"./styled-components\"\n\nexport interface DataFrameCellProps {\n  /** The cell's column index in the DataFrame */\n  columnIndex: number\n\n  /** The cell's row index in the DataFrame */\n  rowIndex: number\n\n  /** The cell's component to render */\n  CellType: ComponentType\n\n  /** Additional css styling for the cell */\n  style: Record<string, unknown>\n\n  /**\n   * The HTML contents of the cell. Added to the DOM as a child of this\n   * DataFrameCel.\n   */\n  contents: string\n\n  /**\n   * If true, then the table's sorting was manually set by the user, by\n   * clicking on a column header. We only show the sort arrow when this is\n   * true.\n   */\n  sortedByUser: boolean\n\n  /**\n   * The {@link SortDirection} for this column, or undefined if the column is\n   * unsorted. No sorting is done here - this property is used to determine\n   * which, if any, sort icon to draw in column-header cells.\n   */\n  columnSortDirection?: SortDirection\n\n  /**\n   * An optional callback that will be called when a column header is clicked.\n   * (The property is ignored for non-header cells). The callback will be passed this\n   * cell's columnIndex.\n   *\n   * {@link DataFrame} uses this to toggle column sorting.\n   */\n  headerClickedCallback?: (columnIndex: number) => void\n}\n\nexport default function DataFrameCell({\n  CellType,\n  columnIndex,\n  contents,\n  rowIndex,\n  sortedByUser,\n  style,\n  columnSortDirection,\n  headerClickedCallback,\n}: DataFrameCellProps): ReactElement {\n  let onClick\n  let role\n  let tabIndex\n  let title = contents\n\n  const isDescending = columnSortDirection === SortDirection.DESCENDING\n\n  if (headerClickedCallback != null && rowIndex === 0) {\n    onClick = () => headerClickedCallback(columnIndex)\n    role = \"button\"\n    tabIndex = 0\n    title =\n      columnSortDirection == null\n        ? `Sort by column \"${contents}\"`\n        : `Sorted by column \"${contents}\" (${\n            isDescending ? \"descending\" : \"ascending\"\n          })`\n  }\n\n  // The sort icon is only drawn in the top row\n  const sortIcon =\n    rowIndex === 0 ? drawSortIcon(columnSortDirection) : undefined\n\n  return (\n    // (ESLint erroneously believes we're not assigning a role to our clickable div)\n    // eslint-disable-next-line\n\n    <CellType\n      // @ts-expect-error\n      style={style}\n      onClick={onClick}\n      role={role}\n      tabIndex={tabIndex}\n      title={title}\n      data-testid={CellType.displayName}\n      data-test-sort-direction={columnSortDirection}\n    >\n      {contents}\n      {sortedByUser ? sortIcon : \"\"}\n    </CellType>\n  )\n}\n\nfunction drawSortIcon(sortDirection?: SortDirection): React.ReactNode {\n  // If these icons are changed, you may also need to update DataFrame.SORT_ICON_WIDTH\n  // to ensure proper column width padding\n  switch (sortDirection) {\n    case SortDirection.ASCENDING:\n      return (\n        <StyledSortIcon data-testid=\"sortIcon\">\n          <Icon content={ChevronTop} size=\"xs\" margin=\"0 0 0 twoXS\" />\n        </StyledSortIcon>\n      )\n\n    case SortDirection.DESCENDING:\n      return (\n        <StyledSortIcon data-testid=\"sortIcon\">\n          <Icon content={ChevronBottom} size=\"xs\" margin=\"0 0 0 twoXS\" />\n        </StyledSortIcon>\n      )\n\n    default:\n      return null\n  }\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement, useEffect, useState } from \"react\"\nimport { Map as ImmutableMap } from \"immutable\"\nimport { MultiGrid } from \"react-virtualized\"\nimport withFullScreenWrapper from \"@streamlit/lib/src/hocs/withFullScreenWrapper\"\nimport {\n  dataFrameGetDimensions,\n  getSortedDataRowIndices,\n  tableGetRowsAndCols,\n} from \"@streamlit/lib/src/dataframes/dataFrameProto\"\nimport { SortDirection } from \"./SortDirection\"\nimport {\n  StyledDataFrameContainer,\n  StyledEmptyDataframe,\n  StyledFixup,\n} from \"./styled-components\"\nimport {\n  CellContentsGetter,\n  CellRenderer,\n  CellRendererInput,\n  getCellContentsGetter,\n  getDimensions,\n} from \"./DataFrameUtil\"\nimport DataFrameCell from \"./DataFrameCell\"\n\nexport interface DataFrameProps {\n  width: number\n  height?: number\n  element: ImmutableMap<string, any>\n}\n\n/**\n * Functional element representing a DataFrame.\n */\nexport function DataFrame({\n  element,\n  height: propHeight,\n  width,\n}: DataFrameProps): ReactElement {\n  const multiGridRef = React.useRef<MultiGrid>(null)\n\n  /**\n   * If true, then the user manually clicked on a column header to sort the\n   * table.\n   */\n  const [sortedByUser, setSortedByUser] = useState(false)\n\n  /**\n   * Index of the column on which the table is sorted.\n   * (Column 0 = row indices).\n   */\n  const [sortColumn, setSortColumn] = useState(0)\n\n  /** Sort direction for table sorting. */\n  const [sortDirection, setSortDirection] = useState(SortDirection.ASCENDING)\n\n  // Calculate the dimensions of this array.\n  const [, nCols] = tableGetRowsAndCols(element.get(\"data\"))\n  const { headerRows, headerCols, dataRows, cols, rows } =\n    dataFrameGetDimensions(element)\n\n  /**\n   * Called when one of our column headers is clicked.\n   * Changes the sort order of the table.\n   */\n  const toggleSortOrder = (columnIndex: number): void => {\n    let newSortDirection = SortDirection.ASCENDING\n    if (sortColumn === columnIndex) {\n      // Clicking the same header toggles between ascending and descending.\n      newSortDirection =\n        sortDirection === SortDirection.ASCENDING\n          ? SortDirection.DESCENDING\n          : SortDirection.ASCENDING\n    }\n    setSortColumn(columnIndex)\n    setSortDirection(newSortDirection)\n    setSortedByUser(true)\n  }\n\n  /**\n   * Returns a function that creates a DataFrameCell component for the given cell.\n   */\n  function getCellRenderer(\n    cellContentsGetter: CellContentsGetter\n  ): CellRenderer {\n    // eslint-disable-next-line react/display-name\n    return ({\n      columnIndex,\n      key,\n      rowIndex,\n      style: baseStyle,\n    }: CellRendererInput): ReactElement => {\n      const {\n        Component,\n        styles: additionalStyles,\n        contents,\n      } = cellContentsGetter(columnIndex, rowIndex)\n\n      const headerClickedCallback =\n        rowIndex === 0 ? toggleSortOrder : undefined\n\n      const columnSortDirection =\n        columnIndex === sortColumn ? sortDirection : undefined\n\n      const isLastRow = rowIndex === dataRows\n      const isLastCol = columnIndex === cols - headerCols\n\n      // Merge our base styles with any additional cell-specific\n      // styles returned by the cellContentsGetter\n      const styles = {\n        ...baseStyle,\n        ...additionalStyles,\n        borderBottom: isLastRow ? \"none\" : undefined,\n        borderRight: isLastCol ? \"none\" : undefined,\n      }\n\n      return (\n        <DataFrameCell\n          key={key}\n          CellType={Component}\n          columnIndex={columnIndex}\n          rowIndex={rowIndex}\n          style={styles}\n          contents={contents}\n          sortedByUser={sortedByUser}\n          columnSortDirection={columnSortDirection}\n          headerClickedCallback={headerClickedCallback}\n        />\n      )\n    }\n  }\n\n  /**\n   * Returns the row indices, in display order, for this DataFrame,\n   * given its sortColumn and sortDirection.\n   */\n  const getDataRowIndices = (nCols: number): number[] => {\n    const { headerCols, dataRows } = dataFrameGetDimensions(element)\n\n    const sortAscending = sortDirection !== SortDirection.DESCENDING\n\n    // If we're sorting a header column, our sorted row indices are just the\n    // row indices themselves (reversed, if SortDirection == DESCENDING)\n    if (sortColumn < headerCols || sortColumn - headerCols >= nCols) {\n      const rowIndices = new Array(dataRows)\n      for (let i = 0; i < dataRows; i += 1) {\n        rowIndices[i] = sortAscending ? i : dataRows - (i + 1)\n      }\n\n      return rowIndices\n    }\n\n    return getSortedDataRowIndices(\n      element,\n      sortColumn - headerCols,\n      sortAscending\n    )\n  }\n\n  /**\n   * Schedule a gridSize recompute if we have a multigrid attached.\n   * This should be called whenever our data may have changed (i.e., from the render() method).\n   */\n  const recomputeSizeIfNeeded = (): void => {\n    setTimeout(() => {\n      if (multiGridRef.current != null) {\n        multiGridRef.current.recomputeGridSize()\n      }\n    }, 0)\n  }\n\n  const sortedDataRowIndices = getDataRowIndices(nCols)\n\n  // Get the cell renderer.\n  const cellContentsGetter = getCellContentsGetter({\n    element,\n    headerRows,\n    sortedDataRowIndices,\n  })\n\n  // RTL ESLint triggers a false positive on this render function\n  // eslint-disable-next-line testing-library/render-result-naming-convention\n  const cellRenderer = getCellRenderer(cellContentsGetter)\n\n  // Determine our rendering dimensions\n  const {\n    rowHeight,\n    headerHeight,\n    border,\n    height,\n    elementWidth,\n    columnWidth,\n    headerWidth,\n  } = getDimensions(propHeight, width, element, cellContentsGetter)\n\n  // Since this is a PureComponent, finding ourselves in this method\n  // means that the props have changed, so we should force a rerender of the\n  // widths.\n  recomputeSizeIfNeeded()\n\n  useEffect(() => {\n    if (sortColumn - headerCols >= nCols) {\n      setSortColumn(0)\n      setSortDirection(SortDirection.ASCENDING)\n      setSortedByUser(false)\n    }\n  }, [sortColumn, headerCols, nCols])\n\n  // Put it all together.\n  return (\n    <StyledDataFrameContainer width={elementWidth} className=\"stDataFrame\">\n      <MultiGrid\n        cellRenderer={cellRenderer}\n        fixedColumnCount={headerCols}\n        fixedRowCount={headerRows}\n        columnWidth={columnWidth}\n        columnCount={cols}\n        enableFixedColumnScroll={false}\n        enableFixedRowScroll={false}\n        height={height}\n        rowHeight={rowHeight}\n        rowCount={rows}\n        width={elementWidth}\n        classNameBottomLeftGrid=\"table-bottom-left\"\n        classNameBottomRightGrid=\"table-bottom-right\"\n        classNameTopRightGrid=\"table-top-right\"\n        ref={multiGridRef}\n      />\n      <StyledFixup\n        verticalLocator=\"top\"\n        horizontalLocator=\"right\"\n        width={border}\n        height={headerHeight}\n      />\n      <StyledFixup\n        verticalLocator=\"bottom\"\n        horizontalLocator=\"left\"\n        width={headerWidth}\n        height={border}\n      />\n      {dataRows === 0 ? (\n        <StyledEmptyDataframe>empty</StyledEmptyDataframe>\n      ) : null}\n    </StyledDataFrameContainer>\n  )\n}\n\nexport default withFullScreenWrapper(DataFrame)\n"],"names":["SortDirection","StyledDataFrameContainer","_styled","target","_ref","width","theme","border","concat","colors","fadedText05","boxSizing","overflow","paddingRight","paddingBottom","outline","StyledDataFrameCell","_ref2","padding","spacing","twoXS","xs","borderBottom","borderRight","fontSize","fontSizes","md","fontFamily","genericFonts","bodyFont","lineHeight","lineHeights","table","display","alignItems","justifyContent","headerCellFormatter","color","fadedText60","zIndex","cellTextFormatter","whiteSpace","textOverflow","StyledDataFrameCornerCell","_ref3","StyledDataFrameColHeaderCell","_ref4","userSelect","StyledDataFrameRowHeaderCell","_ref5","StyledDataFrameDataCell","_ref6","StyledFixup","_ref7","verticalLocator","horizontalLocator","height","position","StyledEmptyDataframe","_ref8","codeFont","fontStyle","textAlign","StyledSortIcon","_ref9","verticalAlign","canUseDOM","window","document","createElement","size","scrollbarSize","recalc","scrollDiv","style","top","body","appendChild","offsetWidth","clientWidth","removeChild","ROW_HEIGHT","getDimensions","element","cellContentsGetter","headerRows","headerCols","dataRows","cols","rows","dataFrameGetDimensions","headerHeight","availableWidth","widths","containerWidth","minWidth","maxWidth","calculateColumnWidth","index","colIndex","charWidth","maxRows","colWidth","i","Math","min","rowIndex","floor","random","contents","cellWidth","length","distributedTable","tableColumnWidth","Array","from","_","totalTableWidth","reduce","a","b","remainingSpace","getColumnsThatExceedMaxWidth","columns","filter","map","columnsThatExceed","remainingSpaceByColumn","id","keys","distributedTableTotal","elementWidth","columnWidth","headerWidth","slice","prev","curr","getWidths","totalWidth","totalHeight","maxHeight","rowHeight","typeToStyledComponent","corner","data","ChevronTop","React","props","ref","EmotionIconBase","_extends","iconAttrs","iconVerticalAlign","iconViewBox","d","displayName","ChevronBottom","DataFrameCell","onClick","role","tabIndex","CellType","columnIndex","sortedByUser","columnSortDirection","headerClickedCallback","title","isDescending","DESCENDING","sortIcon","sortDirection","ASCENDING","_jsx","children","Icon","content","margin","drawSortIcon","undefined","_jsxs","withFullScreenWrapper","propHeight","multiGridRef","setSortedByUser","useState","sortColumn","setSortColumn","setSortDirection","nCols","tableGetRowsAndCols","get","toggleSortOrder","newSortDirection","sortedDataRowIndices","sortAscending","rowIndices","getSortedDataRowIndices","getDataRowIndices","sortIdx","logWarning","styles","type","dataFrameGet","Component","toFormattedString","getCellContentsGetter","cellRenderer","key","baseStyle","additionalStyles","getCellRenderer","setTimeout","current","recomputeGridSize","useEffect","className","MultiGrid","fixedColumnCount","fixedRowCount","columnCount","enableFixedColumnScroll","enableFixedRowScroll","rowCount","classNameBottomLeftGrid","classNameBottomRightGrid","classNameTopRightGrid"],"sourceRoot":""}