{"version":3,"sources":["../../../streamlit/frontend/src/components/widgets/TimeInput/TimeInput.tsx"],"names":["TimeInput","formClearHelper","FormClearHelper","state","value","initialValue","commitWidgetValue","source","props","widgetMgr","setStringValue","element","onFormCleared","setState","_","prevProps","default","fromUi","handleChange","newDate","dateToString","stringToDate","split","map","Number","hours","minutes","date","Date","setHours","setMinutes","getHours","toString","padStart","getMinutes","storedValue","this","getStringValue","undefined","setValue","updateFromProtobuf","maybeUpdateFromProtobuf","disconnect","disabled","width","style","selectOverrides","Select","overrides","ControlContainer","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth","IconsContainer","paddingRight","ValueContainer","paddingLeft","paddingBottom","paddingTop","Dropdown","Popover","Body","marginTop","manageFormClearListener","formId","className","label","labelVisibility","labelVisibilityProtoValueToEnum","help","TooltipIcon","content","placement","Placement","TOP_RIGHT","format","onChange","creatable","aria-label","PureComponent"],"mappings":"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","file":"static/js/45.c10c472e.chunk.js","sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { PureComponent, ReactNode } from \"react\"\nimport { TimeInput as TimeInputProto } from \"src/autogen/proto\"\nimport { TimePicker as UITimePicker } from \"baseui/timepicker\"\nimport { FormClearHelper } from \"src/components/widgets/Form\"\nimport { WidgetStateManager, Source } from \"src/lib/WidgetStateManager\"\nimport {\n  WidgetLabel,\n  StyledWidgetLabelHelp,\n} from \"src/components/widgets/BaseWidget\"\nimport TooltipIcon from \"src/components/shared/TooltipIcon\"\nimport { Placement } from \"src/components/shared/Tooltip\"\n\nimport { labelVisibilityProtoValueToEnum } from \"src/lib/utils\"\n\nexport interface Props {\n  disabled: boolean\n  element: TimeInputProto\n  widgetMgr: WidgetStateManager\n  width: number\n}\n\ninterface State {\n  /**\n   * The value specified by the user via the UI. If the user didn't touch this\n   * widget's UI, the default value is used.\n   */\n  value: string\n}\n\nclass TimeInput extends PureComponent<Props, State> {\n  private readonly formClearHelper = new FormClearHelper()\n\n  public state: State = {\n    value: this.initialValue,\n  }\n\n  get initialValue(): string {\n    // If WidgetStateManager knew a value for this widget, initialize to that.\n    // Otherwise, use the default value from the widget protobuf.\n    const storedValue = this.props.widgetMgr.getStringValue(this.props.element)\n    return storedValue !== undefined ? storedValue : this.props.element.default\n  }\n\n  public componentDidMount(): void {\n    if (this.props.element.setValue) {\n      this.updateFromProtobuf()\n    } else {\n      this.commitWidgetValue({ fromUi: false })\n    }\n  }\n\n  public componentDidUpdate(): void {\n    this.maybeUpdateFromProtobuf()\n  }\n\n  public componentWillUnmount(): void {\n    this.formClearHelper.disconnect()\n  }\n\n  private maybeUpdateFromProtobuf(): void {\n    const { setValue } = this.props.element\n    if (setValue) {\n      this.updateFromProtobuf()\n    }\n  }\n\n  private updateFromProtobuf(): void {\n    const { value } = this.props.element\n    this.props.element.setValue = false\n    this.setState({ value }, () => {\n      this.commitWidgetValue({ fromUi: false })\n    })\n  }\n\n  /** Commit state.value to the WidgetStateManager. */\n  private commitWidgetValue = (source: Source): void => {\n    this.props.widgetMgr.setStringValue(\n      this.props.element,\n      this.state.value,\n      source\n    )\n  }\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  private onFormCleared = (): void => {\n    this.setState(\n      (_, prevProps) => {\n        return { value: prevProps.element.default }\n      },\n      () => this.commitWidgetValue({ fromUi: true })\n    )\n  }\n\n  private handleChange = (newDate: Date | null): void => {\n    let value: string\n    if (newDate === null) {\n      // This case is not supposed to happen since time picker cannot be cleared.\n      value = this.initialValue\n    } else {\n      value = this.dateToString(newDate)\n    }\n    this.setState({ value }, () => this.commitWidgetValue({ fromUi: true }))\n  }\n\n  private stringToDate = (value: string): Date => {\n    const [hours, minutes] = value.split(\":\").map(Number)\n    const date = new Date()\n\n    date.setHours(hours)\n    date.setMinutes(minutes)\n\n    return date\n  }\n\n  private dateToString = (value: Date): string => {\n    const hours = value.getHours().toString().padStart(2, \"0\")\n    const minutes = value.getMinutes().toString().padStart(2, \"0\")\n\n    return `${hours}:${minutes}`\n  }\n\n  public render(): ReactNode {\n    const { disabled, width, element, widgetMgr } = this.props\n    const style = { width }\n\n    const selectOverrides = {\n      Select: {\n        props: {\n          disabled,\n\n          overrides: {\n            ControlContainer: {\n              style: {\n                // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n                borderLeftWidth: \"1px\",\n                borderRightWidth: \"1px\",\n                borderTopWidth: \"1px\",\n                borderBottomWidth: \"1px\",\n              },\n            },\n\n            IconsContainer: {\n              style: () => ({\n                paddingRight: \".5rem\",\n              }),\n            },\n\n            ValueContainer: {\n              style: () => ({\n                // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n                paddingRight: \".5rem\",\n                paddingLeft: \".5rem\",\n                paddingBottom: \".5rem\",\n                paddingTop: \".5rem\",\n              }),\n            },\n\n            Dropdown: {\n              style: () => ({\n                paddingTop: 0,\n                paddingBottom: 0,\n              }),\n            },\n\n            // Nudge the dropdown menu by 1px so the focus state doesn't get cut off\n            Popover: {\n              props: {\n                overrides: {\n                  Body: {\n                    style: () => ({\n                      marginTop: \"1px\",\n                    }),\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    }\n\n    // Manage our form-clear event handler.\n    this.formClearHelper.manageFormClearListener(\n      widgetMgr,\n      element.formId,\n      this.onFormCleared\n    )\n\n    return (\n      <div className=\"stTimeInput\" style={style}>\n        <WidgetLabel\n          label={element.label}\n          disabled={disabled}\n          labelVisibility={labelVisibilityProtoValueToEnum(\n            element.labelVisibility?.value\n          )}\n        >\n          {element.help && (\n            <StyledWidgetLabelHelp>\n              <TooltipIcon\n                content={element.help}\n                placement={Placement.TOP_RIGHT}\n              />\n            </StyledWidgetLabelHelp>\n          )}\n        </WidgetLabel>\n        <UITimePicker\n          format=\"24\"\n          value={this.stringToDate(this.state.value)}\n          onChange={this.handleChange}\n          overrides={selectOverrides}\n          creatable\n          aria-label={element.label}\n        />\n      </div>\n    )\n  }\n}\n\nexport default TimeInput\n"],"sourceRoot":""}