{"version":3,"file":"static/js/319.d1546ace.chunk.js","mappings":"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","sources":["../../../streamlit/frontend/lib/src/components/elements/DeckGlJsonChart/withMapboxToken/MapboxTokenError.tsx","../../../streamlit/frontend/lib/src/components/elements/DeckGlJsonChart/withMapboxToken/withMapboxToken.tsx","../../../streamlit/frontend/lib/src/components/elements/DeckGlJsonChart/styled-components.ts","../../../streamlit/frontend/lib/src/components/elements/DeckGlJsonChart/utils/jsonConverter.ts","../../../streamlit/frontend/lib/src/components/elements/DeckGlJsonChart/utils/colors.ts","../../../streamlit/frontend/lib/src/components/elements/DeckGlJsonChart/useDeckGl.tsx","../../../streamlit/frontend/lib/src/hooks/useStWidthHeight.ts","../../../streamlit/frontend/lib/src/components/elements/DeckGlJsonChart/DeckGlJsonChart.tsx","../../../streamlit/frontend/lib/src/util/assertNever.ts","../../../streamlit/frontend/lib/src/useBasicWidgetState.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\n\nimport ErrorElement from \"@streamlit/lib/src/components/shared/ErrorElement\"\n\nimport {\n  MapboxTokenFetchingError,\n  MapboxTokenNotProvidedError,\n} from \"./withMapboxToken\"\n\ninterface Props {\n  error: Error | MapboxTokenFetchingError | MapboxTokenNotProvidedError\n  deltaType: string\n  width: number\n}\n\nconst MapboxTokenError = ({\n  error,\n  width,\n  deltaType,\n}: Props): ReactElement => {\n  if (error instanceof MapboxTokenNotProvidedError) {\n    return (\n      <ErrorElement\n        width={width}\n        name=\"No Mapbox token provided\"\n        message={\n          <>\n            <p>\n              To use <code>st.{deltaType}</code> or <code>st.map</code> you\n              need to set up a Mapbox access token.\n            </p>\n\n            <p>\n              To get a token, create an account at{\" \"}\n              <a href=\"https://mapbox.com\">https://mapbox.com</a>. It's free\n              for moderate usage levels!\n            </p>\n\n            <p>\n              Once you have a token, just set it using the Streamlit config\n              option <code>mapbox.token</code> and don't forget to restart your\n              Streamlit server at this point if it's still running, then reload\n              this tab.\n            </p>\n\n            <p>\n              See{\" \"}\n              <a href=\"https://docs.streamlit.io/develop/api-reference/configuration/config.toml\">\n                our documentation\n              </a>{\" \"}\n              for more info on how to set config options.\n            </p>\n          </>\n        }\n      />\n    )\n  }\n\n  if (error instanceof MapboxTokenFetchingError) {\n    return (\n      <ErrorElement\n        width={width}\n        name=\"Error fetching Streamlit Mapbox token\"\n        message={\n          <>\n            <p>This app requires an internet connection.</p>\n            <p>Please check your connection and try again.</p>\n            <p>\n              If you think this is a bug, please file bug report{\" \"}\n              <a href=\"https://github.com/streamlit/streamlit/issues/new/choose\">\n                here\n              </a>\n              .\n            </p>\n          </>\n        }\n      />\n    )\n  }\n\n  return (\n    <ErrorElement\n      width={width}\n      name=\"Error fetching Streamlit Mapbox token\"\n      message={error.message}\n    />\n  )\n}\n\nexport default MapboxTokenError\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ComponentType, PureComponent, ReactNode } from \"react\"\n\nimport hoistNonReactStatics from \"hoist-non-react-statics\"\nimport axios from \"axios\"\n\nimport { ensureError } from \"@streamlit/lib/src/util/ErrorHandling\"\nimport {\n  DeckGlJsonChart,\n  Skeleton as SkeletonProto,\n} from \"@streamlit/lib/src/proto\"\nimport { Skeleton } from \"@streamlit/lib/src/components/elements/Skeleton\"\nimport { LibContext } from \"@streamlit/lib/src/components/core/LibContext\"\n\nimport MapboxTokenError from \"./MapboxTokenError\"\n\ninterface InjectedProps {\n  mapboxToken: string\n}\n\nexport interface State {\n  mapboxToken?: string\n  mapboxTokenError?: Error\n  isFetching: boolean\n}\n\n// Wraps a Component expecting a \"mapboxToken\" prop.\n// The wrapped Component accepts a DeckGLJsonChart prop, which\n// incorporates the config.toml token (if provided) and omits the \"mapboxToken\" prop.\nexport type WrappedMapboxProps<P extends InjectedProps> = Omit<\n  P,\n  \"mapboxToken\"\n> & {\n  element: DeckGlJsonChart\n  width: number\n}\n\nexport class MapboxTokenNotProvidedError extends Error {}\nexport class MapboxTokenFetchingError extends Error {}\n\n/**\n * A remote file that stores user-visible tokens.\n */\nexport const TOKENS_URL = \"https://data.streamlit.io/tokens.json\"\nconst MAPBOX = \"mapbox\"\n\n/**\n * A higher-order component that fetches our mapbox token and passes\n * it through to the wrapped component.\n * This component uses tokens from config.toml first when available.\n * If the token fetch fails, an error will be rendered in place of the wrapped component.\n * This component is necessary as it's good practice to separate data collection\n * (mapbox token retrieval) and the actual rendering of a component.\n *\n * @param {string} deltaType In case of an exception we show an error with this\n */\n\nconst withMapboxToken =\n  (deltaType: string) =>\n  <P extends InjectedProps>(\n    WrappedComponent: ComponentType<React.PropsWithChildren<P>>\n  ) => {\n    // Return a wrapper that accepts the wrapped component's props, minus\n    // \"mapboxToken\". The wrapper will fetch the mapboxToken and inject it into\n    // the wrapped component automatically.\n    class WithMapboxToken extends PureComponent<WrappedMapboxProps<P>, State> {\n      public static readonly displayName = `withMapboxToken(${\n        WrappedComponent.displayName || WrappedComponent.name\n      })`\n\n      static contextType = LibContext\n\n      context!: React.ContextType<typeof LibContext>\n\n      public constructor(props: WrappedMapboxProps<P>) {\n        super(props)\n\n        this.state = {\n          isFetching: true,\n          mapboxToken: undefined,\n          mapboxTokenError: undefined,\n        }\n      }\n\n      /**\n       * Fetch the remote \"tokens.json\" set the \"mapbox\" in state.\n       * Throw an error if we can't contact TOKENS_URL or the token is missing.\n       */\n      public initMapboxToken = async (): Promise<void> => {\n        try {\n          const response = await axios.get(TOKENS_URL)\n          const { [MAPBOX]: token } = response.data\n\n          if (!token) {\n            throw new Error(`Missing token ${MAPBOX}`)\n          }\n\n          this.setState({\n            mapboxToken: token,\n            isFetching: false,\n          })\n        } catch (e) {\n          const error = ensureError(e)\n\n          this.setState({\n            mapboxTokenError: error,\n            isFetching: false,\n          })\n          throw new MapboxTokenFetchingError(\n            `${error.message} (${TOKENS_URL})`\n          )\n        }\n      }\n\n      public componentDidMount(): void {\n        const mapboxToken =\n          this.props.element.mapboxToken || this.context.libConfig.mapboxToken\n\n        if (mapboxToken) {\n          this.setState({\n            mapboxToken,\n            isFetching: false,\n          })\n        } else {\n          this.initMapboxToken()\n        }\n      }\n\n      public render = (): ReactNode => {\n        const { mapboxToken, mapboxTokenError, isFetching } = this.state\n        const { width } = this.props\n\n        // We got an error when fetching our mapbox token: show the error.\n        if (mapboxTokenError) {\n          return (\n            <MapboxTokenError\n              width={width}\n              error={mapboxTokenError}\n              deltaType={deltaType}\n            />\n          )\n        }\n\n        // If our mapboxToken hasn't been retrieved yet, show a loading\n        // skeleton.\n        if (isFetching) {\n          return (\n            <Skeleton\n              element={SkeletonProto.create({\n                style: SkeletonProto.SkeletonStyle.ELEMENT,\n              })}\n            />\n          )\n        }\n\n        // We have the mapbox token. Pass it through to our component.\n        return (\n          // (this.props as unknown as P) is required to work around a TS issue:\n          // https://github.com/microsoft/TypeScript/issues/28938#issuecomment-450636046\n          <WrappedComponent\n            {...(this.props as unknown as P)}\n            mapboxToken={mapboxToken}\n            width={width}\n          />\n        )\n      }\n    }\n\n    return hoistNonReactStatics(WithMapboxToken, WrappedComponent)\n  }\n\nexport default withMapboxToken\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nimport { hasLightBackgroundColor } from \"@streamlit/lib/src/theme\"\n\nexport interface StyledDeckGlChartProps {\n  width: number | string\n  height: number | string\n}\n\nexport const StyledDeckGlChart = styled.div<StyledDeckGlChartProps>(\n  ({ width, height }) => ({\n    position: \"relative\",\n    height,\n    width,\n  })\n)\n\nexport const StyledNavigationControlContainer = styled.div(({ theme }) => ({\n  position: \"absolute\",\n  right: \"2.625rem\",\n  top: theme.spacing.md,\n  zIndex: 1,\n\n  \".mapboxgl-ctrl.mapboxgl-ctrl-group\": {\n    // Ensures that the border-radius of the zoom buttons is visible\n    overflow: \"hidden\",\n    background: theme.colors.bgColor,\n  },\n\n  // Update zoom buttons based on the active theme\n  \"button:not(:disabled)\": {\n    background: theme.colors.bgColor,\n\n    // Add a separator between buttons\n    \"& + button\": {\n      borderTopColor: theme.colors.secondaryBg,\n    },\n\n    \"&.mapboxgl-ctrl-icon:hover\": {\n      // Lighten the background color on hover in dark mode (light mode works\n      // fine by default!)\n      backgroundColor: hasLightBackgroundColor(theme)\n        ? \"\"\n        : theme.colors.darkenedBgMix25,\n    },\n\n    // On dark backgrounds, invert the color for the + and - symbols\n    \"& span\": {\n      filter: hasLightBackgroundColor(theme) ? \"\" : \"invert(100%)\",\n    },\n  },\n}))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CartoLayer,\n  colorBins,\n  colorCategories,\n  colorContinuous,\n} from \"@deck.gl/carto/typed\"\nimport * as layers from \"@deck.gl/layers/typed\"\nimport { JSONConverter } from \"@deck.gl/json/typed\"\nimport * as geoLayers from \"@deck.gl/geo-layers/typed\"\nimport * as aggregationLayers from \"@deck.gl/aggregation-layers/typed\"\nimport * as meshLayers from \"@deck.gl/mesh-layers/typed\"\n\nconst configuration = {\n  classes: {\n    ...layers,\n    ...aggregationLayers,\n    ...geoLayers,\n    ...meshLayers,\n    CartoLayer,\n  },\n  functions: {\n    colorBins,\n    colorCategories,\n    colorContinuous,\n  },\n}\n\nexport const jsonConverter = new JSONConverter({ configuration })\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as layers from \"@deck.gl/layers/typed\"\nimport * as geoLayers from \"@deck.gl/geo-layers/typed\"\nimport * as meshLayers from \"@deck.gl/mesh-layers/typed\"\n\nimport { jsonConverter } from \"./jsonConverter\"\n\n/**\n * @file Utilities for determining fill colors for layers based on their\n *      selection state and the layer's selection color mode.\n */\n\n/**\n * Maps the \"@@type\" of a layer to the corresponding fill functions.\n *\n * Note that this mapping is not exhaustive and only includes the layers that we\n * can actually change the color of.\n */\nexport const LAYER_TYPE_TO_FILL_FUNCTION = {\n  [geoLayers.GeohashLayer.layerName]: [\"getFillColor\"],\n  [geoLayers.H3ClusterLayer.layerName]: [\"getFillColor\"],\n  [geoLayers.H3HexagonLayer.layerName]: [\"getFillColor\"],\n  [geoLayers.MVTLayer.layerName]: [\"getFillColor\"],\n  [geoLayers.QuadkeyLayer.layerName]: [\"getFillColor\"],\n  [geoLayers.S2Layer.layerName]: [\"getFillColor\"],\n  [geoLayers.TripsLayer.layerName]: [\"getColor\"],\n  [layers.ArcLayer.layerName]: [\"getTargetColor\", \"getSourceColor\"],\n  [layers.ColumnLayer.layerName]: [\"getFillColor\"],\n  [layers.GeoJsonLayer.layerName]: [\"getFillColor\"],\n  [layers.IconLayer.layerName]: [\"getColor\"],\n  [layers.LineLayer.layerName]: [\"getColor\"],\n  [layers.PathLayer.layerName]: [\"getColor\"],\n  [layers.PointCloudLayer.layerName]: [\"getColor\"],\n  [layers.PolygonLayer.layerName]: [\"getFillColor\"],\n  [layers.ScatterplotLayer.layerName]: [\n    \"getFillColor\",\n    \"getColor\",\n    \"getLineColor\",\n  ],\n  [layers.SolidPolygonLayer.layerName]: [\"getFillColor\"],\n  [layers.TextLayer.layerName]: [\"getColor\"],\n  [meshLayers.ScenegraphLayer.layerName]: [\"getColor\"],\n  [meshLayers.SimpleMeshLayer.layerName]: [\"getColor\"],\n}\n\ntype SerializedColorValue = string | number\nexport type SerializedColorArray = [\n  SerializedColorValue?,\n  SerializedColorValue?,\n  SerializedColorValue?,\n  SerializedColorValue?\n]\n\ntype ObjectCallbackShape<T = unknown> = {\n  object: T\n  objectInfo: { index: number }\n}\n\nexport type FillFunction<T = unknown> = (\n  object: ObjectCallbackShape<T>[\"object\"],\n  objectInfo: ObjectCallbackShape<T>[\"objectInfo\"]\n) => SerializedColorArray | SerializedColorValue\n\ntype FillFunctionArgs<T = unknown> = ObjectCallbackShape<T> & {\n  originalFillFunction: FillFunction<T> | undefined\n}\n\n/**\n * Retrieves the original color in a standardized format by evaluating functions\n * if necessary.\n */\nconst getOriginalColor = ({\n  object,\n  objectInfo,\n  originalFillFunction,\n}: FillFunctionArgs): SerializedColorArray | null => {\n  const originalColor =\n    typeof originalFillFunction === \"function\"\n      ? originalFillFunction(object, objectInfo)\n      : originalFillFunction\n\n  if (Array.isArray(originalColor)) {\n    return [\n      originalColor[0] || 0,\n      originalColor[1] || 0,\n      originalColor[2] || 0,\n      originalColor[3] || 255,\n    ]\n  }\n\n  if (typeof originalColor === \"string\" && originalColor.startsWith(\"@@=\")) {\n    // @see https://deck.gl/docs/api-reference/json/conversion-reference#functions-and-using-the--prefix\n\n    const evaluated = jsonConverter\n      .convert({ originalColor })\n      .originalColor(object)\n\n    return [\n      evaluated[0] || 0,\n      evaluated[1] || 0,\n      evaluated[2] || 0,\n      evaluated[3] || 255,\n    ]\n  }\n\n  return null\n}\n\n/**\n * Calculates the original color with the applied opacity based on the selection\n * mode.\n *\n * @param {boolean} isSelected - Indicates if the object is selected.\n * @param {number} opacity - The opacity to apply.\n * @param {object} object - The object for which the color is being calculated.\n * @param {object} objectInfo - Additional information about the object.\n * @param {Function} originalFillFunction - The function to get the original\n * fill color.\n * @returns {SerializedColorArray | null} The color with the applied opacity or\n * null if the original color is not available.\n */\nconst getOriginalColorWithAppliedOpacity = ({\n  isSelected,\n  object,\n  objectInfo,\n  opacity,\n  originalFillFunction,\n}: {\n  isSelected: boolean\n  opacity: number\n} & FillFunctionArgs): SerializedColorArray | null => {\n  const originalColor = getOriginalColor({\n    object,\n    objectInfo,\n    originalFillFunction,\n  })\n\n  if (!originalColor) {\n    return null\n  }\n\n  let calculatedOpacity = 0\n\n  if (isSelected) {\n    // Some layers will have objects where the opacity is lower than the default\n    // selected opacity In this case, we want to use the higher opacity so that\n    // the differentiation between selected and unselected objects is more\n    // pronounced\n    calculatedOpacity = Math.max(\n      typeof originalColor[3] === \"number\" ? originalColor[3] : opacity,\n      opacity\n    )\n  } else {\n    // Some layers will have objects where the opacity is lower than the default\n    // unselected opacity In this case, we want to use the lower opacity so that\n    // we aren't raising the visibility of objects unnecessarily\n    calculatedOpacity = Math.min(\n      typeof originalColor[3] === \"number\" ? originalColor[3] : opacity,\n      opacity\n    )\n  }\n\n  return [\n    originalColor[0] || 0,\n    originalColor[1] || 0,\n    originalColor[2] || 0,\n    calculatedOpacity,\n  ]\n}\n\n/**\n * Determines the fill color for an object based on its selection state and the\n * layer's selection color mode.\n */\nexport const getContextualFillColor = ({\n  isSelected,\n  object,\n  objectInfo,\n  originalFillFunction,\n  selectedColor,\n  selectedOpacity = 255,\n  unselectedColor,\n  unselectedOpacity = Math.floor(255 * 0.4),\n}: {\n  isSelected: boolean\n  /** Fallback color in case there are issues in parsing the color for the current object */\n  selectedColor: SerializedColorArray\n  /** How much opacity should be applied to the selected item. Defaults to 100% */\n  selectedOpacity?: number\n  /** Fallback color in case there are issues in parsing the color for the current object */\n  unselectedColor: SerializedColorArray\n  /** How much opacity should be applied to the not selected items. Defaults to 40% */\n  unselectedOpacity?: number\n} & FillFunctionArgs): SerializedColorArray | SerializedColorValue => {\n  if (isSelected) {\n    return (\n      getOriginalColorWithAppliedOpacity({\n        opacity: selectedOpacity,\n        isSelected: true,\n        object,\n        objectInfo,\n        originalFillFunction,\n      }) || selectedColor\n    )\n  }\n\n  return (\n    getOriginalColorWithAppliedOpacity({\n      opacity: unselectedOpacity,\n      isSelected: false,\n      object,\n      objectInfo,\n      originalFillFunction,\n    }) || unselectedColor\n  )\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useCallback, useEffect, useMemo, useState } from \"react\"\n\nimport JSON5 from \"json5\"\nimport { PickingInfo } from \"@deck.gl/core/typed\"\nimport isEqual from \"lodash/isEqual\"\nimport { ViewStateChangeParameters } from \"@deck.gl/core/typed/controllers/controller\"\nimport { TooltipContent } from \"@deck.gl/core/typed/lib/tooltip\"\nimport { parseToRgba } from \"color2k\"\n\nimport { useStWidthHeight } from \"@streamlit/lib/src/hooks/useStWidthHeight\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\nimport { DeckGlJsonChart as DeckGlJsonChartProto } from \"@streamlit/lib/src/proto\"\nimport {\n  useBasicWidgetClientState,\n  ValueWSource,\n} from \"@streamlit/lib/src/useBasicWidgetState\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\n\nimport type {\n  DeckGlElementState,\n  DeckGLProps,\n  DeckObject,\n  ParsedDeckGlConfig,\n} from \"./types\"\nimport { jsonConverter } from \"./utils/jsonConverter\"\nimport {\n  FillFunction,\n  getContextualFillColor,\n  LAYER_TYPE_TO_FILL_FUNCTION,\n} from \"./utils/colors\"\n\ntype UseDeckGlShape = {\n  createTooltip: (info: PickingInfo | null) => TooltipContent\n  data: DeckGlElementState\n  deck: DeckObject\n  hasActiveSelection: boolean\n  height: number | string\n  isSelectionModeActivated: boolean\n  onViewStateChange: (params: ViewStateChangeParameters) => void\n  selectionMode: DeckGlJsonChartProto.SelectionMode | undefined\n  setSelection: React.Dispatch<\n    React.SetStateAction<ValueWSource<DeckGlElementState> | null>\n  >\n  viewState: Record<string, unknown>\n  width: number | string\n}\n\nexport type UseDeckGlProps = Omit<DeckGLProps, \"mapboxToken\"> & {\n  isLightTheme: boolean\n  theme: EmotionTheme\n}\n\nconst DEFAULT_DECK_GL_HEIGHT = 500\n\nexport const EMPTY_STATE: DeckGlElementState = {\n  selection: {\n    indices: {},\n    objects: {},\n  },\n}\n\n/**\n * Interpolates variables within a string using values from a PickingInfo object.\n *\n * This function searches for placeholders in the format `{variable}` within the provided\n * string `body` and replaces them with corresponding values from the `info` object.\n * It first checks if the variable exists directly on `info.object`, and if not, it checks\n * within `info.object.properties`.\n *\n * @param {PickingInfo} info - The object containing the data to interpolate into the string.\n * @param {string} body - The string containing placeholders in the format `{variable}`.\n * @returns {string} - The interpolated string with placeholders replaced by actual values.\n */\nconst interpolate = (info: PickingInfo, body: string): string => {\n  const matchedVariables = body.match(/{(.*?)}/g)\n  if (matchedVariables) {\n    matchedVariables.forEach((match: string) => {\n      const variable = match.substring(1, match.length - 1)\n\n      if (info.object.hasOwnProperty(variable)) {\n        body = body.replace(match, info.object[variable])\n      } else if (\n        info.object.hasOwnProperty(\"properties\") &&\n        info.object.properties.hasOwnProperty(variable)\n      ) {\n        body = body.replace(match, info.object.properties[variable])\n      }\n    })\n  }\n  return body\n}\n\nfunction getDefaultState(\n  widgetMgr: WidgetStateManager,\n  element: DeckGlJsonChartProto\n): DeckGlElementState {\n  if (!element.id) {\n    return EMPTY_STATE\n  }\n\n  const initialFigureState = widgetMgr.getElementState(element.id, \"selection\")\n\n  return initialFigureState ?? EMPTY_STATE\n}\n\nfunction getStateFromWidgetMgr(\n  widgetMgr: WidgetStateManager,\n  element: DeckGlJsonChartProto\n): DeckGlElementState {\n  if (!element.id) {\n    return EMPTY_STATE\n  }\n\n  const stringValue = widgetMgr.getStringValue(element)\n  const currState: DeckGlElementState | null = stringValue\n    ? JSON5.parse(stringValue)\n    : null\n\n  return currState ?? EMPTY_STATE\n}\n\nfunction updateWidgetMgrState(\n  element: DeckGlJsonChartProto,\n  widgetMgr: WidgetStateManager,\n  vws: ValueWSource<DeckGlElementState>,\n  fragmentId?: string\n): void {\n  if (!element.id) {\n    return\n  }\n\n  widgetMgr.setStringValue(\n    element,\n    JSON.stringify(vws.value),\n    { fromUi: vws.fromUi },\n    fragmentId\n  )\n}\n\nexport const useDeckGl = (props: UseDeckGlProps): UseDeckGlShape => {\n  const {\n    element,\n    fragmentId,\n    height: propsHeight,\n    isFullScreen: propsIsFullScreen,\n    isLightTheme,\n    theme,\n    widgetMgr,\n    width: propsWidth,\n  } = props\n  const {\n    selectionMode: allSelectionModes,\n    tooltip,\n    useContainerWidth: shouldUseContainerWidth,\n  } = element\n  const isFullScreen = propsIsFullScreen ?? false\n\n  const [data, setSelection] = useBasicWidgetClientState<\n    DeckGlElementState,\n    DeckGlJsonChartProto\n  >({\n    element,\n    getDefaultState,\n    getStateFromWidgetMgr,\n    updateWidgetMgrState,\n    widgetMgr,\n    fragmentId,\n  })\n\n  const [viewState, setViewState] = useState<Record<string, unknown>>({\n    bearing: 0,\n    pitch: 0,\n    zoom: 11,\n  })\n\n  const { height, width } = useStWidthHeight({\n    element,\n    isFullScreen,\n    shouldUseContainerWidth,\n    container: { height: propsHeight, width: propsWidth },\n    heightFallback:\n      (viewState.initialViewState as { height: number } | undefined)?.height ||\n      DEFAULT_DECK_GL_HEIGHT,\n  })\n\n  const [initialViewState, setInitialViewState] = useState<\n    Record<string, unknown>\n  >({})\n\n  /**\n   * Our proto for selectionMode is an array in order to support future-looking\n   * functionality. Currently, we only support 1 single selection mode, so we'll\n   * only use the first one (if it exists) to determine our selection mode.\n   *\n   * @see deck_gl_json_chart.py #parse_selection_mode\n   */\n  const selectionMode: DeckGlJsonChartProto.SelectionMode | undefined =\n    allSelectionModes[0]\n  const isSelectionModeActivated = selectionMode !== undefined\n\n  const hasActiveSelection =\n    isSelectionModeActivated && Object.keys(data.selection.indices).length > 0\n\n  const parsedPydeckJson = useMemo(() => {\n    return Object.freeze(JSON5.parse<ParsedDeckGlConfig>(element.json))\n    // Only parse JSON when transitioning to/from fullscreen, the json changes, or theme changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isFullScreen, isLightTheme, element.json])\n\n  const deck = useMemo<DeckObject>(() => {\n    const copy = { ...parsedPydeckJson }\n\n    // If unset, use either the Mapbox light or dark style based on Streamlit's theme\n    // For Mapbox styles, see https://docs.mapbox.com/api/maps/styles/#mapbox-styles\n    if (!copy.mapStyle) {\n      copy.mapStyle = `mapbox://styles/mapbox/${\n        isLightTheme ? \"light\" : \"dark\"\n      }-v9`\n    }\n\n    // Set width and height based on the fullscreen state\n    if (isFullScreen) {\n      Object.assign(copy.initialViewState, { width, height })\n    } else {\n      if (!copy.initialViewState.height) {\n        copy.initialViewState.height = DEFAULT_DECK_GL_HEIGHT\n      }\n      if (shouldUseContainerWidth) {\n        copy.initialViewState.width = width\n      }\n    }\n\n    if (copy.layers) {\n      const anyLayersHaveSelection = Object.values(\n        data.selection.indices\n      ).some(layer => layer?.length)\n\n      const anyLayersHavePickableDefined = copy.layers.some(layer =>\n        Object.hasOwn(layer, \"pickable\")\n      )\n\n      copy.layers = copy.layers.map(layer => {\n        if (\n          !layer ||\n          Array.isArray(layer) ||\n          // If selection mode is not activated, do not make any additional changes to each layer\n          !isSelectionModeActivated\n        ) {\n          return layer\n        }\n\n        if (!anyLayersHavePickableDefined) {\n          // If selection mode is activated and no layers have pickable defined,\n          // set pickable to true for every layer. This is something Streamlit\n          // does to help make map selection easier to work with out of the box.\n          layer.pickable = true\n        }\n\n        const layerId = `${layer.id || null}`\n        const selectedIndices = data?.selection?.indices?.[layerId] || []\n\n        const fillFunctions = LAYER_TYPE_TO_FILL_FUNCTION[layer[\"@@type\"]]\n\n        if (!fillFunctions) {\n          return layer\n        }\n\n        const clonedLayer = { ...layer }\n        fillFunctions.forEach(fillFunction => {\n          clonedLayer.updateTriggers = {\n            // Tell Deck.gl to recompute the fill color when the selection changes.\n            // Without this, objects in layers will have stale colors when selection changes.\n            // @see https://deck.gl/docs/api-reference/core/layer#updatetriggers\n            [fillFunction]: [\n              ...(clonedLayer.updateTriggers?.[fillFunction] || []),\n              selectedIndices,\n              anyLayersHaveSelection,\n            ],\n          }\n\n          const shouldUseOriginalFillFunction = !anyLayersHaveSelection\n\n          const originalFillFunction = layer[fillFunction] as\n            | FillFunction\n            | undefined\n\n          if (shouldUseOriginalFillFunction || !originalFillFunction) {\n            // If we aren't changing the fill color, we don't need to change the fillFunction\n            return clonedLayer\n          }\n\n          const selectedOpacity = 255\n          const unselectedOpacity = Math.floor(255 * 0.4)\n\n          // Fallback colors in case there are issues while parsing the colors for a given object\n          const selectedColorParsed = parseToRgba(theme.colors.primary)\n          const selectedColor: [number, number, number, number] = [\n            selectedColorParsed[0],\n            selectedColorParsed[1],\n            selectedColorParsed[2],\n            selectedOpacity,\n          ]\n          const unselectedColorParsed = parseToRgba(theme.colors.gray20)\n          const unselectedColor: [number, number, number, number] = [\n            unselectedColorParsed[0],\n            unselectedColorParsed[1],\n            unselectedColorParsed[2],\n            unselectedOpacity,\n          ]\n\n          const newFillFunction: FillFunction = (object, objectInfo) => {\n            return getContextualFillColor({\n              isSelected: selectedIndices.includes(objectInfo.index),\n              object,\n              objectInfo,\n              originalFillFunction,\n              selectedColor,\n              unselectedColor,\n              selectedOpacity,\n              unselectedOpacity,\n            })\n          }\n\n          clonedLayer[fillFunction] = newFillFunction\n        })\n\n        return clonedLayer\n      })\n    }\n\n    delete copy?.views // We are not using views. This avoids a console warning.\n\n    return jsonConverter.convert(copy)\n  }, [\n    data.selection.indices,\n    height,\n    isFullScreen,\n    isLightTheme,\n    isSelectionModeActivated,\n    parsedPydeckJson,\n    shouldUseContainerWidth,\n    theme.colors.gray20,\n    theme.colors.primary,\n    width,\n  ])\n\n  useEffect(() => {\n    // If the ViewState on the server has changed, apply the diff to the current state\n    if (!isEqual(deck.initialViewState, initialViewState)) {\n      const diff = Object.keys(deck.initialViewState).reduce(\n        (diff, key): any => {\n          // @ts-expect-error\n          if (deck.initialViewState[key] === initialViewState[key]) {\n            return diff\n          }\n\n          return {\n            ...diff,\n            // @ts-expect-error\n            [key]: deck.initialViewState[key],\n          }\n        },\n        {}\n      )\n\n      setViewState({ ...viewState, ...diff })\n      setInitialViewState(deck.initialViewState)\n    }\n  }, [deck.initialViewState, initialViewState, viewState])\n\n  const createTooltip = useCallback(\n    (info: PickingInfo | null): TooltipContent => {\n      if (!info || !info.object || !tooltip) {\n        return null\n      }\n\n      const parsedTooltip = JSON5.parse(tooltip)\n\n      if (parsedTooltip.html) {\n        parsedTooltip.html = interpolate(info, parsedTooltip.html)\n      } else {\n        parsedTooltip.text = interpolate(info, parsedTooltip.text)\n      }\n\n      return parsedTooltip\n    },\n    [tooltip]\n  )\n\n  const onViewStateChange = useCallback(\n    ({ viewState }: ViewStateChangeParameters) => {\n      setViewState(viewState)\n    },\n    [setViewState]\n  )\n\n  return {\n    createTooltip,\n    data,\n    deck,\n    hasActiveSelection,\n    height,\n    isSelectionModeActivated,\n    onViewStateChange,\n    selectionMode,\n    setSelection,\n    viewState,\n    width,\n  }\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CSSProperties, useMemo } from \"react\"\n\ntype StWidthHeightArgs = {\n  container: {\n    height?: CSSProperties[\"height\"]\n    width?: CSSProperties[\"width\"]\n  }\n  element: {\n    height?: CSSProperties[\"height\"]\n    width?: CSSProperties[\"width\"]\n  }\n  heightFallback?: CSSProperties[\"height\"]\n  isFullScreen: boolean\n  shouldUseContainerWidth: boolean\n  widthFallback?: CSSProperties[\"width\"]\n}\n\ntype StWidthHeightShape = {\n  height: number | string\n  width: number | string\n}\n\n/**\n * Determines the width and height to use for a given element based on the\n * Streamlit conditions in which it's being rendered.\n *\n * @returns {Object} An object with `width` and `height` properties.\n */\nexport const useStWidthHeight = ({\n  container,\n  element,\n  heightFallback = \"auto\",\n  isFullScreen,\n  shouldUseContainerWidth,\n  widthFallback = \"auto\",\n}: StWidthHeightArgs): StWidthHeightShape => {\n  const width = useMemo(() => {\n    if (shouldUseContainerWidth || isFullScreen) {\n      return \"100%\"\n    }\n    return element.width || container.width || widthFallback\n  }, [\n    container.width,\n    element.width,\n    isFullScreen,\n    shouldUseContainerWidth,\n    widthFallback,\n  ])\n\n  const height = useMemo(() => {\n    if (isFullScreen && container.height) {\n      return container.height\n    }\n\n    return element.height || container.height || heightFallback\n  }, [isFullScreen, element.height, container.height, heightFallback])\n\n  return { width, height }\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { FC, useCallback, useEffect, useState } from \"react\"\n\nimport { DeckGL } from \"@deck.gl/react/typed\"\nimport { MapContext, NavigationControl, StaticMap } from \"react-map-gl\"\nimport { CSVLoader } from \"@loaders.gl/csv\"\nimport { GLTFLoader } from \"@loaders.gl/gltf\"\nimport { registerLoaders } from \"@loaders.gl/core\"\nimport { LayersList, PickingInfo } from \"@deck.gl/core/typed\"\nimport { useTheme } from \"@emotion/react\"\nimport { Close } from \"@emotion-icons/material-outlined\"\n\nimport {\n  EmotionTheme,\n  hasLightBackgroundColor,\n} from \"@streamlit/lib/src/theme\"\nimport Toolbar, {\n  ToolbarAction,\n} from \"@streamlit/lib/src/components/shared/Toolbar\"\nimport { withFullScreenWrapper } from \"@streamlit/lib/src/components/shared/FullScreenWrapper\"\nimport { DeckGlJsonChart as DeckGlJsonChartProto } from \"@streamlit/lib/src/proto\"\nimport { assertNever } from \"@streamlit/lib/src/util/assertNever\"\n\nimport withMapboxToken from \"./withMapboxToken\"\nimport {\n  StyledDeckGlChart,\n  StyledNavigationControlContainer,\n} from \"./styled-components\"\nimport type { DeckGlElementState, DeckGLProps } from \"./types\"\nimport { EMPTY_STATE, useDeckGl } from \"./useDeckGl\"\n\nimport \"mapbox-gl/dist/mapbox-gl.css\"\n\nregisterLoaders([CSVLoader, GLTFLoader])\n\nconst EMPTY_SELECTION = EMPTY_STATE.selection\n\nconst EMPTY_LAYERS: LayersList = []\n\nexport const DeckGlJsonChart: FC<DeckGLProps> = props => {\n  const {\n    collapse,\n    disabled,\n    disableFullscreenMode,\n    element,\n    expand,\n    fragmentId,\n    height: propsHeight,\n    isFullScreen,\n    mapboxToken: propsMapboxToken,\n    widgetMgr,\n    width: propsWidth,\n  } = props\n  const { mapboxToken: elementMapboxToken } = element\n  const theme: EmotionTheme = useTheme()\n  const {\n    createTooltip,\n    data: selection,\n    deck,\n    hasActiveSelection,\n    height,\n    isSelectionModeActivated,\n    onViewStateChange,\n    selectionMode,\n    setSelection,\n    viewState,\n    width,\n  } = useDeckGl({\n    element,\n    fragmentId,\n    height: propsHeight,\n    isFullScreen,\n    isLightTheme: hasLightBackgroundColor(theme),\n    theme,\n    widgetMgr,\n    width: propsWidth,\n  })\n\n  const [isInitialized, setIsInitialized] = useState(false)\n\n  useEffect(() => {\n    // HACK: Load layers a little after loading the map, to hack around a bug\n    // where HexagonLayers were not drawing on first load but did load when the\n    // script got re-executed.\n    setIsInitialized(true)\n  }, [])\n\n  const handleClick = useCallback(\n    (info: PickingInfo) => {\n      if (selectionMode === undefined) {\n        // Safety check\n        return\n      }\n\n      const { index, object } = info\n\n      const layerId = `${info.layer?.id || null}`\n      const currState = selection\n      /** true if a user clicked outside of any layer */\n      const isResetClick = index === -1\n\n      const getSelection = (): DeckGlElementState[\"selection\"] => {\n        if (isResetClick) {\n          return EMPTY_SELECTION\n        }\n\n        switch (selectionMode) {\n          case DeckGlJsonChartProto.SelectionMode.SINGLE_OBJECT: {\n            if (currState.selection.indices[layerId]?.[0] === index) {\n              // Unselect the index\n              return EMPTY_SELECTION\n            }\n\n            return {\n              indices: { [`${layerId}`]: [index] },\n              objects: { [`${layerId}`]: [object] },\n            }\n          }\n          case DeckGlJsonChartProto.SelectionMode.MULTI_OBJECT: {\n            const selectionMap: Map<number, unknown> = new Map(\n              ((): [number, unknown][] => {\n                const indices = currState?.selection?.indices?.[layerId] || []\n\n                return indices.map((index, i) => [\n                  index,\n                  currState.selection?.objects?.[layerId]?.[i],\n                ])\n              })()\n            )\n\n            if (selectionMap.has(index)) {\n              // Unselect an existing index\n              selectionMap.delete(index)\n            } else {\n              // Add the newly selected index\n              selectionMap.set(index, object)\n            }\n\n            if (selectionMap.size === 0) {\n              // If the layer has nothing selected, remove the layer from the returned value\n              // eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-unused-vars\n              const { [layerId]: _, ...restIndices } =\n                currState.selection.indices\n              // eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-unused-vars\n              const { [layerId]: __, ...restObjects } =\n                currState.selection.objects\n\n              return {\n                indices: restIndices,\n                objects: restObjects,\n              }\n            }\n\n            return {\n              indices: {\n                ...currState.selection.indices,\n                [`${layerId}`]: Array.from(selectionMap.keys()),\n              },\n              objects: {\n                ...currState.selection.objects,\n                [`${layerId}`]: Array.from(selectionMap.values()),\n              },\n            }\n          }\n          default:\n            assertNever(selectionMode)\n            throw new Error(\"Invalid selection mode\")\n        }\n      }\n\n      const newSelection = getSelection()\n\n      if (\n        JSON.stringify(newSelection) === JSON.stringify(currState.selection)\n      ) {\n        // If the new selection is the same as the current selection, do\n        // nothing, and do not trigger a re-run\n        return\n      }\n\n      setSelection({\n        fromUi: true,\n        value: { selection: newSelection },\n      })\n    },\n    [selectionMode, selection, setSelection]\n  )\n\n  const handleClearSelectionClick = useCallback(() => {\n    setSelection({\n      value: { selection: EMPTY_SELECTION },\n      fromUi: true,\n    })\n  }, [setSelection])\n\n  return (\n    <StyledDeckGlChart\n      className=\"stDeckGlJsonChart\"\n      data-testid=\"stDeckGlJsonChart\"\n      width={width}\n      height={height}\n    >\n      <Toolbar\n        isFullScreen={isFullScreen}\n        disableFullscreenMode={disableFullscreenMode}\n        onExpand={expand}\n        onCollapse={collapse}\n        target={StyledDeckGlChart}\n        locked={hasActiveSelection && !disabled ? true : undefined}\n      >\n        {hasActiveSelection && !disabled && (\n          <ToolbarAction\n            label=\"Clear selection\"\n            onClick={handleClearSelectionClick}\n            icon={Close}\n          />\n        )}\n      </Toolbar>\n      <DeckGL\n        viewState={viewState}\n        onViewStateChange={onViewStateChange}\n        height={height}\n        width={width}\n        layers={isInitialized ? deck.layers : EMPTY_LAYERS}\n        getTooltip={createTooltip}\n        // @ts-expect-error There is a type mismatch due to our versions of the libraries\n        ContextProvider={MapContext.Provider}\n        controller\n        onClick={\n          isSelectionModeActivated && !disabled ? handleClick : undefined\n        }\n      >\n        <StaticMap\n          height={height}\n          width={width}\n          mapStyle={\n            deck.mapStyle &&\n            (typeof deck.mapStyle === \"string\"\n              ? deck.mapStyle\n              : deck.mapStyle[0])\n          }\n          mapboxApiAccessToken={elementMapboxToken || propsMapboxToken}\n        />\n        <StyledNavigationControlContainer>\n          <NavigationControl\n            data-testid=\"stDeckGlJsonChartZoomButton\"\n            showCompass={false}\n          />\n        </StyledNavigationControlContainer>\n      </DeckGL>\n    </StyledDeckGlChart>\n  )\n}\n\nexport default withMapboxToken(\"st.pydeck_chart\")(\n  withFullScreenWrapper(DeckGlJsonChart, true)\n)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Asserts that a given value is of type `never`. This function is useful for\n * ensuring exhaustive checks in TypeScript. If the function is called, it\n * throws an error indicating that a non-exhaustive branch was reached.\n *\n * @param {never} x - The value that should be of type `never`.\n * @throws {Error} Throws an error if a non-exhaustive branch is reached.\n * @returns {never} This function never returns a value.\n */\nexport const assertNever = (x: never): never => {\n  throw new Error(`Reached a branch with non-exhaustive item: ${x}`)\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Dispatch,\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\"\n\nimport {\n  Source,\n  WidgetStateManager,\n} from \"@streamlit/lib/src/WidgetStateManager\"\nimport { useFormClearHelper } from \"@streamlit/lib/src/components/widgets/Form\"\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nexport type ValueWSource<T> = {\n  value: T\n} & Source\n\n// Interface for a proto that has a .formId\ninterface ValueElementProtoInterface {\n  formId: string\n}\n\nexport interface UseValueWSourceArgs<\n  T, // Type of the value stored in WidgetStateManager.\n  P extends ValueElementProtoInterface // Proto for this widget.\n> {\n  // Important: these callback functions need to have stable references! So\n  // either declare them at the module level or wrap in useCallback.\n  getStateFromWidgetMgr: (wm: WidgetStateManager, el: P) => T | undefined\n  getDefaultState: (wm: WidgetStateManager, el: P) => T\n  updateWidgetMgrState: (\n    el: P,\n    wm: WidgetStateManager,\n    vws: ValueWSource<T>,\n    fragmentId?: string\n  ) => void\n  element: P\n  widgetMgr: WidgetStateManager\n  fragmentId?: string\n}\n\n/**\n * A React hook that makes the simplest kinds of widgets very easy to implement.\n * Use the clientState version when the widget does not have a .setValue on its\n * proto, otherwise utilize `useBasicWidgetState`.\n */\nexport function useBasicWidgetClientState<\n  T, // Type of the value stored in WidgetStateManager.\n  P extends ValueElementProtoInterface // Proto for this widget.\n>({\n  getStateFromWidgetMgr,\n  getDefaultState,\n  updateWidgetMgrState,\n  element,\n  widgetMgr,\n  fragmentId,\n}: UseValueWSourceArgs<T, P>): [\n  T,\n  Dispatch<SetStateAction<ValueWSource<T> | null>>\n] {\n  const [currentValue, setCurrentValue] = useState<T>(() => {\n    // If WidgetStateManager knew a value for this widget, initialize to that.\n    // Otherwise, use the default value.\n    return (\n      getStateFromWidgetMgr(widgetMgr, element) ??\n      getDefaultState(widgetMgr, element)\n    )\n  })\n\n  // This acts as an \"event\":\n  // - It's null most of the time\n  // - It only has a value the moment when the user calls setValue (internally\n  //   called setNextValueWSource). And then it's immediately set to null\n  //   internally.\n  const [nextValueWSource, setNextValueWSource] =\n    useState<ValueWSource<T> | null>({\n      value: currentValue,\n      fromUi: false,\n    })\n\n  // When someone calls setNextValueWSource, update internal state and tell\n  // widget manager to update its state too.\n  useEffect(() => {\n    if (isNullOrUndefined(nextValueWSource)) return\n    setNextValueWSource(null) // Clear \"event\".\n\n    setCurrentValue(nextValueWSource.value)\n    updateWidgetMgrState(element, widgetMgr, nextValueWSource, fragmentId)\n  }, [nextValueWSource, updateWidgetMgrState, element, widgetMgr, fragmentId])\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  const onFormCleared = useCallback((): void => {\n    setNextValueWSource({\n      value: getDefaultState(widgetMgr, element),\n      fromUi: true,\n    })\n  }, [setNextValueWSource, element, getDefaultState, widgetMgr])\n\n  // Manage our form-clear event handler.\n  useFormClearHelper({ widgetMgr, element, onFormCleared })\n\n  return [currentValue, setNextValueWSource]\n}\n\n// Interface for a proto that has a .value, .setValue, and .formId\ninterface ValueElementProtoInterfaceWithSetValue<T>\n  extends ValueElementProtoInterface {\n  value?: T\n  setValue: boolean\n}\n\nexport interface UseValueWSourceArgsWithSetValue<\n  T, // Type of the value stored in WidgetStateManager.\n  P extends ValueElementProtoInterfaceWithSetValue<T> // Proto for this widget.\n> extends Omit<UseValueWSourceArgs<T, P>, \"getDefaultState\"> {\n  // Important: these callback functions need to have stable references! So\n  // either declare them at the module level or wrap in useCallback.\n  getDefaultStateFromProto: (el: P) => T\n  getCurrStateFromProto: (el: P) => T\n}\n\n/**\n * A React hook that makes the simplest kinds of widgets very easy to implement.\n */\nexport function useBasicWidgetState<\n  T, // Type of the value stored in WidgetStateManager.\n  P extends ValueElementProtoInterfaceWithSetValue<T> // Proto for this widget.\n>({\n  getStateFromWidgetMgr,\n  getDefaultStateFromProto,\n  getCurrStateFromProto,\n  updateWidgetMgrState,\n  element,\n  widgetMgr,\n  fragmentId,\n}: UseValueWSourceArgsWithSetValue<T, P>): [\n  T,\n  Dispatch<SetStateAction<ValueWSource<T> | null>>\n] {\n  const getDefaultState = useCallback<(wm: WidgetStateManager, el: P) => T>(\n    (wm, el) => {\n      return getDefaultStateFromProto(el)\n    },\n    [getDefaultStateFromProto]\n  )\n\n  const [currentValue, setNextValueWSource] = useBasicWidgetClientState({\n    getStateFromWidgetMgr,\n    getDefaultState,\n    updateWidgetMgrState,\n    element,\n    widgetMgr,\n    fragmentId,\n  })\n\n  // Respond to value changes via session_state. This is also set via an\n  // \"event\", this time using the .setValue property of the proto.\n  useEffect(() => {\n    if (!element.setValue) return\n    element.setValue = false // Clear \"event\".\n\n    setNextValueWSource({\n      value: getCurrStateFromProto(element),\n      fromUi: false,\n    })\n  }, [element, getCurrStateFromProto, setNextValueWSource])\n\n  return [currentValue, setNextValueWSource]\n}\n"],"names":["_ref","error","width","deltaType","MapboxTokenNotProvidedError","_jsx","ErrorElement","name","message","_jsxs","_Fragment","children","href","MapboxTokenFetchingError","Error","TOKENS_URL","MAPBOX","WrappedComponent","WithMapboxToken","PureComponent","constructor","props","super","context","initMapboxToken","async","response","axios","get","token","data","this","setState","mapboxToken","isFetching","e","ensureError","mapboxTokenError","render","state","MapboxTokenError","Skeleton","element","SkeletonProto","create","style","SkeletonStyle","ELEMENT","undefined","componentDidMount","libConfig","displayName","contextType","LibContext","hoistNonReactStatics","StyledDeckGlChart","_styled","target","height","position","StyledNavigationControlContainer","_ref2","theme","right","top","spacing","md","zIndex","overflow","background","colors","bgColor","borderTopColor","secondaryBg","backgroundColor","hasLightBackgroundColor","darkenedBgMix25","filter","configuration","classes","layers","geoLayers","CartoLayer","functions","colorBins","colorCategories","colorContinuous","jsonConverter","JSONConverter","LAYER_TYPE_TO_FILL_FUNCTION","layerName","meshLayers","getOriginalColorWithAppliedOpacity","isSelected","object","objectInfo","opacity","originalFillFunction","originalColor","Array","isArray","startsWith","evaluated","convert","getOriginalColor","calculatedOpacity","Math","max","min","EMPTY_STATE","selection","indices","objects","interpolate","info","body","matchedVariables","match","forEach","variable","substring","length","hasOwnProperty","replace","properties","getDefaultState","widgetMgr","id","initialFigureState","getElementState","getStateFromWidgetMgr","stringValue","getStringValue","currState","JSON5","parse","updateWidgetMgrState","vws","fragmentId","setStringValue","JSON","stringify","value","fromUi","useDeckGl","_viewState$initialVie","propsHeight","isFullScreen","propsIsFullScreen","isLightTheme","propsWidth","selectionMode","allSelectionModes","tooltip","useContainerWidth","shouldUseContainerWidth","setSelection","useBasicWidgetClientState","viewState","setViewState","useState","bearing","pitch","zoom","container","heightFallback","widthFallback","useMemo","useStWidthHeight","initialViewState","setInitialViewState","isSelectionModeActivated","hasActiveSelection","Object","keys","parsedPydeckJson","freeze","json","deck","copy","mapStyle","assign","anyLayersHaveSelection","values","some","layer","anyLayersHavePickableDefined","hasOwn","map","_data$selection","_data$selection$indic","pickable","layerId","selectedIndices","fillFunctions","clonedLayer","fillFunction","_clonedLayer$updateTr","updateTriggers","shouldUseOriginalFillFunction","unselectedOpacity","floor","selectedColorParsed","parseToRgba","primary","selectedColor","unselectedColorParsed","gray20","unselectedColor","newFillFunction","_ref3","selectedOpacity","getContextualFillColor","includes","index","views","useEffect","isEqual","diff","reduce","key","createTooltip","useCallback","parsedTooltip","html","text","onViewStateChange","registerLoaders","CSVLoader","GLTFLoader","EMPTY_SELECTION","EMPTY_LAYERS","withMapboxToken","withFullScreenWrapper","collapse","disabled","disableFullscreenMode","expand","propsMapboxToken","elementMapboxToken","useTheme","isInitialized","setIsInitialized","handleClick","_info$layer","isResetClick","newSelection","getSelection","DeckGlJsonChartProto","SelectionMode","SINGLE_OBJECT","_currState$selection$","MULTI_OBJECT","selectionMap","Map","_currState$selection","_currState$selection$2","i","_currState$selection2","_currState$selection3","_currState$selection4","has","delete","set","size","_","restIndices","__","restObjects","from","x","assertNever","handleClearSelectionClick","className","Toolbar","onExpand","onCollapse","locked","ToolbarAction","label","onClick","icon","Close","DeckGL","getTooltip","ContextProvider","MapContext","Provider","controller","StaticMap","mapboxApiAccessToken","NavigationControl","showCompass","currentValue","setCurrentValue","_getStateFromWidgetMg","nextValueWSource","setNextValueWSource","isNullOrUndefined","onFormCleared","useFormClearHelper","useBasicWidgetState","getDefaultStateFromProto","getCurrStateFromProto","wm","el","setValue"],"sourceRoot":""}