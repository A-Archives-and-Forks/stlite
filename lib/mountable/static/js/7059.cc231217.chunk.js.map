{"version":3,"file":"static/js/7059.cc231217.chunk.js","mappings":"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","sources":["../../../streamlit/frontend/lib/src/components/elements/Toast/styled-components.tsx","../../../streamlit/frontend/lib/src/components/elements/Toast/Toast.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport const StyledViewButton = styled.button(({ theme }) => ({\n  fontSize: theme.fontSizes.sm,\n  lineHeight: theme.lineHeights.base,\n  color: theme.colors.fadedText60,\n  backgroundColor: theme.colors.transparent,\n  border: \"none\",\n  boxShadow: \"none\",\n  padding: \"0px\",\n  \"&:hover, &:active, &:focus\": {\n    border: \"none\",\n    outline: \"none\",\n    boxShadow: \"none\",\n  },\n  \"&:hover\": {\n    color: theme.colors.primary,\n  },\n}))\n\ninterface StyledToastMessageProps {\n  expanded: boolean\n}\n\nexport const StyledToastWrapper = styled.div<StyledToastMessageProps>(\n  ({ theme }) => ({\n    display: \"flex\",\n    flexDirection: \"row\",\n    gap: theme.spacing.lg,\n\n    \"> span\": {\n      marginTop: theme.spacing.twoXS,\n    },\n  })\n)\n\nexport const StyledIcon = styled.div(({ theme }) => ({\n  fontSize: theme.fontSizes.xl,\n}))\n\nexport const StyledMessageWrapper = styled.div(({ theme }) => ({\n  display: \"flex\",\n  flexDirection: \"column\",\n  gap: theme.spacing.sm,\n  alignItems: \"start\",\n  // Align text to the center of the icon when only 1 line.\n  justifyContent: \"center\",\n  overflow: \"hidden\",\n  minHeight: \"100%\",\n  fontSize: theme.fontSizes.sm,\n  lineHeight: theme.lineHeights.base,\n}))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {\n  ReactElement,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\"\n\nimport { withTheme } from \"@emotion/react\"\nimport { toaster, ToastOverrides } from \"baseui/toast\"\n\nimport {\n  EmotionTheme,\n  hasLightBackgroundColor,\n} from \"@streamlit/lib/src/theme\"\nimport StreamlitMarkdown from \"@streamlit/lib/src/components/shared/StreamlitMarkdown\"\nimport { Kind } from \"@streamlit/lib/src/components/shared/AlertContainer\"\nimport AlertElement from \"@streamlit/lib/src/components/elements/AlertElement/AlertElement\"\nimport { DynamicIcon } from \"@streamlit/lib/src/components/shared/Icon\"\n\nimport {\n  StyledMessageWrapper,\n  StyledToastWrapper,\n  StyledViewButton,\n} from \"./styled-components\"\n\nexport interface ToastProps {\n  theme: EmotionTheme\n  body: string\n  icon?: string\n  width: number\n}\n\nfunction generateToastOverrides(theme: EmotionTheme): ToastOverrides {\n  const lightBackground = hasLightBackgroundColor(theme)\n  return {\n    Body: {\n      props: {\n        \"data-testid\": \"stToast\",\n        className: \"stToast\",\n      },\n      style: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        gap: theme.spacing.md,\n        width: theme.sizes.toastWidth,\n        marginTop: theme.spacing.sm,\n        // Warnings logged if you use shorthand property here:\n        borderTopLeftRadius: theme.radii.default,\n        borderTopRightRadius: theme.radii.default,\n        borderBottomLeftRadius: theme.radii.default,\n        borderBottomRightRadius: theme.radii.default,\n        paddingTop: theme.spacing.lg,\n        paddingBottom: theme.spacing.lg,\n        paddingLeft: theme.spacing.twoXL,\n        paddingRight: theme.spacing.twoXL,\n        backgroundColor: lightBackground\n          ? theme.colors.gray10\n          : theme.colors.gray90,\n        color: theme.colors.bodyText,\n        // Take standard BaseWeb shadow and adjust for dark backgrounds\n        boxShadow: lightBackground\n          ? \"0px 4px 16px rgba(0, 0, 0, 0.16)\"\n          : \"0px 4px 16px rgba(0, 0, 0, 0.7)\",\n      },\n    },\n    CloseIcon: {\n      style: {\n        color: theme.colors.fadedText40,\n        width: theme.fontSizes.lg,\n        height: theme.fontSizes.lg,\n        marginRight: `calc(-1 * ${theme.spacing.lg} / 2)`,\n        \":hover\": {\n          color: theme.colors.bodyText,\n        },\n      },\n    },\n  }\n}\n\n// Function used to truncate toast messages that are longer than three lines.\nexport function shortenMessage(fullMessage: string): string {\n  const characterLimit = 104\n\n  if (fullMessage.length > characterLimit) {\n    let message = fullMessage.replace(/^(.{104}[^\\s]*).*/, \"$1\")\n\n    if (message.length > characterLimit) {\n      message = message\n        .substring(0, characterLimit)\n        .split(\" \")\n        .slice(0, -1)\n        .join(\" \")\n    }\n\n    return message.trim()\n  }\n\n  return fullMessage\n}\n\nexport function Toast({\n  theme,\n  body,\n  icon,\n  width,\n}: Readonly<ToastProps>): ReactElement {\n  const displayMessage = shortenMessage(body)\n  const shortened = body !== displayMessage\n\n  const [expanded, setExpanded] = useState(!shortened)\n  const [toastKey, setToastKey] = useState<React.Key>(0)\n\n  const handleClick = useCallback((): void => {\n    setExpanded(!expanded)\n  }, [expanded])\n\n  const styleOverrides = useMemo(() => generateToastOverrides(theme), [theme])\n\n  const toastContent = useMemo(\n    () => (\n      <StyledToastWrapper expanded={expanded}>\n        {icon && (\n          <DynamicIcon\n            iconValue={icon}\n            size=\"xl\"\n            testid=\"stToastDynamicIcon\"\n          />\n        )}\n        <StyledMessageWrapper>\n          <StreamlitMarkdown\n            source={expanded ? body : displayMessage}\n            allowHTML={false}\n            isToast\n          />\n          {shortened && (\n            <StyledViewButton\n              data-testid=\"stToastViewButton\"\n              onClick={handleClick}\n            >\n              {expanded ? \"view less\" : \"view more\"}\n            </StyledViewButton>\n          )}\n        </StyledMessageWrapper>\n      </StyledToastWrapper>\n    ),\n    [shortened, expanded, body, icon, displayMessage, handleClick]\n  )\n\n  useEffect(() => {\n    // Handles the error case where st.sidebar.toast is called since\n    // baseweb would throw error anyway (no toast container in sidebar)\n    if (theme.inSidebar) {\n      return\n    }\n\n    // Uses toaster utility to create toast on mount and generate unique key\n    // to reference that toast for update/removal\n    const newKey = toaster.info(toastContent, {\n      overrides: { ...styleOverrides },\n    })\n    setToastKey(newKey)\n\n    return () => {\n      // Disable transition so toast doesn't flicker on removal\n      toaster.update(newKey, {\n        overrides: { Body: { style: { transitionDuration: 0 } } },\n      })\n      // Remove toast on unmount\n      toaster.clear(newKey)\n    }\n\n    // Array must be empty to run as mount/cleanup\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    // Handles expand/collapse button behavior for long toast messages\n    toaster.update(toastKey, {\n      children: toastContent,\n      overrides: { ...styleOverrides },\n    })\n  }, [toastKey, toastContent, styleOverrides])\n\n  const sidebarErrorMessage = (\n    <AlertElement\n      kind={Kind.ERROR}\n      body=\"Streamlit API Error: `st.toast` cannot be called directly on the sidebar with `st.sidebar.toast`.\n        See our `st.toast` API [docs](https://docs.streamlit.io/develop/api-reference/status/st.toast) for more information.\"\n      width={width}\n    />\n  )\n  return (\n    // Shows error if toast is called on st.sidebar\n    <>{theme.inSidebar && sidebarErrorMessage}</>\n  )\n}\n\nexport default withTheme(Toast)\n"],"names":["StyledViewButton","_styled","target","_ref","theme","fontSize","fontSizes","sm","lineHeight","lineHeights","base","color","colors","fadedText60","backgroundColor","transparent","border","boxShadow","padding","outline","primary","StyledToastWrapper","_ref2","display","flexDirection","gap","spacing","lg","marginTop","twoXS","StyledMessageWrapper","_ref4","alignItems","justifyContent","overflow","minHeight","withTheme","body","icon","width","displayMessage","fullMessage","length","message","replace","substring","split","slice","join","trim","shortenMessage","shortened","expanded","setExpanded","useState","toastKey","setToastKey","handleClick","useCallback","styleOverrides","useMemo","lightBackground","hasLightBackgroundColor","Body","props","className","style","md","sizes","toastWidth","borderTopLeftRadius","radii","default","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","paddingTop","paddingBottom","paddingLeft","twoXL","paddingRight","gray10","gray90","bodyText","CloseIcon","fadedText40","height","marginRight","generateToastOverrides","toastContent","_jsxs","children","_jsx","DynamicIcon","iconValue","size","testid","StreamlitMarkdown","source","allowHTML","isToast","onClick","useEffect","inSidebar","newKey","toaster","info","overrides","update","transitionDuration","clear","sidebarErrorMessage","AlertElement","kind","Kind","ERROR","_Fragment"],"sourceRoot":""}