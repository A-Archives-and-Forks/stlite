{"version":3,"file":"static/js/8703.ff4bf745.chunk.js","mappings":"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","sources":["../../../streamlit/frontend/lib/src/components/widgets/DateInput/useIntlLocale.tsx","../../../streamlit/frontend/lib/src/components/widgets/DateInput/DateInput.tsx","../../../streamlit/frontend/lib/src/components/widgets/Form/FormClearHelper.ts","../../../streamlit/frontend/lib/src/useBasicWidgetState.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useMemo } from \"react\"\n\nimport type { Locale } from \"date-fns\"\nimport enUS from \"date-fns/locale/en-US\"\n\n/**\n * 1 = Monday, 7 = Sunday\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getWeekInfo\n */\ntype IntlDayInteger = 1 | 2 | 3 | 4 | 5 | 6 | 7\n\ntype IntlWeekInfo = {\n  firstDay: IntlDayInteger\n  weekend: IntlDayInteger[]\n  minimalDays: IntlDayInteger\n}\n\n/**\n * Retrieves the week information for a given locale.\n * Note: Firefox does not yet support the `weekInfo` property /`getWeekInfo`\n * function on `Intl.Locale`.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getWeekInfo\n * @param {Intl.Locale} intlLocale - The locale for which to retrieve week\n * information.\n */\nconst getWeekInfo = (intlLocale: Intl.Locale): IntlWeekInfo | null => {\n  return (\n    // Casting is necessary here since the types are not yet up-to-date\n    (intlLocale as any)?.getWeekInfo?.() ??\n    (intlLocale as any)?.weekInfo ??\n    null\n  )\n}\n\n/**\n * Returns an augmented en-US locale with the weekStartsOn option set to the\n * correct value for the given locale, if the browser supports it.\n *\n * This is used as a stop-gap solution since date-fns is a large library and we\n * don't want to include all locales in the wheel file.\n *\n * @param locale  The locale for which to retrieve week information.\n * @returns The augmented locale, or en-US if the week information could not be\n * retrieved.\n */\nexport const useIntlLocale = (locale: string): Locale => {\n  const weekInfo = useMemo(() => {\n    try {\n      return getWeekInfo(new Intl.Locale(locale))\n    } catch (e) {\n      return getWeekInfo(new Intl.Locale(\"en-US\"))\n    }\n  }, [locale])\n\n  if (!weekInfo) {\n    return enUS\n  }\n\n  /**\n   * Customize the start of week day.\n   * Intl API starts with Monday on 1, but BaseWeb starts with Sunday on 0\n   * @see https://date-fns.org/v2.30.0/docs/Locale\n   */\n  const firstDay = weekInfo.firstDay === 7 ? 0 : weekInfo.firstDay\n\n  return {\n    ...enUS,\n    options: {\n      ...enUS.options,\n      weekStartsOn: firstDay,\n    },\n  }\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {\n  memo,\n  ReactElement,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n} from \"react\"\n\nimport moment from \"moment\"\nimport { useTheme } from \"@emotion/react\"\nimport { DENSITY, Datepicker as UIDatePicker } from \"baseui/datepicker\"\nimport { PLACEMENT } from \"baseui/popover\"\n\nimport {\n  isNullOrUndefined,\n  labelVisibilityProtoValueToEnum,\n} from \"@streamlit/lib/src/util/utils\"\nimport { DateInput as DateInputProto } from \"@streamlit/lib/src/proto\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\nimport {\n  useBasicWidgetState,\n  ValueWithSource,\n} from \"@streamlit/lib/src/useBasicWidgetState\"\nimport {\n  StyledWidgetLabelHelp,\n  WidgetLabel,\n} from \"@streamlit/lib/src/components/widgets/BaseWidget\"\nimport TooltipIcon from \"@streamlit/lib/src/components/shared/TooltipIcon\"\nimport { Placement } from \"@streamlit/lib/src/components/shared/Tooltip\"\nimport { LibContext } from \"@streamlit/lib/src/components/core/LibContext\"\n\nimport { useIntlLocale } from \"./useIntlLocale\"\n\nexport interface Props {\n  disabled: boolean\n  element: DateInputProto\n  widgetMgr: WidgetStateManager\n  width: number\n  fragmentId?: string\n}\n\n// Date format for communication (protobuf) support\nconst DATE_FORMAT = \"YYYY/MM/DD\"\n\n/** Convert an array of strings to an array of dates. */\nfunction stringsToDates(strings: string[]): Date[] {\n  return strings.map(val => new Date(val))\n}\n\n/** Convert an array of dates to an array of strings. */\nfunction datesToStrings(dates: Date[]): string[] {\n  if (!dates) {\n    return []\n  }\n  return dates.map((value: Date) => moment(value as Date).format(DATE_FORMAT))\n}\n\nfunction DateInput({\n  disabled,\n  element,\n  widgetMgr,\n  width,\n  fragmentId,\n}: Props): ReactElement {\n  /**\n   * An array with start and end date specified by the user via the UI. If the user\n   * didn't touch this widget's UI, the default value is used. End date is optional.\n   */\n  const [value, setValueWithSource] = useBasicWidgetState<\n    Date[],\n    DateInputProto\n  >({\n    getStateFromWidgetMgr,\n    getDefaultStateFromProto,\n    getCurrStateFromProto,\n    updateWidgetMgrState,\n    element,\n    widgetMgr,\n    fragmentId,\n  })\n\n  const [isEmpty, setIsEmpty] = useState(false)\n\n  const { colors, fontSizes, lineHeights, spacing, sizes } = useTheme()\n\n  const { locale } = useContext(LibContext)\n  const loadedLocale = useIntlLocale(locale)\n\n  const style = { width }\n  const minDate = moment(element.min, DATE_FORMAT).toDate()\n  const maxDate = getMaxDate(element)\n  const clearable = element.default.length === 0 && !disabled\n\n  // We need to extract the mask and format (date-fns notation) from the provided format string\n  // The user configured date format is based on the momentJS notation and is only allowed to contain\n  // one of YYYY/MM/DD, DD/MM/YYYY, or MM/DD/YYYY\" and can also use a period (.) or hyphen (-) as separators.\n\n  // We need to convert the provided format into a mask supported by the Baseweb datepicker\n  // Thereby, we need to replace all letters with 9s which refers to any number.\n  // (Using useMemo to avoid recomputing every time for now reason)\n  const dateMask = useMemo(\n    () => element.format.replaceAll(/[a-zA-Z]/g, \"9\"),\n    [element.format]\n  )\n\n  // The Baseweb datepicker supports the date-fns notation for date formatting which is\n  // slightly different from the momentJS notation. Therefore, we need to\n  // convert the provided format into the date-fns notation:\n  // (Using useMemo to avoid recomputing every time for now reason)\n  const dateFormat = useMemo(\n    () => element.format.replaceAll(\"Y\", \"y\").replaceAll(\"D\", \"d\"),\n    [element.format]\n  )\n\n  const handleChange = useCallback(\n    ({\n      date,\n    }: {\n      date: Date | (Date | null | undefined)[] | null | undefined\n    }): void => {\n      if (isNullOrUndefined(date)) {\n        setValueWithSource({ value: [], fromUi: true })\n        setIsEmpty(true)\n        return\n      }\n\n      const newValue: Date[] = []\n      if (Array.isArray(date)) {\n        date.forEach((dt: Date | null | undefined) => {\n          if (dt) {\n            newValue.push(dt)\n          }\n        })\n      } else {\n        newValue.push(date)\n      }\n\n      setValueWithSource({ value: newValue, fromUi: true })\n      setIsEmpty(!newValue)\n    },\n    [setValueWithSource]\n  )\n\n  const handleClose = useCallback((): void => {\n    if (!isEmpty) return\n\n    const newValue = stringsToDates(element.default)\n    setValueWithSource({ value: newValue, fromUi: true })\n    setIsEmpty(!newValue)\n  }, [isEmpty, element, setValueWithSource])\n\n  return (\n    <div className=\"stDateInput\" data-testid=\"stDateInput\" style={style}>\n      <WidgetLabel\n        label={element.label}\n        disabled={disabled}\n        labelVisibility={labelVisibilityProtoValueToEnum(\n          element.labelVisibility?.value\n        )}\n      >\n        {element.help && (\n          <StyledWidgetLabelHelp>\n            <TooltipIcon\n              content={element.help}\n              placement={Placement.TOP_RIGHT}\n            />\n          </StyledWidgetLabelHelp>\n        )}\n      </WidgetLabel>\n      <UIDatePicker\n        locale={loadedLocale}\n        density={DENSITY.high}\n        formatString={dateFormat}\n        mask={element.isRange ? `${dateMask} – ${dateMask}` : dateMask}\n        placeholder={\n          element.isRange\n            ? `${element.format} – ${element.format}`\n            : element.format\n        }\n        disabled={disabled}\n        onChange={handleChange}\n        onClose={handleClose}\n        overrides={{\n          Popover: {\n            props: {\n              placement: PLACEMENT.bottomLeft,\n              overrides: {\n                Body: {\n                  style: {\n                    border: `${sizes.borderWidth} solid ${colors.borderColor}`,\n                  },\n                },\n              },\n            },\n          },\n          CalendarContainer: {\n            style: {\n              fontSize: fontSizes.sm,\n              paddingRight: spacing.sm,\n              paddingLeft: spacing.sm,\n              paddingBottom: spacing.sm,\n              paddingTop: spacing.sm,\n            },\n          },\n          Week: {\n            style: {\n              fontSize: fontSizes.sm,\n            },\n          },\n          Day: {\n            style: ({\n              // Due to a bug in BaseWeb, where the range selection defaults to mono300 and can't be changed, we need to override the background colors for all these shared props:\n              // $pseudoHighlighted: Styles the range selection when you click an initial date, and hover over the end one, but NOT click it.\n              // $pseudoSelected: Styles when a range was selected, click outide, and click the calendar again.\n              // $selected: Styles the background below the red circle from the start and end dates.\n              // $isHovered: Styles the background below the end date when hovered.\n              $pseudoHighlighted,\n              $pseudoSelected,\n              $selected,\n              $isHovered,\n            }) => ({\n              fontSize: fontSizes.sm,\n              lineHeight: lineHeights.base,\n\n              \"::before\": {\n                backgroundColor:\n                  $selected ||\n                  $pseudoSelected ||\n                  $pseudoHighlighted ||\n                  $isHovered\n                    ? `${colors.secondaryBg} !important`\n                    : colors.transparent,\n              },\n\n              \"::after\": {\n                borderColor: colors.transparent,\n              },\n            }),\n          },\n          PrevButton: {\n            style: () => ({\n              // Align icon to the center of the button.\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              // Remove primary-color click effect.\n              \":active\": {\n                backgroundColor: colors.transparent,\n              },\n              \":focus\": {\n                backgroundColor: colors.transparent,\n                outline: 0,\n              },\n            }),\n          },\n          NextButton: {\n            style: {\n              // Align icon to the center of the button.\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              // Remove primary-color click effect.\n              \":active\": {\n                backgroundColor: colors.transparent,\n              },\n              \":focus\": {\n                backgroundColor: colors.transparent,\n                outline: 0,\n              },\n            },\n          },\n          Input: {\n            props: {\n              // The default maskChar ` ` causes empty dates to display as ` / / `\n              // Clearing the maskChar so empty dates will not display\n              maskChar: null,\n\n              overrides: {\n                Root: {\n                  style: {\n                    // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n                    borderLeftWidth: sizes.borderWidth,\n                    borderRightWidth: sizes.borderWidth,\n                    borderTopWidth: sizes.borderWidth,\n                    borderBottomWidth: sizes.borderWidth,\n                    paddingRight: spacing.twoXS,\n                  },\n                },\n                ClearIcon: {\n                  props: {\n                    overrides: {\n                      Svg: {\n                        style: {\n                          color: colors.darkGray,\n                          // setting this width and height makes the clear-icon align with dropdown arrows of other input fields\n                          padding: spacing.threeXS,\n                          height: sizes.clearIconSize,\n                          width: sizes.clearIconSize,\n                          \":hover\": {\n                            fill: colors.bodyText,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n                Input: {\n                  style: {\n                    // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n                    paddingRight: spacing.sm,\n                    paddingLeft: spacing.sm,\n                    paddingBottom: spacing.sm,\n                    paddingTop: spacing.sm,\n                    lineHeight: lineHeights.inputWidget,\n                  },\n                  props: {\n                    \"data-testid\": \"stDateInputField\",\n                  },\n                },\n              },\n            },\n          },\n        }}\n        value={value}\n        minDate={minDate}\n        maxDate={maxDate}\n        range={element.isRange}\n        clearable={clearable}\n      />\n    </div>\n  )\n}\n\nfunction getStateFromWidgetMgr(\n  widgetMgr: WidgetStateManager,\n  element: DateInputProto\n): Date[] {\n  // If WidgetStateManager knew a value for this widget, initialize to that.\n  // Otherwise, use the default value from the widget protobuf.\n  const storedValue = widgetMgr.getStringArrayValue(element)\n  const stringArray =\n    storedValue !== undefined ? storedValue : element.default || []\n\n  return stringsToDates(stringArray)\n}\n\nfunction getDefaultStateFromProto(element: DateInputProto): Date[] {\n  return stringsToDates(element.default) ?? []\n}\n\nfunction getCurrStateFromProto(element: DateInputProto): Date[] {\n  return stringsToDates(element.value) ?? []\n}\n\nfunction updateWidgetMgrState(\n  element: DateInputProto,\n  widgetMgr: WidgetStateManager,\n  vws: ValueWithSource<Date[]>,\n  fragmentId?: string\n): void {\n  widgetMgr.setStringArrayValue(\n    element,\n    datesToStrings(vws.value),\n    { fromUi: vws.fromUi },\n    fragmentId\n  )\n}\n\nfunction getMaxDate(element: DateInputProto): Date | undefined {\n  const maxDate = element.max\n\n  return maxDate && maxDate.length > 0\n    ? moment(maxDate, DATE_FORMAT).toDate()\n    : undefined\n}\n\nexport default memo(DateInput)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useEffect } from \"react\"\n\nimport { SignalConnection } from \"typed-signals\"\n\nimport {\n  isValidFormId,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\n\nexport class FormClearHelper {\n  private formClearListener?: SignalConnection\n\n  private lastWidgetMgr?: WidgetStateManager\n\n  private lastFormId?: string\n\n  /**\n   * Register the listener that will be called when the widget's form is cleared.\n   * This should be called in the `render` function of every class-based widget\n   * element - it mimics the behavior of a `useEffect` hook, and ensures that\n   * subscription and unsubscription happen correctly.\n   *\n   * Hooks-based widgets can just use `useEffect` and call\n   * `widgetMgr.addFormClearedListener` directly. Or just use the convenient\n   * hook `useFormClearHelper`, below.\n   */\n  public manageFormClearListener(\n    widgetMgr: WidgetStateManager,\n    formId: string,\n    listener: () => void\n  ): void {\n    // If we're already subscribed and our params haven't changed, early-out.\n    if (\n      notNullOrUndefined(this.formClearListener) &&\n      this.lastWidgetMgr === widgetMgr &&\n      this.lastFormId === formId\n    ) {\n      return\n    }\n\n    // Close our previous subscription, if we had one.\n    this.disconnect()\n\n    // If we're not part of a form, there's nothing to do.\n    if (!isValidFormId(formId)) {\n      return\n    }\n\n    // Make the new subscription.\n    this.formClearListener = widgetMgr.addFormClearedListener(formId, listener)\n    this.lastWidgetMgr = widgetMgr\n    this.lastFormId = formId\n  }\n\n  /**\n   * Disconnect from the form-clear signal, if we're connected.\n   * This should be called from the `componentWillUnmount` function of every\n   * element that uses it.\n   */\n  public disconnect(): void {\n    this.formClearListener?.disconnect()\n    this.formClearListener = undefined\n    this.lastWidgetMgr = undefined\n    this.lastFormId = undefined\n  }\n}\n\ninterface FormElementProtoInterface {\n  formId: string\n}\n\ninterface FormClearHelperArgs {\n  element: FormElementProtoInterface\n  widgetMgr: WidgetStateManager\n  onFormCleared: () => void\n}\n\nexport function useFormClearHelper({\n  element,\n  widgetMgr,\n  onFormCleared,\n}: FormClearHelperArgs): void {\n  useEffect(() => {\n    if (!isValidFormId(element.formId)) {\n      return\n    }\n\n    const formClearListener = widgetMgr.addFormClearedListener(\n      element.formId,\n      onFormCleared\n    )\n\n    return () => {\n      formClearListener.disconnect()\n    }\n  }, [element, widgetMgr, onFormCleared])\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Dispatch,\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\"\n\nimport {\n  Source,\n  WidgetStateManager,\n} from \"@streamlit/lib/src/WidgetStateManager\"\nimport { useFormClearHelper } from \"@streamlit/lib/src/components/widgets/Form\"\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nexport type ValueWithSource<T> = {\n  value: T\n} & Source\n\n// Interface for a proto that has a .formId\ninterface ValueElementProtoInterface {\n  formId: string\n}\n\ninterface BaseArgs<\n  T, // Type of the value stored in WidgetStateManager.\n  P extends ValueElementProtoInterface // Proto for this widget.\n> {\n  // Important: these callback functions need to have stable references! So\n  // either declare them at the module level or wrap in useCallback.\n  getStateFromWidgetMgr: (wm: WidgetStateManager, el: P) => T | undefined\n  updateWidgetMgrState: (\n    el: P,\n    wm: WidgetStateManager,\n    vws: ValueWithSource<T>,\n    fragmentId?: string\n  ) => void\n  element: P\n  widgetMgr: WidgetStateManager\n  fragmentId?: string\n  onFormCleared?: () => void\n}\n\nexport interface UseBasicWidgetClientStateArgs<\n  T, // Type of the value stored in WidgetStateManager.\n  P extends ValueElementProtoInterface // Proto for this widget.\n> extends BaseArgs<T, P> {\n  // Important: these callback functions need to have stable references! So\n  // either declare them at the module level or wrap in useCallback.\n  getDefaultState: (wm: WidgetStateManager, el: P) => T\n}\n\n/**\n * A React hook that makes the simplest kinds of widgets very easy to implement.\n * Use the clientState version when the widget does not have a .setValue on its\n * proto, otherwise utilize `useBasicWidgetState`.\n */\nexport function useBasicWidgetClientState<\n  T, // Type of the value stored in WidgetStateManager.\n  P extends ValueElementProtoInterface // Proto for this widget.\n>({\n  getStateFromWidgetMgr,\n  getDefaultState,\n  updateWidgetMgrState,\n  element,\n  widgetMgr,\n  fragmentId,\n  onFormCleared,\n}: UseBasicWidgetClientStateArgs<T, P>): [\n  T,\n  Dispatch<SetStateAction<ValueWithSource<T> | null>>\n] {\n  const [currentValue, setCurrentValue] = useState<T>(() => {\n    // If WidgetStateManager knew a value for this widget, initialize to that.\n    // Otherwise, use the default value.\n    return (\n      getStateFromWidgetMgr(widgetMgr, element) ??\n      getDefaultState(widgetMgr, element)\n    )\n  })\n\n  // This acts as an \"event\":\n  // - It's null most of the time\n  // - It only has a value the moment when the user calls setValue (internally\n  //   called setNextValueWithSource). And then it's immediately set to null\n  //   internally.\n  const [nextValueWithSource, setNextValueWithSource] =\n    useState<ValueWithSource<T> | null>({\n      value: currentValue,\n      fromUi: false,\n    })\n\n  // When someone calls setNextValueWithSource, update internal state and tell\n  // widget manager to update its state too.\n  useEffect(() => {\n    if (isNullOrUndefined(nextValueWithSource)) return\n    setNextValueWithSource(null) // Clear \"event\".\n\n    setCurrentValue(nextValueWithSource.value)\n    updateWidgetMgrState(element, widgetMgr, nextValueWithSource, fragmentId)\n  }, [\n    nextValueWithSource,\n    updateWidgetMgrState,\n    element,\n    widgetMgr,\n    fragmentId,\n  ])\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  const handleFormCleared = useCallback((): void => {\n    setNextValueWithSource({\n      value: getDefaultState(widgetMgr, element),\n      fromUi: true,\n    })\n    onFormCleared?.()\n  }, [\n    setNextValueWithSource,\n    element,\n    getDefaultState,\n    widgetMgr,\n    onFormCleared,\n  ])\n\n  // Manage our form-clear event handler.\n  useFormClearHelper({ widgetMgr, element, onFormCleared: handleFormCleared })\n\n  return [currentValue, setNextValueWithSource]\n}\n\n// Interface for a proto that has a setValue, and .formId\ninterface ValueElementProtoInterfaceWithSetValue\n  extends ValueElementProtoInterface {\n  setValue: boolean\n}\n\nexport interface UseBasicWidgetStateArgs<\n  T, // Type of the value stored in WidgetStateManager.\n  P extends ValueElementProtoInterfaceWithSetValue // Proto for this widget.\n> extends BaseArgs<T, P> {\n  // Important: these callback functions need to have stable references! So\n  // either declare them at the module level or wrap in useCallback.\n  getDefaultStateFromProto: (el: P) => T\n  getCurrStateFromProto: (el: P) => T\n}\n\n/**\n * A React hook that makes the simplest kinds of widgets very easy to implement.\n */\nexport function useBasicWidgetState<\n  T, // Type of the value stored in WidgetStateManager.\n  P extends ValueElementProtoInterfaceWithSetValue // Proto for this widget.\n>({\n  getStateFromWidgetMgr,\n  getDefaultStateFromProto,\n  getCurrStateFromProto,\n  updateWidgetMgrState,\n  element,\n  widgetMgr,\n  fragmentId,\n  onFormCleared,\n}: UseBasicWidgetStateArgs<T, P>): [\n  T,\n  Dispatch<SetStateAction<ValueWithSource<T> | null>>\n] {\n  const getDefaultState = useCallback<(wm: WidgetStateManager, el: P) => T>(\n    (wm, el) => {\n      return getDefaultStateFromProto(el)\n    },\n    [getDefaultStateFromProto]\n  )\n\n  const [currentValue, setNextValueWithSource] = useBasicWidgetClientState({\n    getStateFromWidgetMgr,\n    getDefaultState,\n    updateWidgetMgrState,\n    element,\n    widgetMgr,\n    fragmentId,\n    onFormCleared,\n  })\n\n  // Respond to value changes via session_state. This is also set via an\n  // \"event\", this time using the .setValue property of the proto.\n  useEffect(() => {\n    if (!element.setValue) return\n    element.setValue = false // Clear \"event\".\n\n    setNextValueWithSource({\n      value: getCurrStateFromProto(element),\n      fromUi: false,\n    })\n  }, [element, getCurrStateFromProto, setNextValueWithSource])\n\n  return [currentValue, setNextValueWithSource]\n}\n"],"names":["getWeekInfo","intlLocale","_ref","_getWeekInfo","_getWeekInfo2","_ref2","call","weekInfo","DATE_FORMAT","stringsToDates","strings","map","val","Date","DateInput","_element$labelVisibil","disabled","element","widgetMgr","width","fragmentId","value","setValueWithSource","useBasicWidgetState","getStateFromWidgetMgr","getDefaultStateFromProto","getCurrStateFromProto","updateWidgetMgrState","isEmpty","setIsEmpty","useState","colors","fontSizes","lineHeights","spacing","sizes","useTheme","locale","useContext","LibContext","loadedLocale","useMemo","Intl","Locale","e","enUS","firstDay","options","weekStartsOn","useIntlLocale","style","minDate","moment","min","toDate","maxDate","max","length","undefined","getMaxDate","clearable","default","dateMask","format","replaceAll","dateFormat","handleChange","useCallback","date","isNullOrUndefined","fromUi","newValue","Array","isArray","forEach","dt","push","handleClose","_jsxs","className","children","_jsx","WidgetLabel","label","labelVisibility","labelVisibilityProtoValueToEnum","help","StyledWidgetLabelHelp","TooltipIcon","content","placement","Placement","TOP_RIGHT","UIDatePicker","density","DENSITY","high","formatString","mask","isRange","placeholder","onChange","onClose","overrides","Popover","props","PLACEMENT","bottomLeft","Body","border","borderWidth","borderColor","CalendarContainer","fontSize","sm","paddingRight","paddingLeft","paddingBottom","paddingTop","Week","Day","_ref3","$pseudoHighlighted","$pseudoSelected","$selected","$isHovered","lineHeight","base","backgroundColor","secondaryBg","transparent","PrevButton","display","alignItems","justifyContent","outline","NextButton","Input","maskChar","Root","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth","twoXS","ClearIcon","Svg","color","darkGray","padding","threeXS","height","clearIconSize","fill","bodyText","inputWidget","range","storedValue","getStringArrayValue","_stringsToDates","_stringsToDates2","vws","dates","setStringArrayValue","memo","FormClearHelper","constructor","formClearListener","lastWidgetMgr","lastFormId","manageFormClearListener","formId","listener","notNullOrUndefined","this","disconnect","isValidFormId","addFormClearedListener","_this$formClearListen","useFormClearHelper","onFormCleared","useEffect","useBasicWidgetClientState","getDefaultState","currentValue","setCurrentValue","_getStateFromWidgetMg","nextValueWithSource","setNextValueWithSource","handleFormCleared","wm","el","setValue"],"sourceRoot":""}