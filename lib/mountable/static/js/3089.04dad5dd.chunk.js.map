{"version":3,"file":"static/js/3089.04dad5dd.chunk.js","mappings":"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","sources":["../../../streamlit/frontend/lib/src/components/elements/ArrowVegaLiteChart/arrowUtils.ts","../../../streamlit/frontend/lib/src/components/elements/ArrowVegaLiteChart/CustomTheme.tsx","../../../streamlit/frontend/lib/src/components/elements/ArrowVegaLiteChart/styled-components.ts","../../../streamlit/frontend/lib/src/components/elements/ArrowVegaLiteChart/ArrowVegaLiteChart.tsx","../../../streamlit/frontend/lib/src/components/widgets/Form/FormClearHelper.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\nimport { IndexTypeName, Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\n\nconst MagicFields = {\n  DATAFRAME_INDEX: \"(index)\",\n}\n\n/** Types of dataframe-indices that are supported as x axis. */\nconst SUPPORTED_INDEX_TYPES = new Set([\n  IndexTypeName.DatetimeIndex,\n  IndexTypeName.Float64Index,\n  IndexTypeName.Int64Index,\n  IndexTypeName.RangeIndex,\n  IndexTypeName.UInt64Index,\n])\n\n/** All of the data that makes up a VegaLite chart. */\nexport interface VegaLiteChartElement {\n  /**\n   * The dataframe that will be used as the chart's main data source, if\n   * specified using Vega-Lite's inline API.\n   *\n   * This is mutually exclusive with WrappedNamedDataset - if `data` is non-null,\n   * `datasets` will not be populated; if `datasets` is populated, then `data`\n   * will be null.\n   */\n  data: Quiver | null\n\n  /** The a JSON-formatted string with the Vega-Lite spec. */\n  spec: string\n\n  /**\n   * Dataframes associated with this chart using Vega-Lite's datasets API,\n   * if any.\n   */\n  datasets: WrappedNamedDataset[]\n\n  /** If True, will overwrite the chart width spec to fit to container. */\n  useContainerWidth: boolean\n\n  /** override the properties with a theme. Currently, only \"streamlit\" or None are accepted. */\n  vegaLiteTheme: string\n\n  /** The widget ID. Only set if selections are activated. */\n  id: string\n\n  /** Named selection parameters that are activated to trigger reruns. */\n  selectionMode: string[]\n\n  /** The form ID if the chart has activated selections and is used within a form. */\n  formId: string\n}\n\n/** A mapping of `ArrowNamedDataSet.proto`. */\nexport interface WrappedNamedDataset {\n  /** The dataset's optional name. */\n  name: string | null\n\n  /** True if the name field (above) was manually set. */\n  hasName: boolean\n\n  /** The data itself, wrapped in a Quiver object. */\n  data: Quiver\n}\n\nexport function getInlineData(\n  el: VegaLiteChartElement\n): { [field: string]: any }[] | null {\n  const dataProto = el.data\n\n  if (!dataProto || dataProto.data.numRows === 0) {\n    return null\n  }\n\n  return getDataArray(dataProto)\n}\n\nexport function getDataArrays(\n  el: VegaLiteChartElement\n): { [dataset: string]: any[] } | null {\n  const datasets = getDataSets(el)\n  if (isNullOrUndefined(datasets)) {\n    return null\n  }\n\n  const datasetArrays: { [dataset: string]: any[] } = {}\n\n  for (const [name, dataset] of Object.entries(datasets)) {\n    datasetArrays[name] = getDataArray(dataset)\n  }\n\n  return datasetArrays\n}\n\nexport function getDataSets(\n  el: VegaLiteChartElement\n): { [dataset: string]: Quiver } | null {\n  if (el.datasets?.length === 0) {\n    return null\n  }\n\n  const datasets: { [dataset: string]: Quiver } = {}\n\n  el.datasets.forEach((x: WrappedNamedDataset) => {\n    if (!x) {\n      return\n    }\n    const name = x.hasName ? x.name : null\n    datasets[name as string] = x.data\n  })\n\n  return datasets\n}\n\n/**\n * Retrieves an array of data from Quiver starting from a specified index.\n * Converts data values to a format compatible with VegaLite visualization.\n *\n * @param {Quiver} dataProto - The Quiver data object to extract data from.\n * @param {number} [startIndex=0] - The starting index for data extraction.\n * @returns {Array.<{ [field: string]: any }>} An array of data objects for visualization.\n */\nexport function getDataArray(\n  dataProto: Quiver,\n  startIndex = 0\n): { [field: string]: any }[] {\n  if (dataProto.isEmpty()) {\n    return []\n  }\n\n  const dataArr = []\n  const { dataRows: rows, dataColumns: cols } = dataProto.dimensions\n\n  const indexType = Quiver.getTypeName(dataProto.types.index[0])\n  const hasSupportedIndex = SUPPORTED_INDEX_TYPES.has(\n    indexType as IndexTypeName\n  )\n\n  for (let rowIndex = startIndex; rowIndex < rows; rowIndex++) {\n    const row: { [field: string]: any } = {}\n\n    if (hasSupportedIndex) {\n      const indexValue = dataProto.getIndexValue(rowIndex, 0)\n      // VegaLite can't handle BigInts, so they have to be converted to Numbers first\n      row[MagicFields.DATAFRAME_INDEX] =\n        typeof indexValue === \"bigint\" ? Number(indexValue) : indexValue\n    }\n\n    for (let colIndex = 0; colIndex < cols; colIndex++) {\n      const dataValue = dataProto.getDataValue(rowIndex, colIndex)\n      const dataType = dataProto.types.data[colIndex]\n      const typeName = Quiver.getTypeName(dataType)\n\n      if (\n        typeName !== \"datetimetz\" &&\n        (dataValue instanceof Date || Number.isFinite(dataValue)) &&\n        (typeName.startsWith(\"datetime\") || typeName === \"date\")\n      ) {\n        // For dates that do not contain timezone information.\n        // Vega JS assumes dates in the local timezone, so we need to convert\n        // UTC date to be the same date in the local timezone.\n        const offset = new Date(dataValue).getTimezoneOffset() * 60 * 1000 // minutes to milliseconds\n        row[dataProto.columns[0][colIndex]] = dataValue.valueOf() + offset\n      } else if (typeof dataValue === \"bigint\") {\n        row[dataProto.columns[0][colIndex]] = Number(dataValue)\n      } else {\n        row[dataProto.columns[0][colIndex]] = dataValue\n      }\n    }\n    dataArr.push(row)\n  }\n\n  return dataArr\n}\n\n/**\n * Checks if data looks like it's just prevData plus some appended rows.\n */\nexport function dataIsAnAppendOfPrev(\n  prevData: Quiver,\n  prevNumRows: number,\n  prevNumCols: number,\n  data: Quiver,\n  numRows: number,\n  numCols: number\n): boolean {\n  // Check whether dataframes have the same shape.\n\n  // not an append\n  if (prevNumCols !== numCols) {\n    return false\n  }\n\n  // Data can be updated, but still have the same number of rows.\n  // We consider the case an append only when the number of rows has increased\n  if (prevNumRows >= numRows) {\n    return false\n  }\n\n  // if no previous data, render from scratch\n  if (prevNumRows === 0) {\n    return false\n  }\n\n  const c = numCols - 1\n  const r = prevNumRows - 1\n\n  // Check if the new dataframe looks like it's a superset of the old one.\n  // (this is a very light check, and not guaranteed to be right!)\n  if (\n    prevData.getDataValue(0, c) !== data.getDataValue(0, c) ||\n    prevData.getDataValue(r, c) !== data.getDataValue(r, c)\n  ) {\n    return false\n  }\n\n  return true\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport merge from \"lodash/merge\"\nimport mergeWith from \"lodash/mergeWith\"\n\nimport {\n  convertRemToPx,\n  EmotionTheme,\n  getBlue80,\n  getCategoricalColorsArray,\n  getDivergingColorsArray,\n  getGray30,\n  getGray70,\n  getSequentialColorsArray,\n} from \"@streamlit/lib/src/theme\"\n\nexport function applyStreamlitTheme(config: any, theme: EmotionTheme): any {\n  // This theming config contains multiple hard coded spacing values.\n  // The reason is that we currently only have rem values in our spacing\n  // definitions and vega lite requires numerical (pixel) values.\n\n  const streamlitTheme = {\n    font: theme.genericFonts.bodyFont,\n    background: theme.colors.bgColor,\n    fieldTitle: \"verbal\",\n    autosize: { type: \"fit\", contains: \"padding\" },\n    title: {\n      align: \"left\",\n      anchor: \"start\",\n      color: theme.colors.headingColor,\n      titleFontStyle: \"normal\",\n      fontWeight: theme.fontWeights.bold,\n      fontSize: theme.fontSizes.mdPx,\n      orient: \"top\",\n      offset: 26,\n    },\n    header: {\n      titleFontWeight: theme.fontWeights.normal,\n      titleFontSize: theme.fontSizes.mdPx,\n      titleColor: getGray70(theme),\n      titleFontStyle: \"normal\",\n      labelFontSize: theme.fontSizes.twoSmPx,\n      labelFontWeight: theme.fontWeights.normal,\n      labelColor: getGray70(theme),\n      labelFontStyle: \"normal\",\n    },\n    axis: {\n      labelFontSize: theme.fontSizes.twoSmPx,\n      labelFontWeight: theme.fontWeights.normal,\n      labelColor: getGray70(theme),\n      labelFontStyle: \"normal\",\n      titleFontWeight: theme.fontWeights.normal,\n      titleFontSize: theme.fontSizes.smPx,\n      titleColor: getGray70(theme),\n      titleFontStyle: \"normal\",\n      ticks: false,\n      gridColor: getGray30(theme),\n      domain: false,\n      domainWidth: 1,\n      domainColor: getGray30(theme),\n      labelFlush: true,\n      labelFlushOffset: 1,\n      labelBound: false,\n      labelLimit: 100,\n      titlePadding: convertRemToPx(theme.spacing.lg),\n      labelPadding: convertRemToPx(theme.spacing.lg),\n      labelSeparation: convertRemToPx(theme.spacing.twoXS),\n      labelOverlap: true,\n    },\n    legend: {\n      labelFontSize: theme.fontSizes.smPx,\n      labelFontWeight: theme.fontWeights.normal,\n      labelColor: getGray70(theme),\n      titleFontSize: theme.fontSizes.smPx,\n      titleFontWeight: theme.fontWeights.normal,\n      titleFontStyle: \"normal\",\n      titleColor: getGray70(theme),\n      titlePadding: 5,\n      labelPadding: convertRemToPx(theme.spacing.lg),\n      columnPadding: convertRemToPx(theme.spacing.sm),\n      rowPadding: convertRemToPx(theme.spacing.twoXS),\n      // eslint-disable-next-line streamlit-custom/no-hardcoded-theme-values\n      padding: 7,\n      symbolStrokeWidth: 4,\n    },\n    range: {\n      category: getCategoricalColorsArray(theme),\n      diverging: getDivergingColorsArray(theme),\n      ramp: getSequentialColorsArray(theme),\n      heatmap: getSequentialColorsArray(theme),\n    },\n    view: {\n      columns: 1,\n      strokeWidth: 0,\n      stroke: \"transparent\",\n      continuousHeight: 350,\n      continuousWidth: 400,\n    },\n    concat: {\n      columns: 1,\n    },\n    facet: {\n      columns: 1,\n    },\n    mark: {\n      tooltip: true,\n      color: getBlue80(theme),\n    },\n    bar: {\n      binSpacing: convertRemToPx(theme.spacing.twoXS),\n      discreteBandSize: { band: 0.85 },\n    },\n    axisDiscrete: {\n      grid: false,\n    },\n    axisXPoint: {\n      grid: false,\n    },\n    axisTemporal: {\n      grid: false,\n    },\n    axisXBand: {\n      grid: false,\n    },\n  }\n\n  if (!config) {\n    return streamlitTheme\n  }\n\n  // Fill in theme defaults where the user didn't specify config options.\n  return mergeWith({}, streamlitTheme, config, (_, b) =>\n    Array.isArray(b) ? b : undefined\n  )\n}\n\nexport function applyThemeDefaults(config: any, theme: EmotionTheme): any {\n  const { colors, fontSizes, genericFonts } = theme\n  const themeFonts = {\n    labelFont: genericFonts.bodyFont,\n    titleFont: genericFonts.bodyFont,\n    labelFontSize: fontSizes.twoSmPx,\n    titleFontSize: fontSizes.twoSmPx,\n  }\n  const themeDefaults = {\n    background: colors.bgColor,\n    axis: {\n      labelColor: colors.bodyText,\n      titleColor: colors.bodyText,\n      gridColor: getGray30(theme),\n      ...themeFonts,\n    },\n    legend: {\n      labelColor: colors.bodyText,\n      titleColor: colors.bodyText,\n      ...themeFonts,\n    },\n    title: {\n      color: colors.bodyText,\n      subtitleColor: colors.bodyText,\n      ...themeFonts,\n    },\n    header: {\n      labelColor: colors.bodyText,\n      titleColor: colors.bodyText,\n      ...themeFonts,\n    },\n    view: {\n      stroke: getGray30(theme),\n      continuousHeight: 350,\n      continuousWidth: 400,\n    },\n    mark: {\n      tooltip: true,\n    },\n  }\n\n  if (!config) {\n    return themeDefaults\n  }\n\n  // Fill in theme defaults where the user didn't specify config options.\n  return merge({}, themeDefaults, config)\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CSSObject } from \"@emotion/react\"\nimport styled from \"@emotion/styled\"\nimport { transparentize } from \"color2k\"\n\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\n\nexport const StyledVegaLiteChartTooltips = (\n  theme: EmotionTheme\n): CSSObject => ({\n  \"#vg-tooltip-element\": {\n    visibility: \"hidden\",\n    position: \"fixed\",\n    fontFamily: theme.genericFonts.bodyFont,\n    color: theme.colors.bodyText,\n    border: `${theme.sizes.borderWidth} solid ${theme.colors.borderColor}`,\n    backgroundColor: transparentize(theme.colors.bgColor, 0.05),\n    fontSize: theme.fontSizes.twoSm,\n    boxShadow: \"rgb(0 0 0 / 16%) 0px 1px 4px\",\n    maxWidth: theme.sizes.maxChartTooltipWidth,\n    padding: `${theme.spacing.xs} ${theme.spacing.md}`,\n    borderRadius: theme.radii.default,\n    zIndex: theme.zIndices.vegaTooltips,\n\n    \"&.visible\": {\n      visibility: \"visible\",\n    },\n\n    h2: {\n      marginTop: theme.spacing.none,\n      marginBottom: theme.spacing.sm,\n      fontSize: theme.fontSizes.sm,\n    },\n\n    td: {\n      border: \"none\",\n    },\n\n    table: {\n      borderSpacing: 0,\n\n      tr: {\n        border: \"none\",\n\n        td: {\n          overflow: \"hidden\",\n          textOverflow: \"ellipsis\",\n          paddingTop: theme.spacing.threeXS,\n          paddingBottom: theme.spacing.threeXS,\n        },\n\n        \"td.key\": {\n          // This should use a max of 40% of the available width (- padding):\n          maxWidth: `calc((${theme.sizes.maxChartTooltipWidth} - 2 * ${theme.spacing.md}) * 0.4)`,\n          textAlign: \"right\",\n          color: theme.colors.fadedText60,\n          whiteSpace: \"nowrap\",\n          paddingRight: theme.spacing.twoXS,\n        },\n\n        \"td.value\": {\n          // This should use a max of 60% of the available width (- padding):\n          maxWidth: `calc((${theme.sizes.maxChartTooltipWidth} - 2 * ${theme.spacing.md}) * 0.6)`,\n          textAlign: \"left\",\n          // We are limiting the height of the value to a max of 5 lines via\n          // the a webkit property that is supported by all major browsers:\n          // https://caniuse.com/?search=-webkit-line-clamp\n          display: \"-webkit-box\",\n          WebkitLineClamp: \"5\",\n          WebkitBoxOrient: \"vertical\",\n          lineClamp: \"5\",\n          wordWrap: \"break-word\",\n        },\n      },\n    },\n  },\n})\n\ninterface StyledVegaLiteChartContainerProps {\n  useContainerWidth: boolean\n  isFullScreen: boolean\n}\n\nexport const StyledVegaLiteChartContainer =\n  styled.div<StyledVegaLiteChartContainerProps>(\n    ({ theme, useContainerWidth, isFullScreen }) => ({\n      width: useContainerWidth || isFullScreen ? \"100%\" : \"auto\",\n      height: isFullScreen ? \"100%\" : \"auto\",\n      // These styles come from VegaLite Library\n      \"&.vega-embed\": {\n        position: \"relative\",\n        display: \"inline-block\",\n        boxSizing: \"border-box\",\n\n        \"details:not([open]) > :not(summary)\": {\n          display: \"none !important\",\n        },\n        \"details[open] summary\": {\n          opacity: 0.7,\n        },\n        \"&:hover summary, .vega-embed:focus summary\": {\n          background: \"transparent\",\n        },\n        \"&:hover summary, &:focus-within summary\": {\n          opacity: \"1 !important\",\n          transition: \"opacity 0.2s ease\",\n        },\n        \"&.has-actions\": {\n          paddingRight: 0,\n        },\n        \".vega-actions\": {\n          position: \"absolute\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          paddingBottom: theme.spacing.sm,\n          paddingTop: theme.spacing.sm,\n          zIndex: theme.zIndices.popupMenu,\n          // Position under the menu button. The size of the menu button\n          // iconSizes.md + padding (2 * spacing.xs)\n          //+ some additional spacing (spacing.xs)\n          top: `calc(${theme.iconSizes.md} + 2 * ${theme.spacing.xs} + ${theme.spacing.xs})`,\n          right: 0,\n          // Customize menu UI to look like the Streamlit menu:\n          backgroundColor: theme.colors.bgColor,\n          boxShadow: \"rgb(0 0 0 / 16%) 0px 4px 16px\",\n          border: `${theme.sizes.borderWidth} solid ${theme.colors.fadedText10}`,\n          animationDuration: \"0.15s\",\n          animationName: \"scale-in\",\n          animationTimingFunction: \"cubic-bezier(0.2, 0, 0.13, 1.5)\",\n          textAlign: \"left\",\n          borderRadius: theme.radii.default,\n          a: {\n            fontFamily: theme.genericFonts.bodyFont,\n            fontWeight: theme.fontWeights.normal,\n            fontSize: theme.fontSizes.md,\n            margin: 0,\n            padding: `${theme.spacing.twoXS} ${theme.spacing.twoXL}`,\n            color: theme.colors.bodyText,\n            whiteSpace: \"nowrap\",\n            textDecoration: \"none\",\n          },\n          \"a:hover, a:focus\": {\n            backgroundColor: theme.colors.secondaryBg,\n            color: theme.colors.bodyText,\n          },\n          \":before\": {\n            content: \"none\",\n          },\n          \":after\": {\n            content: \"none\",\n          },\n        },\n        \"@keyframes scale-in\": {\n          from: {\n            opacity: 0,\n            transform: \"scale(0.6)\",\n          },\n          to: {\n            opacity: 1,\n            transform: \"scale(1)\",\n          },\n        },\n        \".chart-wrapper\": {\n          \"&.fit-x\": {\n            width: \"100%\",\n          },\n          \"&.fit-y\": {\n            height: \"100%\",\n          },\n        },\n        summary: {\n          position: \"absolute\",\n          top: 0,\n          right: 0,\n          opacity: 0,\n          listStyle: \"none\",\n          padding: theme.spacing.xs,\n          // Fix weird floating button height issue in Vega Lite.\n          height: \"auto\",\n          // Fix floating button appearing above pop-ups.\n          zIndex: theme.zIndices.menuButton,\n          border: \"none\",\n          boxShadow: \"none\",\n          borderRadius: theme.radii.default,\n          color: theme.colors.fadedText10,\n          backgroundColor: \"transparent\",\n          transition: \"opacity 300ms 150ms,transform 300ms 150ms\",\n          cursor: \"pointer\",\n          lineHeight: 0,\n          \"&::-webkit-details-marker\": {\n            display: \"none\",\n          },\n          \"&:active, &:focus-visible, &:hover\": {\n            border: \"none\",\n            boxShadow: \"none\",\n            color: theme.colors.bodyText,\n            opacity: \"1 !important\",\n            background: theme.colors.darkenedBgMix25,\n          },\n          svg: {\n            width: theme.iconSizes.md,\n            height: theme.iconSizes.md,\n          },\n        },\n      },\n    })\n  )\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { PureComponent } from \"react\"\n\nimport { Global, useTheme } from \"@emotion/react\"\nimport embed from \"vega-embed\"\nimport * as vega from \"vega\"\nimport { SignalValue } from \"vega\"\nimport { expressionInterpreter } from \"vega-interpreter\"\nimport isEqual from \"lodash/isEqual\"\nimport { JSX } from \"react/jsx-runtime\"\n\nimport {\n  debounce,\n  isNullOrUndefined,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport {\n  WidgetInfo,\n  WidgetStateManager,\n} from \"@streamlit/lib/src/WidgetStateManager\"\nimport { logMessage, logWarning } from \"@streamlit/lib/src/util/log\"\nimport { ensureError } from \"@streamlit/lib/src/util/ErrorHandling\"\nimport { Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\nimport { FormClearHelper } from \"@streamlit/lib/src/components/widgets/Form\"\nimport Toolbar, {\n  StyledToolbarElementContainer,\n} from \"@streamlit/lib/src/components/shared/Toolbar\"\nimport { ElementFullscreenContext } from \"@streamlit/lib/src/components/shared/ElementFullscreen/ElementFullscreenContext\"\nimport { useRequiredContext } from \"@streamlit/lib/src/hooks/useRequiredContext\"\nimport { withFullScreenWrapper } from \"@streamlit/lib/src/components/shared/FullScreenWrapper\"\n\nimport {\n  dataIsAnAppendOfPrev,\n  getDataArray,\n  getDataArrays,\n  getDataSets,\n  getInlineData,\n  VegaLiteChartElement,\n} from \"./arrowUtils\"\nimport { applyStreamlitTheme, applyThemeDefaults } from \"./CustomTheme\"\nimport {\n  StyledVegaLiteChartContainer,\n  StyledVegaLiteChartTooltips,\n} from \"./styled-components\"\n\nconst DEFAULT_DATA_NAME = \"source\"\n\n/**\n * Fix bug where Vega Lite was vertically-cropping the x-axis in some cases.\n */\nconst BOTTOM_PADDING = 20\n\n/**\n * Debounce time for triggering a widget state update\n * This prevents to rapid updates to the widget state.\n */\nconst DEBOUNCE_TIME_MS = 150\n\n/** This is the state that is sent to the backend\n * This needs to be the same structure that is also defined\n * in the Python code.\n */\nexport interface VegaLiteState {\n  selection: Record<string, any>\n}\n\ninterface Props {\n  element: VegaLiteChartElement\n  width: number\n  widgetMgr: WidgetStateManager\n  fragmentId?: string\n  disableFullscreenMode?: boolean\n}\n\nexport interface PropsWithFullScreenAndTheme extends Props {\n  height?: number\n  theme: EmotionTheme\n  isFullScreen: boolean\n  expand?: () => void\n  collapse?: () => void\n}\n\ninterface State {\n  error?: Error\n}\n\n/**\n * Prepares the vega-lite spec for selections by transforming the select parameters\n * to a full object specification and by automatically adding encodings (if missing)\n * to point selections.\n *\n * The changes are applied in-place to the spec object.\n *\n * @param spec The Vega-Lite specification of the chart.\n */\nexport function prepareSpecForSelections(spec: any): void {\n  if (\"params\" in spec && \"encoding\" in spec) {\n    spec.params.forEach((param: any) => {\n      if (!(\"select\" in param)) {\n        // We are only interested in transforming select parameters.\n        // Other parameters are skipped.\n        return\n      }\n\n      if ([\"interval\", \"point\"].includes(param.select)) {\n        // The select object can be either a single string (short-hand) specifying\n        // \"interval\" or \"point\" or an object that can contain additional\n        // properties as defined here: https://vega.github.io/vega-lite/docs/selection.html\n        // We convert the short-hand notation to the full object specification,\n        // so that we can attach additional properties to this below.\n        param.select = {\n          type: param.select,\n        }\n      }\n\n      if (!(\"type\" in param.select)) {\n        // The type property is required in the spec.\n        // But we check anyways and skip all parameters that don't have it.\n        return\n      }\n\n      if (\n        param.select.type === \"point\" &&\n        !(\"encodings\" in param.select) &&\n        isNullOrUndefined(param.select.encodings)\n      ) {\n        // If encodings are not specified by the user, we add all the encodings from\n        // the chart to the selection parameter. This is required so that points\n        // selections are correctly resolved to a PointSelection and not an IndexSelection:\n        // https://github.com/altair-viz/altair/issues/3285#issuecomment-1858860696\n        param.select.encodings = Object.keys(spec.encoding)\n      }\n    })\n  }\n}\n\nexport class ArrowVegaLiteChart extends PureComponent<\n  PropsWithFullScreenAndTheme,\n  State\n> {\n  /**\n   * The Vega view object\n   */\n  private vegaView?: vega.View\n\n  /**\n   * Finalizer for the embedded vega object. Must be called to dispose\n   * of the vegaView when it's no longer used.\n   */\n  private vegaFinalizer?: () => void\n\n  /**\n   * The default data name to add to.\n   */\n  private defaultDataName = DEFAULT_DATA_NAME\n\n  /**\n   * The html element we attach the Vega view to.\n   */\n  private element: HTMLDivElement | null = null\n\n  /**\n   * Helper to manage form clear listeners.\n   * This is used to reset the selection state when the form is cleared.\n   */\n  private readonly formClearHelper = new FormClearHelper()\n\n  readonly state = {\n    error: undefined,\n  }\n\n  public async componentDidMount(): Promise<void> {\n    try {\n      await this.createView()\n    } catch (e) {\n      const error = ensureError(e)\n      this.setState({ error })\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this.finalizeView()\n  }\n\n  /**\n   * Finalize the view so it can be garbage collected. This should be done\n   * when a new view is created, and when the component unmounts.\n   */\n  private finalizeView = (): any => {\n    if (this.vegaFinalizer) {\n      this.vegaFinalizer()\n    }\n    this.vegaFinalizer = undefined\n    this.vegaView = undefined\n  }\n\n  public async componentDidUpdate(\n    prevProps: PropsWithFullScreenAndTheme\n  ): Promise<void> {\n    const { element: prevElement, theme: prevTheme } = prevProps\n    const { element, theme } = this.props\n\n    const prevSpec = prevElement.spec\n    const { spec } = element\n\n    if (\n      !this.vegaView ||\n      prevSpec !== spec ||\n      prevTheme !== theme ||\n      prevProps.width !== this.props.width ||\n      prevProps.height !== this.props.height ||\n      prevProps.element.vegaLiteTheme !== this.props.element.vegaLiteTheme ||\n      !isEqual(\n        prevProps.element.selectionMode,\n        this.props.element.selectionMode\n      )\n    ) {\n      logMessage(\"Vega spec changed.\")\n      try {\n        await this.createView()\n      } catch (e) {\n        const error = ensureError(e)\n\n        this.setState({ error })\n      }\n      return\n    }\n\n    const prevData = prevElement.data\n    const { data } = element\n\n    if (prevData || data) {\n      this.updateData(this.defaultDataName, prevData, data)\n    }\n\n    const prevDataSets = getDataSets(prevElement) || {}\n    const dataSets = getDataSets(element) || {}\n\n    for (const [name, dataset] of Object.entries(dataSets)) {\n      const datasetName = name || this.defaultDataName\n      const prevDataset = prevDataSets[datasetName]\n\n      this.updateData(datasetName, prevDataset, dataset)\n    }\n\n    // Remove all datasets that are in the previous but not the current datasets.\n    for (const name of Object.keys(prevDataSets)) {\n      if (!dataSets.hasOwnProperty(name) && name !== this.defaultDataName) {\n        this.updateData(name, null, null)\n      }\n    }\n\n    this.vegaView.resize().runAsync()\n  }\n\n  public generateSpec = (): any => {\n    const { element: el, theme, isFullScreen, width, height } = this.props\n    const spec = JSON.parse(el.spec)\n    const { useContainerWidth } = el\n    if (el.vegaLiteTheme === \"streamlit\") {\n      spec.config = applyStreamlitTheme(spec.config, theme)\n    } else if (spec.usermeta?.embedOptions?.theme === \"streamlit\") {\n      spec.config = applyStreamlitTheme(spec.config, theme)\n      // Remove the theme from the usermeta so it doesn't get picked up by vega embed.\n      spec.usermeta.embedOptions.theme = undefined\n    } else {\n      // Apply minor theming improvements to work better with Streamlit\n      spec.config = applyThemeDefaults(spec.config, theme)\n    }\n\n    if (isFullScreen) {\n      spec.width = width\n      spec.height = height\n\n      if (\"vconcat\" in spec) {\n        spec.vconcat.forEach((child: any) => {\n          child.width = width\n        })\n      }\n    } else if (useContainerWidth) {\n      spec.width = width\n\n      if (\"vconcat\" in spec) {\n        spec.vconcat.forEach((child: any) => {\n          child.width = width\n        })\n      }\n    }\n\n    if (!spec.padding) {\n      spec.padding = {}\n    }\n\n    if (isNullOrUndefined(spec.padding.bottom)) {\n      spec.padding.bottom = BOTTOM_PADDING\n    }\n\n    if (spec.datasets) {\n      throw new Error(\"Datasets should not be passed as part of the spec\")\n    }\n\n    if (el.selectionMode.length > 0) {\n      prepareSpecForSelections(spec)\n    }\n    return spec\n  }\n\n  /**\n   * Update the dataset in the Vega view. This method tried to minimize changes\n   * by automatically creating and applying diffs.\n   *\n   * @param name The name of the dataset.\n   * @param prevData The dataset before the update.\n   * @param data The dataset to use for the update.\n   */\n  private updateData(\n    name: string,\n    prevData: Quiver | null,\n    data: Quiver | null\n  ): void {\n    if (!this.vegaView) {\n      throw new Error(\"Chart has not been drawn yet\")\n    }\n\n    if (!data || data.data.numRows === 0) {\n      // The new data is empty, so we remove the dataset from the\n      // chart view if the named dataset exists.\n      try {\n        this.vegaView.remove(name, vega.truthy)\n      } finally {\n        return\n      }\n    }\n\n    if (!prevData || prevData.data.numRows === 0) {\n      // The previous data was empty, so we just insert the new data.\n      this.vegaView.insert(name, getDataArray(data))\n      return\n    }\n\n    const { dataRows: prevNumRows, dataColumns: prevNumCols } =\n      prevData.dimensions\n    const { dataRows: numRows, dataColumns: numCols } = data.dimensions\n\n    // Check if dataframes have same \"shape\" but the new one has more rows.\n    if (\n      dataIsAnAppendOfPrev(\n        prevData,\n        prevNumRows,\n        prevNumCols,\n        data,\n        numRows,\n        numCols\n      )\n    ) {\n      if (prevNumRows < numRows) {\n        // Insert the new rows.\n        this.vegaView.insert(name, getDataArray(data, prevNumRows))\n      }\n    } else {\n      // Clean the dataset and insert from scratch.\n      this.vegaView.data(name, getDataArray(data))\n      logMessage(\n        `Had to clear the ${name} dataset before inserting data through Vega view.`\n      )\n    }\n  }\n\n  /**\n   * Configure the selections for this chart if the chart has selections enabled.\n   */\n  private maybeConfigureSelections = (): void => {\n    if (this.vegaView === undefined) {\n      // This check is mainly to make the type checker happy.\n      // this.vegaView is guaranteed to be defined here.\n      return\n    }\n\n    const { widgetMgr, element } = this.props\n\n    if (!element?.id || element.selectionMode.length === 0) {\n      // To configure selections, it needs to be activated and\n      // the element ID must be set.\n      return\n    }\n\n    // Try to load the previous state of the chart from the element state.\n    // This is useful to restore the selection state when the component is re-mounted\n    // or when its put into fullscreen mode.\n    const viewState = widgetMgr.getElementState(\n      this.props.element.id,\n      \"viewState\"\n    )\n    if (notNullOrUndefined(viewState)) {\n      try {\n        this.vegaView = this.vegaView.setState(viewState)\n      } catch (e) {\n        logWarning(\"Failed to restore view state\", e)\n      }\n    }\n\n    // Add listeners for all selection events. Find out more here:\n    // https://vega.github.io/vega/docs/api/view/#view_addSignalListener\n    element.selectionMode.forEach((param, _index) => {\n      this.vegaView?.addSignalListener(\n        param,\n        debounce(DEBOUNCE_TIME_MS, (name: string, value: SignalValue) => {\n          // Store the current chart selection state with the widget manager so that it\n          // can be used for restoring the state when the component unmounted and\n          // created again. This can happen when elements are added before it within\n          // the delta path. The viewState is only stored in the frontend, and not\n          // synced to the backend.\n          const viewState = this.vegaView?.getState({\n            // There are also `signals` data, but I believe its\n            // not relevant for restoring the selection state.\n            data: (name?: string, _operator?: any) => {\n              // Vega lite stores the selection state in a <param name>_store parameter\n              // under `data` that can be retrieved via the getState method.\n              // https://vega.github.io/vega/docs/api/view/#view_getState\n              return element.selectionMode.some(\n                mode => `${mode}_store` === name\n              )\n            },\n            // Don't include subcontext data since it will lead to exceptions\n            // when loading the state.\n            recurse: false,\n          })\n\n          if (notNullOrUndefined(viewState)) {\n            widgetMgr.setElementState(element.id, \"viewState\", viewState)\n          }\n\n          // If selection encodings are correctly specified, vega-lite will return\n          // a list of selected points within the vlPoint.or property:\n          // https://github.com/vega/altair/blob/f1b4e2c84da2fba220022c8a285cc8280f824ed8/altair/utils/selection.py#L50\n          // We want to just return this list of points instead of the entire object\n          // since the other parts of the selection object are not useful.\n          let processedSelection = value\n          if (\"vlPoint\" in value && \"or\" in value.vlPoint) {\n            processedSelection = value.vlPoint.or\n          }\n\n          // Get the current widget state\n          const currentWidgetState = JSON.parse(\n            widgetMgr.getStringValue(element as WidgetInfo) || \"{}\"\n          )\n\n          // Update the component-internal selection state\n          const updatedSelections = {\n            selection: {\n              ...(currentWidgetState?.selection || {}),\n              [name]: processedSelection || {},\n            } as VegaLiteState,\n          }\n\n          // Update the widget state if the selection state has changed\n          // compared to the last update. This selection state will be synced\n          // with the backend.\n          if (!isEqual(currentWidgetState, updatedSelections)) {\n            widgetMgr.setStringValue(\n              element as WidgetInfo,\n              JSON.stringify(updatedSelections),\n              {\n                fromUi: true,\n              },\n              this.props.fragmentId\n            )\n          }\n        })\n      )\n    })\n\n    /**\n     * Callback to reset the selection and update the widget state.\n     * This might also send the empty selection state to the backend.\n     */\n    const reset = (): void => {\n      const emptySelectionState: VegaLiteState = {\n        selection: {},\n      }\n      // Initialize all parameters defined in the selectionMode with an empty object.\n      this.props.element.selectionMode.forEach(param => {\n        emptySelectionState.selection[param] = {}\n      })\n      const currentWidgetStateStr = widgetMgr.getStringValue(\n        element as WidgetInfo\n      )\n      const currentWidgetState = currentWidgetStateStr\n        ? JSON.parse(currentWidgetStateStr)\n        : // If there wasn't any selection yet, the selection state\n          // is assumed to be empty.\n          emptySelectionState\n\n      if (!isEqual(currentWidgetState, emptySelectionState)) {\n        this.props.widgetMgr?.setStringValue(\n          this.props.element as WidgetInfo,\n          JSON.stringify(emptySelectionState),\n          {\n            fromUi: true,\n          },\n          this.props.fragmentId\n        )\n      }\n    }\n\n    // Add the form clear listener if we are in a form (formId defined)\n    if (this.props.element.formId) {\n      this.formClearHelper.manageFormClearListener(\n        this.props.widgetMgr,\n        this.props.element.formId,\n        reset\n      )\n    }\n  }\n\n  /**\n   * Create a new Vega view and add the data.\n   */\n  private async createView(): Promise<void> {\n    logMessage(\"Creating a new Vega view.\")\n\n    if (!this.element) {\n      throw Error(\"Element missing.\")\n    }\n\n    // Finalize the previous view so it can be garbage collected.\n    this.finalizeView()\n\n    const { element } = this.props\n    const spec = this.generateSpec()\n    const options = {\n      // Adds interpreter support for Vega expressions that is compliant with CSP\n      ast: true,\n      expr: expressionInterpreter,\n\n      // Disable default styles so that vega doesn't inject <style> tags in the\n      // DOM. We set these styles manually for finer control over them and to\n      // avoid inlining styles.\n      tooltip: { disableDefaultStyle: true },\n      defaultStyle: false,\n      forceActionsMenu: true,\n    }\n\n    const { vgSpec, view, finalize } = await embed(this.element, spec, options)\n\n    this.vegaView = view\n\n    this.maybeConfigureSelections()\n\n    this.vegaFinalizer = finalize\n\n    const datasets = getDataArrays(element)\n\n    // Heuristic to determine the default dataset name.\n    const datasetNames = datasets ? Object.keys(datasets) : []\n    if (datasetNames.length === 1) {\n      const [datasetName] = datasetNames\n      this.defaultDataName = datasetName\n    } else if (datasetNames.length === 0 && vgSpec.data) {\n      this.defaultDataName = DEFAULT_DATA_NAME\n    }\n\n    const dataObj = getInlineData(element)\n    if (dataObj) {\n      view.insert(this.defaultDataName, dataObj)\n    }\n    if (datasets) {\n      for (const [name, data] of Object.entries(datasets)) {\n        view.insert(name, data)\n      }\n    }\n\n    await view.runAsync()\n\n    // Fix bug where the \"...\" menu button overlaps with charts where width is\n    // set to -1 on first load.\n    this.vegaView.resize().runAsync()\n  }\n\n  public render(): JSX.Element {\n    if (this.state.error) {\n      // eslint-disable-next-line @typescript-eslint/no-throw-literal\n      throw this.state.error\n    }\n    // Create the container inside which Vega draws its content.\n    // To style the Vega tooltip, we need to apply global styles since\n    // the tooltip element is drawn outside of this component.\n    return (\n      <StyledToolbarElementContainer\n        width={this.props.width}\n        height={this.props.height}\n        useContainerWidth={this.props.element.useContainerWidth}\n      >\n        <Toolbar\n          target={StyledToolbarElementContainer}\n          isFullScreen={this.props.isFullScreen}\n          onExpand={this.props.expand}\n          onCollapse={this.props.collapse}\n          disableFullscreenMode={this.props.disableFullscreenMode}\n        ></Toolbar>\n        <Global styles={StyledVegaLiteChartTooltips} />\n        <StyledVegaLiteChartContainer\n          data-testid=\"stVegaLiteChart\"\n          className=\"stVegaLiteChart\"\n          useContainerWidth={this.props.element.useContainerWidth}\n          isFullScreen={this.props.isFullScreen}\n          ref={c => {\n            this.element = c\n          }}\n        />\n      </StyledToolbarElementContainer>\n    )\n  }\n}\n\nconst ArrowVegaLiteChartWrapper = (props: Props): React.ReactElement => {\n  const theme = useTheme()\n  const {\n    expanded: isFullScreen,\n    width,\n    height,\n    expand,\n    collapse,\n  } = useRequiredContext(ElementFullscreenContext)\n\n  return (\n    <ArrowVegaLiteChart\n      theme={theme}\n      isFullScreen={isFullScreen}\n      {...props}\n      height={height}\n      width={isFullScreen ? width : props.width}\n      expand={expand}\n      collapse={collapse}\n    />\n  )\n}\n\nexport default withFullScreenWrapper(ArrowVegaLiteChartWrapper)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useEffect } from \"react\"\n\nimport { SignalConnection } from \"typed-signals\"\n\nimport {\n  isValidFormId,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\n\nexport class FormClearHelper {\n  private formClearListener?: SignalConnection\n\n  private lastWidgetMgr?: WidgetStateManager\n\n  private lastFormId?: string\n\n  /**\n   * Register the listener that will be called when the widget's form is cleared.\n   * This should be called in the `render` function of every class-based widget\n   * element - it mimics the behavior of a `useEffect` hook, and ensures that\n   * subscription and unsubscription happen correctly.\n   *\n   * Hooks-based widgets can just use `useEffect` and call\n   * `widgetMgr.addFormClearedListener` directly. Or just use the convenient\n   * hook `useFormClearHelper`, below.\n   */\n  public manageFormClearListener(\n    widgetMgr: WidgetStateManager,\n    formId: string,\n    listener: () => void\n  ): void {\n    // If we're already subscribed and our params haven't changed, early-out.\n    if (\n      notNullOrUndefined(this.formClearListener) &&\n      this.lastWidgetMgr === widgetMgr &&\n      this.lastFormId === formId\n    ) {\n      return\n    }\n\n    // Close our previous subscription, if we had one.\n    this.disconnect()\n\n    // If we're not part of a form, there's nothing to do.\n    if (!isValidFormId(formId)) {\n      return\n    }\n\n    // Make the new subscription.\n    this.formClearListener = widgetMgr.addFormClearedListener(formId, listener)\n    this.lastWidgetMgr = widgetMgr\n    this.lastFormId = formId\n  }\n\n  /**\n   * Disconnect from the form-clear signal, if we're connected.\n   * This should be called from the `componentWillUnmount` function of every\n   * element that uses it.\n   */\n  public disconnect(): void {\n    this.formClearListener?.disconnect()\n    this.formClearListener = undefined\n    this.lastWidgetMgr = undefined\n    this.lastFormId = undefined\n  }\n}\n\ninterface FormElementProtoInterface {\n  formId: string\n}\n\ninterface FormClearHelperArgs {\n  element: FormElementProtoInterface\n  widgetMgr: WidgetStateManager\n  onFormCleared: () => void\n}\n\nexport function useFormClearHelper({\n  element,\n  widgetMgr,\n  onFormCleared,\n}: FormClearHelperArgs): void {\n  useEffect(() => {\n    if (!isValidFormId(element.formId)) {\n      return\n    }\n\n    const formClearListener = widgetMgr.addFormClearedListener(\n      element.formId,\n      onFormCleared\n    )\n\n    return () => {\n      formClearListener.disconnect()\n    }\n  }, [element, widgetMgr, onFormCleared])\n}\n"],"names":["MagicFields","DATAFRAME_INDEX","SUPPORTED_INDEX_TYPES","Set","IndexTypeName","DatetimeIndex","Float64Index","Int64Index","RangeIndex","UInt64Index","getDataSets","el","_el$datasets","datasets","length","forEach","x","name","hasName","data","getDataArray","dataProto","startIndex","arguments","undefined","isEmpty","dataArr","dataRows","rows","dataColumns","cols","dimensions","indexType","Quiver","getTypeName","types","index","hasSupportedIndex","has","rowIndex","row","indexValue","getIndexValue","Number","colIndex","dataValue","getDataValue","dataType","typeName","Date","isFinite","startsWith","offset","getTimezoneOffset","columns","valueOf","push","applyStreamlitTheme","config","theme","streamlitTheme","font","genericFonts","bodyFont","background","colors","bgColor","fieldTitle","autosize","type","contains","title","align","anchor","color","headingColor","titleFontStyle","fontWeight","fontWeights","bold","fontSize","fontSizes","mdPx","orient","header","titleFontWeight","normal","titleFontSize","titleColor","getGray70","labelFontSize","twoSmPx","labelFontWeight","labelColor","labelFontStyle","axis","smPx","ticks","gridColor","getGray30","domain","domainWidth","domainColor","labelFlush","labelFlushOffset","labelBound","labelLimit","titlePadding","convertRemToPx","spacing","lg","labelPadding","labelSeparation","twoXS","labelOverlap","legend","columnPadding","sm","rowPadding","padding","symbolStrokeWidth","range","category","getCategoricalColorsArray","diverging","getDivergingColorsArray","ramp","getSequentialColorsArray","heatmap","view","strokeWidth","stroke","continuousHeight","continuousWidth","concat","facet","mark","tooltip","getBlue80","bar","binSpacing","discreteBandSize","band","axisDiscrete","grid","axisXPoint","axisTemporal","axisXBand","mergeWith","_","b","Array","isArray","StyledVegaLiteChartTooltips","visibility","position","fontFamily","bodyText","border","sizes","borderWidth","borderColor","backgroundColor","transparentize","twoSm","boxShadow","maxWidth","maxChartTooltipWidth","xs","md","borderRadius","radii","default","zIndex","zIndices","vegaTooltips","h2","marginTop","none","marginBottom","td","table","borderSpacing","tr","overflow","textOverflow","paddingTop","threeXS","paddingBottom","textAlign","fadedText60","whiteSpace","paddingRight","display","WebkitLineClamp","WebkitBoxOrient","lineClamp","wordWrap","StyledVegaLiteChartContainer","_styled","target","_ref","useContainerWidth","isFullScreen","width","height","boxSizing","opacity","transition","flexDirection","popupMenu","top","iconSizes","right","fadedText10","animationDuration","animationName","animationTimingFunction","a","margin","twoXL","textDecoration","secondaryBg","content","from","transform","to","summary","listStyle","menuButton","cursor","lineHeight","darkenedBgMix25","svg","DEFAULT_DATA_NAME","ArrowVegaLiteChart","PureComponent","constructor","vegaView","vegaFinalizer","defaultDataName","element","formClearHelper","FormClearHelper","state","error","finalizeView","this","generateSpec","_spec$usermeta","_spec$usermeta$embedO","props","spec","JSON","parse","vegaLiteTheme","usermeta","embedOptions","themeFonts","labelFont","titleFont","themeDefaults","subtitleColor","merge","applyThemeDefaults","vconcat","child","isNullOrUndefined","bottom","Error","selectionMode","params","param","includes","select","encodings","Object","keys","encoding","prepareSpecForSelections","maybeConfigureSelections","widgetMgr","id","viewState","getElementState","notNullOrUndefined","setState","e","logWarning","_index","_this$vegaView","addSignalListener","debounce","value","_this$vegaView2","getState","_operator","some","mode","recurse","setElementState","processedSelection","vlPoint","or","currentWidgetState","getStringValue","updatedSelections","selection","isEqual","setStringValue","stringify","fromUi","fragmentId","reset","emptySelectionState","currentWidgetStateStr","_this$props$widgetMgr","formId","manageFormClearListener","componentDidMount","createView","ensureError","componentWillUnmount","componentDidUpdate","prevProps","prevElement","prevTheme","prevSpec","logMessage","prevData","updateData","prevDataSets","dataSets","dataset","entries","datasetName","prevDataset","hasOwnProperty","resize","runAsync","numRows","remove","vega","insert","prevNumRows","prevNumCols","numCols","c","r","dataIsAnAppendOfPrev","options","ast","expr","expressionInterpreter","disableDefaultStyle","defaultStyle","forceActionsMenu","vgSpec","finalize","embed","datasetArrays","getDataArrays","datasetNames","dataObj","getInlineData","render","_jsxs","StyledToolbarElementContainer","children","_jsx","Toolbar","onExpand","expand","onCollapse","collapse","disableFullscreenMode","Global","styles","className","ref","withFullScreenWrapper","useTheme","expanded","useRequiredContext","ElementFullscreenContext","formClearListener","lastWidgetMgr","lastFormId","listener","disconnect","isValidFormId","addFormClearedListener","_this$formClearListen","useFormClearHelper","onFormCleared","useEffect"],"sourceRoot":""}