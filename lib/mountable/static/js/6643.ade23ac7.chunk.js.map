{"version":3,"file":"static/js/6643.ade23ac7.chunk.js","mappings":"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","sources":["../../../streamlit/frontend/lib/src/components/shared/InputInstructions/styled-components.ts","../../../streamlit/frontend/lib/src/components/shared/InputInstructions/InputInstructions.tsx","../../../streamlit/frontend/lib/src/components/widgets/Form/FormClearHelper.ts","../../../streamlit/frontend/lib/src/components/widgets/NumberInput/styled-components.ts","../../../streamlit/frontend/lib/src/components/widgets/NumberInput/NumberInput.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\nimport { keyframes } from \"@emotion/react\"\n\nconst blink = keyframes`\n  50% {\n    color: rgba(0, 0, 0, 0);\n  }\n`\n\nexport interface StyledMessageProps {\n  includeDot: boolean\n  shouldBlink: boolean\n}\n\nexport const StyledMessage = styled.span<StyledMessageProps>(\n  ({ includeDot, shouldBlink, theme }) => ({\n    ...(includeDot\n      ? {\n          \"&::before\": {\n            opacity: 1,\n            content: '\"•\"',\n            animation: \"none\",\n            color: theme.colors.gray,\n            margin: \"0 5px\",\n          },\n        }\n      : {}),\n    ...(shouldBlink\n      ? {\n          color: theme.colors.red,\n          animationName: `${blink}`,\n          animationDuration: \"0.5s\",\n          animationIterationCount: 5,\n        }\n      : {}),\n  })\n)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\n\nimport { isFromMac } from \"@streamlit/lib/src/util/utils\"\nimport { StyledWidgetInstructions } from \"@streamlit/lib/src/components/widgets/BaseWidget\"\n\nimport { StyledMessage } from \"./styled-components\"\n\nexport interface Props {\n  dirty: boolean\n  value: string\n  inForm: boolean\n  maxLength?: number\n  className?: string\n  type?: \"multiline\" | \"single\" | \"chat\"\n  allowEnterToSubmit?: boolean\n}\n\nconst InputInstructions = ({\n  dirty,\n  value,\n  inForm,\n  maxLength,\n  className,\n  type = \"single\",\n  allowEnterToSubmit = true,\n}: Props): ReactElement => {\n  const messages: ReactElement[] = []\n  const addMessage = (text: string, shouldBlink = false): void => {\n    messages.push(\n      <StyledMessage\n        key={messages.length}\n        includeDot={messages.length > 0}\n        shouldBlink={shouldBlink}\n      >\n        {text}\n      </StyledMessage>\n    )\n  }\n\n  // Show enter instruction if not a form or form allows Enter to submit\n  if (dirty && allowEnterToSubmit) {\n    const toSubmitFormOrApplyText = inForm ? \"submit form\" : \"apply\"\n    if (type === \"multiline\") {\n      const commandKey = isFromMac() ? \"⌘\" : \"Ctrl\"\n      addMessage(`Press ${commandKey}+Enter to ${toSubmitFormOrApplyText}`)\n    } else if (type === \"single\") {\n      addMessage(`Press Enter to ${toSubmitFormOrApplyText}`)\n    }\n  }\n\n  if (maxLength && (type !== \"chat\" || dirty)) {\n    addMessage(\n      `${value.length}/${maxLength}`,\n      dirty && value.length >= maxLength\n    )\n  }\n\n  return (\n    <StyledWidgetInstructions\n      data-testid=\"InputInstructions\"\n      className={className}\n    >\n      {messages}\n    </StyledWidgetInstructions>\n  )\n}\n\nexport default InputInstructions\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useEffect } from \"react\"\n\nimport { SignalConnection } from \"typed-signals\"\n\nimport {\n  isValidFormId,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\n\nexport class FormClearHelper {\n  private formClearListener?: SignalConnection\n\n  private lastWidgetMgr?: WidgetStateManager\n\n  private lastFormId?: string\n\n  /**\n   * Register the listener that will be called when the widget's form is cleared.\n   * This should be called in the `render` function of every class-based widget\n   * element - it mimics the behavior of a `useEffect` hook, and ensures that\n   * subscription and unsubscription happen correctly.\n   *\n   * Hooks-based widgets can just use `useEffect` and call\n   * `widgetMgr.addFormClearedListener` directly. Or just use the convenient\n   * hook `useFormClearHelper`, below.\n   */\n  public manageFormClearListener(\n    widgetMgr: WidgetStateManager,\n    formId: string,\n    listener: () => void\n  ): void {\n    // If we're already subscribed and our params haven't changed, early-out.\n    if (\n      notNullOrUndefined(this.formClearListener) &&\n      this.lastWidgetMgr === widgetMgr &&\n      this.lastFormId === formId\n    ) {\n      return\n    }\n\n    // Close our previous subscription, if we had one.\n    this.disconnect()\n\n    // If we're not part of a form, there's nothing to do.\n    if (!isValidFormId(formId)) {\n      return\n    }\n\n    // Make the new subscription.\n    this.formClearListener = widgetMgr.addFormClearedListener(formId, listener)\n    this.lastWidgetMgr = widgetMgr\n    this.lastFormId = formId\n  }\n\n  /**\n   * Disconnect from the form-clear signal, if we're connected.\n   * This should be called from the `componentWillUnmount` function of every\n   * element that uses it.\n   */\n  public disconnect(): void {\n    this.formClearListener?.disconnect()\n    this.formClearListener = undefined\n    this.lastWidgetMgr = undefined\n    this.lastFormId = undefined\n  }\n}\n\ninterface FormElementProtoInterface {\n  formId: string\n}\n\ninterface FormClearHelperArgs {\n  element: FormElementProtoInterface\n  widgetMgr: WidgetStateManager\n  onFormCleared: () => void\n}\n\nexport function useFormClearHelper({\n  element,\n  widgetMgr,\n  onFormCleared,\n}: FormClearHelperArgs): void {\n  useEffect(() => {\n    if (!isValidFormId(element.formId)) {\n      return\n    }\n\n    const formClearListener = widgetMgr.addFormClearedListener(\n      element.formId,\n      onFormCleared\n    )\n\n    return () => {\n      formClearListener.disconnect()\n    }\n  }, [element, widgetMgr, onFormCleared])\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nconst CONTROLS_WIDTH = 32 // px\n\nexport const StyledInputContainer = styled.div(({ theme }) => ({\n  display: \"flex\",\n  flexDirection: \"row\",\n  flexWrap: \"nowrap\",\n  alignItems: \"center\",\n  height: theme.sizes.minElementHeight,\n  // Mimic the baseweb's borders here, so we can apply the focus style\n  // to the entire container and not only the input itself\n  borderWidth: theme.sizes.borderWidth,\n  borderStyle: \"solid\",\n  // Mimic the logic from createThemeOverrides.\n  borderColor:\n    theme.colors.widgetBorderColor ||\n    theme.colors.widgetBackgroundColor ||\n    theme.colors.bgColor,\n  transitionDuration: \"200ms\",\n  transitionProperty: \"border\",\n  transitionTimingFunction: \"cubic-bezier(0.2, 0.8, 0.4, 1)\",\n  borderRadius: theme.radii.default,\n  overflow: \"hidden\", // Fix rounded corner being overlayed with corner of internal input.\n\n  \"&.focused\": {\n    borderColor: theme.colors.primary,\n  },\n\n  input: {\n    MozAppearance: \"textfield\",\n    \"&::-webkit-inner-spin-button, &::-webkit-outer-spin-button\": {\n      WebkitAppearance: \"none\",\n      margin: theme.spacing.none,\n    },\n  },\n}))\n\nexport const StyledInputControls = styled.div({\n  display: \"flex\",\n  flexDirection: \"row\",\n  alignSelf: \"stretch\",\n})\n\nexport const StyledInputControl = styled.button(({ theme }) => ({\n  margin: theme.spacing.none,\n  border: \"none\",\n  height: theme.sizes.full,\n  display: \"flex\",\n  alignItems: \"center\",\n  width: `${CONTROLS_WIDTH}px`,\n  justifyContent: \"center\",\n  color: theme.colors.bodyText,\n  transition: \"color 300ms, backgroundColor 300ms\",\n  // Mimic the logic from createThemeOverrides.\n  backgroundColor:\n    theme.colors.widgetBackgroundColor || theme.colors.secondaryBg,\n  \"&:hover:enabled, &:focus:enabled\": {\n    color: theme.colors.white,\n    backgroundColor: theme.colors.primary,\n    transition: \"none\",\n    outline: \"none\",\n  },\n  \"&:active\": {\n    outline: \"none\",\n    border: \"none\",\n  },\n  \"&:last-of-type\": {\n    borderTopRightRadius: theme.radii.default,\n    borderBottomRightRadius: theme.radii.default,\n  },\n  \"&:disabled\": {\n    cursor: \"not-allowed\",\n    color: theme.colors.fadedText40,\n  },\n}))\n\nexport interface StyledInstructionsContainerProps {\n  // If widget is clearable, the instruction needs to be moved a couple\n  // pixels to the left to avoid overlapping with the clear button.\n  clearable: boolean\n}\n\nexport const StyledInstructionsContainer =\n  styled.div<StyledInstructionsContainerProps>(({ theme, clearable }) => ({\n    position: \"absolute\",\n    marginRight: theme.spacing.twoXS,\n    left: 0,\n    right: `${CONTROLS_WIDTH * 2 + (clearable ? 12 : 0)}px`,\n  }))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\n\nimport { Minus, Plus } from \"@emotion-icons/open-iconic\"\nimport { withTheme } from \"@emotion/react\"\nimport { sprintf } from \"sprintf-js\"\nimport { Input as UIInput } from \"baseui/input\"\nimport uniqueId from \"lodash/uniqueId\"\n\nimport {\n  isInForm,\n  isNullOrUndefined,\n  labelVisibilityProtoValueToEnum,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport { FormClearHelper } from \"@streamlit/lib/src/components/widgets/Form\"\nimport { logWarning } from \"@streamlit/lib/src/util/log\"\nimport { NumberInput as NumberInputProto } from \"@streamlit/lib/src/proto\"\nimport {\n  Source,\n  WidgetStateManager,\n} from \"@streamlit/lib/src/WidgetStateManager\"\nimport TooltipIcon from \"@streamlit/lib/src/components/shared/TooltipIcon\"\nimport { Placement } from \"@streamlit/lib/src/components/shared/Tooltip\"\nimport Icon from \"@streamlit/lib/src/components/shared/Icon\"\nimport InputInstructions from \"@streamlit/lib/src/components/shared/InputInstructions/InputInstructions\"\nimport {\n  StyledWidgetLabelHelp,\n  WidgetLabel,\n} from \"@streamlit/lib/src/components/widgets/BaseWidget\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\n\nimport {\n  StyledInputContainer,\n  StyledInputControl,\n  StyledInputControls,\n  StyledInstructionsContainer,\n} from \"./styled-components\"\n\n/**\n * Return a string property from an element. If the string is\n * null or empty, return undefined instead.\n */\nfunction getNonEmptyString(\n  value: string | null | undefined\n): string | undefined {\n  return isNullOrUndefined(value) || value === \"\" ? undefined : value\n}\n\n/**\n * This function returns the initial value for the NumberInput widget\n * via the widget manager.\n */\nconst getInitialValue = (\n  props: Pick<Props, \"element\" | \"widgetMgr\">\n): number | null => {\n  const isIntData = props.element.dataType === NumberInputProto.DataType.INT\n  const storedValue = isIntData\n    ? props.widgetMgr.getIntValue(props.element)\n    : props.widgetMgr.getDoubleValue(props.element)\n  return storedValue ?? props.element.default ?? null\n}\n\nconst getStep = ({\n  step,\n  dataType,\n}: Pick<NumberInputProto, \"step\" | \"dataType\">): number => {\n  if (step) {\n    return step\n  }\n  if (dataType === NumberInputProto.DataType.INT) {\n    return 1\n  }\n  return 0.01\n}\n\n/**\n * Utilizes the sprintf library to format a number value\n * according to a given format string.\n */\nexport const formatValue = ({\n  value,\n  format,\n  step,\n  dataType,\n}: {\n  value: number | null\n  format?: string | null\n  step?: number\n  dataType: NumberInputProto.DataType\n}): string | null => {\n  if (isNullOrUndefined(value)) {\n    return null\n  }\n\n  let formatString = getNonEmptyString(format)\n\n  if (isNullOrUndefined(formatString) && notNullOrUndefined(step)) {\n    const strStep = step.toString()\n    if (\n      dataType === NumberInputProto.DataType.FLOAT &&\n      step !== 0 &&\n      strStep.includes(\".\")\n    ) {\n      const decimalPlaces = strStep.split(\".\")[1].length\n      formatString = `%0.${decimalPlaces}f`\n    }\n  }\n\n  if (isNullOrUndefined(formatString)) {\n    return value.toString()\n  }\n\n  try {\n    return sprintf(formatString, value)\n  } catch (e) {\n    logWarning(`Error in sprintf(${formatString}, ${value}): ${e}`)\n    return String(value)\n  }\n}\n\nexport const canDecrement = (\n  value: number | null,\n  step: number,\n  min: number\n): boolean => {\n  if (isNullOrUndefined(value)) {\n    return false\n  }\n  return value - step >= min\n}\n\nexport const canIncrement = (\n  value: number | null,\n  step: number,\n  max: number\n): boolean => {\n  if (isNullOrUndefined(value)) {\n    return false\n  }\n  return value + step <= max\n}\n\nexport interface Props {\n  disabled: boolean\n  element: NumberInputProto\n  widgetMgr: WidgetStateManager\n  width: number\n  theme: EmotionTheme\n  fragmentId?: string\n}\n\nexport const NumberInput: React.FC<Props> = ({\n  disabled,\n  element,\n  widgetMgr,\n  width,\n  theme,\n  fragmentId,\n}: Props): ReactElement => {\n  const {\n    dataType: elementDataType,\n    id: elementId,\n    formId: elementFormId,\n    default: elementDefault,\n    format: elementFormat,\n  } = element\n  const min = element.hasMin ? element.min : -Infinity\n  const max = element.hasMax ? element.max : +Infinity\n\n  const [step, setStep] = React.useState<number>(getStep(element))\n  const initialValue = getInitialValue({ element, widgetMgr })\n  const [dirty, setDirty] = React.useState(false)\n  const [value, setValue] = React.useState<number | null>(initialValue)\n  const [formattedValue, setFormattedValue] = React.useState<string | null>(\n    formatValue({ value: initialValue, ...element, step })\n  )\n  const [isFocused, setIsFocused] = React.useState(false)\n  const inputRef = React.useRef<HTMLInputElement | HTMLTextAreaElement>(null)\n  const formClearHelper = React.useRef(new FormClearHelper())\n  const id = React.useRef(uniqueId(\"number_input_\"))\n\n  const canDec = canDecrement(value, step, min)\n  const canInc = canIncrement(value, step, max)\n\n  const inForm = isInForm({ formId: elementFormId })\n  // Allows form submission on Enter & displays Enter instructions\n  const allowFormEnterToSubmit =\n    widgetMgr.allowFormEnterToSubmit(elementFormId)\n\n  // update the step if the props change\n  React.useEffect(() => {\n    setStep(getStep({ step: element.step, dataType: element.dataType }))\n  }, [element.dataType, element.step])\n\n  const commitValue = React.useCallback(\n    ({ value, source }: { value: number | null; source: Source }) => {\n      if (notNullOrUndefined(value) && (min > value || value > max)) {\n        inputRef.current?.reportValidity()\n      } else {\n        const newValue = value ?? elementDefault ?? null\n\n        switch (elementDataType) {\n          case NumberInputProto.DataType.INT:\n            widgetMgr.setIntValue(\n              { id: elementId, formId: elementFormId },\n              newValue,\n              source,\n              fragmentId\n            )\n            break\n          case NumberInputProto.DataType.FLOAT:\n            widgetMgr.setDoubleValue(\n              { id: elementId, formId: elementFormId },\n              newValue,\n              source,\n              fragmentId\n            )\n            break\n          default:\n            throw new Error(\"Invalid data type\")\n        }\n\n        setDirty(false)\n        setValue(newValue)\n        setFormattedValue(\n          formatValue({\n            value: newValue,\n            dataType: elementDataType,\n            format: elementFormat,\n            step,\n          })\n        )\n      }\n    },\n    [\n      min,\n      max,\n      inputRef,\n      widgetMgr,\n      fragmentId,\n      step,\n      elementDataType,\n      elementId,\n      elementFormId,\n      elementDefault,\n      elementFormat,\n    ]\n  )\n\n  const onBlur = (): void => {\n    if (dirty) {\n      commitValue({ value, source: { fromUi: true } })\n    }\n    setIsFocused(false)\n  }\n\n  const onFocus = (): void => {\n    setIsFocused(true)\n  }\n\n  const updateFromProtobuf = (): void => {\n    const { value } = element\n    element.setValue = false\n    setValue(value ?? null)\n    setFormattedValue(formatValue({ value: value ?? null, ...element, step }))\n    commitValue({ value: value ?? null, source: { fromUi: false } })\n  }\n\n  // on component mount, we want to update the value from protobuf if setValue is true, otherwise commit current value\n  React.useEffect(() => {\n    const formClearHelperCopy = formClearHelper.current\n    if (element.setValue) {\n      updateFromProtobuf()\n    } else {\n      commitValue({ value, source: { fromUi: false } })\n    }\n\n    return () => {\n      formClearHelperCopy.disconnect()\n    }\n\n    // I don't want to run this effect on every render, only on mount.\n    // Additionally, it's okay if commitValue changes, because we only call\n    // it once in the beginning anyways.\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, [])\n\n  // update from protobuf whenever component updates if element.setValue is truthy\n  if (element.setValue) {\n    updateFromProtobuf()\n  }\n\n  const clearable = isNullOrUndefined(element.default) && !disabled\n\n  formClearHelper.current.manageFormClearListener(\n    widgetMgr,\n    element.formId,\n    () => {\n      setValue(element.default ?? null)\n      commitValue({ value, source: { fromUi: true } })\n    }\n  )\n\n  const onChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ): void => {\n    const { value } = e.target\n\n    if (value === \"\") {\n      setDirty(true)\n      setValue(null)\n      setFormattedValue(null)\n    } else {\n      let numValue: number\n\n      if (element.dataType === NumberInputProto.DataType.INT) {\n        numValue = parseInt(value, 10)\n      } else {\n        numValue = parseFloat(value)\n      }\n\n      setDirty(true)\n      setValue(numValue)\n      setFormattedValue(value)\n    }\n  }\n\n  const increment = React.useCallback(() => {\n    if (canInc) {\n      setDirty(true)\n      commitValue({ value: (value ?? min) + step, source: { fromUi: true } })\n    }\n  }, [value, min, step, canInc])\n\n  const decrement = React.useCallback(() => {\n    if (canDec) {\n      setDirty(true)\n      commitValue({ value: (value ?? max) - step, source: { fromUi: true } })\n    }\n  }, [value, max, step, canDec])\n\n  const onKeyDown = React.useCallback(\n    (e: React.KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n      const { key } = e\n\n      switch (key) {\n        case \"ArrowUp\":\n          e.preventDefault()\n          increment()\n          break\n        case \"ArrowDown\":\n          e.preventDefault()\n          decrement()\n          break\n        default:\n      }\n    },\n    [increment, decrement]\n  )\n\n  const onKeyPress = React.useCallback(\n    (e: React.KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n      if (e.key === \"Enter\") {\n        if (dirty) {\n          commitValue({ value, source: { fromUi: true } })\n        }\n        if (allowFormEnterToSubmit) {\n          widgetMgr.submitForm(elementFormId, fragmentId)\n        }\n      }\n    },\n    [\n      dirty,\n      value,\n      commitValue,\n      widgetMgr,\n      elementFormId,\n      fragmentId,\n      allowFormEnterToSubmit,\n    ]\n  )\n\n  return (\n    <div\n      className=\"stNumberInput\"\n      data-testid=\"stNumberInput\"\n      style={{ width }}\n    >\n      <WidgetLabel\n        label={element.label}\n        disabled={disabled}\n        labelVisibility={labelVisibilityProtoValueToEnum(\n          element.labelVisibility?.value\n        )}\n        htmlFor={id.current}\n      >\n        {element.help && (\n          <StyledWidgetLabelHelp>\n            <TooltipIcon\n              content={element.help}\n              placement={Placement.TOP_RIGHT}\n            />\n          </StyledWidgetLabelHelp>\n        )}\n      </WidgetLabel>\n      <StyledInputContainer\n        className={isFocused ? \"focused\" : \"\"}\n        data-testid=\"stNumberInputContainer\"\n      >\n        <UIInput\n          type=\"number\"\n          inputRef={inputRef}\n          value={formattedValue ?? \"\"}\n          placeholder={element.placeholder}\n          onBlur={() => onBlur()}\n          onFocus={() => onFocus()}\n          onChange={e => onChange(e)}\n          onKeyPress={e => onKeyPress(e)}\n          onKeyDown={e => onKeyDown(e)}\n          clearable={clearable}\n          clearOnEscape={clearable}\n          disabled={disabled}\n          aria-label={element.label}\n          id={id.current}\n          overrides={{\n            ClearIcon: {\n              props: {\n                overrides: {\n                  Svg: {\n                    style: {\n                      color: theme.colors.darkGray,\n                      // Since the close icon is an SVG, and we can't control its viewbox nor its attributes,\n                      // Let's use a scale transform effect to make it bigger.\n                      // The width property only enlarges its bounding box, so it's easier to click.\n                      transform: \"scale(1.4)\",\n                      width: theme.spacing.twoXL,\n                      marginRight: \"-1.25em\",\n                      \":hover\": {\n                        fill: theme.colors.bodyText,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n            Input: {\n              props: {\n                \"data-testid\": \"stNumberInputField\",\n                step: step,\n                min: min,\n                max: max,\n              },\n              style: {\n                lineHeight: theme.lineHeights.inputWidget,\n                // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n                paddingRight: theme.spacing.sm,\n                paddingLeft: theme.spacing.sm,\n                paddingBottom: theme.spacing.sm,\n                paddingTop: theme.spacing.sm,\n              },\n            },\n            InputContainer: {\n              style: () => ({\n                borderTopRightRadius: 0,\n                borderBottomRightRadius: 0,\n              }),\n            },\n            Root: {\n              style: () => ({\n                // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n                borderTopRightRadius: 0,\n                borderBottomRightRadius: 0,\n                borderLeftWidth: 0,\n                borderRightWidth: 0,\n                borderTopWidth: 0,\n                borderBottomWidth: 0,\n              }),\n            },\n          }}\n        />\n        {/* We only want to show the increment/decrement controls when there is sufficient room to display the value and these controls. */}\n        {width > theme.breakpoints.hideNumberInputControls && (\n          <StyledInputControls>\n            <StyledInputControl\n              data-testid=\"stNumberInputStepDown\"\n              onClick={decrement}\n              disabled={!canDec || disabled}\n              tabIndex={-1}\n            >\n              <Icon\n                content={Minus}\n                size=\"xs\"\n                color={canDec ? \"inherit\" : \"disabled\"}\n              />\n            </StyledInputControl>\n            <StyledInputControl\n              data-testid=\"stNumberInputStepUp\"\n              onClick={increment}\n              disabled={!canInc || disabled}\n              tabIndex={-1}\n            >\n              <Icon\n                content={Plus}\n                size=\"xs\"\n                color={canInc ? \"inherit\" : \"disabled\"}\n              />\n            </StyledInputControl>\n          </StyledInputControls>\n        )}\n      </StyledInputContainer>\n      {/* Hide the \"Please enter to apply\" text in small widget sizes */}\n      {width > theme.breakpoints.hideWidgetDetails && (\n        <StyledInstructionsContainer clearable={clearable}>\n          <InputInstructions\n            dirty={dirty}\n            value={formattedValue ?? \"\"}\n            inForm={inForm}\n            allowEnterToSubmit={allowFormEnterToSubmit || !inForm}\n          />\n        </StyledInstructionsContainer>\n      )}\n    </div>\n  )\n}\n\nexport default withTheme(NumberInput)\n"],"names":["blink","keyframes","StyledMessage","_styled","target","_ref","includeDot","shouldBlink","theme","opacity","content","animation","color","colors","gray","margin","red","animationName","animationDuration","animationIterationCount","dirty","value","inForm","maxLength","className","type","allowEnterToSubmit","messages","addMessage","text","arguments","length","undefined","push","_jsx","children","toSubmitFormOrApplyText","isFromMac","StyledWidgetInstructions","FormClearHelper","constructor","formClearListener","lastWidgetMgr","lastFormId","manageFormClearListener","widgetMgr","formId","listener","notNullOrUndefined","this","disconnect","isValidFormId","addFormClearedListener","_this$formClearListen","useFormClearHelper","element","onFormCleared","useEffect","StyledInputContainer","display","flexDirection","flexWrap","alignItems","height","sizes","minElementHeight","borderWidth","borderStyle","borderColor","widgetBorderColor","widgetBackgroundColor","bgColor","transitionDuration","transitionProperty","transitionTimingFunction","borderRadius","radii","default","overflow","primary","input","MozAppearance","WebkitAppearance","spacing","none","StyledInputControls","name","styles","StyledInputControl","_ref2","border","full","width","justifyContent","bodyText","transition","backgroundColor","secondaryBg","white","outline","borderTopRightRadius","borderBottomRightRadius","cursor","fadedText40","StyledInstructionsContainer","_ref3","clearable","position","marginRight","twoXS","left","right","CONTROLS_WIDTH","getStep","step","dataType","NumberInputProto","formatValue","format","isNullOrUndefined","formatString","getNonEmptyString","strStep","toString","includes","split","sprintf","e","logWarning","String","withTheme","_element$labelVisibil","disabled","fragmentId","elementDataType","id","elementId","elementFormId","elementDefault","elementFormat","min","hasMin","Infinity","max","hasMax","setStep","React","initialValue","props","_ref5","storedValue","getIntValue","getDoubleValue","getInitialValue","setDirty","setValue","formattedValue","setFormattedValue","isFocused","setIsFocused","inputRef","formClearHelper","uniqueId","canDec","canDecrement","canInc","canIncrement","isInForm","allowFormEnterToSubmit","commitValue","_ref4","source","_inputRef$current","current","reportValidity","_ref6","newValue","setIntValue","setDoubleValue","Error","updateFromProtobuf","fromUi","formClearHelperCopy","_element$default","increment","decrement","onKeyDown","key","preventDefault","onKeyPress","submitForm","_jsxs","style","WidgetLabel","label","labelVisibility","labelVisibilityProtoValueToEnum","htmlFor","help","StyledWidgetLabelHelp","TooltipIcon","placement","Placement","UIInput","placeholder","onBlur","onFocus","onChange","numValue","parseInt","parseFloat","clearOnEscape","overrides","ClearIcon","Svg","darkGray","transform","twoXL","fill","Input","lineHeight","lineHeights","inputWidget","paddingRight","sm","paddingLeft","paddingBottom","paddingTop","InputContainer","Root","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth","breakpoints","hideNumberInputControls","onClick","tabIndex","Icon","Minus","size","Plus","hideWidgetDetails","InputInstructions"],"sourceRoot":""}