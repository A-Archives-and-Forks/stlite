{"version":3,"file":"static/js/517.abb8a0df.chunk.js","mappings":"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","sources":["../../../streamlit/frontend/lib/src/components/elements/PlotlyChart/CustomTheme.tsx","../../../streamlit/frontend/lib/src/components/elements/PlotlyChart/PlotlyChart.tsx","../../../streamlit/frontend/lib/src/components/shared/ElementFullscreen/ElementFullscreenContext.tsx","../../../streamlit/frontend/lib/src/components/shared/FullScreenWrapper/styled-components.tsx","../../../streamlit/frontend/lib/src/components/shared/ElementFullscreen/ElementFullscreenWrapper.tsx","../../../streamlit/frontend/lib/src/components/shared/ElementFullscreen/useFullscreen.tsx","../../../streamlit/frontend/lib/src/components/shared/FullScreenWrapper/withFullScreenWrapper.tsx","../../../streamlit/frontend/lib/src/components/widgets/Form/FormClearHelper.ts","../../../streamlit/frontend/lib/src/hooks/useRequiredContext.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport merge from \"lodash/merge\"\n\nimport {\n  convertRemToPx,\n  EmotionTheme,\n  getBlue80,\n  getCategoricalColorsArray,\n  getDecreasingRed,\n  getDivergingColorsArray,\n  getGray30,\n  getGray70,\n  getGray90,\n  getIncreasingGreen,\n  getSequentialColorsArray,\n} from \"@streamlit/lib/src/theme\"\nimport { ensureError } from \"@streamlit/lib/src/util/ErrorHandling\"\nimport { logError } from \"@streamlit/lib/src/util/log\"\n\n/**\n * This applies general layout changes to things such as x axis,\n * y axis, legends, titles, grid changes, background, etc.\n * @param layout - spec.layout.template.layout\n * @param theme - Theme from useTheme()\n */\nexport function applyStreamlitThemeTemplateLayout(\n  layout: any,\n  theme: EmotionTheme\n): void {\n  const { genericFonts, colors, fontSizes } = theme\n\n  const streamlitTheme = {\n    font: {\n      color: getGray70(theme),\n      family: genericFonts.bodyFont,\n      size: fontSizes.twoSmPx,\n    },\n    title: {\n      color: colors.headingColor,\n      subtitleColor: colors.bodyText,\n      font: {\n        family: genericFonts.headingFont,\n        size: convertRemToPx(fontSizes.md),\n        color: colors.headingColor,\n      },\n      pad: {\n        l: convertRemToPx(theme.spacing.twoXS),\n      },\n      xanchor: \"left\",\n      x: 0,\n    },\n    legend: {\n      title: {\n        font: {\n          size: fontSizes.twoSmPx,\n          color: getGray70(theme),\n        },\n        side: \"top\",\n      },\n      valign: \"top\",\n      bordercolor: colors.transparent,\n      borderwidth: 0,\n      font: {\n        size: fontSizes.twoSmPx,\n        color: getGray90(theme),\n      },\n    },\n    paper_bgcolor: colors.bgColor,\n    plot_bgcolor: colors.bgColor,\n    yaxis: {\n      ticklabelposition: \"outside\",\n      zerolinecolor: getGray30(theme),\n      title: {\n        font: {\n          color: getGray70(theme),\n          size: fontSizes.smPx,\n        },\n        standoff: convertRemToPx(theme.spacing.twoXL),\n      },\n      tickcolor: getGray30(theme),\n      tickfont: {\n        color: getGray70(theme),\n        size: fontSizes.twoSmPx,\n      },\n      gridcolor: getGray30(theme),\n      minor: {\n        gridcolor: getGray30(theme),\n      },\n      automargin: true,\n    },\n    xaxis: {\n      zerolinecolor: getGray30(theme),\n      gridcolor: getGray30(theme),\n      showgrid: false,\n      tickfont: {\n        color: getGray70(theme),\n        size: fontSizes.twoSmPx,\n      },\n      tickcolor: getGray30(theme),\n      title: {\n        font: {\n          color: getGray70(theme),\n          size: fontSizes.smPx,\n        },\n        standoff: convertRemToPx(theme.spacing.xl),\n      },\n      minor: {\n        gridcolor: getGray30(theme),\n      },\n      zeroline: false,\n      automargin: true,\n      rangeselector: {\n        bgcolor: colors.bgColor,\n        bordercolor: getGray30(theme),\n        // eslint-disable-next-line streamlit-custom/no-hardcoded-theme-values\n        borderwidth: 1,\n        x: 0,\n      },\n    },\n    margin: {\n      pad: convertRemToPx(theme.spacing.sm),\n      r: 0,\n      l: 0,\n    },\n    hoverlabel: {\n      bgcolor: colors.bgColor,\n      bordercolor: colors.borderColor,\n      font: {\n        color: getGray70(theme),\n        family: genericFonts.bodyFont,\n        size: fontSizes.twoSmPx,\n      },\n    },\n    coloraxis: {\n      colorbar: {\n        thickness: 16,\n        xpad: convertRemToPx(theme.spacing.twoXL),\n        ticklabelposition: \"outside\",\n        outlinecolor: colors.transparent,\n        outlinewidth: 8,\n        len: 0.75,\n        y: 0.5745,\n        title: {\n          font: {\n            color: getGray70(theme),\n            size: fontSizes.smPx,\n          },\n        },\n        tickfont: {\n          color: getGray70(theme),\n          size: fontSizes.twoSmPx,\n        },\n      },\n    },\n    // specifically for the ternary graph\n    ternary: {\n      gridcolor: getGray70(theme),\n      bgcolor: colors.bgColor,\n      title: {\n        font: {\n          family: genericFonts.bodyFont,\n          size: fontSizes.smPx,\n        },\n      },\n      color: getGray70(theme),\n      aaxis: {\n        gridcolor: getGray70(theme),\n        linecolor: getGray70(theme),\n        tickfont: {\n          family: genericFonts.bodyFont,\n          size: fontSizes.twoSmPx,\n        },\n      },\n      baxis: {\n        linecolor: getGray70(theme),\n        gridcolor: getGray70(theme),\n        tickfont: {\n          family: genericFonts.bodyFont,\n          size: fontSizes.twoSmPx,\n        },\n      },\n      caxis: {\n        linecolor: getGray70(theme),\n        gridcolor: getGray70(theme),\n        tickfont: {\n          family: genericFonts.bodyFont,\n          size: fontSizes.twoSmPx,\n        },\n      },\n    },\n  }\n\n  merge(layout, streamlitTheme)\n}\n\n/**\n * Replace the colors that we are using from streamlit_plotly_theme.py.\n * This is done so that we change colors based on the background color\n * as the backend has no idea of the background color.\n * @param spec the spec that we want to update\n * @param theme\n * @param elementTheme element.theme\n * @returns the updated spec with the correct theme colors\n */\nfunction replaceCategoricalColors(\n  spec: string,\n  theme: EmotionTheme,\n  elementTheme: string\n): string {\n  // All the placeholder constants defined here are matching the placeholders in the python implementation.\n  const CATEGORY_0 = \"#000001\"\n  const CATEGORY_1 = \"#000002\"\n  const CATEGORY_2 = \"#000003\"\n  const CATEGORY_3 = \"#000004\"\n  const CATEGORY_4 = \"#000005\"\n  const CATEGORY_5 = \"#000006\"\n  const CATEGORY_6 = \"#000007\"\n  const CATEGORY_7 = \"#000008\"\n  const CATEGORY_8 = \"#000009\"\n  const CATEGORY_9 = \"#000010\"\n\n  if (elementTheme === \"streamlit\") {\n    const categoryColors = getCategoricalColorsArray(theme)\n    spec = spec.replaceAll(CATEGORY_0, categoryColors[0])\n    spec = spec.replaceAll(CATEGORY_1, categoryColors[1])\n    spec = spec.replaceAll(CATEGORY_2, categoryColors[2])\n    spec = spec.replaceAll(CATEGORY_3, categoryColors[3])\n    spec = spec.replaceAll(CATEGORY_4, categoryColors[4])\n    spec = spec.replaceAll(CATEGORY_5, categoryColors[5])\n    spec = spec.replaceAll(CATEGORY_6, categoryColors[6])\n    spec = spec.replaceAll(CATEGORY_7, categoryColors[7])\n    spec = spec.replaceAll(CATEGORY_8, categoryColors[8])\n    spec = spec.replaceAll(CATEGORY_9, categoryColors[9])\n  } else {\n    // Default plotly colors\n    spec = spec.replaceAll(CATEGORY_0, \"#636efa\")\n    spec = spec.replaceAll(CATEGORY_1, \"#EF553B\")\n    spec = spec.replaceAll(CATEGORY_2, \"#00cc96\")\n    spec = spec.replaceAll(CATEGORY_3, \"#ab63fa\")\n    spec = spec.replaceAll(CATEGORY_4, \"#FFA15A\")\n    spec = spec.replaceAll(CATEGORY_5, \"#19d3f3\")\n    spec = spec.replaceAll(CATEGORY_6, \"#FF6692\")\n    spec = spec.replaceAll(CATEGORY_7, \"#B6E880\")\n    spec = spec.replaceAll(CATEGORY_8, \"#FF97FF\")\n    spec = spec.replaceAll(CATEGORY_9, \"#FECB52\")\n  }\n  return spec\n}\n\nfunction replaceSequentialColors(\n  spec: string,\n  theme: EmotionTheme,\n  elementTheme: string\n): string {\n  // All the placeholder constants defined here are matching the placeholders in the python implementation.\n  const SEQUENTIAL_0 = \"#000011\"\n  const SEQUENTIAL_1 = \"#000012\"\n  const SEQUENTIAL_2 = \"#000013\"\n  const SEQUENTIAL_3 = \"#000014\"\n  const SEQUENTIAL_4 = \"#000015\"\n  const SEQUENTIAL_5 = \"#000016\"\n  const SEQUENTIAL_6 = \"#000017\"\n  const SEQUENTIAL_7 = \"#000018\"\n  const SEQUENTIAL_8 = \"#000019\"\n  const SEQUENTIAL_9 = \"#000020\"\n\n  if (elementTheme === \"streamlit\") {\n    const sequentialColors = getSequentialColorsArray(theme)\n    spec = spec.replaceAll(SEQUENTIAL_0, sequentialColors[0])\n    spec = spec.replaceAll(SEQUENTIAL_1, sequentialColors[1])\n    spec = spec.replaceAll(SEQUENTIAL_2, sequentialColors[2])\n    spec = spec.replaceAll(SEQUENTIAL_3, sequentialColors[3])\n    spec = spec.replaceAll(SEQUENTIAL_4, sequentialColors[4])\n    spec = spec.replaceAll(SEQUENTIAL_5, sequentialColors[5])\n    spec = spec.replaceAll(SEQUENTIAL_6, sequentialColors[6])\n    spec = spec.replaceAll(SEQUENTIAL_7, sequentialColors[7])\n    spec = spec.replaceAll(SEQUENTIAL_8, sequentialColors[8])\n    spec = spec.replaceAll(SEQUENTIAL_9, sequentialColors[9])\n  } else {\n    // Default plotly colors\n    spec = spec.replaceAll(SEQUENTIAL_0, \"#0d0887\")\n    spec = spec.replaceAll(SEQUENTIAL_1, \"#46039f\")\n    spec = spec.replaceAll(SEQUENTIAL_2, \"#7201a8\")\n    spec = spec.replaceAll(SEQUENTIAL_3, \"#9c179e\")\n    spec = spec.replaceAll(SEQUENTIAL_4, \"#bd3786\")\n    spec = spec.replaceAll(SEQUENTIAL_5, \"#d8576b\")\n    spec = spec.replaceAll(SEQUENTIAL_6, \"#ed7953\")\n    spec = spec.replaceAll(SEQUENTIAL_7, \"#fb9f3a\")\n    spec = spec.replaceAll(SEQUENTIAL_8, \"#fdca26\")\n    spec = spec.replaceAll(SEQUENTIAL_9, \"#f0f921\")\n  }\n  return spec\n}\n\nfunction replaceDivergingColors(\n  spec: string,\n  theme: EmotionTheme,\n  elementTheme: string\n): string {\n  // All the placeholder constants defined here are matching the placeholders in the python implementation.\n  const DIVERGING_0 = \"#000021\"\n  const DIVERGING_1 = \"#000022\"\n  const DIVERGING_2 = \"#000023\"\n  const DIVERGING_3 = \"#000024\"\n  const DIVERGING_4 = \"#000025\"\n  const DIVERGING_5 = \"#000026\"\n  const DIVERGING_6 = \"#000027\"\n  const DIVERGING_7 = \"#000028\"\n  const DIVERGING_8 = \"#000029\"\n  const DIVERGING_9 = \"#000030\"\n  const DIVERGING_10 = \"#000031\"\n\n  if (elementTheme === \"streamlit\") {\n    const divergingColors = getDivergingColorsArray(theme)\n    spec = spec.replaceAll(DIVERGING_0, divergingColors[0])\n    spec = spec.replaceAll(DIVERGING_1, divergingColors[1])\n    spec = spec.replaceAll(DIVERGING_2, divergingColors[2])\n    spec = spec.replaceAll(DIVERGING_3, divergingColors[3])\n    spec = spec.replaceAll(DIVERGING_4, divergingColors[4])\n    spec = spec.replaceAll(DIVERGING_5, divergingColors[5])\n    spec = spec.replaceAll(DIVERGING_6, divergingColors[6])\n    spec = spec.replaceAll(DIVERGING_7, divergingColors[7])\n    spec = spec.replaceAll(DIVERGING_8, divergingColors[8])\n    spec = spec.replaceAll(DIVERGING_9, divergingColors[9])\n    spec = spec.replaceAll(DIVERGING_10, divergingColors[10])\n  } else {\n    // Default plotly colors\n    spec = spec.replaceAll(DIVERGING_0, \"#8e0152\")\n    spec = spec.replaceAll(DIVERGING_1, \"#c51b7d\")\n    spec = spec.replaceAll(DIVERGING_2, \"#de77ae\")\n    spec = spec.replaceAll(DIVERGING_3, \"#f1b6da\")\n    spec = spec.replaceAll(DIVERGING_4, \"#fde0ef\")\n    spec = spec.replaceAll(DIVERGING_5, \"#f7f7f7\")\n    spec = spec.replaceAll(DIVERGING_6, \"#e6f5d0\")\n    spec = spec.replaceAll(DIVERGING_7, \"#b8e186\")\n    spec = spec.replaceAll(DIVERGING_8, \"#7fbc41\")\n    spec = spec.replaceAll(DIVERGING_9, \"#4d9221\")\n    spec = spec.replaceAll(DIVERGING_10, \"#276419\")\n  }\n  return spec\n}\n\n/**\n * Because Template.layout doesn't affect the go(plotly.graph_objects) graphs,\n * we use this method to specifically replace these graph properties.\n * */\nfunction replaceGOSpecificColors(spec: string, theme: EmotionTheme): string {\n  // All the placeholder constants defined here are matching the placeholders in the python implementation.\n  const INCREASING = \"#000032\"\n  const DECREASING = \"#000033\"\n  const TOTAL = \"#000034\"\n\n  const GRAY_30 = \"#000035\"\n  const GRAY_70 = \"#000036\"\n  const GRAY_90 = \"#000037\"\n  const BG_COLOR = \"#000038\"\n  const FADED_TEXT_05 = \"#000039\"\n  const BG_MIX = \"#000040\"\n\n  spec = spec.replaceAll(INCREASING, getIncreasingGreen(theme))\n  spec = spec.replaceAll(DECREASING, getDecreasingRed(theme))\n  spec = spec.replaceAll(TOTAL, getBlue80(theme))\n\n  spec = spec.replaceAll(GRAY_30, getGray30(theme))\n  spec = spec.replaceAll(GRAY_70, getGray70(theme))\n  spec = spec.replaceAll(GRAY_90, getGray90(theme))\n\n  spec = spec.replaceAll(BG_COLOR, theme.colors.bgColor)\n  spec = spec.replaceAll(FADED_TEXT_05, theme.colors.fadedText05)\n  spec = spec.replaceAll(BG_MIX, theme.colors.bgMix)\n  return spec\n}\n\nexport function replaceTemporaryColors(\n  spec: string,\n  theme: EmotionTheme,\n  elementTheme: string\n): string {\n  spec = replaceGOSpecificColors(spec, theme)\n  spec = replaceCategoricalColors(spec, theme, elementTheme)\n  spec = replaceSequentialColors(spec, theme, elementTheme)\n  spec = replaceDivergingColors(spec, theme, elementTheme)\n  return spec\n}\n\n/**\n * Applies the Streamlit theme by overriding properties in\n * spec.data, spec.layout.template.data, and spec.layout.template.layout\n * @param spec - spec\n */\nexport function applyStreamlitTheme(spec: any, theme: EmotionTheme): void {\n  try {\n    applyStreamlitThemeTemplateLayout(spec.layout.template.layout, theme)\n  } catch (e) {\n    const err = ensureError(e)\n    logError(err)\n  }\n  if (\"title\" in spec.layout) {\n    spec.layout.title = merge(spec.layout.title, {\n      text: `<b>${spec.layout.title.text}</b>`,\n    })\n  }\n}\n\n/**\n * Apply minimum changes to graph to fit streamlit\n * @param layout - spec.layout\n * @param theme - theme from useTheme()\n * @returns modified spec.layout\n */\nexport function layoutWithThemeDefaults(\n  layout: any,\n  theme: EmotionTheme\n): any {\n  const { colors, genericFonts } = theme\n\n  const themeDefaults = {\n    font: {\n      color: colors.bodyText,\n      family: genericFonts.bodyFont,\n    },\n    paper_bgcolor: colors.bgColor,\n    plot_bgcolor: colors.secondaryBg,\n  }\n\n  // Fill in theme defaults where the user didn't specify layout options.\n  return {\n    ...layout,\n    font: {\n      ...themeDefaults.font,\n      ...layout.font,\n    },\n    paper_bgcolor: layout.paper_bgcolor || themeDefaults.paper_bgcolor,\n    plot_bgcolor: layout.plot_bgcolor || themeDefaults.plot_bgcolor,\n  }\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {\n  ReactElement,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\"\n\nimport { useTheme } from \"@emotion/react\"\nimport Plot, { Figure as PlotlyFigureType } from \"react-plotly.js\"\n\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\nimport { PlotlyChart as PlotlyChartProto } from \"@streamlit/lib/src/proto\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\nimport {\n  keysToSnakeCase,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport { FormClearHelper } from \"@streamlit/lib/src/components/widgets/Form/FormClearHelper\"\nimport { ElementFullscreenContext } from \"@streamlit/lib/src/components/shared/ElementFullscreen/ElementFullscreenContext\"\nimport { useRequiredContext } from \"@streamlit/lib/src/hooks/useRequiredContext\"\nimport { withFullScreenWrapper } from \"@streamlit/lib/src/components/shared/FullScreenWrapper\"\n\nimport {\n  applyStreamlitTheme,\n  layoutWithThemeDefaults,\n  replaceTemporaryColors,\n} from \"./CustomTheme\"\n\n// Copied and Pasted from Plotly type def\nexport interface SelectionRange {\n  x: number[]\n  y: number[]\n}\n\nexport interface PlotlySelection extends SelectionRange {\n  xref: string\n  yref: string\n}\n\n// This is the state that is sent to the backend\n// This needs to be the same structure that is also defined\n// in the Python code. Uses snake case to be compatible with the\n// Python naming conventions.\nexport interface PlotlyWidgetState {\n  selection: {\n    points: Array<any>\n    point_indices: number[]\n    box: PlotlySelection[]\n    lasso: PlotlySelection[]\n  }\n}\n\n// Minimum width for Plotly charts\nconst MIN_WIDTH = 150\n\n// Custom icon used in the fullscreen expand toolbar button:\n/* eslint-disable streamlit-custom/no-hardcoded-theme-values */\nconst FULLSCREEN_EXPAND_ICON = {\n  width: 600,\n  height: 470,\n  name: \"fullscreen-expand\",\n  // https://fontawesome.com/icons/expand?f=classic&s=solid\n  path: \"M32 32C14.3 32 0 46.3 0 64v96c0 17.7 14.3 32 32 32s32-14.3 32-32V96h64c17.7 0 32-14.3 32-32s-14.3-32-32-32H32zM64 352c0-17.7-14.3-32-32-32s-32 14.3-32 32v96c0 17.7 14.3 32 32 32h96c17.7 0 32-14.3 32-32s-14.3-32-32-32H64V352zM320 32c-17.7 0-32 14.3-32 32s14.3 32 32 32h64v64c0 17.7 14.3 32 32 32s32-14.3 32-32V64c0-17.7-14.3-32-32-32H320zM448 352c0-17.7-14.3-32-32-32s-32 14.3-32 32v64H320c-17.7 0-32 14.3-32 32s14.3 32 32 32h96c17.7 0 32-14.3 32-32V352z\",\n}\nconst FULLSCREEN_COLLAPSE_ICON = {\n  width: 600,\n  height: 470,\n  name: \"fullscreen-collapse\",\n  // https://fontawesome.com/icons/compress?f=classic&s=solid\n  path: \"M160 64c0-17.7-14.3-32-32-32s-32 14.3-32 32v64H32c-17.7 0-32 14.3-32 32s14.3 32 32 32h96c17.7 0 32-14.3 32-32V64zM32 320c-17.7 0-32 14.3-32 32s14.3 32 32 32H96v64c0 17.7 14.3 32 32 32s32-14.3 32-32V352c0-17.7-14.3-32-32-32H32zM352 64c0-17.7-14.3-32-32-32s-32 14.3-32 32v96c0 17.7 14.3 32 32 32h96c17.7 0 32-14.3 32-32s-14.3-32-32-32H352V64zM320 320c-17.7 0-32 14.3-32 32v96c0 17.7 14.3 32 32 32s32-14.3 32-32V384h64c17.7 0 32-14.3 32-32s-14.3-32-32-32H320z\",\n}\n/* eslint-enable streamlit-custom/no-hardcoded-theme-values */\n\n/**\n * Parses an SVG path string into separate x and y coordinates.\n *\n * The function takes a single SVG path string as input. This path string should start with 'M'\n * (move to command), followed by pairs of x and y coordinates separated by commas, and optionally\n * end with 'Z' to close the path. Each pair of coordinates is separated by 'L' (line to command).\n *\n * Example Input:\n * \"M4.016412414518674,8.071685352641575L4.020620725933719,7.8197516509841165Z\"\n *\n * Example Output:\n * {\n *   x: [4.016412414518674, 4.020620725933719],\n *   y: [8.071685352641575, 7.8197516509841165]\n * }\n *\n * @param {string} pathData - The SVG path string to be parsed.\n * @returns {SelectionRange} An object containing two arrays: `x` for all x coordinates and `y` for all y coordinates.\n */\nexport function parseLassoPath(pathData: string): SelectionRange {\n  if (pathData === \"\") {\n    return {\n      x: [],\n      y: [],\n    }\n  }\n  const points = pathData.replace(\"M\", \"\").replace(\"Z\", \"\").split(\"L\")\n\n  const x: number[] = []\n  const y: number[] = []\n\n  points.forEach(point => {\n    const [xVal, yVal] = point.split(\",\").map(Number)\n    x.push(xVal)\n    y.push(yVal)\n  })\n\n  return { x, y }\n}\n\n/**\n * Parses a box selection object into separate x and y coordinates.\n *\n * The function takes a box selection object as input. This object should contain the following\n * fields: x0, x1, y0, y1. These fields represent the x and y coordinates of the box selection\n * in the plotly chart.\n *\n * Example Input:\n * {\n *   x0: 0.1,\n *   x1: 0.2,\n *   y0: 0.3,\n *   y1: 0.4\n * }\n *\n * Example Output:\n * {\n *   x: [0.1, 0.2],\n *   y: [0.3, 0.4]\n * }\n *\n * @param {Object} selection - The box selection object to be parsed.\n * @returns {SelectionRange} An object containing two arrays: `x` for all x coordinates and `y` for all y coordinates.\n */\nexport function parseBoxSelection(selection: any): SelectionRange {\n  const hasRequiredFields =\n    \"x0\" in selection &&\n    \"x1\" in selection &&\n    \"y0\" in selection &&\n    \"y1\" in selection\n\n  if (!hasRequiredFields) {\n    return { x: [], y: [] }\n  }\n\n  const x: number[] = [selection.x0, selection.x1]\n  const y: number[] = [selection.y0, selection.y1]\n  return { x, y }\n}\n\n/**\n * Apply theming to the Plotly figure.\n *\n * @param plotlyFigure The Plotly figure to apply theming to\n * @param chartTheme The theme of the chart (streamlit or empty string)\n * @param theme The current theme of the app\n * @returns The Plotly figure with theming applied\n */\nexport function applyTheming(\n  plotlyFigure: PlotlyFigureType,\n  chartTheme: string,\n  theme: EmotionTheme\n): PlotlyFigureType {\n  const spec = JSON.parse(\n    replaceTemporaryColors(JSON.stringify(plotlyFigure), theme, chartTheme)\n  )\n  if (chartTheme === \"streamlit\") {\n    applyStreamlitTheme(spec, theme)\n  } else {\n    // Apply minor theming improvements to work better with Streamlit\n    spec.layout = layoutWithThemeDefaults(spec.layout, theme)\n  }\n  return spec\n}\n\n/**\n * Handles the selection event from Plotly and sends the selection state to the backend.\n * The selection state is sent as a stringified JSON object.\n *\n * @param event The Plotly selection event\n * @param widgetMgr The widget manager\n * @param element The PlotlyChartProto element\n * @param fragmentId The fragment id\n */\nexport function handleSelection(\n  event: Readonly<Plotly.PlotSelectionEvent>,\n  widgetMgr: WidgetStateManager,\n  element: PlotlyChartProto,\n  fragmentId: string | undefined\n): void {\n  if (!event) {\n    return\n  }\n\n  const selectionState: PlotlyWidgetState = {\n    selection: {\n      points: [],\n      point_indices: [],\n      box: [],\n      lasso: [],\n    },\n  }\n  // Use a set for point indices since all numbers should be unique:\n  const selectedPointIndices = new Set<number>()\n  const selectedBoxes: PlotlySelection[] = []\n  const selectedLassos: PlotlySelection[] = []\n  const selectedPoints: Array<any> = []\n\n  // event.selections doesn't show up in the PlotSelectionEvent\n  // @ts-expect-error\n  const { selections, points } = event\n\n  if (points) {\n    points.forEach(function (point: any) {\n      selectedPoints.push({\n        ...point,\n        legendgroup: point.data.legendgroup || undefined,\n        // Remove data and full data as they have been deemed to be unnecessary data overhead\n        data: undefined,\n        fullData: undefined,\n      })\n      if (notNullOrUndefined(point.pointIndex)) {\n        selectedPointIndices.add(point.pointIndex)\n      }\n\n      // If pointIndices is present (e.g. selection on histogram chart),\n      // add all of them to the set\n      if (\n        notNullOrUndefined(point.pointIndices) &&\n        point.pointIndices.length > 0\n      ) {\n        point.pointIndices.forEach((item: number) =>\n          selectedPointIndices.add(item)\n        )\n      }\n    })\n  }\n\n  if (selections) {\n    selections.forEach((selection: any) => {\n      // box selection\n      if (selection.type === \"rect\") {\n        const xAndy = parseBoxSelection(selection)\n        const returnSelection: PlotlySelection = {\n          xref: selection.xref,\n          yref: selection.yref,\n          x: xAndy.x,\n          y: xAndy.y,\n        }\n        selectedBoxes.push(returnSelection)\n      }\n      // lasso selection\n      if (selection.type === \"path\") {\n        const xAndy = parseLassoPath(selection.path)\n        const returnSelection: PlotlySelection = {\n          xref: selection.xref,\n          yref: selection.yref,\n          x: xAndy.x,\n          y: xAndy.y,\n        }\n        selectedLassos.push(returnSelection)\n      }\n    })\n  }\n\n  selectionState.selection.point_indices = Array.from(selectedPointIndices)\n  selectionState.selection.points = selectedPoints.map((point: any) =>\n    keysToSnakeCase(point)\n  )\n\n  selectionState.selection.box = selectedBoxes\n  selectionState.selection.lasso = selectedLassos\n\n  if (\n    selectionState.selection.box.length > 0 &&\n    !element.selectionMode.includes(PlotlyChartProto.SelectionMode.BOX)\n  ) {\n    // If box selection is not activated, we don't want\n    // to send any box selection related updates to the frontend\n    return\n  }\n\n  if (\n    selectionState.selection.lasso.length > 0 &&\n    !element.selectionMode.includes(PlotlyChartProto.SelectionMode.LASSO)\n  ) {\n    // If lasso selection is not activated, we don't want\n    // to send any lasso selection related updates to the frontend\n    return\n  }\n\n  const currentSelectionState = widgetMgr.getStringValue(element)\n  const newSelectionState = JSON.stringify(selectionState)\n  if (currentSelectionState !== newSelectionState) {\n    // Only update the widget state if it has changed\n    widgetMgr.setStringValue(\n      element,\n      newSelectionState,\n      { fromUi: true },\n      fragmentId\n    )\n  }\n}\n\n/**\n * Sends an empty selection state to the backend.\n * This is used to reset the selection state in the widget.\n *\n * @param widgetMgr The widget manager\n * @param element The PlotlyChartProto element\n * @param fragmentId The fragment id\n */\nexport function sendEmptySelection(\n  widgetMgr: WidgetStateManager,\n  element: PlotlyChartProto,\n  fragmentId: string | undefined\n): void {\n  const emptySelectionState: PlotlyWidgetState = {\n    // We use snake case here since this is the widget state\n    // that is sent and used in the backend. Therefore, it should\n    // conform with the Python naming conventions.\n    selection: {\n      points: [],\n      point_indices: [],\n      box: [],\n      lasso: [],\n    },\n  }\n  const currentSelectionState = widgetMgr.getStringValue(element)\n  const newSelectionState = JSON.stringify(emptySelectionState)\n  if (currentSelectionState !== newSelectionState) {\n    // Only update the widget state if it has changed\n    widgetMgr.setStringValue(\n      element,\n      newSelectionState,\n      { fromUi: true },\n      fragmentId\n    )\n  }\n}\n\nexport interface PlotlyChartProps {\n  element: PlotlyChartProto\n  widgetMgr: WidgetStateManager\n  disabled: boolean\n  fragmentId?: string\n  disableFullscreenMode?: boolean\n  width: number\n}\n\nexport function PlotlyChart({\n  element,\n  widgetMgr,\n  disabled,\n  fragmentId,\n  disableFullscreenMode,\n}: Readonly<PlotlyChartProps>): ReactElement {\n  const theme: EmotionTheme = useTheme()\n  const {\n    expanded: isFullScreen,\n    width,\n    height,\n    expand,\n    collapse,\n  } = useRequiredContext(ElementFullscreenContext)\n\n  // Load the initial figure spec from the element message\n  const initialFigureSpec = useMemo<PlotlyFigureType>(() => {\n    if (!element.spec) {\n      return {\n        layout: {},\n        data: [],\n        frames: undefined,\n      }\n    }\n\n    return JSON.parse(element.spec)\n    // We want to reload the initialFigureSpec object whenever the element id changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [element.id, element.spec])\n\n  const [plotlyFigure, setPlotlyFigure] = useState<PlotlyFigureType>(() => {\n    // If there was already a state with a figure using the same id,\n    // use that to recover the state. This happens in some situations\n    // where a component un-mounts and mounts again.\n    const initialFigureState = widgetMgr.getElementState(element.id, \"figure\")\n    if (initialFigureState) {\n      return initialFigureState\n    }\n    return applyTheming(initialFigureSpec, element.theme, theme)\n  })\n\n  const isSelectionActivated = element.selectionMode.length > 0 && !disabled\n  const isLassoSelectionActivated =\n    isSelectionActivated &&\n    element.selectionMode.includes(PlotlyChartProto.SelectionMode.LASSO)\n  const isBoxSelectionActivated =\n    isSelectionActivated &&\n    element.selectionMode.includes(PlotlyChartProto.SelectionMode.BOX)\n  const isPointsSelectionActivated =\n    isSelectionActivated &&\n    element.selectionMode.includes(PlotlyChartProto.SelectionMode.POINTS)\n\n  const plotlyConfig = useMemo(() => {\n    if (!element.config) {\n      // If there is no config, return an empty object\n      return {}\n    }\n\n    const config = JSON.parse(element.config)\n\n    // Customize the plotly toolbar:\n    if (!disableFullscreenMode) {\n      // Add a fullscreen button to the plotly toolbar:\n      config.modeBarButtonsToAdd = [\n        {\n          name: isFullScreen ? \"Close fullscreen\" : \"Fullscreen\",\n          icon: isFullScreen\n            ? FULLSCREEN_COLLAPSE_ICON\n            : FULLSCREEN_EXPAND_ICON,\n          click: () => {\n            if (isFullScreen && collapse) {\n              collapse()\n            } else if (expand) {\n              expand()\n            }\n          },\n        },\n        ...(config.modeBarButtonsToAdd ?? []),\n      ]\n    }\n\n    if (!config.modeBarButtonsToRemove) {\n      // Only modify the mode bar buttons if it's not already set\n      // in the config provided by the user.\n\n      // Hide the logo by default\n      config.displaylogo = false\n\n      const modeBarButtonsToRemove = [\"sendDataToCloud\"]\n\n      if (!isSelectionActivated) {\n        // Remove lasso & select buttons in read-only charts:\n        modeBarButtonsToRemove.push(\"lasso2d\", \"select2d\")\n      } else {\n        if (!isLassoSelectionActivated) {\n          // Remove the lasso button if lasso selection is not activated\n          modeBarButtonsToRemove.push(\"lasso2d\")\n        }\n\n        if (!isBoxSelectionActivated) {\n          // Remove the box select button if box selection is not activated\n          modeBarButtonsToRemove.push(\"select2d\")\n        }\n      }\n\n      config.modeBarButtonsToRemove = modeBarButtonsToRemove\n    }\n    return config\n    // We want to reload the plotlyConfig object whenever the element id changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    element.id,\n    element.config,\n    isFullScreen,\n    disableFullscreenMode,\n    isSelectionActivated,\n    isLassoSelectionActivated,\n    isBoxSelectionActivated,\n    collapse,\n    expand,\n  ])\n\n  useEffect(() => {\n    // If the theme changes, we need to reapply the theming to the figure\n    setPlotlyFigure((prevState: PlotlyFigureType) => {\n      return applyTheming(prevState, element.theme, theme)\n    })\n  }, [element.id, theme, element.theme])\n\n  useEffect(() => {\n    let updatedClickMode: typeof initialFigureSpec.layout.clickmode =\n      initialFigureSpec.layout.clickmode\n    let updatedHoverMode: typeof initialFigureSpec.layout.hovermode =\n      initialFigureSpec.layout.hovermode\n    let updatedDragMode: typeof initialFigureSpec.layout.dragmode =\n      initialFigureSpec.layout.dragmode\n\n    if (disabled) {\n      updatedClickMode = \"none\"\n      updatedDragMode = \"pan\"\n    } else if (isSelectionActivated) {\n      if (!initialFigureSpec.layout.clickmode) {\n        // If the user has already set the clickmode, we don't want to override it here.\n        // Otherwise, we are selecting the best clickmode based on the selection modes.\n        if (isPointsSelectionActivated) {\n          // https://plotly.com/javascript/reference/layout/#layout-clickmode\n          // This allows single point selections and shift click to add / remove selections\n          updatedClickMode = \"event+select\"\n        } else {\n          // If points selection is not activated, we set the clickmode to none (no single item clicks)\n          updatedClickMode = \"none\"\n        }\n      }\n\n      if (!initialFigureSpec.layout.hovermode) {\n        // If the user has already set the hovermode, we don't want to override it here.\n        updatedHoverMode = \"closest\"\n      }\n\n      if (!initialFigureSpec.layout.dragmode) {\n        // If the user has already set the dragmode, we don't want to override it here.\n        // If not, we are selecting the best drag mode based on the selection modes.\n        if (isPointsSelectionActivated) {\n          // Pan drag mode has priority in case points selection is activated\n          updatedDragMode = \"pan\"\n        } else if (isBoxSelectionActivated) {\n          // Configure select (box selection) as the activated drag mode:\n          updatedDragMode = \"select\"\n        } else if (isLassoSelectionActivated) {\n          // Configure lasso (lasso selection) as the activated drag mode:\n          updatedDragMode = \"lasso\"\n        } else {\n          updatedDragMode = \"pan\"\n        }\n      }\n    }\n\n    setPlotlyFigure((prevState: PlotlyFigureType) => {\n      if (\n        prevState.layout.clickmode === updatedClickMode &&\n        prevState.layout.hovermode === updatedHoverMode &&\n        prevState.layout.dragmode === updatedDragMode\n      ) {\n        // Nothing has changed, just return the previous state\n        return prevState\n      }\n\n      return {\n        ...prevState,\n        layout: {\n          ...prevState.layout,\n          clickmode: updatedClickMode,\n          hovermode: updatedHoverMode,\n          dragmode: updatedDragMode,\n        },\n      }\n    })\n    // We want to reload these options whenever the element id changes\n    // or the selection modes change.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    element.id,\n    isSelectionActivated,\n    isPointsSelectionActivated,\n    isBoxSelectionActivated,\n    isLassoSelectionActivated,\n    disabled,\n  ])\n\n  let calculatedWidth =\n    width === -1\n      ? // In some situations - e.g. initial loading of tabs - the width is set to -1\n        // before its able to determine the real width. We want to keep the previous\n        // width in this case.\n        plotlyFigure.layout?.width\n      : Math.max(\n          element.useContainerWidth\n            ? width\n            : Math.min(initialFigureSpec.layout.width ?? width, width),\n          // Apply a min width to prevent the chart running into issues with negative\n          // width values if the browser window is too small:\n          MIN_WIDTH\n        )\n\n  let calculatedHeight = initialFigureSpec.layout.height\n\n  if (isFullScreen) {\n    calculatedWidth = width\n    calculatedHeight = height\n  }\n\n  if (\n    plotlyFigure.layout.height !== calculatedHeight ||\n    plotlyFigure.layout.width !== calculatedWidth\n  ) {\n    // Update the figure with the new height and width (if they have changed)\n    setPlotlyFigure((prevFigure: PlotlyFigureType) => {\n      return {\n        ...prevFigure,\n        layout: {\n          ...prevFigure.layout,\n          height: calculatedHeight,\n          width: calculatedWidth,\n        },\n      }\n    })\n  }\n\n  /**\n   * Callback to handle selections on the plotly chart.\n   */\n  const handleSelectionCallback = useCallback(\n    (event: Readonly<Plotly.PlotSelectionEvent>): void => {\n      handleSelection(event, widgetMgr, element, fragmentId)\n    },\n    // We are using element.id here instead of element since we don't\n    // shallow reference equality will not work correctly for element.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [element.id, widgetMgr, fragmentId]\n  )\n\n  /**\n   * Callback resets selections in the chart and\n   * sends out an empty selection state.\n   */\n  const resetSelectionsCallback = useCallback(\n    (resetSelectionInFigure = true): void => {\n      sendEmptySelection(widgetMgr, element, fragmentId)\n\n      if (resetSelectionInFigure) {\n        // We need to do this reset with a short timeout, because otherwise\n        // the onUpdate callback seems to overwrite the selection state\n        // that we set here. The timeout will make sure that this is executed\n        // after the onUpdate callback.\n        setTimeout(() => {\n          // Reset the selection info within the plotly figure\n          setPlotlyFigure((prevFigure: PlotlyFigureType) => {\n            return {\n              ...prevFigure,\n              data: prevFigure.data.map((trace: any) => {\n                return {\n                  ...trace,\n                  // Set to null to clear the selection an empty\n                  // array here would still show everything as opaque\n                  selectedpoints: null,\n                }\n              }),\n              layout: {\n                ...prevFigure.layout,\n                // selections is not part of the plotly typing:\n                selections: [],\n              },\n            }\n          })\n        }, 50)\n      }\n    },\n    // We are using element.id here instead of element since we don't\n    // shallow reference equality will not work correctly for element.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [element.id, widgetMgr, fragmentId]\n  )\n\n  // This is required for the form clearing functionality:\n  useEffect(() => {\n    if (!element.formId || !isSelectionActivated) {\n      // We don't need the form clear functionality if its not in a form\n      // or if selections are not activated.\n      return\n    }\n\n    const formClearHelper = new FormClearHelper()\n    // On form clear, reset the selections (in chart & widget state)\n    formClearHelper.manageFormClearListener(\n      widgetMgr,\n      element.formId,\n      resetSelectionsCallback\n    )\n\n    return () => {\n      formClearHelper.disconnect()\n    }\n  }, [\n    element.formId,\n    widgetMgr,\n    isSelectionActivated,\n    resetSelectionsCallback,\n  ])\n\n  useEffect(() => {\n    if (!isSelectionActivated) {\n      return\n    }\n    // The point selection during the lasso or box selection seems\n    // to be a bit buggy. Sometimes, points gets unselected without\n    // triggering an onDeselect event.\n    // Therefore, we are deactivating the event+select clickmode\n    // if the dragmode is set to select or lasso.\n    let clickmode: \"event+select\" | \"event\" | \"none\"\n    if (\n      plotlyFigure.layout?.dragmode === \"select\" ||\n      plotlyFigure.layout?.dragmode === \"lasso\"\n    ) {\n      clickmode = \"event\"\n    } else {\n      // Reset to either none or event+select based on if points selection mode\n      // is activated or not.\n      clickmode = isPointsSelectionActivated ? \"event+select\" : \"none\"\n    }\n\n    if (plotlyFigure.layout?.clickmode !== clickmode) {\n      setPlotlyFigure((prevFigure: PlotlyFigureType) => {\n        return {\n          ...prevFigure,\n          layout: {\n            ...prevFigure.layout,\n            clickmode: clickmode,\n          },\n        }\n      })\n    }\n    // We only want to trigger this effect if the dragmode changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [plotlyFigure.layout?.dragmode])\n\n  return (\n    <div className=\"stPlotlyChart\" data-testid=\"stPlotlyChart\">\n      <Plot\n        key={isFullScreen ? \"fullscreen\" : \"original\"}\n        data={plotlyFigure.data}\n        layout={plotlyFigure.layout}\n        config={plotlyConfig}\n        frames={plotlyFigure.frames ?? undefined}\n        style={{\n          // Hide the plotly chart if the width is not defined yet\n          // to prevent flickering issues.\n          visibility:\n            plotlyFigure.layout?.width === undefined ? \"hidden\" : undefined,\n        }}\n        onSelected={isSelectionActivated ? handleSelectionCallback : () => {}}\n        // Double click is needed to make it easier to the user to\n        // reset the selection. The default handling can be a bit annoying\n        // sometimes.\n        onDoubleClick={\n          isSelectionActivated ? () => resetSelectionsCallback() : undefined\n        }\n        onDeselect={\n          isSelectionActivated\n            ? () => {\n                // Plotly is also resetting the UI state already for\n                // deselect events. So, we don't need to do it on our side.\n                // Thats why the flag is false.\n                resetSelectionsCallback(false)\n              }\n            : undefined\n        }\n        onInitialized={figure => {\n          widgetMgr.setElementState(element.id, \"figure\", figure)\n        }}\n        // Update the figure state on every change to the figure itself:\n        onUpdate={figure => {\n          // Save the updated figure state to allow it to be recovered\n          widgetMgr.setElementState(element.id, \"figure\", figure)\n          setPlotlyFigure(figure)\n        }}\n      />\n    </div>\n  )\n}\n\nexport default withFullScreenWrapper(PlotlyChart)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createContext } from \"react\"\n\ntype ElementFullscreenContextShape = {\n  width: number\n  height: number | undefined\n  expanded: boolean\n  expand: () => void\n  collapse: () => void\n}\n\nexport const ElementFullscreenContext =\n  createContext<ElementFullscreenContextShape | null>(null)\nElementFullscreenContext.displayName = \"ElementFullscreenContext\"\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport interface StyledFullScreenFrameProps {\n  isExpanded: boolean\n}\n\nexport const StyledFullScreenFrame = styled.div<StyledFullScreenFrameProps>(\n  ({ theme, isExpanded }) => ({\n    ...(isExpanded\n      ? {\n          position: \"fixed\",\n          top: 0,\n          left: 0,\n          bottom: 0,\n          right: 0,\n          background: theme.colors.bgColor,\n          zIndex: theme.zIndices.fullscreenWrapper,\n          padding: theme.spacing.md,\n          paddingTop: theme.sizes.fullScreenHeaderHeight,\n          overflow: [\"auto\", \"overlay\"],\n          display: \"flex\", // To avoid extra spaces that lead to scrollbars.\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }\n      : {}),\n  })\n)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { FC, PropsWithChildren, useMemo } from \"react\"\n\nimport { useTheme } from \"@emotion/react\"\n\nimport { StyledFullScreenFrame } from \"@streamlit/lib/src/components/shared/FullScreenWrapper/styled-components\"\nimport { ElementFullscreenContext } from \"@streamlit/lib/src/components/shared/ElementFullscreen/ElementFullscreenContext\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\n\nimport { useFullscreen } from \"./useFullscreen\"\n\ntype ElementFullscreenWrapperProps = PropsWithChildren<{\n  height?: number\n  width: number\n}>\n\nconst ElementFullscreenWrapper: FC<ElementFullscreenWrapperProps> = ({\n  children,\n  height,\n  width,\n}) => {\n  const theme: EmotionTheme = useTheme()\n  const { expanded, fullHeight, fullWidth, zoomIn, zoomOut } = useFullscreen()\n\n  const fullscreenContextValue = useMemo(() => {\n    return {\n      width: expanded ? fullWidth : width,\n      height: expanded ? fullHeight : height,\n      expanded,\n      expand: zoomIn,\n      collapse: zoomOut,\n    }\n  }, [expanded, fullHeight, fullWidth, height, width, zoomIn, zoomOut])\n\n  return (\n    <ElementFullscreenContext.Provider value={fullscreenContextValue}>\n      <StyledFullScreenFrame\n        isExpanded={expanded}\n        data-testid=\"stFullScreenFrame\"\n        theme={theme}\n      >\n        {children}\n      </StyledFullScreenFrame>\n    </ElementFullscreenContext.Provider>\n  )\n}\n\nexport default ElementFullscreenWrapper\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useCallback, useContext, useEffect, useMemo, useState } from \"react\"\n\nimport { LibContext } from \"@streamlit/lib/src/components/core/LibContext\"\nimport { WindowDimensionsContext } from \"@streamlit/lib/src/components/shared/WindowDimensions\"\nimport { useRequiredContext } from \"@streamlit/lib/src/hooks/useRequiredContext\"\n\nexport type UseEscapeToCollapseArgs = {\n  expanded: boolean\n  zoomOut: () => void\n}\n\nexport type UseFullscreenShape = {\n  expanded: boolean\n  fullHeight: number\n  fullWidth: number\n  zoomIn: () => void\n  zoomOut: () => void\n}\n\nexport const useFullscreen = (): UseFullscreenShape => {\n  const { setFullScreen } = useContext(LibContext)\n  const [expanded, setExpanded] = useState(false)\n  const { fullHeight, fullWidth } = useRequiredContext(WindowDimensionsContext)\n\n  const setExpandedState = useCallback(\n    (isExpanded: boolean) => {\n      // Set the local component-level state\n      setExpanded(isExpanded)\n      // Set the context-level state\n      setFullScreen(isExpanded)\n    },\n    [setFullScreen]\n  )\n\n  const zoomIn = useCallback(() => {\n    document.body.style.overflow = \"hidden\"\n    setExpandedState(true)\n  }, [setExpandedState])\n\n  const zoomOut = useCallback(() => {\n    document.body.style.overflow = \"unset\"\n    setExpandedState(false)\n  }, [setExpandedState])\n\n  const controlKeys = useCallback(\n    (event: KeyboardEvent) => {\n      /**\n       * keyCode 27 is the ESC key\n       * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode\n       */\n      if (event.keyCode === 27 && expanded) {\n        // Exit fullscreen\n        zoomOut()\n      }\n    },\n    [zoomOut, expanded]\n  )\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", controlKeys, false)\n\n    return () => {\n      document.removeEventListener(\"keydown\", controlKeys, false)\n    }\n  }, [controlKeys])\n\n  return useMemo(() => {\n    return { expanded, zoomIn, zoomOut, fullHeight, fullWidth }\n  }, [expanded, zoomIn, zoomOut, fullHeight, fullWidth])\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ComponentType, ReactElement } from \"react\"\n\nimport hoistNonReactStatics from \"hoist-non-react-statics\"\n\nimport ElementFullscreenWrapper from \"@streamlit/lib/src/components/shared/ElementFullscreen/ElementFullscreenWrapper\"\n\nfunction withFullScreenWrapper<P extends { width: number }>(\n  WrappedComponent: ComponentType<React.PropsWithChildren<P>>\n): ComponentType<React.PropsWithChildren<P>> {\n  const ComponentWithFullScreenWrapper = (props: P): ReactElement => {\n    return (\n      <ElementFullscreenWrapper width={props.width}>\n        <WrappedComponent {...(props as P)}></WrappedComponent>\n      </ElementFullscreenWrapper>\n    )\n  }\n  ComponentWithFullScreenWrapper.displayName = `withFullScreenWrapper(${\n    WrappedComponent.displayName || WrappedComponent.name\n  })`\n\n  // Static methods must be copied over\n  // https://en.reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n  return hoistNonReactStatics(ComponentWithFullScreenWrapper, WrappedComponent)\n}\n\nexport default withFullScreenWrapper\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useEffect } from \"react\"\n\nimport { SignalConnection } from \"typed-signals\"\n\nimport {\n  isValidFormId,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\n\nexport class FormClearHelper {\n  private formClearListener?: SignalConnection\n\n  private lastWidgetMgr?: WidgetStateManager\n\n  private lastFormId?: string\n\n  /**\n   * Register the listener that will be called when the widget's form is cleared.\n   * This should be called in the `render` function of every class-based widget\n   * element - it mimics the behavior of a `useEffect` hook, and ensures that\n   * subscription and unsubscription happen correctly.\n   *\n   * Hooks-based widgets can just use `useEffect` and call\n   * `widgetMgr.addFormClearedListener` directly. Or just use the convenient\n   * hook `useFormClearHelper`, below.\n   */\n  public manageFormClearListener(\n    widgetMgr: WidgetStateManager,\n    formId: string,\n    listener: () => void\n  ): void {\n    // If we're already subscribed and our params haven't changed, early-out.\n    if (\n      notNullOrUndefined(this.formClearListener) &&\n      this.lastWidgetMgr === widgetMgr &&\n      this.lastFormId === formId\n    ) {\n      return\n    }\n\n    // Close our previous subscription, if we had one.\n    this.disconnect()\n\n    // If we're not part of a form, there's nothing to do.\n    if (!isValidFormId(formId)) {\n      return\n    }\n\n    // Make the new subscription.\n    this.formClearListener = widgetMgr.addFormClearedListener(formId, listener)\n    this.lastWidgetMgr = widgetMgr\n    this.lastFormId = formId\n  }\n\n  /**\n   * Disconnect from the form-clear signal, if we're connected.\n   * This should be called from the `componentWillUnmount` function of every\n   * element that uses it.\n   */\n  public disconnect(): void {\n    this.formClearListener?.disconnect()\n    this.formClearListener = undefined\n    this.lastWidgetMgr = undefined\n    this.lastFormId = undefined\n  }\n}\n\ninterface FormElementProtoInterface {\n  formId: string\n}\n\ninterface FormClearHelperArgs {\n  element: FormElementProtoInterface\n  widgetMgr: WidgetStateManager\n  onFormCleared: () => void\n}\n\nexport function useFormClearHelper({\n  element,\n  widgetMgr,\n  onFormCleared,\n}: FormClearHelperArgs): void {\n  useEffect(() => {\n    if (!isValidFormId(element.formId)) {\n      return\n    }\n\n    const formClearListener = widgetMgr.addFormClearedListener(\n      element.formId,\n      onFormCleared\n    )\n\n    return () => {\n      formClearListener.disconnect()\n    }\n  }, [element, widgetMgr, onFormCleared])\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, useContext } from \"react\"\n\nexport const useRequiredContext = <R,>(context: Context<R | null>): R => {\n  const foundContext = useContext(context)\n\n  if (foundContext === null || foundContext === undefined) {\n    throw new Error(\n      `useRequiredContext: ${context.displayName ?? \"context\"} not found`\n    )\n  }\n\n  return foundContext\n}\n"],"names":["replaceTemporaryColors","spec","theme","elementTheme","replaceAll","getIncreasingGreen","getDecreasingRed","getBlue80","getGray30","getGray70","getGray90","colors","bgColor","fadedText05","bgMix","replaceGOSpecificColors","CATEGORY_0","CATEGORY_1","CATEGORY_2","CATEGORY_3","CATEGORY_4","CATEGORY_5","CATEGORY_6","CATEGORY_7","CATEGORY_8","CATEGORY_9","categoryColors","getCategoricalColorsArray","replaceCategoricalColors","SEQUENTIAL_0","SEQUENTIAL_1","SEQUENTIAL_2","SEQUENTIAL_3","SEQUENTIAL_4","SEQUENTIAL_5","SEQUENTIAL_6","SEQUENTIAL_7","SEQUENTIAL_8","SEQUENTIAL_9","sequentialColors","getSequentialColorsArray","replaceSequentialColors","DIVERGING_0","DIVERGING_1","DIVERGING_2","DIVERGING_3","DIVERGING_4","DIVERGING_5","DIVERGING_6","DIVERGING_7","DIVERGING_8","DIVERGING_9","DIVERGING_10","divergingColors","getDivergingColorsArray","replaceDivergingColors","applyStreamlitTheme","layout","genericFonts","fontSizes","streamlitTheme","font","color","family","bodyFont","size","twoSmPx","title","headingColor","subtitleColor","bodyText","headingFont","convertRemToPx","md","pad","l","spacing","twoXS","xanchor","x","legend","side","valign","bordercolor","transparent","borderwidth","paper_bgcolor","plot_bgcolor","yaxis","ticklabelposition","zerolinecolor","smPx","standoff","twoXL","tickcolor","tickfont","gridcolor","minor","automargin","xaxis","showgrid","xl","zeroline","rangeselector","bgcolor","margin","sm","r","hoverlabel","borderColor","coloraxis","colorbar","thickness","xpad","outlinecolor","outlinewidth","len","y","ternary","aaxis","linecolor","baxis","caxis","merge","applyStreamlitThemeTemplateLayout","template","e","err","ensureError","logError","text","FULLSCREEN_EXPAND_ICON","width","height","name","path","FULLSCREEN_COLLAPSE_ICON","applyTheming","plotlyFigure","chartTheme","JSON","parse","stringify","themeDefaults","secondaryBg","layoutWithThemeDefaults","handleSelection","event","widgetMgr","element","fragmentId","selectionState","selection","points","point_indices","box","lasso","selectedPointIndices","Set","selectedBoxes","selectedLassos","selectedPoints","selections","forEach","point","push","legendgroup","data","undefined","fullData","notNullOrUndefined","pointIndex","add","pointIndices","length","item","type","xAndy","x0","x1","y0","y1","parseBoxSelection","returnSelection","xref","yref","pathData","replace","split","xVal","yVal","map","Number","parseLassoPath","Array","from","keysToSnakeCase","selectionMode","includes","PlotlyChartProto","SelectionMode","BOX","LASSO","currentSelectionState","getStringValue","newSelectionState","setStringValue","fromUi","withFullScreenWrapper","_ref","_plotlyFigure$layout","_initialFigureSpec$la","_plotlyFigure$layout5","_plotlyFigure$frames","_plotlyFigure$layout6","disabled","disableFullscreenMode","useTheme","expanded","isFullScreen","expand","collapse","useRequiredContext","ElementFullscreenContext","initialFigureSpec","useMemo","frames","id","setPlotlyFigure","useState","initialFigureState","getElementState","isSelectionActivated","isLassoSelectionActivated","isBoxSelectionActivated","isPointsSelectionActivated","POINTS","plotlyConfig","config","_config$modeBarButton","modeBarButtonsToAdd","icon","click","modeBarButtonsToRemove","displaylogo","useEffect","prevState","updatedClickMode","clickmode","updatedHoverMode","hovermode","updatedDragMode","dragmode","calculatedWidth","Math","max","useContainerWidth","min","calculatedHeight","prevFigure","handleSelectionCallback","useCallback","resetSelectionsCallback","resetSelectionInFigure","arguments","sendEmptySelection","setTimeout","trace","selectedpoints","formId","formClearHelper","FormClearHelper","manageFormClearListener","disconnect","_plotlyFigure$layout2","_plotlyFigure$layout3","_plotlyFigure$layout4","_jsx","className","children","Plot","style","visibility","onSelected","onDoubleClick","onDeselect","onInitialized","figure","setElementState","onUpdate","createContext","displayName","StyledFullScreenFrame","_styled","target","isExpanded","position","top","left","bottom","right","background","zIndex","zIndices","fullscreenWrapper","padding","paddingTop","sizes","fullScreenHeaderHeight","overflow","display","alignItems","justifyContent","fullHeight","fullWidth","zoomIn","zoomOut","useFullscreen","setFullScreen","useContext","LibContext","setExpanded","WindowDimensionsContext","setExpandedState","document","body","controlKeys","keyCode","addEventListener","removeEventListener","fullscreenContextValue","Provider","value","WrappedComponent","ComponentWithFullScreenWrapper","props","ElementFullscreenWrapper","hoistNonReactStatics","constructor","formClearListener","lastWidgetMgr","lastFormId","listener","this","isValidFormId","addFormClearedListener","_this$formClearListen","useFormClearHelper","onFormCleared","context","foundContext","_context$displayName","Error"],"sourceRoot":""}