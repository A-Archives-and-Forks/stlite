{"version":3,"file":"static/js/2561.90cfce52.chunk.js","mappings":"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","sources":["../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/utils.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/ObjectColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/TextColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/DateTimeColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/CheckboxColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/isIntegerType.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/NumberColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/SelectboxColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/ListColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/arrowUtils.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/LinkColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/ImageColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/ProgressColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/ChartColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/index.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useColumnLoader.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/EditingState.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useCustomTheme.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useDataLoader.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useColumnSort.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useDataEditor.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useTooltips.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useCustomRenderer.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useColumnSizer.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useTableSizer.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/cells/ImageCellEditor.tsx","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/styled-components.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/Tooltip.tsx","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/DataFrame.tsx","../../../streamlit/frontend/lib/src/components/widgets/Form/FormClearHelper.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  Theme as GlideTheme,\n  TextCell,\n  GridCellKind,\n  LoadingCell,\n  GridColumn,\n  BaseGridCell,\n} from \"@glideapps/glide-data-grid\"\nimport { toString, merge, isArray } from \"lodash\"\nimport numbro from \"numbro\"\nimport { sprintf } from \"sprintf-js\"\nimport moment, { Moment } from \"moment\"\nimport \"moment-duration-format\"\nimport \"moment-timezone\"\n\nimport { Type as ArrowType } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport {\n  notNullOrUndefined,\n  isNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\n/**\n * Interface used for defining the properties (configuration options) of a column.\n * These options can also be used to overwrite from user-defined column config.\n */\nexport interface BaseColumnProps {\n  // The id of the column:\n  readonly id: string\n  // The name of the column from the original data:\n  readonly name: string\n  // The display title of the column:\n  readonly title: string\n  // The index number of the column:\n  readonly indexNumber: number\n  // The arrow data type of the column:\n  readonly arrowType: ArrowType\n  // If `True`, the column can be edited:\n  readonly isEditable: boolean\n  // If `True`, the column is hidden (will not be shown):\n  readonly isHidden: boolean\n  // If `True`, the column is a table index:\n  readonly isIndex: boolean\n  // If `True`, the column is a stretched:\n  readonly isStretched: boolean\n  // If `True`, a value is required before the cell or row can be submitted:\n  readonly isRequired?: boolean\n  // The initial width of the column:\n  readonly width?: number\n  // A help text that is displayed on hovering the column header.\n  readonly help?: string\n  // Configuration options related to the column type:\n  readonly columnTypeOptions?: Record<string, any>\n  // The content alignment of the column:\n  readonly contentAlignment?: \"left\" | \"center\" | \"right\"\n  // The default value of the column used when adding a new row:\n  readonly defaultValue?: string | number | boolean\n  // Theme overrides for this column:\n  readonly themeOverride?: Partial<GlideTheme>\n  // A custom icon to be displayed in the column header:\n  readonly icon?: string\n}\n\n/**\n * The interface that is implemented by any column type.\n */\nexport interface BaseColumn extends BaseColumnProps {\n  readonly kind: string\n  // Defines the sort mode that should be used for this column type:\n  // default: Sorts by interpreting all values as strings.\n  // smart: Detects if value is a number or a string and sorts accordingly.\n  // raw: Sorts based on the actual type of the cell data value.\n  readonly sortMode: \"default\" | \"raw\" | \"smart\"\n  // Validate the input data for compatibility with the column type:\n  // Either returns a boolean indicating if the data is valid or not, or\n  // returns the corrected value.\n  validateInput?(data?: any): boolean | any\n  // Get a cell with the provided data for the column type:\n  getCell(data?: any, validate?: boolean): GridCell\n  // Get the raw value of the given cell:\n  getCellValue(cell: GridCell): any | null\n}\n\n/**\n * A type that describes the function signature used to create a column based on\n * some column properties.\n */\nexport type ColumnCreator = {\n  (props: BaseColumnProps): BaseColumn\n  readonly isEditableType: boolean\n}\n\n// See pydantic for inspiration: https://pydantic-docs.helpmanual.io/usage/types/#booleans\nconst BOOLEAN_TRUE_VALUES = [\"true\", \"t\", \"yes\", \"y\", \"on\", \"1\"]\nconst BOOLEAN_FALSE_VALUES = [\"false\", \"f\", \"no\", \"n\", \"off\", \"0\"]\n\n/**\n * Interface used for indicating if a cell contains an error.\n */\ninterface ErrorCell extends TextCell {\n  readonly isError: true\n}\n\n/**\n * Returns a cell with an error message.\n *\n * @param errorMsg: A short error message to use as display value.\n * @param errorDetails: The full error message to show when the user\n *                     clicks on a cell.\n *\n * @return a read-only GridCell object that can be used by glide-data-grid.\n */\nexport function getErrorCell(errorMsg: string, errorDetails = \"\"): ErrorCell {\n  errorMsg = `⚠️ ${errorMsg}`\n  return {\n    kind: GridCellKind.Text,\n    readonly: true,\n    allowOverlay: true,\n    data: errorMsg + (errorDetails ? `\\n\\n${errorDetails}\\n` : \"\"),\n    displayData: errorMsg,\n    isError: true,\n  } as ErrorCell\n}\n\n/**\n * Returns `true` if the given cell contains an error.\n * This can happen if the value type is not compatible with\n * the given value type.\n */\nexport function isErrorCell(cell: GridCell): cell is ErrorCell {\n  return cell.hasOwnProperty(\"isError\") && (cell as ErrorCell).isError\n}\n\ninterface CellWithTooltip extends BaseGridCell {\n  readonly tooltip: string\n}\n\n/**\n * Returns `true` if the given cell has a tooltip\n */\nexport function hasTooltip(cell: BaseGridCell): cell is CellWithTooltip {\n  return (\n    cell.hasOwnProperty(\"tooltip\") && (cell as CellWithTooltip).tooltip !== \"\"\n  )\n}\n/**\n * Interface used for indicating if a cell contains no value.\n */\ninterface MissingValueCell extends BaseGridCell {\n  readonly isMissingValue: true\n}\n\n/**\n * Returns `true` if the given cell contains no value (-> missing value).\n * For example, a number cell that contains null is interpreted as a missing value.\n */\nexport function isMissingValueCell(\n  cell: BaseGridCell\n): cell is MissingValueCell {\n  return (\n    cell.hasOwnProperty(\"isMissingValue\") &&\n    (cell as MissingValueCell).isMissingValue\n  )\n}\n\n/**\n * Returns an empty cell.\n */\nexport function getEmptyCell(missingCell = false): LoadingCell {\n  if (missingCell) {\n    return {\n      kind: GridCellKind.Loading,\n      allowOverlay: false,\n      isMissingValue: true,\n    } as LoadingCell\n  }\n\n  return {\n    kind: GridCellKind.Loading,\n    allowOverlay: false,\n  } as LoadingCell\n}\n\n/**\n * Returns an empty text cell.\n *\n * @param readonly: If true, returns a read-only version of the cell.\n * @param faded: If true, returns a faded version of the cell.\n *\n * @return a GridCell object that can be used by glide-data-grid.\n */\nexport function getTextCell(readonly: boolean, faded: boolean): TextCell {\n  const style = faded ? \"faded\" : \"normal\"\n  return {\n    kind: GridCellKind.Text,\n    data: \"\",\n    displayData: \"\",\n    allowOverlay: true,\n    readonly,\n    style,\n  } as TextCell\n}\n\n/**\n * Converts from our BaseColumn format to the glide-data-grid compatible GridColumn.\n */\nexport function toGlideColumn(column: BaseColumn): GridColumn {\n  return {\n    id: column.id,\n    title: column.title,\n    hasMenu: false,\n    themeOverride: column.themeOverride,\n    icon: column.icon,\n    ...(column.isStretched && {\n      grow: column.isIndex ? 1 : 3,\n    }),\n    ...(column.width && {\n      width: column.width,\n    }),\n  } as GridColumn\n}\n\n/**\n * Merges the default column parameters with the user-defined column parameters.\n *\n * @param defaultParams - The default column parameters.\n * @param userParams - The user-defined column parameters.\n *\n * @returns The merged column parameters.\n */\nexport function mergeColumnParameters(\n  defaultParams: Record<string, any> | undefined | null,\n  userParams: Record<string, any> | undefined | null\n): Record<string, any> {\n  if (isNullOrUndefined(defaultParams)) {\n    return userParams || {}\n  }\n\n  if (isNullOrUndefined(userParams)) {\n    return defaultParams || {}\n  }\n\n  return merge(defaultParams, userParams)\n}\n\n/**\n * Converts the given value of unknown type to an array without\n * the risks of any exceptions.\n *\n * @param data - The value to convert to an array.\n *\n * @returns The converted array or an empty array if the value cannot be interpreted as an array.\n */\nexport function toSafeArray(data: any): any[] {\n  if (isNullOrUndefined(data)) {\n    return []\n  }\n\n  if (typeof data === \"number\" || typeof data === \"boolean\") {\n    // Single number or boolean\n    return [data]\n  }\n\n  if (data instanceof Uint8Array) {\n    // Stlite: Uint8Array is used for any list data in fastparquet.\n    // It stores a json string representation in the Uint8Array.\n    // We need to convert this to a string first\n    // to later have it load as json.\n    data = new TextDecoder(\"utf-8\").decode(data)\n  }\n\n  if (typeof data === \"string\") {\n    if (data === \"\") {\n      // Empty string\n      return []\n    }\n\n    // Try to parse string to an array\n    if (data.trim().startsWith(\"[\") && data.trim().endsWith(\"]\")) {\n      // Support for JSON arrays: [\"foo\", 1, null, \"test\"]\n      try {\n        return JSON.parse(data)\n      } catch (error) {\n        return [data]\n      }\n    } else {\n      // Support for comma-separated values: \"foo,1,,test\"\n      return data.split(\",\")\n    }\n  }\n\n  try {\n    const parsedData = JSON.parse(\n      JSON.stringify(data, (_key, value) =>\n        typeof value === \"bigint\" ? Number(value) : value\n      )\n    )\n    if (!isArray(parsedData)) {\n      return [toSafeString(parsedData)]\n    }\n\n    return parsedData.map((value: any) =>\n      [\"string\", \"number\", \"boolean\", \"null\"].includes(typeof value)\n        ? value\n        : toSafeString(value)\n    )\n  } catch (error) {\n    return [toSafeString(data)]\n  }\n}\n\n/**\n * Converts the given value of unknown type to a string without\n * the risks of any exceptions.\n *\n * @param data - The value to convert to a string.\n *\n * @return The converted string or a string showing the type of the object as fallback.\n */\nexport function toSafeString(data: any): string {\n  try {\n    try {\n      return toString(data)\n    } catch (error) {\n      return JSON.stringify(data, (_key, value) =>\n        typeof value === \"bigint\" ? Number(value) : value\n      )\n    }\n  } catch (error) {\n    // This is most likely an object that cannot be converted to a string\n    // console.log converts this to `[object Object]` which we are doing here as well:\n    return `[${typeof data}]`\n  }\n}\n\n/**\n * Converts the given value of unknown type to a boolean without\n * the risks of any exceptions.\n *\n * @param value - The value to convert to a boolean.\n *\n * @return The converted boolean, null if the value is empty or undefined if the\n *         value cannot be interpreted as a boolean.\n */\nexport function toSafeBoolean(value: any): boolean | null | undefined {\n  if (isNullOrUndefined(value)) {\n    return null\n  }\n\n  if (typeof value === \"boolean\") {\n    return value\n  }\n\n  const cleanedValue = toSafeString(value).toLowerCase().trim()\n  if (cleanedValue === \"\") {\n    return null\n  } else if (BOOLEAN_TRUE_VALUES.includes(cleanedValue)) {\n    return true\n  } else if (BOOLEAN_FALSE_VALUES.includes(cleanedValue)) {\n    return false\n  }\n  // The value cannot be interpreted as boolean\n  return undefined\n}\n\n/**\n * Converts the given value of unknown type to a number without\n * the risks of any exceptions.\n *\n * @param value - The value to convert to a number.\n *\n * @returns The converted number or null if the value is empty or undefined or NaN if the\n *          value cannot be interpreted as a number.\n */\nexport function toSafeNumber(value: any): number | null {\n  // TODO(lukasmasuch): Should this return null as replacement for NaN?\n\n  if (isNullOrUndefined(value)) {\n    return null\n  }\n\n  if (isArray(value)) {\n    return NaN\n  }\n\n  if (typeof value === \"string\") {\n    if (value.trim().length === 0) {\n      // Empty string should return null\n      return null\n    }\n\n    try {\n      // Try to convert string to number via numbro:\n      // https://numbrojs.com/old-format.html#unformat\n      const unformattedValue = numbro.unformat(value.trim())\n      if (notNullOrUndefined(unformattedValue)) {\n        return unformattedValue\n      }\n    } catch (error) {\n      // Do nothing here\n    }\n  } else if (value instanceof Int32Array) {\n    // int values need to be extracted this way:\n    // eslint-disable-next-line prefer-destructuring\n    return Number(value[0])\n  }\n\n  return Number(value)\n}\n\n/**\n * Formats the given number to a string based on a provided format or the default format.\n *\n * @param value - The number to format.\n * @param format - The format to use. If not provided, the default format is used.\n * @param maxPrecision - The maximum number of decimals to show. This is only used by the default format.\n *                     If not provided, the default is 4 decimals and trailing zeros are hidden.\n *\n * @returns The formatted number as a string.\n */\nexport function formatNumber(\n  value: number,\n  format?: string | undefined,\n  maxPrecision?: number | undefined\n): string {\n  if (Number.isNaN(value) || !Number.isFinite(value)) {\n    return \"\"\n  }\n\n  if (isNullOrUndefined(format) || format === \"\") {\n    if (maxPrecision === 0) {\n      // Numbro is unable to format the number with 0 decimals.\n      value = Math.round(value)\n    }\n    return numbro(value).format(\n      notNullOrUndefined(maxPrecision)\n        ? `0,0.${\"0\".repeat(maxPrecision)}`\n        : `0,0.[0000]` // If no precision is given, use 4 decimals and hide trailing zeros\n    )\n  }\n\n  if (format === \"percent\") {\n    return new Intl.NumberFormat(undefined, {\n      style: \"percent\",\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(value)\n  } else if ([\"compact\", \"scientific\", \"engineering\"].includes(format)) {\n    return new Intl.NumberFormat(undefined, {\n      notation: format as any,\n    }).format(value)\n  }\n  return sprintf(format, value)\n}\n\n/**\n * Formats the given date to a string with the given format.\n *\n * @param momentDate The moment date to format.\n * @param format The format to use.\n *   If the format is `locale` the date will be formatted according to the user's locale.\n *   If the format is `relative` the date will be formatted as a relative time (e.g. \"2 hours ago\").\n *   Otherwise, it is interpreted as momentJS format string: https://momentjs.com/docs/#/displaying/format/\n * @returns The formatted date as a string.\n */\nexport function formatMoment(momentDate: Moment, format: string): string {\n  if (format === \"locale\") {\n    return new Intl.DateTimeFormat(undefined, {\n      dateStyle: \"medium\",\n      timeStyle: \"medium\",\n    }).format(momentDate.toDate())\n  } else if (format === \"distance\") {\n    return momentDate.fromNow()\n  } else if (format === \"relative\") {\n    return momentDate.calendar()\n  }\n  return momentDate.format(format)\n}\n\n/**\n * Converts the given value of unknown type to a date without\n * the risks of any exceptions.\n *\n * Note: Unix timestamps are only supported in seconds.\n *\n * @param value - The value to convert to a date.\n *\n * @returns The converted date or null if the value cannot be interpreted as a date.\n */\nexport function toSafeDate(value: any): Date | null | undefined {\n  if (isNullOrUndefined(value)) {\n    return null\n  }\n\n  // Return the value as-is if it is already a date\n  if (value instanceof Date) {\n    if (!isNaN(value.getTime())) {\n      return value\n    }\n    return undefined\n  }\n\n  if (typeof value === \"string\" && value.trim().length === 0) {\n    // Empty string should return null\n    return null\n  }\n\n  try {\n    const parsedTimestamp = Number(value)\n    if (!isNaN(parsedTimestamp)) {\n      // Unix timestamps can be have different units.\n      // As default, we handle the unit as second, but\n      // if it larger than a certain threshold, we assume\n      // a different unit. This is not 100% accurate, but\n      // should be good enough since it is unlikely that\n      // users are actually referring to years >= 5138.\n      let timestampInSeconds = parsedTimestamp\n      if (parsedTimestamp >= 10 ** 18) {\n        // Assume that the timestamp is in nanoseconds\n        // and adjust to seconds\n        timestampInSeconds = parsedTimestamp / 1000 ** 3\n      } else if (parsedTimestamp >= 10 ** 15) {\n        // Assume that the timestamp is in microseconds\n        // and adjust to seconds\n        timestampInSeconds = parsedTimestamp / 1000 ** 2\n      } else if (parsedTimestamp >= 10 ** 12) {\n        // Assume that the timestamp is in milliseconds\n        // and adjust to seconds\n        timestampInSeconds = parsedTimestamp / 1000\n      }\n\n      // Parse it as a unix timestamp in seconds\n      const parsedMomentDate = moment.unix(timestampInSeconds).utc()\n      if (parsedMomentDate.isValid()) {\n        return parsedMomentDate.toDate()\n      }\n    }\n\n    if (typeof value === \"string\") {\n      // Try to parse string via momentJS:\n      const parsedMomentDate = moment.utc(value)\n      if (parsedMomentDate.isValid()) {\n        return parsedMomentDate.toDate()\n      }\n      // The pasted value was not a valid date string\n      // Try to interpret value as time string instead (HH:mm:ss)\n      const parsedMomentTime = moment.utc(value, [\n        moment.HTML5_FMT.TIME_MS, // HH:mm:ss.SSS\n        moment.HTML5_FMT.TIME_SECONDS, // HH:mm:ss\n        moment.HTML5_FMT.TIME, // HH:mm\n      ])\n      if (parsedMomentTime.isValid()) {\n        return parsedMomentTime.toDate()\n      }\n    }\n  } catch (error) {\n    return undefined\n  }\n\n  // Unable to interpret this value as a date:\n  return undefined\n}\n\n/**\n * Count the number of decimals in a number.\n *\n * @param {number} value - The number to count the decimals for.\n *\n * @returns {number} The number of decimals.\n */\nexport function countDecimals(value: number): number {\n  if (value % 1 === 0) {\n    return 0\n  }\n\n  let numberStr = value.toString()\n\n  if (numberStr.indexOf(\"e\") !== -1) {\n    // Handle scientific notation\n    numberStr = value.toLocaleString(\"fullwide\", {\n      useGrouping: false,\n      maximumFractionDigits: 20,\n    })\n  }\n\n  if (numberStr.indexOf(\".\") === -1) {\n    // Fallback to 0 decimals, this can happen with\n    // extremely large or small numbers\n    return 0\n  }\n\n  return numberStr.split(\".\")[1].length\n}\n\n/**\n * Truncates a number to a specified number of decimal places without rounding.\n *\n * @param {number} value - The number to be truncated.\n * @param {number} decimals - The number of decimal places to preserve after truncation.\n *\n * @returns {number} The truncated number.\n *\n * @example\n * truncateDecimals(3.14159265, 2); // returns 3.14\n * truncateDecimals(123.456, 0); // returns 123\n */\nexport function truncateDecimals(value: number, decimals: number): number {\n  return decimals === 0\n    ? Math.trunc(value)\n    : Math.trunc(value * 10 ** decimals) / 10 ** decimals\n}\n\nconst LINE_BREAK_REGEX = new RegExp(/(\\r\\n|\\n|\\r)/gm)\n\n/**\n * Removes all line breaks from the given text.\n * @param text - The text to remove line breaks from.\n * @returns The text without line breaks.\n */\nexport function removeLineBreaks(text: string): string {\n  if (text.indexOf(\"\\n\") !== -1) {\n    return text.replace(LINE_BREAK_REGEX, \" \")\n  }\n  return text\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, TextCell, GridCellKind } from \"@glideapps/glide-data-grid\"\n\nimport {\n  notNullOrUndefined,\n  isNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  ColumnCreator,\n  toSafeString,\n  removeLineBreaks,\n} from \"./utils\"\n\n/**\n * A column type for read-only cells used as a fallback\n * for data types that are currently not supported for editing.\n */\nfunction ObjectColumn(props: BaseColumnProps): BaseColumn {\n  const cellTemplate = {\n    kind: GridCellKind.Text,\n    data: \"\",\n    displayData: \"\",\n    allowOverlay: true,\n    contentAlignment: props.contentAlignment,\n    readonly: true,\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as TextCell\n  return {\n    ...props,\n    kind: \"object\",\n    sortMode: \"default\",\n    isEditable: false, // Object columns are read-only.\n    getCell(data?: any): GridCell {\n      try {\n        const cellData = notNullOrUndefined(data) ? toSafeString(data) : null\n        const displayData = notNullOrUndefined(cellData)\n          ? removeLineBreaks(cellData) // Remove line breaks to show all content in the cell\n          : \"\"\n        return {\n          ...cellTemplate,\n          data: cellData,\n          displayData,\n          isMissingValue: isNullOrUndefined(data),\n        } as TextCell\n      } catch (error) {\n        return getErrorCell(\n          toSafeString(data),\n          `The value cannot be interpreted as a string. Error: ${error}`\n        )\n      }\n    },\n    getCellValue(cell: TextCell): string | null {\n      return cell.data === undefined ? null : cell.data\n    },\n  }\n}\n\nObjectColumn.isEditableType = false\n\nexport default ObjectColumn as ColumnCreator\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, TextCell, GridCellKind } from \"@glideapps/glide-data-grid\"\n\nimport {\n  notNullOrUndefined,\n  isNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  ColumnCreator,\n  toSafeString,\n  removeLineBreaks,\n} from \"./utils\"\n\nexport interface TextColumnParams {\n  // The maximum number of characters the user can enter into the text input.\n  readonly max_chars?: number\n  // Regular expression that the input's value must match for the value to pass\n  readonly validate?: string\n}\n\n/**\n * A column that supports rendering & editing of text values.\n */\nfunction TextColumn(props: BaseColumnProps): BaseColumn {\n  const parameters = (props.columnTypeOptions as TextColumnParams) || {}\n\n  let validateRegex: RegExp | string | undefined = undefined\n\n  if (parameters.validate) {\n    // Prepare the validation regex:\n    try {\n      // u flag allows unicode characters\n      // s flag allows . to match newlines\n      validateRegex = new RegExp(parameters.validate, \"us\")\n    } catch (error) {\n      // Put error message in validateRegex so we can display it in the cell\n      validateRegex = `Invalid validate regex: ${parameters.validate}.\\nError: ${error}`\n    }\n  }\n\n  const cellTemplate = {\n    kind: GridCellKind.Text,\n    data: \"\",\n    displayData: \"\",\n    allowOverlay: true,\n    contentAlignment: props.contentAlignment,\n    readonly: !props.isEditable,\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as TextCell\n\n  const validateInput = (data?: any): boolean | string => {\n    if (isNullOrUndefined(data)) {\n      if (props.isRequired) {\n        return false\n      }\n      return true\n    }\n\n    let cellData = toSafeString(data)\n    // A flag to indicate whether the value has been auto-corrected.\n    // This is used to decide if we should return the corrected value or true.\n    // But we still run all other validations on the corrected value below.\n    let corrected = false\n\n    if (parameters.max_chars && cellData.length > parameters.max_chars) {\n      cellData = cellData.slice(0, parameters.max_chars)\n      corrected = true\n    }\n\n    if (\n      validateRegex instanceof RegExp &&\n      validateRegex.test(cellData) === false\n    ) {\n      return false\n    }\n\n    return corrected ? cellData : true\n  }\n\n  return {\n    ...props,\n    kind: \"text\",\n    sortMode: \"default\",\n    validateInput,\n    getCell(data?: any, validate?: boolean): GridCell {\n      if (typeof validateRegex === \"string\") {\n        // The regex is invalid, we return an error to indicate this\n        // to the developer:\n        return getErrorCell(toSafeString(data), validateRegex)\n      }\n\n      if (validate) {\n        const validationResult = validateInput(data)\n        if (validationResult === false) {\n          // The input is invalid, we return an error cell which will\n          // prevent this cell to be inserted into the table.\n          // This cell should never be actually displayed to the user.\n          // It's mostly used internally to prevent invalid input to be\n          // inserted into the table.\n          return getErrorCell(toSafeString(data), \"Invalid input.\")\n        } else if (typeof validationResult === \"string\") {\n          // Apply corrections:\n          data = validationResult\n        }\n      }\n\n      try {\n        const cellData = notNullOrUndefined(data) ? toSafeString(data) : null\n        const displayData = notNullOrUndefined(cellData)\n          ? removeLineBreaks(cellData) // Remove line breaks to show all content in the cell\n          : \"\"\n        return {\n          ...cellTemplate,\n          isMissingValue: isNullOrUndefined(cellData),\n          data: cellData,\n          displayData,\n        } as TextCell\n      } catch (error) {\n        // This should never happen, but if it does, we want to show an error\n        return getErrorCell(\n          \"Incompatible value\",\n          `The value cannot be interpreted as string. Error: ${error}`\n        )\n      }\n    },\n    getCellValue(cell: TextCell): string | null {\n      return cell.data === undefined ? null : cell.data\n    },\n  }\n}\n\nTextColumn.isEditableType = true\n\nexport default TextColumn as ColumnCreator\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, GridCellKind } from \"@glideapps/glide-data-grid\"\nimport { DatePickerType } from \"@glideapps/glide-data-grid-cells\"\nimport moment, { Moment } from \"moment\"\nimport \"moment-timezone\"\n\nimport {\n  notNullOrUndefined,\n  isNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  mergeColumnParameters,\n  toSafeDate,\n  getErrorCell,\n  toSafeString,\n  formatMoment,\n} from \"./utils\"\n\n/**\n * Apply a timezone to a MomentJS date.\n *\n * @param momentDate The date to apply the timezone to\n * @param timezone The timezone to apply. This can be a timezone name\n * (e.g. \"America/New_York\" or \"UTC\") or a UTC offset (e.g. \"+05:00\" or \"-08:00\")\n * @returns The date with the timezone applied\n */\nfunction applyTimezone(momentDate: Moment, timezone: string): Moment {\n  if (timezone.startsWith(\"+\") || timezone.startsWith(\"-\")) {\n    // Timezone is a UTC offset (e.g. \"+05:00\" or \"-08:00\")\n    momentDate = momentDate.utcOffset(timezone, false)\n  } else {\n    // Timezone is a timezone name (e.g. \"America/New_York\" or \"UTC\")\n    momentDate = momentDate.tz(timezone)\n  }\n  return momentDate\n}\n\nexport interface DateTimeColumnParams {\n  // A momentJS formatting syntax to format the display value.\n  readonly format?: string\n  // Specifies the granularity that the value must adhere.\n  // For time and datetime, this is the number of seconds between each allowed value.\n  // For date, this is the number of days between each allowed value.\n  readonly step?: number\n  // A timezone identifier, e.g. \"America/New_York\", \"+05:00\", or \"UTC\"\n  readonly timezone?: string\n  // The minimum allowed value for editing. This needs to be an ISO formatted datetime/date/time string (UTC).\n  readonly min_value?: string\n  // The maximum allowed value for editing. This needs to be an ISO formatted datetime/date/time string (UTC).\n  readonly max_value?: string\n}\n\n/**\n * Base class for datetime columns. This class is not meant to be used directly.\n * Instead, use the DateColumn, TimeColumn, or DateTimeColumn classes.\n *\n * @param kind The kind of column. This should be one of \"date\", \"time\", or \"datetime\".\n * @param props The column properties\n * @param defaultFormat The default format to use for rendering and copy data\n * @param defaultStep The default step to use, can be overridden by the user\n * @param inputType The type of input to use for editing. This should be one of \"datetime-local\", \"time\", or \"date\".\n * @param toISOString A function that converts a Date object to an ISO formatted string\n * @param timezone The timezone to use to make the datetime values timezone aware.\n *\n * @returns A BaseColumn object\n */\nfunction BaseDateTimeColumn(\n  kind: string,\n  props: BaseColumnProps,\n  defaultFormat: string, // used for rendering and copy data\n  defaultStep: number,\n  inputType: \"datetime-local\" | \"time\" | \"date\",\n  toISOString: (date: Date) => string,\n  timezone?: string\n): BaseColumn {\n  const parameters = mergeColumnParameters(\n    // Default parameters:\n    {\n      format: defaultFormat,\n      step: defaultStep,\n      timezone,\n    },\n    // User parameters:\n    props.columnTypeOptions\n  ) as DateTimeColumnParams\n\n  let defaultTimezoneOffset: number | undefined = undefined\n  if (notNullOrUndefined(parameters.timezone)) {\n    // We try to determine the timezone offset based on today's date\n    // This is needed for the date picker to work correctly when the value is null\n    // TODO(lukasmasuch): But this might not be correct for dates in the past or future\n    // since the timezone offset might have changed based on a timezone name.\n    try {\n      defaultTimezoneOffset =\n        applyTimezone(moment(), parameters.timezone)?.utcOffset() || undefined\n    } catch (error) {\n      // Do nothing\n    }\n  }\n\n  let minDate: Date | undefined = undefined\n  if (notNullOrUndefined(parameters.min_value)) {\n    minDate = toSafeDate(parameters.min_value) || undefined\n  }\n\n  let maxDate: Date | undefined = undefined\n  if (notNullOrUndefined(parameters.max_value)) {\n    maxDate = toSafeDate(parameters.max_value) || undefined\n  }\n\n  const cellTemplate = {\n    kind: GridCellKind.Custom,\n    allowOverlay: true,\n    copyData: \"\",\n    readonly: !props.isEditable,\n    contentAlign: props.contentAlignment,\n    style: props.isIndex ? \"faded\" : \"normal\",\n    data: {\n      kind: \"date-picker-cell\",\n      date: undefined,\n      displayDate: \"\",\n      step: parameters.step?.toString() || \"1\",\n      format: inputType,\n      min: minDate,\n      max: maxDate,\n    },\n  } as DatePickerType\n\n  const validateInput = (data?: any): boolean | Date => {\n    const cellData: Date | null | undefined = toSafeDate(data)\n    if (cellData === null) {\n      if (props.isRequired) {\n        return false\n      }\n      return true\n    }\n\n    if (cellData === undefined) {\n      // Input cannot be interpreted as a date\n      return false\n    }\n\n    // Apply min_value configuration option:\n    if (\n      notNullOrUndefined(minDate) &&\n      // We compare on a string level so that it also works correctly for time and date values\n      toISOString(cellData) < toISOString(minDate)\n    ) {\n      return false\n    }\n\n    // Apply min_value configuration option:\n    if (\n      notNullOrUndefined(maxDate) &&\n      toISOString(cellData) > toISOString(maxDate)\n    ) {\n      return false\n    }\n\n    // TODO: validate step size\n\n    return true\n  }\n\n  return {\n    ...props,\n    kind,\n    sortMode: \"default\",\n    validateInput,\n    getCell(data?: any, validate?: boolean): GridCell {\n      if (validate === true) {\n        const validationResult = validateInput(data)\n        if (validationResult === false) {\n          // The input is invalid, we return an error cell which will\n          // prevent this cell to be inserted into the table.\n          return getErrorCell(toSafeString(data), \"Invalid input.\")\n        } else if (validationResult instanceof Date) {\n          // Apply corrections:\n          data = validationResult\n        }\n      }\n\n      const cellData = toSafeDate(data)\n\n      let copyData = \"\"\n      let displayDate = \"\"\n      // Initialize with default offset base on today's date\n      let timezoneOffset = defaultTimezoneOffset\n\n      if (cellData === undefined) {\n        return getErrorCell(\n          toSafeString(data),\n          \"The value cannot be interpreted as a datetime object.\"\n        )\n      }\n\n      if (cellData !== null) {\n        // Convert to moment object\n        let momentDate = moment.utc(cellData)\n\n        if (!momentDate.isValid()) {\n          // The moment date should never be invalid here.\n          return getErrorCell(\n            toSafeString(cellData),\n            `This should never happen. Please report this bug. \\nError: ${momentDate.toString()}`\n          )\n        }\n\n        if (parameters.timezone) {\n          try {\n            momentDate = applyTimezone(momentDate, parameters.timezone)\n          } catch (error) {\n            return getErrorCell(\n              momentDate.toISOString(),\n              `Failed to adjust to the provided timezone: ${parameters.timezone}. \\nError: ${error}`\n            )\n          }\n\n          timezoneOffset = momentDate.utcOffset()\n        }\n\n        try {\n          displayDate = formatMoment(\n            momentDate,\n            parameters.format || defaultFormat\n          )\n        } catch (error) {\n          return getErrorCell(\n            momentDate.toISOString(),\n            `Failed to format the date for rendering with: ${parameters.format}. \\nError: ${error}`\n          )\n        }\n        // Copy data should always use the default format\n        copyData = formatMoment(momentDate, defaultFormat)\n      }\n\n      return {\n        ...cellTemplate,\n        copyData,\n        isMissingValue: isNullOrUndefined(cellData),\n        data: {\n          ...cellTemplate.data,\n          date: cellData,\n          displayDate,\n          timezoneOffset,\n        },\n      } as DatePickerType\n    },\n    getCellValue(cell: DatePickerType): string | null {\n      return isNullOrUndefined(cell?.data?.date)\n        ? null\n        : toISOString(cell.data.date)\n    },\n  }\n}\n\n/**\n * Creates a new datetime column.\n * A datetime column supports optimized rendering and editing for datetime values.\n *\n * @param props The column properties.\n * @returns The new column.\n */\nexport default function DateTimeColumn(props: BaseColumnProps): BaseColumn {\n  // Do a smart selection of the default format based on the step size\n  let defaultFormat = \"YYYY-MM-DD HH:mm:ss\"\n  if (props.columnTypeOptions?.step >= 60) {\n    defaultFormat = \"YYYY-MM-DD HH:mm\"\n  } else if (props.columnTypeOptions?.step < 1) {\n    defaultFormat = \"YYYY-MM-DD HH:mm:ss.SSS\"\n  }\n\n  const timezone: string | undefined = props.arrowType?.meta?.timezone\n  const hasTimezone: boolean =\n    notNullOrUndefined(timezone) ||\n    // Timezone can also be configure by the user:\n    notNullOrUndefined(props?.columnTypeOptions?.timezone)\n\n  return BaseDateTimeColumn(\n    \"datetime\",\n    props,\n    hasTimezone ? defaultFormat + \"Z\" : defaultFormat,\n    1,\n    \"datetime-local\",\n    (date: Date): string => {\n      if (hasTimezone) {\n        return date.toISOString()\n      }\n      return date.toISOString().replace(\"Z\", \"\")\n    },\n    timezone\n  )\n}\n\nDateTimeColumn.isEditableType = true\n\n/**\n * Creates a new time column.\n * A time column supports optimized rendering and editing for time values.\n *\n * @param props The column properties.\n * @returns The new column.\n */\nexport function TimeColumn(props: BaseColumnProps): BaseColumn {\n  // Do a smart selection of the default format based on the step size\n  let defaultFormat = \"HH:mm:ss\"\n  if (props.columnTypeOptions?.step >= 60) {\n    defaultFormat = \"HH:mm\"\n  } else if (props.columnTypeOptions?.step < 1) {\n    defaultFormat = \"HH:mm:ss.SSS\"\n  }\n\n  return BaseDateTimeColumn(\n    \"time\",\n    props,\n    defaultFormat,\n    1,\n    \"time\",\n    (date: Date): string => {\n      // Only return the time part of the ISO string:\n      return date.toISOString().split(\"T\")[1].replace(\"Z\", \"\")\n    }\n  )\n}\n\nTimeColumn.isEditableType = true\n\n/**\n * Creates a new date column.\n * A date column supports optimized rendering and editing for date values.\n *\n * @param props The column properties.\n * @returns The new column.\n */\nexport function DateColumn(props: BaseColumnProps): BaseColumn {\n  return BaseDateTimeColumn(\n    \"date\",\n    props,\n    \"YYYY-MM-DD\",\n    1,\n    \"date\",\n    (date: Date): string => {\n      // Only return the date part of the ISO string:\n      return date.toISOString().split(\"T\")[0]\n    }\n  )\n}\n\nDateColumn.isEditableType = true\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  BooleanCell,\n  GridCellKind,\n} from \"@glideapps/glide-data-grid\"\n\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  ColumnCreator,\n  toSafeString,\n  toSafeBoolean,\n} from \"./utils\"\n\n/**\n * A column type that supports optimized rendering and editing for boolean values\n * by using checkboxes.\n */\nfunction CheckboxColumn(props: BaseColumnProps): BaseColumn {\n  const cellTemplate = {\n    kind: GridCellKind.Boolean,\n    data: false,\n    allowOverlay: false, // no overlay possible\n    contentAlign: props.contentAlignment,\n    readonly: !props.isEditable,\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as BooleanCell\n\n  return {\n    ...props,\n    kind: \"checkbox\",\n    sortMode: \"default\",\n    getCell(data?: any): GridCell {\n      let cellData = null\n\n      cellData = toSafeBoolean(data)\n      if (cellData === undefined) {\n        return getErrorCell(\n          toSafeString(data),\n          `The value cannot be interpreted as boolean.`\n        )\n      }\n\n      // We are not setting isMissingValue here because the checkbox column\n      // does not work with the missing cell rendering.\n      return {\n        ...cellTemplate,\n        data: cellData,\n        isMissingValue: isNullOrUndefined(cellData),\n      } as BooleanCell\n    },\n    getCellValue(cell: BooleanCell): boolean | null {\n      return cell.data === undefined ? null : cell.data\n    },\n  }\n}\n\nCheckboxColumn.isEditableType = true\n\nexport default CheckboxColumn as ColumnCreator\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns true if a given arrow type name is an integer type.\n */\nexport function isIntegerType(arrowTypeName: string): boolean {\n  return (\n    (arrowTypeName.startsWith(\"int\") &&\n      !arrowTypeName.startsWith(\"interval\")) ||\n    arrowTypeName === \"range\" ||\n    arrowTypeName.startsWith(\"uint\")\n  )\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, GridCellKind, NumberCell } from \"@glideapps/glide-data-grid\"\n\nimport { Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport {\n  notNullOrUndefined,\n  isNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport { isIntegerType } from \"@streamlit/lib/src/components/widgets/DataFrame/isIntegerType\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  ColumnCreator,\n  toSafeString,\n  mergeColumnParameters,\n  toSafeNumber,\n  formatNumber,\n  countDecimals,\n  truncateDecimals,\n} from \"./utils\"\n\nexport interface NumberColumnParams {\n  // The minimum allowed value for editing. Is set to 0 for unsigned values.\n  readonly min_value?: number\n  // The maximum allowed value for editing.\n  readonly max_value?: number\n  // A formatting syntax (e.g. sprintf) to format the display value.\n  // This can be used for adding prefix or suffix, or changing the number of decimals of the display value.\n  readonly format?: string\n  // Specifies the granularity that the value must adhere.\n  // This will also influence the maximum precision. This will impact the number of decimals\n  // allowed to be entered as well as the number of decimals displayed (if format is not specified).\n  // This is set to 1 for integer types.\n  readonly step?: number\n}\n\n/**\n * A column types that supports optimized rendering and editing for numbers.\n * This supports float, integer, and unsigned integer types.\n */\nfunction NumberColumn(props: BaseColumnProps): BaseColumn {\n  const arrowTypeName = Quiver.getTypeName(props.arrowType)\n\n  const parameters = mergeColumnParameters(\n    // Default parameters:\n    {\n      // Set step to 1 for integer types\n      step: isIntegerType(arrowTypeName) ? 1 : undefined,\n      // if uint (unsigned int), only positive numbers are allowed\n      min_value: arrowTypeName.startsWith(\"uint\") ? 0 : undefined,\n    } as NumberColumnParams,\n    // User parameters:\n    props.columnTypeOptions\n  ) as NumberColumnParams\n\n  const allowNegative =\n    isNullOrUndefined(parameters.min_value) || parameters.min_value < 0\n\n  const fixedDecimals =\n    notNullOrUndefined(parameters.step) && !Number.isNaN(parameters.step)\n      ? countDecimals(parameters.step)\n      : undefined\n\n  const cellTemplate = {\n    kind: GridCellKind.Number,\n    data: undefined,\n    displayData: \"\",\n    readonly: !props.isEditable,\n    allowOverlay: true,\n    contentAlign: props.contentAlignment || \"right\",\n    style: props.isIndex ? \"faded\" : \"normal\",\n    allowNegative,\n    fixedDecimals,\n  } as NumberCell\n\n  const validateInput = (data?: any): boolean | number => {\n    let cellData: number | null = toSafeNumber(data)\n\n    if (isNullOrUndefined(cellData)) {\n      if (props.isRequired) {\n        return false\n      }\n      return true\n    }\n\n    if (Number.isNaN(cellData)) {\n      return false\n    }\n\n    // A flag to indicate whether the value has been auto-corrected.\n    // This is used to decide if we should return the corrected value or true.\n    // But we still run all other validations on the corrected value below.\n    let corrected = false\n\n    // Apply max_value configuration option:\n    if (\n      notNullOrUndefined(parameters.max_value) &&\n      cellData > parameters.max_value\n    ) {\n      cellData = parameters.max_value\n      corrected = true\n    }\n\n    // Apply min_value configuration option:\n    if (\n      notNullOrUndefined(parameters.min_value) &&\n      cellData < parameters.min_value\n    ) {\n      // Only return false, since correcting it negatively impacts\n      // the user experience.\n      return false\n    }\n\n    // TODO(lukasmasuch): validate step size?\n    // if (notNullOrUndefined(parameters.step) && parameters.step !== 1)\n\n    return corrected ? cellData : true\n  }\n\n  return {\n    ...props,\n    kind: \"number\",\n    sortMode: \"smart\",\n    validateInput,\n    getCell(data?: any, validate?: boolean): GridCell {\n      if (validate === true) {\n        const validationResult = validateInput(data)\n        if (validationResult === false) {\n          // The input is invalid, we return an error cell which will\n          // prevent this cell to be inserted into the table.\n          // This cell should never be actually displayed to the user.\n          // It's mostly used internally to prevent invalid input to be\n          // inserted into the table.\n          return getErrorCell(toSafeString(data), \"Invalid input.\")\n        } else if (typeof validationResult === \"number\") {\n          // Apply corrections:\n          data = validationResult\n        }\n      }\n\n      let cellData: number | null = toSafeNumber(data)\n      let displayData = \"\"\n\n      if (notNullOrUndefined(cellData)) {\n        if (Number.isNaN(cellData)) {\n          return getErrorCell(\n            toSafeString(data),\n            \"The value cannot be interpreted as a number.\"\n          )\n        }\n\n        // Cut decimals:\n        if (notNullOrUndefined(fixedDecimals)) {\n          cellData = truncateDecimals(cellData, fixedDecimals)\n        }\n\n        // Check if the value is larger than the maximum supported value:\n        if (Number.isInteger(cellData) && !Number.isSafeInteger(cellData)) {\n          return getErrorCell(\n            toSafeString(data),\n            \"The value is larger than the maximum supported integer values in number columns (2^53).\"\n          )\n        }\n\n        try {\n          displayData = formatNumber(\n            cellData,\n            parameters.format,\n            fixedDecimals\n          )\n        } catch (error) {\n          return getErrorCell(\n            toSafeString(cellData),\n            notNullOrUndefined(parameters.format)\n              ? `Failed to format the number based on the provided format configuration: (${parameters.format}). Error: ${error}`\n              : `Failed to format the number. Error: ${error}`\n          )\n        }\n      }\n\n      return {\n        ...cellTemplate,\n        data: cellData,\n        displayData,\n        isMissingValue: isNullOrUndefined(cellData),\n      } as NumberCell\n    },\n    getCellValue(cell: NumberCell): number | null {\n      return cell.data === undefined ? null : cell.data\n    },\n  }\n}\n\nNumberColumn.isEditableType = true\n\nexport default NumberColumn as ColumnCreator\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, GridCellKind } from \"@glideapps/glide-data-grid\"\nimport { DropdownCellType } from \"@glideapps/glide-data-grid-cells\"\n\nimport { Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport {\n  isNullOrUndefined,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  ColumnCreator,\n  getErrorCell,\n  toSafeString,\n  mergeColumnParameters,\n  toSafeNumber,\n  toSafeBoolean,\n} from \"./utils\"\n\nexport interface SelectboxColumnParams {\n  /** A list of options available in the selectbox.\n   * Every value in the column needs to match one of the options.\n   */\n  readonly options: (string | number | boolean)[]\n}\n\n/**\n * A column type that supports optimized rendering and editing for categorical values\n * by using a selectbox. This is automatically used by categorical columns (Pandas).\n *\n */\nfunction SelectboxColumn(props: BaseColumnProps): BaseColumn {\n  // The selectbox column can be either string, number or boolean type\n  // based on the options type.\n  let dataType: \"number\" | \"boolean\" | \"string\" = \"string\"\n\n  const parameters = mergeColumnParameters(\n    // Default parameters:\n    {\n      options:\n        Quiver.getTypeName(props.arrowType) === \"bool\" ? [true, false] : [],\n    },\n    // User parameters:\n    props.columnTypeOptions\n  ) as SelectboxColumnParams\n\n  const uniqueTypes = new Set(parameters.options.map(x => typeof x))\n  if (uniqueTypes.size === 1) {\n    if (uniqueTypes.has(\"number\") || uniqueTypes.has(\"bigint\")) {\n      dataType = \"number\"\n    } else if (uniqueTypes.has(\"boolean\")) {\n      dataType = \"boolean\"\n    }\n  }\n\n  const cellTemplate = {\n    kind: GridCellKind.Custom,\n    allowOverlay: true,\n    copyData: \"\",\n    contentAlign: props.contentAlignment,\n    readonly: !props.isEditable,\n    data: {\n      kind: \"dropdown-cell\",\n      allowedValues: [\n        // Add empty option if the column is not configured as required:\n        ...(props.isRequired !== true ? [null] : []),\n        ...parameters.options\n          .filter(opt => opt !== null && opt !== \"\") // ignore empty option if it exists\n          .map(opt => toSafeString(opt)), // convert everything to string\n      ],\n      value: \"\",\n      readonly: !props.isEditable,\n    },\n  } as DropdownCellType\n\n  return {\n    ...props,\n    kind: \"selectbox\",\n    sortMode: \"default\",\n    getCell(data?: any, validate?: boolean): GridCell {\n      // Empty string refers to a missing value\n      let cellData = null\n      if (notNullOrUndefined(data) && data !== \"\") {\n        cellData = toSafeString(data)\n      }\n\n      if (validate && !cellTemplate.data.allowedValues.includes(cellData)) {\n        return getErrorCell(\n          toSafeString(cellData),\n          `The value is not part of the allowed options.`\n        )\n      }\n\n      return {\n        ...cellTemplate,\n        isMissingValue: cellData === null,\n        copyData: cellData || \"\", // Column sorting is done via the copyData value\n        data: {\n          ...cellTemplate.data,\n          value: cellData,\n        },\n      } as DropdownCellType\n    },\n    getCellValue(cell: DropdownCellType): string | number | boolean | null {\n      if (isNullOrUndefined(cell.data?.value) || cell.data?.value === \"\") {\n        return null\n      }\n      if (dataType === \"number\") {\n        return toSafeNumber(cell.data?.value) ?? null\n      } else if (dataType === \"boolean\") {\n        return toSafeBoolean(cell.data?.value) ?? null\n      }\n      return cell.data?.value\n    },\n  }\n}\n\nSelectboxColumn.isEditableType = true\n\nexport default SelectboxColumn as ColumnCreator\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, BubbleCell, GridCellKind } from \"@glideapps/glide-data-grid\"\nimport { isString } from \"lodash\"\n\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  ColumnCreator,\n  toSafeArray,\n  toSafeString,\n  isMissingValueCell,\n} from \"./utils\"\n\n/**\n * A column type that supports optimized rendering values of array/list types.\n */\nfunction ListColumn(props: BaseColumnProps): BaseColumn {\n  const cellTemplate = {\n    kind: GridCellKind.Bubble,\n    data: [],\n    allowOverlay: true,\n    contentAlign: props.contentAlignment,\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as BubbleCell\n\n  return {\n    ...props,\n    kind: \"list\",\n    sortMode: \"default\",\n    isEditable: false, // List column is always readonly\n    getCell(data?: any): GridCell {\n      const cellData = isNullOrUndefined(data) ? [] : toSafeArray(data)\n\n      return {\n        ...cellTemplate,\n        data: cellData,\n        isMissingValue: isNullOrUndefined(data),\n        copyData: isNullOrUndefined(data)\n          ? \"\"\n          : toSafeString(\n              cellData.map((x: any) =>\n                // Replace commas with spaces since commas are used to\n                // separate the list items.\n                isString(x) && x.includes(\",\") ? x.replace(/,/g, \" \") : x\n              )\n            ),\n      } as BubbleCell\n    },\n    getCellValue(cell: BubbleCell): string[] | null {\n      if (isNullOrUndefined(cell.data) || isMissingValueCell(cell)) {\n        return null\n      }\n\n      return cell.data\n    },\n  }\n}\n\nListColumn.isEditableType = false\n\nexport default ListColumn as ColumnCreator\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  Theme as GlideTheme,\n  TextCell,\n  NumberCell,\n  GridCellKind,\n} from \"@glideapps/glide-data-grid\"\nimport { DatePickerType } from \"@glideapps/glide-data-grid-cells\"\nimport moment from \"moment\"\n\nimport {\n  DataFrameCell,\n  Quiver,\n  Type as ArrowType,\n} from \"@streamlit/lib/src/dataframes/Quiver\"\nimport {\n  notNullOrUndefined,\n  isNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  ColumnCreator,\n  ObjectColumn,\n  CheckboxColumn,\n  NumberColumn,\n  TextColumn,\n  SelectboxColumn,\n  ListColumn,\n  isErrorCell,\n  DateTimeColumn,\n  TimeColumn,\n  DateColumn,\n  removeLineBreaks,\n} from \"./columns\"\n\n/**\n * Extracts a CSS property value from a given CSS style string by using a regex.\n *\n * @param htmlElementId - The ID of the HTML element to extract the property for.\n * @param property - The css property to extract the value for.\n * @param cssStyle - The css style string.\n *\n * @return the CSS property value or undefined if the property is not found.\n */\nexport function extractCssProperty(\n  htmlElementId: string,\n  property: string,\n  cssStyle: string\n): string | undefined {\n  // This regex is supposed to extract the value of a CSS property\n  // for a specified HTML element ID from a CSS style string:\n  const regex = new RegExp(\n    `${htmlElementId}[,\\\\s].*{(?:[^}]*[\\\\s;]{1})?${property}:\\\\s*([^;}]+)[;]?.*}`,\n    \"gm\"\n  )\n  // Makes the regex simpler to match the element correctly:\n  cssStyle = cssStyle.replace(/{/g, \" {\")\n\n  const match = regex.exec(cssStyle)\n  if (match) {\n    return match[1].trim()\n  }\n\n  return undefined\n}\n/**\n * Applies pandas styler CSS to style the cell.\n *\n * @param cell: The cell to style.\n * @param cssId: The css ID of the cell.\n * @param cssStyles: All CSS styles from pandas styler.\n *\n * @return a styled grid cell.\n */\nexport function applyPandasStylerCss(\n  cell: GridCell,\n  cssId: string,\n  cssStyles: string\n): GridCell {\n  const themeOverride = {} as Partial<GlideTheme>\n\n  // Extract and apply the font color\n  const fontColor = extractCssProperty(cssId, \"color\", cssStyles)\n  if (fontColor) {\n    themeOverride.textDark = fontColor\n  }\n\n  // Extract and apply the background color\n  const backgroundColor = extractCssProperty(\n    cssId,\n    \"background-color\",\n    cssStyles\n  )\n  if (backgroundColor) {\n    themeOverride.bgCell = backgroundColor\n  }\n\n  if (backgroundColor === \"yellow\" && fontColor === undefined) {\n    // Yellow is used by pandas styler as the default highlight color.\n    // But yellow won't work well with our default font color in dark mode.\n    // Therefore, we are overriding the font color to our dark font color which\n    // always works well with yellow background.\n    themeOverride.textDark = \"#31333F\"\n  }\n\n  if (themeOverride) {\n    // Apply the background and font color in the theme override\n    return {\n      ...cell,\n      themeOverride,\n    }\n  }\n  return cell\n}\n\n/**\n * Maps the data type from Arrow to a column type.\n */\nexport function getColumnTypeFromArrow(arrowType: ArrowType): ColumnCreator {\n  let typeName = arrowType ? Quiver.getTypeName(arrowType) : null\n\n  if (!typeName) {\n    // Use object column as fallback\n    return ObjectColumn\n  }\n\n  typeName = typeName.toLowerCase().trim()\n  // Match based on arrow types\n  if ([\"unicode\", \"empty\"].includes(typeName)) {\n    return TextColumn\n  }\n\n  if ([\"datetime\", \"datetimetz\"].includes(typeName)) {\n    return DateTimeColumn\n  }\n  if (typeName === \"time\") {\n    return TimeColumn\n  }\n  if (typeName === \"date\") {\n    return DateColumn\n  }\n  if ([\"object\", \"decimal\", \"bytes\"].includes(typeName)) {\n    return ObjectColumn\n  }\n  if ([\"bool\"].includes(typeName)) {\n    return CheckboxColumn\n  }\n  if (\n    [\n      \"int8\",\n      \"int16\",\n      \"int32\",\n      \"int64\",\n      \"uint8\",\n      \"uint16\",\n      \"uint32\",\n      \"uint64\",\n      \"float16\",\n      \"float32\",\n      \"float64\",\n      \"float96\",\n      \"float128\",\n      \"range\", // The default index in pandas uses a range type.\n    ].includes(typeName)\n  ) {\n    return NumberColumn\n  }\n  if (typeName === \"categorical\") {\n    return SelectboxColumn\n  }\n  if (typeName.startsWith(\"list\")) {\n    return ListColumn\n  }\n\n  return ObjectColumn\n}\n\n/**\n * Creates the column props for an index column from the Arrow metadata.\n *\n * @param data - The Arrow data.\n * @param indexPosition - The numeric position of the index column.\n *\n * @return the column props for the index column.\n */\nexport function getIndexFromArrow(\n  data: Quiver,\n  indexPosition: number\n): BaseColumnProps {\n  const arrowType = data.types.index[indexPosition]\n  const title = data.indexNames[indexPosition]\n  let isEditable = true\n\n  if (Quiver.getTypeName(arrowType) === \"range\") {\n    // Range indices are not editable\n    isEditable = false\n  }\n\n  return {\n    id: `index-${indexPosition}`,\n    name: title,\n    title,\n    isEditable,\n    arrowType,\n    isIndex: true,\n    isHidden: false,\n  } as BaseColumnProps\n}\n\n/**\n * Creates the column props for a data column from the Arrow metadata.\n *\n * @param data - The Arrow data.\n * @param columnPosition - The numeric position of the data column.\n *\n * @return the column props for the data column.\n */\nexport function getColumnFromArrow(\n  data: Quiver,\n  columnPosition: number\n): BaseColumnProps {\n  const title = data.columns[0][columnPosition]\n  let arrowType = data.types.data[columnPosition]\n\n  if (isNullOrUndefined(arrowType)) {\n    // Use empty column type as fallback\n    arrowType = {\n      meta: null,\n      numpy_type: \"object\",\n      pandas_type: \"object\",\n    } as ArrowType\n  }\n\n  let columnTypeOptions\n  if (Quiver.getTypeName(arrowType) === \"categorical\") {\n    // Get the available categories and use it in column type metadata\n    const options = data.getCategoricalOptions(columnPosition)\n    if (notNullOrUndefined(options)) {\n      columnTypeOptions = {\n        options,\n      }\n    }\n  }\n\n  return {\n    id: `column-${title}-${columnPosition}`,\n    name: title,\n    title,\n    isEditable: true,\n    arrowType,\n    columnTypeOptions,\n    isIndex: false,\n    isHidden: false,\n  } as BaseColumnProps\n}\n\n/**\n * Creates the column props for an empty index column.\n * This is used for DataFrames that don't have any index.\n * At least one column is required for glide.\n */\nexport function getEmptyIndexColumn(): BaseColumnProps {\n  return {\n    id: `empty-index`,\n    title: \"\",\n    indexNumber: 0,\n    isEditable: false,\n    isIndex: true,\n  } as BaseColumnProps\n}\n\n/**\n * Creates the column props for all columns from the Arrow metadata.\n *\n * @param data - The Arrow data.\n * @return the column props for all columns.\n */\nexport function getAllColumnsFromArrow(data: Quiver): BaseColumnProps[] {\n  const columns: BaseColumnProps[] = []\n\n  // TODO(lukasmasuch): use data.dimensions instead here?\n  const numIndices = data.types?.index?.length ?? 0\n  const numColumns = data.columns?.[0]?.length ?? 0\n\n  if (numIndices === 0 && numColumns === 0) {\n    // Tables that don't have any columns cause an exception in glide-data-grid.\n    // As a workaround, we are adding an empty index column in this case.\n    columns.push(getEmptyIndexColumn())\n    return columns\n  }\n\n  for (let i = 0; i < numIndices; i++) {\n    const column = {\n      ...getIndexFromArrow(data, i),\n      indexNumber: i,\n    } as BaseColumnProps\n\n    columns.push(column)\n  }\n\n  for (let i = 0; i < numColumns; i++) {\n    const column = {\n      ...getColumnFromArrow(data, i),\n      indexNumber: i + numIndices,\n    } as BaseColumnProps\n\n    columns.push(column)\n  }\n  return columns\n}\n\n/**\n * Returns a glide-data-grid compatible cell object based on the\n * cell data from the Quiver (Arrow) object. Different types of data will\n * result in different cell types.\n *\n * @param column - The colum of the cell.\n * @param arrowCell - The dataframe cell object from Arrow.\n * @param cssStyles - Optional css styles to apply on the cell.\n *\n * @return a GridCell object that can be used by glide-data-grid.\n */\nexport function getCellFromArrow(\n  column: BaseColumn,\n  arrowCell: DataFrameCell,\n  cssStyles: string | undefined = undefined\n): GridCell {\n  let cellTemplate\n  if (column.kind === \"object\") {\n    // Always use display value from Quiver for object types\n    // these are special types that the dataframe only support in read-only mode.\n    cellTemplate = column.getCell(\n      notNullOrUndefined(arrowCell.content)\n        ? removeLineBreaks(\n            Quiver.format(\n              arrowCell.content,\n              arrowCell.contentType,\n              arrowCell.field\n            )\n          )\n        : null\n    )\n  } else if (\n    [\"time\", \"date\", \"datetime\"].includes(column.kind) &&\n    notNullOrUndefined(arrowCell.content) &&\n    (typeof arrowCell.content === \"number\" ||\n      typeof arrowCell.content === \"bigint\")\n  ) {\n    // This is a special case where we want to already parse a numerical timestamp\n    // to a date object based on the arrow field metadata.\n    // Our implementation only supports unix timestamps in seconds, so we need to\n    // do some custom conversion here.\n    let parsedDate\n    if (\n      Quiver.getTypeName(column.arrowType) === \"time\" &&\n      notNullOrUndefined(arrowCell.field?.type?.unit)\n    ) {\n      // Time values needs to be adjusted to seconds based on the unit\n      parsedDate = moment\n        .unix(Quiver.adjustTimestamp(arrowCell.content, arrowCell.field))\n        .utc()\n        .toDate()\n    } else {\n      // All other datetime related values are assumed to be in milliseconds\n      parsedDate = moment.utc(Number(arrowCell.content)).toDate()\n    }\n\n    cellTemplate = column.getCell(parsedDate)\n  } else {\n    cellTemplate = column.getCell(arrowCell.content)\n  }\n\n  if (isErrorCell(cellTemplate)) {\n    // Directly return error cells without any additional modification\n    return cellTemplate\n  }\n\n  if (!column.isEditable) {\n    // Only apply display content and css styles to non-editable cells.\n    if (notNullOrUndefined(arrowCell.displayContent)) {\n      const displayData = removeLineBreaks(arrowCell.displayContent)\n      // If the display content is set, use that instead of the content.\n      // This is only supported for text, object, date, datetime, time and number cells.\n      // Non-editable datetime cells will use the text cell kind\n      // so we don't need to handle date-time-cell cells extra here.\n      if (cellTemplate.kind === GridCellKind.Text) {\n        cellTemplate = {\n          ...cellTemplate,\n          displayData,\n        } as TextCell\n      } else if (cellTemplate.kind === GridCellKind.Number) {\n        cellTemplate = {\n          ...cellTemplate,\n          displayData,\n        } as NumberCell\n      } else if (\n        cellTemplate.kind === GridCellKind.Custom &&\n        (cellTemplate as DatePickerType).data?.kind === \"date-picker-cell\"\n      ) {\n        cellTemplate = {\n          ...cellTemplate,\n          data: {\n            ...(cellTemplate as DatePickerType).data,\n            displayDate: displayData,\n          },\n        } as DatePickerType\n      }\n    }\n\n    if (cssStyles && arrowCell.cssId) {\n      cellTemplate = applyPandasStylerCss(\n        cellTemplate,\n        arrowCell.cssId,\n        cssStyles\n      )\n    }\n  }\n  return cellTemplate\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, UriCell, GridCellKind } from \"@glideapps/glide-data-grid\"\n\nimport {\n  notNullOrUndefined,\n  isNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  toSafeString,\n  getErrorCell,\n  ColumnCreator,\n} from \"./utils\"\n\nexport interface LinkColumnParams {\n  // The maximum number of characters the user can enter into the text input.\n  readonly max_chars?: number\n  // Regular expression that the input's value must match for the value to pass\n  readonly validate?: string\n}\n\n/**\n * The link column is a special column that interprets the cell content as\n * an hyperlink / url and allows the user to click on it.\n */\nfunction LinkColumn(props: BaseColumnProps): BaseColumn {\n  const parameters = (props.columnTypeOptions as LinkColumnParams) || {}\n\n  let validateRegex: RegExp | string | undefined = undefined\n\n  if (parameters.validate) {\n    // Prepare the validation regex:\n    try {\n      // u flag allows unicode characters\n      // s flag allows . to match newlines\n      validateRegex = new RegExp(parameters.validate, \"us\")\n    } catch (error) {\n      // Put error message in validateRegex so we can display it in the cell\n      validateRegex = `Invalid validate regex: ${parameters.validate}.\\nError: ${error}`\n    }\n  }\n\n  const cellTemplate = {\n    kind: GridCellKind.Uri,\n    data: \"\",\n    readonly: !props.isEditable,\n    allowOverlay: true,\n    contentAlign: props.contentAlignment,\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as UriCell\n\n  const validateInput = (data?: any): boolean | string => {\n    if (isNullOrUndefined(data)) {\n      if (props.isRequired) {\n        return false\n      }\n      return true\n    }\n\n    let cellData = toSafeString(data)\n    // A flag to indicate whether the value has been auto-corrected.\n    // This is used to decide if we should return the corrected value or true.\n    // But we still run all other validations on the corrected value below.\n    let corrected = false\n\n    if (parameters.max_chars) {\n      if (cellData.length > parameters.max_chars) {\n        // Correct the value\n        cellData = cellData.slice(0, parameters.max_chars)\n        corrected = true\n      }\n    }\n\n    if (\n      validateRegex instanceof RegExp &&\n      validateRegex.test(cellData) === false\n    ) {\n      return false\n    }\n\n    return corrected ? cellData : true\n  }\n\n  return {\n    ...props,\n    kind: \"link\",\n    sortMode: \"default\",\n    validateInput,\n    getCell(data?: any, validate?: boolean): GridCell {\n      if (typeof validateRegex === \"string\") {\n        // The regex is invalid, we return an error to indicate this\n        // to the developer:\n        return getErrorCell(toSafeString(data), validateRegex)\n      }\n\n      if (validate) {\n        const validationResult = validateInput(data)\n        if (validationResult === false) {\n          // The input is invalid, we return an error cell which will\n          // prevent this cell to be inserted into the table.\n          // This cell should never be actually displayed to the user.\n          // It's mostly used internally to prevent invalid input to be\n          // inserted into the table.\n          return getErrorCell(toSafeString(data), \"Invalid input.\")\n        } else if (typeof validationResult === \"string\") {\n          // Apply corrections:\n          data = validationResult\n        }\n      }\n\n      return {\n        ...cellTemplate,\n        data: notNullOrUndefined(data) ? toSafeString(data) : null,\n        isMissingValue: isNullOrUndefined(data),\n      } as UriCell\n    },\n    getCellValue(cell: UriCell): string | null {\n      return cell.data === undefined ? null : cell.data\n    },\n  }\n}\n\nLinkColumn.isEditableType = true\n\nexport default LinkColumn as ColumnCreator\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, GridCellKind, ImageCell } from \"@glideapps/glide-data-grid\"\n\nimport { notNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nimport { BaseColumn, BaseColumnProps, toSafeString } from \"./utils\"\n\n/**\n * A column type that renders an image as a cell value. On cell selection, open\n * the cell overlay with a full version of the image.\n *\n * This column type is currently read-only.\n */\nfunction ImageColumn(props: BaseColumnProps): BaseColumn {\n  const cellTemplate = {\n    kind: GridCellKind.Image,\n    data: [],\n    displayData: [],\n    allowAdd: false,\n    allowOverlay: true,\n    contentAlign: props.contentAlignment || \"center\",\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as ImageCell\n\n  return {\n    ...props,\n    kind: \"image\",\n    sortMode: \"default\",\n    isEditable: false, // Image columns are always read-only\n    getCell(data?: any): GridCell {\n      // The native image cell implementation in glide-data-grid expects an array\n      // of image URLs. For our usecase, we only support single images. We\n      // need to wrap the image URL in an array to have it compatible with the\n      // implementation in glide-data-grid.\n      const imageUrls = notNullOrUndefined(data) ? [toSafeString(data)] : []\n\n      return {\n        ...cellTemplate,\n        data: imageUrls,\n        isMissingValue: !notNullOrUndefined(data),\n        displayData: imageUrls,\n      } as ImageCell\n    },\n    getCellValue(cell: ImageCell): string | null {\n      if (cell.data === undefined || cell.data.length === 0) {\n        return null\n      }\n\n      // We use the image cell only for single images,\n      // so we can safely return just the first element\n      return cell.data[0]\n    },\n  }\n}\n\nImageColumn.isEditableType = false\n\nexport default ImageColumn\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  GridCellKind,\n  LoadingCell,\n} from \"@glideapps/glide-data-grid\"\nimport { RangeCellType } from \"@glideapps/glide-data-grid-cells\"\n\nimport { Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport {\n  isNullOrUndefined,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport { isIntegerType } from \"@streamlit/lib/src/components/widgets/DataFrame/isIntegerType\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  getEmptyCell,\n  toSafeString,\n  mergeColumnParameters,\n  formatNumber,\n  toSafeNumber,\n  countDecimals,\n} from \"./utils\"\n\nexport interface ProgressColumnParams {\n  // The minimum permitted value. Defaults to 0.\n  readonly min_value?: number\n  // The maximum permitted value. Defaults to 100 if the underlying data is integer,\n  // or 1 for all others types.\n  readonly max_value?: number\n  // A formatting syntax (e.g. sprintf) to format the display value.\n  // This can be used for adding prefix or suffix, or changing the number of decimals of the display value.\n  readonly format?: string\n  // The stepping interval. Defaults to 0.01.\n  // Mainly useful once we provide editing capabilities.\n  readonly step?: number\n}\n\n/**\n * A read-only column type to support rendering values that have a defined\n * range. This is rendered via a progress-bar-like visualization.\n */\nfunction ProgressColumn(props: BaseColumnProps): BaseColumn {\n  const arrowTypeName = Quiver.getTypeName(props.arrowType)\n  const isInteger = isIntegerType(arrowTypeName)\n\n  const parameters = mergeColumnParameters(\n    // Default parameters:\n    {\n      min_value: 0,\n      max_value: isInteger ? 100 : 1,\n      step: isInteger ? 1 : 0.01,\n      format: isInteger ? \"%3d%%\" : \"percent\",\n    } as ProgressColumnParams,\n    // User parameters:\n    props.columnTypeOptions\n  ) as ProgressColumnParams\n\n  // Measure the display value of the max value, so that all progress bars are aligned correctly:\n  let measureLabel: string\n  try {\n    measureLabel = formatNumber(\n      parameters.max_value as number,\n      parameters.format\n    )\n  } catch (error) {\n    measureLabel = toSafeString(parameters.max_value)\n  }\n\n  const fixedDecimals =\n    isNullOrUndefined(parameters.step) || Number.isNaN(parameters.step)\n      ? undefined\n      : countDecimals(parameters.step)\n\n  const cellTemplate = {\n    kind: GridCellKind.Custom,\n    allowOverlay: false,\n    copyData: \"\",\n    contentAlign: props.contentAlignment,\n    data: {\n      kind: \"range-cell\",\n      min: parameters.min_value,\n      max: parameters.max_value,\n      step: parameters.step,\n      value: parameters.min_value,\n      label: String(parameters.min_value),\n      measureLabel,\n      readonly: true,\n    },\n  } as RangeCellType\n\n  return {\n    ...props,\n    kind: \"progress\",\n    sortMode: \"smart\",\n    isEditable: false, // Progress column is always readonly\n    getCell(data?: any): GridCell {\n      if (isNullOrUndefined(data)) {\n        // TODO(lukasmasuch): Use a missing cell?\n        return getEmptyCell()\n      }\n\n      if (\n        isNullOrUndefined(parameters.min_value) ||\n        isNullOrUndefined(parameters.max_value) ||\n        Number.isNaN(parameters.min_value) ||\n        Number.isNaN(parameters.max_value) ||\n        parameters.min_value >= parameters.max_value\n      ) {\n        return getErrorCell(\n          \"Invalid min/max parameters\",\n          `The min_value (${parameters.min_value}) and max_value (${parameters.max_value}) parameters must be valid numbers.`\n        )\n      }\n\n      if (\n        isNullOrUndefined(parameters.step) ||\n        Number.isNaN(parameters.step)\n      ) {\n        return getErrorCell(\n          \"Invalid step parameter\",\n          `The step parameter (${parameters.step}) must be a valid number.`\n        )\n      }\n\n      const cellData = toSafeNumber(data)\n\n      if (Number.isNaN(cellData) || isNullOrUndefined(cellData)) {\n        return getErrorCell(\n          toSafeString(data),\n          \"The value cannot be interpreted as a number.\"\n        )\n      }\n\n      // Check if the value is larger than the maximum supported value:\n      if (Number.isInteger(cellData) && !Number.isSafeInteger(cellData)) {\n        return getErrorCell(\n          toSafeString(data),\n          \"The value is larger than the maximum supported integer values in number columns (2^53).\"\n        )\n      }\n\n      let displayData = \"\"\n\n      try {\n        displayData = formatNumber(cellData, parameters.format, fixedDecimals)\n      } catch (error) {\n        return getErrorCell(\n          toSafeString(cellData),\n          notNullOrUndefined(parameters.format)\n            ? `Failed to format the number based on the provided format configuration: (${parameters.format}). Error: ${error}`\n            : `Failed to format the number. Error: ${error}`\n        )\n      }\n\n      // If the value is outside the range, we scale it to the min/max\n      // for the visualization.\n      const normalizeCellValue = Math.min(\n        parameters.max_value,\n        Math.max(parameters.min_value, cellData)\n      )\n\n      return {\n        ...cellTemplate,\n        isMissingValue: isNullOrUndefined(data),\n        copyData: String(cellData), // Column sorting is done via the copyData value\n        data: {\n          ...cellTemplate.data,\n          value: normalizeCellValue,\n          label: displayData,\n        },\n      } as RangeCellType\n    },\n    getCellValue(cell: RangeCellType | LoadingCell): number | null {\n      if (cell.kind === GridCellKind.Loading) {\n        return null\n      }\n      return cell.data?.value === undefined ? null : cell.data?.value\n    },\n  }\n}\n\nProgressColumn.isEditableType = false\n\nexport default ProgressColumn\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  GridCellKind,\n  LoadingCell,\n} from \"@glideapps/glide-data-grid\"\nimport { SparklineCellType } from \"@glideapps/glide-data-grid-cells\"\n\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  getEmptyCell,\n  toSafeString,\n  toSafeArray,\n  mergeColumnParameters,\n  toSafeNumber,\n  formatNumber,\n} from \"./utils\"\n\nexport interface ChartColumnParams {\n  // The minimum value used for plotting the chart. Defaults to 0.\n  readonly y_min?: number\n  // The maximum value used for plotting the chart. Defaults to 1.\n  readonly y_max?: number\n}\n\n/**\n * Base class for chart columns. This class is not meant to be used directly.\n * Instead, use the LineChartColumn and BarChartColumn classes.\n */\nfunction BaseChartColumn(\n  kind: string,\n  props: BaseColumnProps,\n  chart_type: \"line\" | \"bar\"\n): BaseColumn {\n  const parameters = mergeColumnParameters(\n    // Default parameters:\n    {\n      y_min: 0,\n      y_max: 1,\n    },\n    // User parameters:\n    props.columnTypeOptions\n  ) as ChartColumnParams\n\n  const cellTemplate = {\n    kind: GridCellKind.Custom,\n    allowOverlay: false,\n    copyData: \"\",\n    contentAlign: props.contentAlignment,\n    data: {\n      kind: \"sparkline-cell\",\n      values: [],\n      displayValues: [],\n      graphKind: chart_type,\n      yAxis: [parameters.y_min, parameters.y_max],\n    },\n  } as SparklineCellType\n\n  return {\n    ...props,\n    kind,\n    sortMode: \"default\",\n    isEditable: false, // Chart column is always read-only\n    getCell(data?: any): GridCell {\n      if (\n        isNullOrUndefined(parameters.y_min) ||\n        isNullOrUndefined(parameters.y_max) ||\n        Number.isNaN(parameters.y_min) ||\n        Number.isNaN(parameters.y_max) ||\n        parameters.y_min >= parameters.y_max\n      ) {\n        return getErrorCell(\n          \"Invalid min/max y-axis configuration\",\n          `The y_min (${parameters.y_min}) and y_max (${parameters.y_max}) configuration options must be valid numbers.`\n        )\n      }\n\n      if (isNullOrUndefined(data)) {\n        // TODO(lukasmasuch): Use a missing cell?\n        return getEmptyCell()\n      }\n\n      const chartData = toSafeArray(data)\n\n      const convertedChartData: number[] = []\n      let normalizedChartData: number[] = []\n      if (chartData.length === 0) {\n        return getEmptyCell()\n      }\n\n      // Initialize with smallest and biggest number\n      let maxValue = Number.MIN_SAFE_INTEGER\n      let minValue = Number.MAX_SAFE_INTEGER\n\n      // Try to convert all values to numbers and find min/max\n      for (let i = 0; i < chartData.length; i++) {\n        const convertedValue = toSafeNumber(chartData[i])\n        if (\n          Number.isNaN(convertedValue) ||\n          isNullOrUndefined(convertedValue)\n        ) {\n          return getErrorCell(\n            toSafeString(chartData),\n            `The value cannot be interpreted as a numeric array. ${toSafeString(\n              convertedValue\n            )} is not a number.`\n          )\n        }\n\n        if (convertedValue > maxValue) {\n          maxValue = convertedValue\n        }\n\n        if (convertedValue < minValue) {\n          minValue = convertedValue\n        }\n\n        convertedChartData.push(convertedValue)\n      }\n\n      if (chart_type === \"line\" && convertedChartData.length <= 2) {\n        // TODO(lukasmasuch): This is only a temporary workaround to prevent\n        // an error in glide-data-grid that occurs during cell drawing when the\n        // line chart has less than 3 values. This needs to a fix in glide-data-grid.\n        return getEmptyCell()\n      }\n\n      if (\n        convertedChartData.length > 0 &&\n        (maxValue > parameters.y_max || minValue < parameters.y_min)\n      ) {\n        // Normalize values between the configured range\n        normalizedChartData = convertedChartData.map(v =>\n          maxValue - minValue === 0 // Prevent division by zero\n            ? maxValue > (parameters.y_max || 1)\n              ? parameters.y_max || 1 // Use max value\n              : parameters.y_min || 0 // Use min value\n            : ((parameters.y_max || 1) - (parameters.y_min || 0)) *\n                ((v - minValue) / (maxValue - minValue)) +\n              (parameters.y_min || 0)\n        )\n      } else {\n        // Values are already in the configured range\n        normalizedChartData = convertedChartData\n      }\n\n      return {\n        ...cellTemplate,\n        copyData: convertedChartData.join(\",\"), // Column sorting is done via the copyData value\n        data: {\n          ...cellTemplate.data,\n          values: normalizedChartData,\n          displayValues: convertedChartData.map(v => formatNumber(v)),\n        },\n        isMissingValue: isNullOrUndefined(data),\n      } as SparklineCellType\n    },\n    getCellValue(\n      cell: SparklineCellType | LoadingCell\n    ): readonly number[] | null {\n      if (cell.kind === GridCellKind.Loading) {\n        return null\n      }\n\n      return cell.data?.values === undefined ? null : cell.data?.values\n    },\n  }\n}\n\n/**\n * A column type that renders the cell value as a line-chart.\n * The data is expected to be a numeric array.\n *\n * This column type is currently read-only.\n */\nexport function LineChartColumn(props: BaseColumnProps): BaseColumn {\n  return BaseChartColumn(\"line_chart\", props, \"line\")\n}\n\nLineChartColumn.isEditableType = false\n\n/**\n * A column type that renders the cell value as a bar-chart.\n * The data is expected to be a numeric array.\n *\n * This column type is currently read-only.\n */\nexport function BarChartColumn(props: BaseColumnProps): BaseColumn {\n  return BaseChartColumn(\"bar_chart\", props, \"bar\")\n}\n\nBarChartColumn.isEditableType = false\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ObjectColumn from \"./ObjectColumn\"\nimport TextColumn from \"./TextColumn\"\nimport CheckboxColumn from \"./CheckboxColumn\"\nimport SelectboxColumn from \"./SelectboxColumn\"\nimport ListColumn from \"./ListColumn\"\nimport NumberColumn from \"./NumberColumn\"\nimport LinkColumn from \"./LinkColumn\"\nimport ImageColumn from \"./ImageColumn\"\nimport ProgressColumn from \"./ProgressColumn\"\nimport DateTimeColumn, { DateColumn, TimeColumn } from \"./DateTimeColumn\"\nimport { LineChartColumn, BarChartColumn } from \"./ChartColumn\"\n\nexport { ImageCellEditor } from \"./cells/ImageCellEditor\"\n\nimport { ColumnCreator } from \"./utils\"\n\nexport * from \"./utils\"\n\n/**\n * All available column types need to be registered here.\n *\n * These names must match the column names used in the backend.\n */\nexport const ColumnTypes = new Map<string, ColumnCreator>(\n  Object.entries({\n    object: ObjectColumn,\n    text: TextColumn,\n    checkbox: CheckboxColumn,\n    selectbox: SelectboxColumn,\n    list: ListColumn,\n    number: NumberColumn,\n    link: LinkColumn,\n    datetime: DateTimeColumn,\n    date: DateColumn,\n    time: TimeColumn,\n    line_chart: LineChartColumn,\n    bar_chart: BarChartColumn,\n    image: ImageColumn,\n    progress: ProgressColumn,\n  })\n)\n\nexport const CustomCells = []\n\nexport {\n  ObjectColumn,\n  TextColumn,\n  CheckboxColumn,\n  SelectboxColumn,\n  ListColumn,\n  NumberColumn,\n  LinkColumn,\n  DateTimeColumn,\n  DateColumn,\n  TimeColumn,\n  LineChartColumn,\n  BarChartColumn,\n  ImageColumn,\n  ProgressColumn,\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { merge } from \"lodash\"\n\nimport { Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport { Arrow as ArrowProto } from \"@streamlit/lib/src/proto\"\nimport {\n  notNullOrUndefined,\n  isNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport { logWarning, logError } from \"@streamlit/lib/src/util/log\"\n\nimport {\n  getColumnTypeFromArrow,\n  getAllColumnsFromArrow,\n  getEmptyIndexColumn,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/arrowUtils\"\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  ObjectColumn,\n  ColumnTypes,\n  ColumnCreator,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\n\n// Using this ID for column config will apply the config to all index columns\nexport const INDEX_IDENTIFIER = \"_index\"\n// Prefix used in the config column mapping when referring to a column via the numeric position\nexport const COLUMN_POSITION_PREFIX = \"_pos:\"\n\n// Predefined column widths configurable by the user\nexport const COLUMN_WIDTH_MAPPING = {\n  small: 75,\n  medium: 200,\n  large: 400,\n}\n\n/**\n * Options to configure columns.\n *\n * This needs to be kept in sync with the ColumnConfig TypeDict in the backend.\n * This will be eventually replaced with a proto message.\n */\nexport interface ColumnConfigProps {\n  label?: string\n  width?: \"small\" | \"medium\" | \"large\" | number\n  help?: string\n  hidden?: boolean\n  disabled?: boolean\n  required?: boolean\n  default?: number | string | boolean\n  alignment?: \"left\" | \"center\" | \"right\"\n  // uses snake_case to match the property names in the backend:\n  type_config?: Record<string, unknown>\n}\n\n/**\n * Parse the user-defined width configuration and return the width in pixels.\n */\nfunction parseWidthConfig(\n  width?: \"small\" | \"medium\" | \"large\" | number\n): number | undefined {\n  if (isNullOrUndefined(width)) {\n    return undefined\n  }\n\n  if (typeof width === \"number\") {\n    return width\n  }\n\n  if (width in COLUMN_WIDTH_MAPPING) {\n    return COLUMN_WIDTH_MAPPING[width]\n  }\n\n  return undefined\n}\n\n/**\n * Apply the user-defined column configuration if supplied.\n *\n * @param columnProps - The column properties to apply the config to.\n * @param columnConfigMapping - The user-defined column configuration mapping.\n *\n * @return the column properties with the config applied.\n */\nexport function applyColumnConfig(\n  columnProps: BaseColumnProps,\n  columnConfigMapping: Map<string | number, ColumnConfigProps>\n): BaseColumnProps {\n  if (!columnConfigMapping) {\n    // No column config configured\n    return columnProps\n  }\n\n  let columnConfig\n  if (\n    columnConfigMapping.has(columnProps.name) &&\n    columnProps.name !== INDEX_IDENTIFIER // \"index\" is not supported as name for normal columns\n  ) {\n    // Config is configured based on the column name\n    columnConfig = columnConfigMapping.get(columnProps.name)\n  } else if (\n    columnConfigMapping.has(\n      `${COLUMN_POSITION_PREFIX}${columnProps.indexNumber}`\n    )\n  ) {\n    // Config is configured based on the column position, e.g. col:0 -> first column\n    columnConfig = columnConfigMapping.get(\n      `${COLUMN_POSITION_PREFIX}${columnProps.indexNumber}`\n    )\n  } else if (\n    columnProps.isIndex &&\n    columnConfigMapping.has(INDEX_IDENTIFIER)\n  ) {\n    // Config is configured for the index column (or all index columns for multi-index)\n    columnConfig = columnConfigMapping.get(INDEX_IDENTIFIER)\n  }\n\n  if (!columnConfig) {\n    // No column config found for this column\n    return columnProps\n  }\n\n  // This will update all column props with the user-defined config for all\n  // configuration options that are not undefined:\n  return merge({ ...columnProps }, {\n    title: columnConfig.label,\n    width: parseWidthConfig(columnConfig.width),\n    isEditable: notNullOrUndefined(columnConfig.disabled)\n      ? !columnConfig.disabled\n      : undefined,\n    isHidden: columnConfig.hidden,\n    isRequired: columnConfig.required,\n    columnTypeOptions: columnConfig.type_config,\n    contentAlignment: columnConfig.alignment,\n    defaultValue: columnConfig.default,\n    help: columnConfig.help,\n  } as BaseColumnProps) as BaseColumnProps\n}\n\n/**\n * Extracts the user-defined column configuration from the proto message.\n *\n * @param element - The proto message of the dataframe element.\n *\n * @returns the user-defined column configuration.\n */\nexport function getColumnConfig(element: ArrowProto): Map<string, any> {\n  if (!element.columns) {\n    return new Map()\n  }\n  try {\n    return new Map(Object.entries(JSON.parse(element.columns)))\n  } catch (error) {\n    // This is not expected to happen, but if it does, we'll return an empty map\n    // and log the error to the console.\n    logError(error)\n    return new Map()\n  }\n}\n\ntype ColumnLoaderReturn = {\n  columns: BaseColumn[]\n}\n\n/**\n * Get the column type (creator class of column type) for the given column properties.\n *\n * @param column - The column properties.\n *\n * @returns the column creator of the corresponding column type.\n */\nexport function getColumnType(column: BaseColumnProps): ColumnCreator {\n  const customType = column.columnTypeOptions?.type as string\n  // Create a column instance based on the column properties\n  let ColumnType: ColumnCreator | undefined\n  if (notNullOrUndefined(customType)) {\n    if (ColumnTypes.has(customType)) {\n      ColumnType = ColumnTypes.get(customType)\n    } else {\n      logWarning(\n        `Unknown column type configured in column configuration: ${customType}`\n      )\n    }\n  }\n  if (isNullOrUndefined(ColumnType)) {\n    // Load based on arrow type\n    ColumnType = getColumnTypeFromArrow(column.arrowType)\n  }\n  return ColumnType\n}\n\n/**\n * Custom hook that handles loads and configures all table columns from the Arrow table.\n *\n * @param element - The proto message of the dataframe element\n * @param data - The Arrow data extracted from the proto message\n * @param disabled - Whether the widget is disabled\n *\n * @returns the columns and the cell content getter compatible with glide-data-grid.\n */\nfunction useColumnLoader(\n  element: ArrowProto,\n  data: Quiver,\n  disabled: boolean\n): ColumnLoaderReturn {\n  // TODO(lukasmasuch): We might use state to store the column config as additional optimization?\n  const columnConfigMapping = getColumnConfig(element)\n\n  const stretchColumns: boolean =\n    element.useContainerWidth ||\n    (notNullOrUndefined(element.width) && element.width > 0)\n\n  // Converts the columns from Arrow into columns compatible with glide-data-grid\n  let configuredColumns: BaseColumn[] = getAllColumnsFromArrow(data)\n    .map(column => {\n      // Apply column configurations\n      let updatedColumn = {\n        ...column,\n        ...applyColumnConfig(column, columnConfigMapping),\n        isStretched: stretchColumns,\n      } as BaseColumnProps\n\n      const ColumnType = getColumnType(updatedColumn)\n\n      // Make sure editing is deactivated if the column is read-only, disabled,\n      // or a not editable type.\n      if (\n        element.editingMode === ArrowProto.EditingMode.READ_ONLY ||\n        disabled ||\n        ColumnType.isEditableType === false\n      ) {\n        updatedColumn = {\n          ...updatedColumn,\n          isEditable: false,\n        }\n      }\n\n      if (\n        element.editingMode !== ArrowProto.EditingMode.READ_ONLY &&\n        updatedColumn.isEditable == true\n      ) {\n        // Set editable icon for all editable columns:\n        updatedColumn = {\n          ...updatedColumn,\n          icon: \"editable\",\n        }\n      }\n\n      return ColumnType(updatedColumn)\n    })\n    .filter(column => {\n      // Filter out all columns that are hidden\n      return !column.isHidden\n    })\n\n  // Reorder columns based on the user configuration:\n  if (element.columnOrder && element.columnOrder.length > 0) {\n    const orderedColumns: BaseColumn[] = []\n\n    // Add all index columns to the beginning of the list:\n    configuredColumns.forEach(column => {\n      if (column.isIndex) {\n        orderedColumns.push(column)\n      }\n    })\n\n    // Reorder non-index columns based on the configured column order:\n    element.columnOrder.forEach(columnName => {\n      const column = configuredColumns.find(\n        column => column.name === columnName\n      )\n      if (column && !column.isIndex) {\n        orderedColumns.push(column)\n      }\n    })\n\n    configuredColumns = orderedColumns\n  }\n\n  // If all columns got filtered out, we add an empty index column\n  // to prevent errors from glide-data-grid.\n  const columns =\n    configuredColumns.length > 0\n      ? configuredColumns\n      : [ObjectColumn(getEmptyIndexColumn())]\n\n  return {\n    columns,\n  }\n}\n\nexport default useColumnLoader\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell } from \"@glideapps/glide-data-grid\"\n\nimport {\n  notNullOrUndefined,\n  isNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\nimport { BaseColumn, isMissingValueCell } from \"./columns\"\nimport { INDEX_IDENTIFIER } from \"./hooks/useColumnLoader\"\n\n/**\n * Get the column name for a given column to use in the widget state.\n * This is either the column name or the index identifier for index columns.\n */\nfunction getColumnName(column: BaseColumn): string {\n  // TODO(lukasmasuch): We need to adapt this once we want to support multi-index columns.\n  return column.isIndex\n    ? INDEX_IDENTIFIER\n    : isNullOrUndefined(column.name)\n    ? \"\"\n    : column.name\n}\n\n/**\n * The editing state keeps track of all table edits applied by the user.\n */\nclass EditingState {\n  // row -> column -> GridCell\n  // Using [number, number] as a key for a Map would not work.\n  private editedCells: Map<number, Map<number, GridCell>> = new Map()\n\n  // List of rows represented by of column -> GridCell mappings\n  private addedRows: Array<Map<number, GridCell>> = []\n\n  // List of deleted row IDs\n  private deletedRows: number[] = []\n\n  // The original number of rows in the table (without potential additions & deletions)\n  private numRows = 0\n\n  constructor(numRows: number) {\n    this.numRows = numRows\n  }\n\n  /**\n   * Convert the current editing state to a JSON string.\n   *\n   * @param columns - The columns of the table\n   * @returns JSON string\n   */\n  toJson(columns: BaseColumn[]): string {\n    const columnsByIndex = new Map<number, BaseColumn>()\n    columns.forEach(column => {\n      columnsByIndex.set(column.indexNumber, column)\n    })\n\n    const currentState = {\n      // We use snake case here since this is the widget state\n      // that is sent and used in the backend. Therefore, it should\n      // conform with the Python naming conventions.\n      edited_rows: {} as Record<number, Record<string, any>>,\n      added_rows: [] as Record<string, any>[],\n      deleted_rows: [] as number[],\n    }\n\n    // Loop through all edited cells and transform into the structure\n    // we use for the JSON-compatible widget state:\n    // row position -> column name -> edited value\n    this.editedCells.forEach(\n      (row: Map<number, GridCell>, rowIndex: number, _map) => {\n        const editedRow: Record<string, any> = {}\n        row.forEach((cell: GridCell, colIndex: number, _map) => {\n          const column = columnsByIndex.get(colIndex)\n          if (column) {\n            editedRow[getColumnName(column)] = column.getCellValue(cell)\n          }\n        })\n        currentState.edited_rows[rowIndex] = editedRow\n      }\n    )\n\n    // Loop through all added rows and transform into the format that\n    // we use for the JSON-compatible widget state:\n    // List of column name -> edited value\n    this.addedRows.forEach((row: Map<number, GridCell>) => {\n      const addedRow: Record<string, any> = {}\n      // This flags is used to check if the row is incomplete\n      // (i.e. missing required values) and should therefore not be included in\n      // the current state version.\n      let isIncomplete = false\n      row.forEach((cell: GridCell, colIndex: number, _map) => {\n        const column = columnsByIndex.get(colIndex)\n        if (column) {\n          const cellValue = column.getCellValue(cell)\n\n          if (\n            column.isRequired &&\n            column.isEditable &&\n            isMissingValueCell(cell)\n          ) {\n            // If the cell is missing a required value, the row is incomplete\n            isIncomplete = true\n          }\n\n          if (notNullOrUndefined(cellValue)) {\n            addedRow[getColumnName(column)] = cellValue\n          }\n        }\n      })\n      if (!isIncomplete) {\n        currentState.added_rows.push(addedRow)\n      }\n    })\n\n    // The deleted rows don't need to be transformed\n    currentState.deleted_rows = this.deletedRows\n\n    // Convert undefined values to null, otherwise this is removed here since\n    // undefined does not exist in JSON.\n    const json = JSON.stringify(currentState, (_k, v) =>\n      v === undefined ? null : v\n    )\n    return json\n  }\n\n  /**\n   * Load the editing state from a JSON string.\n   *\n   * @param columns - The columns of the table\n   * @returns JSON string\n   */\n  fromJson(editingStateJson: string, columns: BaseColumn[]): void {\n    // Clear existing state:\n    this.editedCells = new Map()\n    this.addedRows = []\n    this.deletedRows = []\n\n    // Parse JSON editing string:\n    const editingState = JSON.parse(editingStateJson)\n    // Map columns to column index\n    const columnsByIndex = new Map<number, BaseColumn>()\n    columns.forEach(column => {\n      columnsByIndex.set(column.indexNumber, column)\n    })\n\n    // Map column name to columns\n    const columnsByName = new Map<string, BaseColumn>()\n    columns.forEach(column => {\n      columnsByName.set(getColumnName(column), column)\n    })\n\n    // Loop through all edited cells and transform into the structure\n    // we use for the editing state:\n    // row -> column -> GridCell\n    Object.keys(editingState.edited_rows).forEach(key => {\n      const rowIndex = Number(key)\n      const editedRow = editingState.edited_rows[key]\n      Object.keys(editedRow).forEach((colName: string) => {\n        const cellValue = editedRow[colName]\n        const column = columnsByName.get(colName)\n        if (column) {\n          const cell = column.getCell(cellValue)\n          if (cell) {\n            if (!this.editedCells.has(rowIndex)) {\n              this.editedCells.set(rowIndex, new Map())\n            }\n            this.editedCells.get(rowIndex)?.set(column.indexNumber, cell)\n          }\n        }\n      })\n    })\n\n    // Loop through all added rows and transform into the format that\n    // we use for the editing state:\n    // List of column index -> edited value\n    editingState.added_rows.forEach((row: Record<string, any>) => {\n      const addedRow: Map<number, GridCell> = new Map()\n\n      // Set the cells that were actually edited in the row\n      Object.keys(row).forEach(colName => {\n        const cellValue = row[colName]\n\n        const column = columnsByName.get(colName)\n\n        if (column) {\n          const cell = column.getCell(cellValue)\n          if (cell) {\n            addedRow.set(column.indexNumber, cell)\n          }\n        }\n      })\n      this.addedRows.push(addedRow)\n    })\n\n    // The deleted rows don't need to be transformed\n    this.deletedRows = editingState.deleted_rows\n  }\n\n  /**\n   * Returns true if the given row was added by the user through the UI.\n   */\n  isAddedRow(row: number): boolean {\n    return row >= this.numRows\n  }\n\n  /**\n   * Returns the cell at the given column and row,\n   * in case the cell was edited or added.\n   *\n   * @param col - The column index\n   * @param row - The row index\n   *\n   * @returns The edited cell at the given column and row\n   */\n  getCell(col: number, row: number): GridCell | undefined {\n    if (this.isAddedRow(row)) {\n      // Added rows have their own editing state\n      return this.addedRows[row - this.numRows].get(col)\n    }\n\n    const rowCache = this.editedCells.get(row)\n    if (rowCache === undefined) {\n      return undefined\n    }\n\n    return rowCache.get(col)\n  }\n\n  /**\n   * Adds a cell to the editing state for the given column and row index.\n   *\n   * @param col - The column index\n   * @param row - The row index\n   * @param cell - The cell to add to the editing state\n   */\n  setCell(col: number, row: number, cell: GridCell): void {\n    if (this.isAddedRow(row)) {\n      if (row - this.numRows >= this.addedRows.length) {\n        // Added row does not exist. This is only expected to happen\n        // in relation to a trailing row issue in glide-data-grid.\n        return\n      }\n      // Added rows have their own editing state\n      this.addedRows[row - this.numRows].set(col, cell)\n    } else {\n      if (this.editedCells.get(row) === undefined) {\n        this.editedCells.set(row, new Map())\n      }\n\n      const rowCache = this.editedCells.get(row) as Map<number, GridCell>\n      rowCache.set(col, cell)\n    }\n  }\n\n  /**\n   * Adds a new row to the editing state.\n   *\n   * @param rowCells - The cells of the row to add\n   */\n  addRow(rowCells: Map<number, GridCell>): void {\n    this.addedRows.push(rowCells)\n  }\n\n  /**\n   * Deletes the given rows from the editing state.\n   *\n   * @param rows - The rows to delete\n   */\n  deleteRows(rows: number[]): void {\n    // Delete row one by one starting from the row with the highest index\n    rows\n      .sort((a, b) => b - a)\n      .forEach(row => {\n        this.deleteRow(row)\n      })\n  }\n\n  /**\n   * Deletes the given row from the editing state.\n   *\n   * @param row - The row to delete\n   */\n  deleteRow(row: number): void {\n    if (isNullOrUndefined(row) || row < 0) {\n      // This should never happen\n      return\n    }\n\n    if (this.isAddedRow(row)) {\n      // Remove from added rows:\n      this.addedRows.splice(row - this.numRows, 1)\n      // there is nothing more we have to do\n      return\n    }\n\n    if (!this.deletedRows.includes(row)) {\n      // Add to the set\n      this.deletedRows.push(row)\n      // Sort the deleted rows (important for calculation of the original row index)\n      this.deletedRows = this.deletedRows.sort((a, b) => a - b)\n    }\n\n    // Remove all cells from cell state associated with this row:\n    this.editedCells.delete(row)\n  }\n\n  /**\n   * Returns the original row index of the given row.\n   * Since the user can delete rows, the original row index and the\n   * current one can diverge.\n   *\n   * @param row - The row index from the current state\n   *\n   * @returns The original row index\n   */\n  getOriginalRowIndex(row: number): number {\n    // Just count all deleted rows before this row to determine the original row index:\n    let originalIndex = row\n    for (let i = 0; i < this.deletedRows.length; i++) {\n      if (this.deletedRows[i] > originalIndex) {\n        break\n      }\n      originalIndex += 1\n    }\n    return originalIndex\n  }\n\n  /**\n   * Returns the total number of rows of the current state.\n   */\n  getNumRows(): number {\n    return this.numRows + this.addedRows.length - this.deletedRows.length\n  }\n}\n\nexport default EditingState\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\"\n\nimport { transparentize } from \"color2k\"\nimport { Theme as GlideTheme, SpriteMap } from \"@glideapps/glide-data-grid\"\nimport { useTheme } from \"@emotion/react\"\n\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\n\n/**\n * Creates a glide-data-grid compatible theme based on our theme configuration.\n *\n * @return a glide-data-grid compatible theme.\n */\nfunction useCustomTheme(): Partial<GlideTheme> & {\n  tableBorderRadius: string\n  headerIcons: SpriteMap\n} {\n  const theme: EmotionTheme = useTheme()\n\n  const headerIcons = React.useMemo<SpriteMap>(() => {\n    return {\n      // Material design icon `edit_note`:\n      // https://fonts.google.com/icons?selected=Material%20Symbols%20Outlined%3Aedit_note%3AFILL%400%3Bwght%40400%3BGRAD%400%3Bopsz%4048\n      // We need to provide this as string as explained explained here: https://github.com/glideapps/glide-data-grid/blob/main/packages/core/API.md#headericons\n      editable: p =>\n        `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"40\" viewBox=\"0 96 960 960\" width=\"40\" fill=\"${p.bgColor}\"><path d=\"m800.641 679.743-64.384-64.384 29-29q7.156-6.948 17.642-6.948 10.485 0 17.742 6.948l29 29q6.948 7.464 6.948 17.95 0 10.486-6.948 17.434l-29 29Zm-310.64 246.256v-64.383l210.82-210.821 64.384 64.384-210.821 210.82h-64.383Zm-360-204.872v-50.254h289.743v50.254H130.001Zm0-162.564v-50.255h454.615v50.255H130.001Zm0-162.307v-50.255h454.615v50.255H130.001Z\"/></svg>`,\n    }\n  }, [])\n\n  return {\n    // Explanations: https://github.com/glideapps/glide-data-grid/blob/main/packages/core/API.md#theme\n    accentColor: theme.colors.primary,\n    accentFg: theme.colors.white,\n    accentLight: transparentize(theme.colors.primary, 0.9),\n    borderColor: theme.colors.fadedText05,\n    horizontalBorderColor: theme.colors.fadedText05,\n    fontFamily: theme.genericFonts.bodyFont,\n    bgSearchResult: transparentize(theme.colors.primary, 0.9),\n    // Header styling:\n    bgIconHeader: theme.colors.fadedText60,\n    fgIconHeader: theme.colors.white,\n    bgHeader: theme.colors.bgMix,\n    bgHeaderHasFocus: theme.colors.secondaryBg,\n    bgHeaderHovered: theme.colors.bgMix, // uses same color as bgHeader to deactivate the hover effect\n    textHeader: theme.colors.fadedText60,\n    textHeaderSelected: theme.colors.white,\n    textGroupHeader: theme.colors.fadedText60,\n    headerFontStyle: `${theme.fontSizes.sm}`,\n    // Cell styling:\n    baseFontStyle: theme.fontSizes.sm,\n    editorFontSize: theme.fontSizes.sm,\n    textDark: theme.colors.bodyText,\n    textMedium: transparentize(theme.colors.bodyText, 0.2),\n    textLight: theme.colors.fadedText40,\n    textBubble: theme.colors.fadedText60,\n    bgCell: theme.colors.bgColor,\n    bgCellMedium: theme.colors.bgColor, // uses same as bgCell to always have the same background color\n    cellHorizontalPadding: 8,\n    cellVerticalPadding: 3,\n    // Special cells:\n    bgBubble: theme.colors.secondaryBg,\n    bgBubbleSelected: theme.colors.secondaryBg,\n    linkColor: theme.colors.linkText,\n    drilldownBorder: theme.colors.darkenedBgMix25,\n    // Unused settings:\n    // lineHeight\n    // Custom settings\n    tableBorderRadius: theme.radii.lg,\n    // Configure custom SVG icons used in the column header:\n    headerIcons,\n  }\n}\n\nexport default useCustomTheme\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport { GridCell, DataEditorProps } from \"@glideapps/glide-data-grid\"\n\nimport { Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport { logError } from \"@streamlit/lib/src/util/log\"\n\nimport { getCellFromArrow } from \"@streamlit/lib/src/components/widgets/DataFrame/arrowUtils\"\nimport EditingState from \"@streamlit/lib/src/components/widgets/DataFrame/EditingState\"\nimport {\n  BaseColumn,\n  getErrorCell,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\n\ntype DataLoaderReturn = Pick<DataEditorProps, \"getCellContent\">\n\n/**\n * Custom hook that handles all data loading capabilities for the interactive data table.\n * This also includes the logic to load and configure columns.\n *\n * @param data - The Arrow data extracted from the proto message\n * @param numRows - The number of rows of the current state (includes row additions/deletions)\n * @param editingState - The editing state of the data editor\n *\n * @returns the columns and the cell content getter compatible with glide-data-grid.\n */\nfunction useDataLoader(\n  data: Quiver,\n  columns: BaseColumn[],\n  numRows: number,\n  editingState: React.MutableRefObject<EditingState>\n): DataLoaderReturn {\n  const getCellContent = React.useCallback(\n    ([col, row]: readonly [number, number]): GridCell => {\n      if (col > columns.length - 1) {\n        return getErrorCell(\n          \"Column index out of bounds.\",\n          \"This should never happen. Please report this bug.\"\n        )\n      }\n\n      if (row > numRows - 1) {\n        return getErrorCell(\n          \"Row index out of bounds.\",\n          \"This should never happen. Please report this bug.\"\n        )\n      }\n      const column = columns[col]\n\n      const originalCol = column.indexNumber\n      const originalRow = editingState.current.getOriginalRowIndex(row)\n\n      // Use editing state if editable or if it is an appended row\n      if (column.isEditable || editingState.current.isAddedRow(originalRow)) {\n        const editedCell = editingState.current.getCell(\n          originalCol,\n          originalRow\n        )\n        if (editedCell !== undefined) {\n          return editedCell\n        }\n      }\n\n      try {\n        // Arrow has the header in first row\n        const arrowCell = data.getCell(originalRow + 1, originalCol)\n        return getCellFromArrow(column, arrowCell, data.cssStyles)\n      } catch (error) {\n        logError(error)\n        return getErrorCell(\n          \"Error during cell creation.\",\n          `This should never happen. Please report this bug. \\nError: ${error}`\n        )\n      }\n    },\n    [columns, numRows, data, editingState]\n  )\n\n  return {\n    getCellContent,\n  }\n}\n\nexport default useDataLoader\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport {\n  GridColumn,\n  GridCell,\n  DataEditorProps,\n} from \"@glideapps/glide-data-grid\"\nimport { useColumnSort as useGlideColumnSort } from \"@glideapps/glide-data-grid-source\"\n\nimport {\n  BaseColumn,\n  toGlideColumn,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\n\n/**\n * Configuration type for column sorting hook.\n */\ntype ColumnSortConfig = {\n  column: GridColumn\n  mode?: \"default\" | \"raw\" | \"smart\"\n  direction?: \"asc\" | \"desc\"\n}\n\n/**\n * Updates the column headers based on the sorting configuration.\n *\n * @param columns - The columns of the table.\n * @param sort - The current sorting configuration.\n *\n * @returns The updated list of columns.\n */\nfunction updateSortingHeader(\n  columns: BaseColumn[],\n  sort: ColumnSortConfig | undefined\n): BaseColumn[] {\n  if (sort === undefined) {\n    return columns\n  }\n  return columns.map(column => {\n    if (column.id === sort.column.id) {\n      return {\n        ...column,\n        title:\n          sort.direction === \"asc\" ? `↑ ${column.title}` : `↓ ${column.title}`,\n      }\n    }\n    return column\n  })\n}\n\ntype ColumnSortReturn = {\n  columns: BaseColumn[]\n  sortColumn: (index: number) => void\n  getOriginalIndex: (index: number) => number\n} & Pick<DataEditorProps, \"getCellContent\">\n\n/**\n * A React hook that provides column sorting functionality.\n *\n * @param numRows - The number of rows in the table.\n * @param columns - The columns of the table.\n *\n * @returns An object containing the following properties:\n * - `columns`: The updated list of columns.\n * - `sortColumn`: A function that sorts the column at the given index.\n * - `getOriginalIndex`: A function that returns the original index of the row at the given index.\n * - `getCellContent`: An updated function that returns the content of the cell at the given column and row indices.\n */\nfunction useColumnSort(\n  numRows: number,\n  columns: BaseColumn[],\n  getCellContent: ([col, row]: readonly [number, number]) => GridCell\n): ColumnSortReturn {\n  const [sort, setSort] = React.useState<ColumnSortConfig>()\n\n  const { getCellContent: getCellContentSorted, getOriginalIndex } =\n    useGlideColumnSort({\n      columns: columns.map(column => toGlideColumn(column)),\n      getCellContent,\n      rows: numRows,\n      sort,\n    })\n\n  const updatedColumns = updateSortingHeader(columns, sort)\n\n  const sortColumn = React.useCallback(\n    (index: number) => {\n      let sortDirection = \"asc\"\n      const clickedColumn = updatedColumns[index]\n\n      if (sort && sort.column.id === clickedColumn.id) {\n        // The clicked column is already sorted\n        if (sort.direction === \"asc\") {\n          // Sort column descending\n          sortDirection = \"desc\"\n        } else {\n          // Remove sorting of column\n          setSort(undefined)\n          return\n        }\n      }\n\n      setSort({\n        column: toGlideColumn(clickedColumn),\n        direction: sortDirection,\n        mode: clickedColumn.sortMode,\n      } as ColumnSortConfig)\n    },\n    [sort, updatedColumns]\n  )\n\n  return {\n    columns: updatedColumns,\n    sortColumn,\n    getOriginalIndex,\n    getCellContent: getCellContentSorted,\n  }\n}\n\nexport default useColumnSort\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport {\n  EditableGridCell,\n  GridCell,\n  DataEditorProps,\n  GridSelection,\n  Item,\n  ValidatedGridCell,\n} from \"@glideapps/glide-data-grid\"\n\nimport { logWarning } from \"@streamlit/lib/src/util/log\"\nimport { notNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\nimport {\n  BaseColumn,\n  isErrorCell,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\nimport EditingState from \"@streamlit/lib/src/components/widgets/DataFrame/EditingState\"\n\n/**\n * Create return type for useDataLoader hook based on the DataEditorProps.\n */\ntype DataEditorReturn = Pick<\n  DataEditorProps,\n  \"onCellEdited\" | \"onPaste\" | \"onRowAppended\" | \"onDelete\" | \"validateCell\"\n>\n\n/**\n * Custom hook to handle all aspects related to data editing. This includes editing cells,\n * pasting from clipboard, and appending & deleting rows.\n *\n * @param columns - The columns of the table.\n * @param fixedNumRows - Whether the number of rows is fixed. This means that rows cannot be added or deleted.\n * @param editingState - The editing state of the data editor.\n * @param getCellContent - Function to get a specific cell.\n * @param getOriginalIndex - Function to map a row ID of the current state to the original row ID.\n *                           This mainly changed by sorting of columns.\n * @param refreshCells - Callback that allows to trigger a UI refresh of a selection of cells.\n * @param applyEdits - Callback that needs to be called on all edits. This will also trigger a rerun\n *                     and send widget state to the backend.\n *\n * @returns Glide-data-grid compatible functions for editing capabilities.\n */\nfunction useDataEditor(\n  columns: BaseColumn[],\n  fixedNumRows: boolean,\n  editingState: React.MutableRefObject<EditingState>,\n  getCellContent: ([col, row]: readonly [number, number]) => GridCell,\n  getOriginalIndex: (index: number) => number,\n  refreshCells: (\n    cells: {\n      cell: [number, number]\n    }[]\n  ) => void,\n  applyEdits: (clearSelection?: boolean, triggerRerun?: boolean) => void\n): DataEditorReturn {\n  const onCellEdited = React.useCallback(\n    (\n      [col, row]: readonly [number, number],\n      updatedCell: EditableGridCell\n    ): void => {\n      const column = columns[col]\n\n      if (!column.isEditable) {\n        return\n      }\n\n      const originalCol = column.indexNumber\n\n      // We need to apply two different mappings here. One for the case that\n      // the user has sorted a column, and another one from the editing state\n      // to get the correct row ID when the user has deleted rows.\n      const originalRow = editingState.current.getOriginalRowIndex(\n        getOriginalIndex(row)\n      )\n      const currentCell = getCellContent([col, row])\n      const currentValue = column.getCellValue(currentCell)\n      const newValue = column.getCellValue(updatedCell)\n      if (!isErrorCell(currentCell) && newValue === currentValue) {\n        // No editing is required since the values did not change\n        return\n      }\n\n      const newCell = column.getCell(newValue, true)\n      // Only update the cell if the new cell is not causing any errors:\n      if (!isErrorCell(newCell)) {\n        editingState.current.setCell(originalCol, originalRow, {\n          ...newCell,\n          lastUpdated: performance.now(),\n        })\n\n        applyEdits()\n      } else {\n        logWarning(\n          `Not applying the cell edit since it causes this error:\\n ${newCell.data}`\n        )\n      }\n    },\n    [columns, editingState, getOriginalIndex, getCellContent, applyEdits]\n  )\n\n  /**\n   * Appends a new empty row to the end of the table.\n   */\n  const appendEmptyRow = React.useCallback(() => {\n    if (fixedNumRows) {\n      // Appending rows is not supported\n      return\n    }\n\n    const newRow: Map<number, GridCell> = new Map()\n    columns.forEach(column => {\n      // For the default value, we trust the developer to make a valid choice,\n      // so we do not validate the value here.\n      newRow.set(column.indexNumber, column.getCell(column.defaultValue))\n    })\n    editingState.current.addRow(newRow)\n  }, [columns, editingState, fixedNumRows])\n\n  /**\n   * Callback used by glide-data-grid when the user adds a new row in the table UI.\n   */\n  const onRowAppended = React.useCallback(() => {\n    if (fixedNumRows) {\n      // Appending rows is not supported\n      return\n    }\n\n    appendEmptyRow()\n    applyEdits()\n  }, [appendEmptyRow, applyEdits, fixedNumRows])\n\n  /**\n   * Callback used by glide-data-grid when the user deletes a row or cell value in the table UI.\n   */\n  const onDelete = React.useCallback(\n    (selection: GridSelection): GridSelection | boolean => {\n      if (selection.rows.length > 0) {\n        // User has selected one or more rows\n        if (fixedNumRows) {\n          // Deleting rows is not supported\n          return true\n        }\n\n        const rowsToDelete = selection.rows.toArray().map(row => {\n          return editingState.current.getOriginalRowIndex(\n            getOriginalIndex(row)\n          )\n        })\n        // We need to delete all rows at once, so that the indexes work correct\n        editingState.current.deleteRows(rowsToDelete)\n        applyEdits(true)\n        return false\n      }\n      if (selection.current?.range) {\n        // User has selected one or more cells\n        const updatedCells: { cell: [number, number] }[] = []\n        const selectedArea = selection.current.range\n        for (\n          let row = selectedArea.y;\n          row < selectedArea.y + selectedArea.height;\n          row++\n        ) {\n          for (\n            let col = selectedArea.x;\n            col < selectedArea.x + selectedArea.width;\n            col++\n          ) {\n            const column = columns[col]\n            // Only allow deletion if the column is editable and not configured as required\n            if (column.isEditable && !column.isRequired) {\n              updatedCells.push({\n                cell: [col, row],\n              })\n              onCellEdited(\n                [col, row],\n                column.getCell(null) as EditableGridCell\n              )\n            }\n          }\n        }\n\n        if (updatedCells.length > 0) {\n          applyEdits()\n          refreshCells(updatedCells)\n        }\n        return false\n      }\n      return true\n    },\n    [\n      columns,\n      editingState,\n      fixedNumRows,\n      refreshCells,\n      getOriginalIndex,\n      applyEdits,\n      onCellEdited,\n    ]\n  )\n\n  /**\n   * Callback used by glide-data-grid when the user pastes data into the table.\n   */\n  const onPaste = React.useCallback(\n    (target: Item, values: readonly (readonly string[])[]): boolean => {\n      const [targetCol, targetRow] = target\n\n      const updatedCells: { cell: [number, number] }[] = []\n\n      for (let row = 0; row < values.length; row++) {\n        const rowData = values[row]\n        if (row + targetRow >= editingState.current.getNumRows()) {\n          if (fixedNumRows) {\n            // Only add new rows if editing mode is dynamic, otherwise break here\n            break\n          }\n          // Adding rows during paste would not work currently. However, we already disallow\n          // sorting in dynamic mode, so we don't have to do anything here.\n          appendEmptyRow()\n        }\n        for (let col = 0; col < rowData.length; col++) {\n          const pasteDataValue = rowData[col]\n\n          const rowIndex = row + targetRow\n          const colIndex = col + targetCol\n\n          if (colIndex >= columns.length) {\n            // We could potentially add new columns here in the future.\n            break\n          }\n\n          const column = columns[colIndex]\n          // Only add to columns that are editable:\n          if (column.isEditable) {\n            const newCell = column.getCell(pasteDataValue, true)\n            // We are not editing cells if the pasted value leads to an error:\n            if (notNullOrUndefined(newCell) && !isErrorCell(newCell)) {\n              const originalCol = column.indexNumber\n              const originalRow = editingState.current.getOriginalRowIndex(\n                getOriginalIndex(rowIndex)\n              )\n              const currentValue = column.getCellValue(\n                getCellContent([colIndex, rowIndex])\n              )\n              const newValue = column.getCellValue(newCell)\n              // Edit the cell only if the value actually changed:\n              if (newValue !== currentValue) {\n                editingState.current.setCell(originalCol, originalRow, {\n                  ...newCell,\n                  lastUpdated: performance.now(),\n                })\n\n                updatedCells.push({\n                  cell: [colIndex, rowIndex],\n                })\n              }\n            }\n          }\n        }\n\n        if (updatedCells.length > 0) {\n          applyEdits()\n          refreshCells(updatedCells)\n        }\n      }\n\n      return false\n    },\n    [\n      columns,\n      editingState,\n      fixedNumRows,\n      getOriginalIndex,\n      getCellContent,\n      appendEmptyRow,\n      applyEdits,\n      refreshCells,\n    ]\n  )\n\n  /**\n   * Callback used by glide-data-grid to validate the data inputted into a cell by the user.\n   */\n  const validateCell = React.useCallback(\n    (cell: Item, newValue: EditableGridCell) => {\n      const col = cell[0]\n      if (col >= columns.length) {\n        // This should never happen.\n        // But we return true (default) to avoid any unknown issues.\n        return true\n      }\n\n      const column = columns[col]\n      if (column.validateInput) {\n        // We get the actual raw value of the new cell and\n        // validate it based on the column validateInput implementation:\n        const validationResult = column.validateInput(\n          column.getCellValue(newValue)\n        )\n        if (validationResult === true || validationResult === false) {\n          // Only return if the validation result is a valid boolean value (true or false)\n          // validationResult can also be other values, so we need to check this specifically.\n          return validationResult\n        }\n        // If it is any other value, we return it as a corrected cell:\n        return column.getCell(validationResult) as ValidatedGridCell\n      }\n      // If no validation is implemented, we accept the value:\n      return true\n    },\n    [columns]\n  )\n\n  return {\n    onCellEdited,\n    onPaste,\n    onRowAppended,\n    onDelete,\n    validateCell,\n  }\n}\n\nexport default useDataEditor\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport {\n  GridCell,\n  DataEditorProps,\n  GridMouseEventArgs,\n} from \"@glideapps/glide-data-grid\"\n\nimport { notNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\nimport {\n  BaseColumn,\n  hasTooltip,\n  isMissingValueCell,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\n\n// Debounce time for triggering the tooltip on hover.\nexport const DEBOUNCE_TIME_MS = 600\n// Tooltip message for required cells that are empty.\nexport const REQUIRED_CELL_TOOLTIP = \"⚠️ Please fill out this cell.\"\n\nexport type TooltipsReturn = {\n  // The tooltip to show (if any):\n  tooltip: { content: string; left: number; top: number } | undefined\n  // A callback to clear the tooltip:\n  clearTooltip: () => void\n  // The glide-data-grid function that is called when a cell is hovered:\n} & Pick<DataEditorProps, \"onItemHovered\">\n\n/**\n * Hook that can show a tooltip when hovering over a cell or header if configured.\n *\n * The tooltip is shown after a delay, and is cleared when the user clicks outside,\n * fires escape, or moves outside of the target cell.\n *\n * @param columns columns of the datagrid\n * @param getCellContent function that returns the cell content for a given cell position\n * @returns the tooltip to show (if any), a callback to clear the tooltip, and the\n * onItemHovered callback to pass to the datagrid\n */\nfunction useTooltips(\n  columns: BaseColumn[],\n  getCellContent: ([col, row]: readonly [number, number]) => GridCell\n): TooltipsReturn {\n  const [tooltip, setTooltip] = React.useState<\n    { content: string; left: number; top: number } | undefined\n  >()\n  const timeoutRef = React.useRef<any>(null)\n\n  const onItemHovered = React.useCallback(\n    (args: GridMouseEventArgs) => {\n      // Always reset the tooltips on any change here\n      clearTimeout(timeoutRef.current)\n      timeoutRef.current = 0\n      setTooltip(undefined)\n\n      if ((args.kind === \"header\" || args.kind === \"cell\") && args.location) {\n        const colIdx = args.location[0]\n        const rowIdx = args.location[1]\n        let tooltipContent: string | undefined\n\n        if (colIdx < 0 || colIdx >= columns.length) {\n          // Ignore negative column index (Row index column)\n          // and column index that is out of bounds\n          return\n        }\n\n        const column = columns[colIdx]\n\n        if (args.kind === \"header\" && notNullOrUndefined(column)) {\n          tooltipContent = column.help\n        } else if (args.kind === \"cell\") {\n          // TODO(lukasmasuch): Ignore the last row if num_rows=dynamic (trailing row).\n\n          const cell = getCellContent([colIdx, rowIdx])\n          if (\n            column.isRequired &&\n            column.isEditable &&\n            isMissingValueCell(cell)\n          ) {\n            tooltipContent = REQUIRED_CELL_TOOLTIP\n          } else if (hasTooltip(cell)) {\n            tooltipContent = cell.tooltip\n          }\n        }\n\n        if (tooltipContent) {\n          timeoutRef.current = setTimeout(() => {\n            if (tooltipContent) {\n              setTooltip({\n                content: tooltipContent,\n                left: args.bounds.x + args.bounds.width / 2,\n                top: args.bounds.y,\n              })\n            }\n          }, DEBOUNCE_TIME_MS)\n        }\n      }\n    },\n    [columns, getCellContent, setTooltip, timeoutRef]\n  )\n\n  const clearTooltip = React.useCallback(() => {\n    setTooltip(undefined)\n  }, [setTooltip])\n\n  return {\n    tooltip,\n    clearTooltip,\n    onItemHovered,\n  }\n}\n\nexport default useTooltips\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport {\n  DataEditorProps,\n  DrawCustomCellCallback,\n  Rectangle,\n  Theme as GlideTheme,\n  drawTextCell,\n} from \"@glideapps/glide-data-grid\"\nimport { useExtraCells } from \"@glideapps/glide-data-grid-cells\"\n\nimport {\n  BaseColumn,\n  CustomCells,\n  isMissingValueCell,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\n\n// Token used for missing values (null, NaN, etc.)\nconst NULL_VALUE_TOKEN = \"None\"\n\n/**\n * Draw a red indicator in the top right corner of the cell\n * to indicate that the cell is required.\n */\nexport function drawRequiredIndicator(\n  ctx: CanvasRenderingContext2D,\n  rect: Rectangle,\n  theme: GlideTheme\n): void {\n  ctx.save()\n  ctx.beginPath()\n  // We are first moving the drawing position under the top right corner\n  // 8 pixels from left side (this is the size triangle)\n  // and 1 pixel from top side (to be under the cell border).\n  ctx.moveTo(rect.x + rect.width - 8, rect.y + 1)\n  // We draw the first line to the top right corner.\n  ctx.lineTo(rect.x + rect.width, rect.y + 1)\n  // We draw the second line 8 pixel down on the right cell border\n  ctx.lineTo(rect.x + rect.width, rect.y + 1 + 8)\n  // And now its enough to just fill it with a color to get a triangle.\n  ctx.fillStyle = theme.accentColor\n  ctx.fill()\n  ctx.restore()\n}\n\n/**\n * If a cell is marked as missing, we draw a placeholder symbol with a faded text color.\n */\nexport const drawMissingPlaceholder: DrawCustomCellCallback = args => {\n  const { cell, theme } = args\n  drawTextCell(\n    {\n      ...args,\n      theme: {\n        ...theme,\n        textDark: theme.textLight,\n        textMedium: theme.textLight,\n      },\n      // The following props are just added for technical reasons:\n      // @ts-expect-error\n      spriteManager: {},\n      hyperWrapping: false,\n    },\n    NULL_VALUE_TOKEN,\n    cell.contentAlign\n  )\n  return true\n}\n\n/**\n * Create return type for useCustomRenderer hook based on the DataEditorProps.\n */\ntype CustomRendererReturn = Pick<\n  DataEditorProps,\n  \"drawCell\" | \"customRenderers\"\n>\n\n/**\n * Custom hook that creates some custom cell renderers compatible with glide-data-grid.\n *\n * This includes capabilities like showing a faded placeholder for missing values or\n * a red indicator for required cells.\n *\n * @param columns - The columns of the table.\n * @param hasSelectionRow - Whether the table has the selection row activated (e.g. for dynamic editing).\n *\n * @returns An object containing the following properties:\n * - `drawCell`: A function that overwrites some rendering that can be\n *    passed to the `DataEditor` component.\n * - `customRenderers`: A map of custom cell renderers used by custom cells\n *    that can be passed to the `DataEditor` component.\n */\nfunction useCustomRenderer(\n  columns: BaseColumn[],\n  hasSelectionRow: boolean\n): CustomRendererReturn {\n  const drawCell: DrawCustomCellCallback = React.useCallback(\n    args => {\n      const { cell, theme, ctx, rect } = args\n      const colPos = hasSelectionRow ? args.col - 1 : args.col\n      if (isMissingValueCell(cell) && colPos < columns.length) {\n        let contentRendered = false\n        const column = columns[colPos]\n\n        // We explicitly ignore some cell types here (e.g. checkbox, progress...) since\n        // they are taking care of rendering their missing value state themselves (usually as empty cell).\n        // All other cell types are rendered with a placeholder symbol and a faded text color via drawMissingPlaceholder.\n        if (\n          ![\"checkbox\", \"line_chart\", \"bar_chart\", \"progress\"].includes(\n            column.kind\n          )\n        ) {\n          drawMissingPlaceholder(args)\n          contentRendered = true\n        }\n\n        if (column.isRequired && column.isEditable) {\n          // If the cell value is missing, and it is configured as required & editable,\n          // we draw a red indicator in the top right corner of the cell.\n          drawRequiredIndicator(ctx, rect, theme)\n        }\n\n        return contentRendered\n      }\n\n      return false\n    },\n    [columns, hasSelectionRow]\n  )\n\n  // Load extra cell renderers from the glide-data-grid-cells package:\n  const extraCellArgs = useExtraCells()\n\n  return {\n    drawCell,\n    customRenderers: [...extraCellArgs.customRenderers, ...CustomCells],\n  }\n}\n\nexport default useCustomRenderer\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useState } from \"react\"\n\nimport { GridColumn, DataEditorProps } from \"@glideapps/glide-data-grid\"\n\ntype ColumnSizerReturn = Pick<DataEditorProps, \"columns\" | \"onColumnResize\">\n\n/**\n * Hook to manage the interactive column resizing capabilities.\n *\n * @param columns - The columns of the table.\n *\n * @returns An object containing the following properties:\n * - columns: The updated list of columns.\n * - onColumnResize: The callback function to be called when a column is resized.\n */\nfunction useColumnSizer(columns: GridColumn[]): ColumnSizerReturn {\n  // The columns with the corresponding empty template for every type:\n  const [columnSizes, setColumnSizes] = useState<Map<string, number>>(\n    () => new Map()\n  )\n\n  const onColumnResize = React.useCallback(\n    (\n      column: GridColumn,\n      _newSize: number,\n      _colIndex: number,\n      newSizeWithGrow: number\n    ) => {\n      if (column.id) {\n        setColumnSizes(new Map(columnSizes).set(column.id, newSizeWithGrow))\n      }\n    },\n    [columnSizes]\n  )\n\n  // Apply column widths from state:\n  const sizedColumns = columns.map(column => {\n    if (\n      column.id &&\n      columnSizes.has(column.id) &&\n      columnSizes.get(column.id) !== undefined\n    ) {\n      return {\n        ...column,\n        width: columnSizes.get(column.id),\n        // Deactivate grow whenever a column gets manually resized\n        grow: 0,\n      } as GridColumn\n    }\n    return column\n  })\n\n  return {\n    columns: sizedColumns,\n    onColumnResize,\n  }\n}\n\nexport default useColumnSizer\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// TODO: fix incorrect hook usage and delete this lint suppression\n/* eslint-disable react-hooks/exhaustive-deps */\n\nimport React from \"react\"\n\nimport { Size as ResizableSize } from \"re-resizable\"\n\nimport { Arrow as ArrowProto } from \"@streamlit/lib/src/proto\"\nimport { notNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nconst ROW_HEIGHT = 35\n// Min width for the resizable table container:\n// Based on one column at minimum width + 2 for borders + 1 to prevent overlap problem with selection ring.\nconst MIN_TABLE_WIDTH = 52\n// Min height for the resizable table container:\n// Based on header + one column, and + 2 for borders + 1 to prevent overlap problem with selection ring.\nconst MIN_TABLE_HEIGHT = 2 * ROW_HEIGHT + 3\nconst DEFAULT_TABLE_HEIGHT = 400\n\nexport type AutoSizerReturn = {\n  rowHeight: number\n  minHeight: number\n  maxHeight: number\n  minWidth: number\n  maxWidth: number\n  resizableSize: ResizableSize\n  setResizableSize: React.Dispatch<React.SetStateAction<ResizableSize>>\n}\n\nexport function calculateMaxHeight(numRows: number): number {\n  // +2 pixels for borders\n  return Math.max(numRows * ROW_HEIGHT + 1 + 2, MIN_TABLE_HEIGHT)\n}\n/**\n * A custom React hook that manages all aspects related to the size of the table.\n *\n * @param element - The ArrowProto element\n * @param numRows - The number of rows in the table\n * @param containerWidth - The width of the surrounding container\n * @param containerHeight - The height of the surrounding container\n * @param isFullScreen - Whether the table is in fullscreen mode\n *\n * @returns The row height, min/max height & width, and the current size of the resizable container.\n */\nfunction useTableSizer(\n  element: ArrowProto,\n  numRows: number,\n  containerWidth: number,\n  containerHeight?: number,\n  isFullScreen?: boolean\n): AutoSizerReturn {\n  let maxHeight = calculateMaxHeight(\n    numRows +\n      1 + // Column header row\n      (element.editingMode === ArrowProto.EditingMode.DYNAMIC ? 1 : 0) // Trailing row\n  )\n\n  let initialHeight = Math.min(maxHeight, DEFAULT_TABLE_HEIGHT)\n\n  if (element.height) {\n    // User has explicitly configured a height\n    initialHeight = Math.max(element.height, MIN_TABLE_HEIGHT)\n    maxHeight = Math.max(element.height, maxHeight)\n  }\n\n  if (containerHeight) {\n    // If container height is set (e.g. when used in fullscreen)\n    // The maxHeight and height should not be larger than container height\n    initialHeight = Math.min(initialHeight, containerHeight)\n    maxHeight = Math.min(maxHeight, containerHeight)\n\n    if (!element.height) {\n      // If no explicit height is set, set height to max height (fullscreen mode)\n      initialHeight = maxHeight\n    }\n  }\n\n  let initialWidth: number | undefined // If container width is undefined, auto set based on column widths\n  let maxWidth = containerWidth\n\n  if (element.useContainerWidth) {\n    // Always use the full container width\n    initialWidth = containerWidth\n  } else if (element.width) {\n    // User has explicitly configured a width\n    initialWidth = Math.min(\n      Math.max(element.width, MIN_TABLE_WIDTH),\n      containerWidth\n    )\n    maxWidth = Math.min(Math.max(element.width, maxWidth), containerWidth)\n  }\n\n  const [resizableSize, setResizableSize] = React.useState<ResizableSize>({\n    width: initialWidth || \"100%\",\n    height: initialHeight,\n  })\n\n  React.useLayoutEffect(() => {\n    // This prevents weird table resizing behavior if the container width\n    // changes and the table uses the full container width.\n    if (element.useContainerWidth && resizableSize.width === \"100%\") {\n      setResizableSize({\n        width: containerWidth,\n        height: resizableSize.height,\n      })\n    }\n  }, [containerWidth])\n\n  // Reset the height if the number of rows changes (e.g. via add_rows):\n  React.useLayoutEffect(() => {\n    setResizableSize({\n      width: resizableSize.width,\n      height: initialHeight,\n    })\n  }, [numRows])\n\n  // Reset the width if the element width parameter was changed:\n  React.useLayoutEffect(() => {\n    setResizableSize({\n      width: initialWidth || \"100%\",\n      height: resizableSize.height,\n    })\n  }, [initialWidth])\n\n  // Reset the height if the element height parameter was changed:\n  React.useLayoutEffect(() => {\n    setResizableSize({\n      width: resizableSize.width,\n      height: initialHeight,\n    })\n  }, [initialHeight])\n\n  // Change sizing if the fullscreen mode is activated or deactivated:\n  React.useLayoutEffect(() => {\n    if (isFullScreen) {\n      const stretchColumns: boolean =\n        element.useContainerWidth ||\n        (notNullOrUndefined(element.width) && element.width > 0)\n      setResizableSize({\n        width: stretchColumns ? maxWidth : \"100%\",\n        height: maxHeight,\n      })\n    } else {\n      setResizableSize({\n        width: initialWidth || \"100%\",\n        height: initialHeight,\n      })\n    }\n  }, [isFullScreen])\n\n  return {\n    rowHeight: ROW_HEIGHT,\n    minHeight: MIN_TABLE_HEIGHT,\n    maxHeight,\n    minWidth: MIN_TABLE_WIDTH,\n    maxWidth,\n    resizableSize,\n    setResizableSize,\n  }\n}\n\nexport default useTableSizer\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\"\n\nimport { ImageEditorType } from \"@glideapps/glide-data-grid\"\nimport styled from \"@emotion/styled\"\n\nconst StyledImage = styled.img(() => ({\n  maxWidth: \"100%\",\n  maxHeight: \"600px\",\n  objectFit: \"scale-down\",\n}))\n\nexport const ImageCellEditor: ImageEditorType = ({ urls }) => {\n  const imageData = urls && urls.length > 0 ? urls[0] : \"\"\n  // Allow external image links to be opened in a new tab on click\n  if (imageData.startsWith(\"http\")) {\n    return (\n      <a href={imageData} target=\"_blank\" rel=\"noreferrer noopener\">\n        <StyledImage src={imageData}></StyledImage>\n      </a>\n    )\n  }\n\n  return <StyledImage src={imageData}></StyledImage>\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\n/**\n * A resizable data grid container component.\n */\nexport const StyledResizableContainer = styled.div(({ theme }) => ({\n  position: \"relative\",\n  display: \"inline-block\",\n\n  \"& .glideDataEditor\": {\n    height: \"100%\",\n    minWidth: \"100%\",\n    borderRadius: theme.radii.lg,\n  },\n\n  \"& .dvn-scroller\": {\n    scrollbarWidth: \"thin\",\n    [\"overflowX\" as any]: \"overlay !important\",\n    [\"overflowY\" as any]: \"overlay !important\",\n  },\n}))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\n\nimport { useTheme } from \"@emotion/react\"\nimport { Popover, PLACEMENT, ACCESSIBILITY_TYPE } from \"baseui/popover\"\n\nimport StreamlitMarkdown from \"@streamlit/lib/src/components/shared/StreamlitMarkdown/StreamlitMarkdown\"\nimport { StyledTooltipContentWrapper } from \"@streamlit/lib/src/components/shared/Tooltip/styled-components\"\nimport { hasLightBackgroundColor } from \"@streamlit/lib/src/theme/utils\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\n\nexport interface TooltipProps {\n  // The top position of the tooltip.\n  top: number\n  // The left position of the tooltip.\n  left: number\n  // The markdown content of the tooltip.\n  content: string\n  // Callback from useTooltips hook to clear the tooltip\n  clearTooltip: () => void\n}\n\n/**\n * A tooltip that can be positioned anywhere on the screen.\n *\n * This is mostly the same as the shared tooltip implementation, but\n * we cannot use that one since it is a StatefulTooltip and requires\n * a target component and cannot be triggered programmatically.\n * We need to be able to position the tooltip anywhere on the screen, so we use a Popover\n * instead. Since Popover doesn't support positioning to a virtual position,\n * we are using an invisible div as a workaround.\n *\n * @param top The top position of the tooltip.\n * @param left The left position of the tooltip.\n * @param content The markdown content of the tooltip.\n * @returns The tooltip react element.\n */\nfunction Tooltip({\n  top,\n  left,\n  content,\n  clearTooltip,\n}: TooltipProps): ReactElement {\n  const [open, setOpen] = React.useState(true)\n  const theme: EmotionTheme = useTheme()\n  const { colors, fontSizes, radii } = theme\n\n  const closeTooltip = React.useCallback((): void => {\n    setOpen(false)\n    clearTooltip()\n  }, [clearTooltip, setOpen])\n\n  return (\n    <Popover\n      content={\n        <StyledTooltipContentWrapper className=\"stTooltipContent\">\n          <StreamlitMarkdown\n            style={{ fontSize: fontSizes.sm }}\n            source={content}\n            allowHTML={false}\n          />\n        </StyledTooltipContentWrapper>\n      }\n      placement={PLACEMENT.top}\n      accessibilityType={ACCESSIBILITY_TYPE.tooltip}\n      showArrow={false}\n      popoverMargin={5}\n      onClickOutside={closeTooltip}\n      onEsc={closeTooltip}\n      overrides={{\n        Body: {\n          style: {\n            // This is annoying, but a bunch of warnings get logged when the\n            // shorthand version `borderRadius` is used here since the long\n            // names are used by BaseWeb and mixing the two is apparently\n            // bad :(\n            borderTopLeftRadius: radii.md,\n            borderTopRightRadius: radii.md,\n            borderBottomLeftRadius: radii.md,\n            borderBottomRightRadius: radii.md,\n\n            paddingTop: \"0 !important\",\n            paddingBottom: \"0 !important\",\n            paddingLeft: \"0 !important\",\n            paddingRight: \"0 !important\",\n\n            backgroundColor: \"transparent\",\n          },\n        },\n        Inner: {\n          style: {\n            backgroundColor: hasLightBackgroundColor(theme)\n              ? colors.bgColor\n              : colors.secondaryBg,\n            color: colors.bodyText,\n            fontSize: fontSizes.sm,\n            fontWeight: \"normal\",\n            // See the long comment about `borderRadius`. The same applies here\n            // to `padding`.\n            paddingTop: \"0 !important\",\n            paddingBottom: \"0 !important\",\n            paddingLeft: \"0 !important\",\n            paddingRight: \"0 !important\",\n          },\n        },\n      }}\n      isOpen={open}\n    >\n      <div\n        className=\"stTooltipTarget\"\n        data-testid=\"stTooltipTarget\"\n        style={{\n          // This is an invisible div that's used to position the tooltip.\n          // The position is provided from outside via the `top` and `left` properties.\n          // This a workaround for the fact that BaseWeb's Popover  doesn't support\n          // positioning to a virtual position and always requires a target\n          // component for positioning.\n          position: \"fixed\",\n          top,\n          left,\n        }}\n      ></div>\n    </Popover>\n  )\n}\n\nexport default Tooltip\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\nimport {\n  DataEditor as GlideDataEditor,\n  DataEditorRef,\n  GridSelection,\n  CompactSelection,\n  GridMouseEventArgs,\n  GridCell,\n} from \"@glideapps/glide-data-grid\"\nimport { Resizable } from \"re-resizable\"\n\nimport { FormClearHelper } from \"@streamlit/lib/src/components/widgets/Form\"\nimport withFullScreenWrapper from \"@streamlit/lib/src/hocs/withFullScreenWrapper\"\nimport { Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport { Arrow as ArrowProto } from \"@streamlit/lib/src/proto\"\nimport {\n  WidgetInfo,\n  WidgetStateManager,\n} from \"@streamlit/lib/src/WidgetStateManager\"\nimport { debounce, isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nimport EditingState from \"./EditingState\"\nimport {\n  useCustomTheme,\n  useTableSizer,\n  useDataLoader,\n  useDataEditor,\n  useColumnSizer,\n  useColumnSort,\n  useColumnLoader,\n  useTooltips,\n  useCustomRenderer,\n} from \"./hooks\"\nimport {\n  BaseColumn,\n  toGlideColumn,\n  getTextCell,\n  ImageCellEditor,\n} from \"./columns\"\nimport { StyledResizableContainer } from \"./styled-components\"\nimport Tooltip from \"./Tooltip\"\n\nimport \"@glideapps/glide-data-grid/dist/index.css\"\nimport \"@glideapps/glide-data-grid-cells/dist/index.css\"\n\n// Min column width used for manual and automatic resizing\nconst MIN_COLUMN_WIDTH = 50\n// Max column width used for manual resizing\nconst MAX_COLUMN_WIDTH = 1000\n// Max column width used for automatic column sizing\nconst MAX_COLUMN_AUTO_WIDTH = 500\n// Debounce time for triggering a widget state update\n// This prevents to rapid updates to the widget state.\nconst DEBOUNCE_TIME_MS = 100\n// Number of rows that triggers some optimization features\n// for large tables.\nconst LARGE_TABLE_ROWS_THRESHOLD = 150000\n\nexport interface DataFrameProps {\n  element: ArrowProto\n  data: Quiver\n  width: number\n  height?: number\n  disabled: boolean\n  widgetMgr: WidgetStateManager\n  isFullScreen?: boolean\n}\n\n/**\n * The main component used by dataframe & data_editor to render an editable table.\n *\n * @param element - The element's proto message\n * @param data - The Arrow data to render (extracted from the proto message)\n * @param width - The width of the container\n * @param height - The height of the container\n * @param disabled - Whether the widget is disabled\n * @param widgetMgr - The widget manager\n * @param isFullScreen - Whether the widget is in full screen mode\n */\nfunction DataFrame({\n  element,\n  data,\n  width: containerWidth,\n  height: containerHeight,\n  disabled,\n  widgetMgr,\n  isFullScreen,\n}: DataFrameProps): ReactElement {\n  const resizableRef = React.useRef<Resizable>(null)\n  const dataEditorRef = React.useRef<DataEditorRef>(null)\n\n  const theme = useCustomTheme()\n\n  const [isFocused, setIsFocused] = React.useState<boolean>(true)\n\n  // Determine if the device is primary using touch as input:\n  const isTouchDevice = React.useMemo<boolean>(\n    () => window.matchMedia && window.matchMedia(\"(pointer: coarse)\").matches,\n    []\n  )\n\n  const [gridSelection, setGridSelection] = React.useState<GridSelection>({\n    columns: CompactSelection.empty(),\n    rows: CompactSelection.empty(),\n    current: undefined,\n  })\n\n  // This callback is used to clear all selections (row/column/cell)\n  const clearSelection = React.useCallback(() => {\n    setGridSelection({\n      columns: CompactSelection.empty(),\n      rows: CompactSelection.empty(),\n      current: undefined,\n    })\n  }, [])\n\n  // This callback is used to refresh the rendering of selected cells\n  const refreshCells = React.useCallback(\n    (\n      cells: {\n        cell: [number, number]\n      }[]\n    ) => {\n      dataEditorRef.current?.updateCells(cells)\n    },\n    []\n  )\n\n  // This is done to keep some backwards compatibility\n  // so that old arrow proto messages from the st.dataframe\n  // would still work. Those messages don't have the\n  // editingMode field defined.\n  if (isNullOrUndefined(element.editingMode)) {\n    element.editingMode = ArrowProto.EditingMode.READ_ONLY\n  }\n\n  const { READ_ONLY, DYNAMIC } = ArrowProto.EditingMode\n\n  // Number of rows of the table minus 1 for the header row:\n  const dataDimensions = data.dimensions\n  const originalNumRows = Math.max(0, dataDimensions.rows - 1)\n\n  // For empty tables, we show an extra row that\n  // contains \"empty\" as a way to indicate that the table is empty.\n  const isEmptyTable =\n    originalNumRows === 0 &&\n    // We don't show empty state for dynamic mode with a table that has\n    // data columns defined.\n    !(element.editingMode === DYNAMIC && dataDimensions.dataColumns > 0)\n\n  // For large tables, we apply some optimizations to handle large data\n  const isLargeTable = originalNumRows > LARGE_TABLE_ROWS_THRESHOLD\n\n  const editingState = React.useRef<EditingState>(\n    new EditingState(originalNumRows)\n  )\n\n  const [numRows, setNumRows] = React.useState(\n    editingState.current.getNumRows()\n  )\n\n  React.useEffect(() => {\n    editingState.current = new EditingState(originalNumRows)\n    setNumRows(editingState.current.getNumRows())\n  }, [originalNumRows])\n\n  const resetEditingState = React.useCallback(() => {\n    editingState.current = new EditingState(originalNumRows)\n    setNumRows(editingState.current.getNumRows())\n  }, [originalNumRows])\n\n  const { columns: originalColumns } = useColumnLoader(element, data, disabled)\n\n  // On the first rendering, try to load initial widget state if\n  // it exist. This is required in the case that other elements\n  // are inserted before this widget.\n  React.useEffect(\n    () => {\n      if (element.editingMode !== READ_ONLY) {\n        const initialWidgetValue = widgetMgr.getStringValue(element)\n        if (initialWidgetValue) {\n          editingState.current.fromJson(initialWidgetValue, originalColumns)\n          setNumRows(editingState.current.getNumRows())\n        }\n      }\n    },\n    // TODO: fix incorrect hook usage. Could misbehave with add_rows so leaving here for now\n    /* eslint-disable react-hooks/exhaustive-deps */\n    []\n  )\n\n  const { getCellContent: getOriginalCellContent } = useDataLoader(\n    data,\n    originalColumns,\n    numRows,\n    editingState\n  )\n\n  const { columns, sortColumn, getOriginalIndex, getCellContent } =\n    useColumnSort(originalNumRows, originalColumns, getOriginalCellContent)\n\n  /**\n   * This callback should be called after any edits have been applied to the data.\n   * It will finish up the editing by updating the number of rows, clearing the selection,\n   * and triggering a rerun of the script.\n   *\n   * @param clearSelections - Whether to clear the selection. This is usually done after deleting rows.\n   * @param triggerRerun - Whether to trigger a rerun of the script after applying edits\n   */\n  const applyEdits = React.useCallback(\n    (clearSelections = false, triggerRerun = true) => {\n      if (numRows !== editingState.current.getNumRows()) {\n        // Reset the number of rows if it has been changed in the editing state\n        setNumRows(editingState.current.getNumRows())\n      }\n\n      if (clearSelections) {\n        clearSelection()\n      }\n\n      // Use debounce to prevent rapid updates to the widget state.\n      debounce(DEBOUNCE_TIME_MS, () => {\n        const currentEditingState = editingState.current.toJson(columns)\n        let currentWidgetState = widgetMgr.getStringValue(\n          element as WidgetInfo\n        )\n\n        if (currentWidgetState === undefined) {\n          // Create an empty widget state\n          currentWidgetState = new EditingState(0).toJson([])\n        }\n\n        // Only update if there is actually a difference between editing and widget state\n        if (currentEditingState !== currentWidgetState) {\n          widgetMgr.setStringValue(\n            element as WidgetInfo,\n            currentEditingState,\n            {\n              fromUi: triggerRerun,\n            }\n          )\n        }\n      })()\n    },\n    [widgetMgr, element, numRows, clearSelection, columns]\n  )\n\n  const { onCellEdited, onPaste, onRowAppended, onDelete, validateCell } =\n    useDataEditor(\n      columns,\n      element.editingMode !== DYNAMIC,\n      editingState,\n      getCellContent,\n      getOriginalIndex,\n      refreshCells,\n      applyEdits\n    )\n\n  const { tooltip, clearTooltip, onItemHovered } = useTooltips(\n    columns,\n    getCellContent\n  )\n\n  const { drawCell, customRenderers } = useCustomRenderer(\n    columns,\n    // TODO(lukasmasuch): if we add row selections, we need to set it to true here as well:\n    element.editingMode === DYNAMIC\n  )\n\n  const { columns: glideColumns, onColumnResize } = useColumnSizer(\n    columns.map(column => toGlideColumn(column))\n  )\n\n  const {\n    rowHeight,\n    minHeight,\n    maxHeight,\n    minWidth,\n    maxWidth,\n    resizableSize,\n    setResizableSize,\n  } = useTableSizer(\n    element,\n    numRows,\n    containerWidth,\n    containerHeight,\n    isFullScreen\n  )\n\n  // This is used as fallback in case the table is empty to\n  // insert cells indicating this state:\n  const getEmptyStateContent = React.useCallback(\n    ([_col, _row]: readonly [number, number]): GridCell => {\n      return {\n        ...getTextCell(true, false),\n        displayData: \"empty\",\n        contentAlign: \"center\",\n        allowOverlay: false,\n        themeOverride: {\n          textDark: theme.textLight,\n        },\n        span: [0, Math.max(columns.length - 1, 0)],\n      } as GridCell\n    },\n    [columns, theme.textLight]\n  )\n\n  // This is required for the form clearing functionality:\n  React.useEffect(() => {\n    const formClearHelper = new FormClearHelper()\n    formClearHelper.manageFormClearListener(\n      widgetMgr,\n      element.formId,\n      resetEditingState\n    )\n\n    return () => {\n      formClearHelper.disconnect()\n    }\n  }, [element.formId, resetEditingState, widgetMgr])\n\n  return (\n    <StyledResizableContainer\n      data-testid=\"stDataFrame\"\n      className=\"stDataFrame\"\n      onBlur={() => {\n        // If the container loses focus, clear the current selection.\n        // Touch screen devices have issues with this, so we don't clear\n        // the selection on those devices.\n        if (!isFocused && !isTouchDevice) {\n          clearSelection()\n        }\n      }}\n    >\n      <Resizable\n        data-testid=\"stDataFrameResizable\"\n        ref={resizableRef}\n        defaultSize={resizableSize}\n        style={{\n          border: `1px solid ${theme.borderColor}`,\n          borderRadius: `${theme.tableBorderRadius}`,\n        }}\n        minHeight={minHeight}\n        maxHeight={maxHeight}\n        minWidth={minWidth}\n        maxWidth={maxWidth}\n        size={resizableSize}\n        enable={{\n          top: false,\n          right: false,\n          bottom: false,\n          left: false,\n          topRight: false,\n          bottomRight: true,\n          bottomLeft: false,\n          topLeft: false,\n        }}\n        grid={[1, rowHeight]}\n        snapGap={rowHeight / 3}\n        onResizeStop={(_event, _direction, _ref, _delta) => {\n          if (resizableRef.current) {\n            setResizableSize({\n              width: resizableRef.current.size.width,\n              height:\n                // Add an additional pixel if it is stretched to full width\n                // to allow the full cell border to be visible\n                maxHeight - resizableRef.current.size.height === 3\n                  ? resizableRef.current.size.height + 3\n                  : resizableRef.current.size.height,\n            })\n          }\n        }}\n      >\n        <GlideDataEditor\n          className=\"glideDataEditor\"\n          ref={dataEditorRef}\n          columns={glideColumns}\n          rows={isEmptyTable ? 1 : numRows}\n          minColumnWidth={MIN_COLUMN_WIDTH}\n          maxColumnWidth={MAX_COLUMN_WIDTH}\n          maxColumnAutoWidth={MAX_COLUMN_AUTO_WIDTH}\n          rowHeight={rowHeight}\n          headerHeight={rowHeight}\n          getCellContent={isEmptyTable ? getEmptyStateContent : getCellContent}\n          onColumnResize={onColumnResize}\n          // Freeze all index columns:\n          freezeColumns={\n            isEmptyTable\n              ? 0\n              : columns.filter((col: BaseColumn) => col.isIndex).length\n          }\n          smoothScrollX={true}\n          smoothScrollY={true}\n          // Show borders between cells:\n          verticalBorder={(col: number) =>\n            // Show no border for last column in certain situations\n            // This is required to prevent the cell selection border to not be cut off\n            !(\n              col >= columns.length &&\n              (element.useContainerWidth || resizableSize.width === \"100%\")\n            )\n          }\n          // Activate copy to clipboard functionality:\n          getCellsForSelection={true}\n          // Deactivate row markers and numbers:\n          rowMarkers={\"none\"}\n          // Deactivate selections:\n          rangeSelect={!isTouchDevice ? \"rect\" : \"none\"}\n          columnSelect={\"none\"}\n          rowSelect={\"none\"}\n          // Enable tooltips on hover of a cell or column header:\n          onItemHovered={onItemHovered}\n          // Activate search:\n          keybindings={{ search: true, downFill: true }}\n          // Header click is used for column sorting:\n          onHeaderClicked={\n            // Deactivate sorting for empty state and for large dataframes:\n            isEmptyTable || isLargeTable ? undefined : sortColumn\n          }\n          gridSelection={gridSelection}\n          onGridSelectionChange={(newSelection: GridSelection) => {\n            if (isFocused || isTouchDevice) {\n              // Only allow selection changes if the grid is focused.\n              // This is mainly done because there is a bug when overlay click actions\n              // are outside of the bounds of the table (e.g. select dropdown or date picker).\n              // This results in the first cell being selected for a short period of time\n              // But for touch devices, preventing this can cause issues to select cells.\n              // So we allow selection changes for touch devices even when it is not focused.\n              setGridSelection(newSelection)\n              if (tooltip !== undefined) {\n                // Remove the tooltip on every grid selection change:\n                clearTooltip()\n              }\n            }\n          }}\n          theme={theme}\n          onMouseMove={(args: GridMouseEventArgs) => {\n            // Determine if the dataframe is focused or not\n            if (args.kind === \"out-of-bounds\" && isFocused) {\n              setIsFocused(false)\n            } else if (args.kind !== \"out-of-bounds\" && !isFocused) {\n              setIsFocused(true)\n            }\n          }}\n          // Add shadow for index columns and header on scroll:\n          fixedShadowX={true}\n          fixedShadowY={true}\n          experimental={{\n            // We use an overlay scrollbar, so no need to have space for reserved for the scrollbar:\n            scrollbarWidthOverride: 1,\n          }}\n          // Apply custom rendering (e.g. for missing or required cells):\n          drawCell={drawCell}\n          // Add support for additional cells:\n          customRenderers={customRenderers}\n          // Custom image editor to render single images:\n          imageEditorOverride={ImageCellEditor}\n          // Add our custom SVG header icons:\n          headerIcons={theme.headerIcons}\n          // Add support for user input validation:\n          validateCell={validateCell}\n          // The default setup is read only, and therefore we deactivate paste here:\n          onPaste={false}\n          // If element is editable, enable editing features:\n          {...(!isEmptyTable &&\n            element.editingMode !== READ_ONLY &&\n            !disabled && {\n              // Support fill handle for bulk editing:\n              fillHandle: !isTouchDevice,\n              // Support editing:\n              onCellEdited,\n              // Support pasting data for bulk editing:\n              onPaste,\n              // Support deleting cells & rows:\n              onDelete,\n            })}\n          // If element is dynamic, enable adding & deleting rows:\n          {...(!isEmptyTable &&\n            element.editingMode === DYNAMIC && {\n              // Support adding rows:\n              trailingRowOptions: {\n                sticky: false,\n                tint: true,\n              },\n              rowMarkerTheme: {\n                bgCell: theme.bgHeader,\n                bgCellMedium: theme.bgHeader,\n              },\n              rowMarkers: \"checkbox\",\n              rowSelectionMode: \"auto\",\n              rowSelect: disabled ? \"none\" : \"multi\",\n              // Support adding rows:\n              onRowAppended: disabled ? undefined : onRowAppended,\n              // Deactivate sorting, since it is not supported with dynamic editing:\n              onHeaderClicked: undefined,\n            })}\n        />\n      </Resizable>\n      {tooltip && tooltip.content && (\n        <Tooltip\n          top={tooltip.top}\n          left={tooltip.left}\n          content={tooltip.content}\n          clearTooltip={clearTooltip}\n        ></Tooltip>\n      )}\n    </StyledResizableContainer>\n  )\n}\n\nexport default withFullScreenWrapper(DataFrame)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isValidFormId } from \"@streamlit/lib/src/util/utils\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\nimport { SignalConnection } from \"typed-signals\"\n\nexport class FormClearHelper {\n  private formClearListener?: SignalConnection\n\n  private lastWidgetMgr?: WidgetStateManager\n\n  private lastFormId?: string\n\n  /**\n   * Register the listener that will be called when the widget's form is cleared.\n   * This should be called in the `render` function of every class-based widget\n   * element - it mimics the behavior of a `useEffect` hook, and ensures that\n   * subscription and unsubscription happen correctly.\n   *\n   * Hooks-based widgets can just use `useEffect` and call\n   * `widgetMgr.addFormClearedListener` directly.\n   */\n  public manageFormClearListener(\n    widgetMgr: WidgetStateManager,\n    formId: string,\n    listener: () => void\n  ): void {\n    // If we're already subscribed and our params haven't changed, early-out.\n    if (\n      this.formClearListener != null &&\n      this.lastWidgetMgr === widgetMgr &&\n      this.lastFormId === formId\n    ) {\n      return\n    }\n\n    // Close our previous subscription, if we had one.\n    this.disconnect()\n\n    // If we're not part of a form, there's nothing to do.\n    if (!isValidFormId(formId)) {\n      return\n    }\n\n    // Make the new subscription.\n    this.formClearListener = widgetMgr.addFormClearedListener(formId, listener)\n    this.lastWidgetMgr = widgetMgr\n    this.lastFormId = formId\n  }\n\n  /**\n   * Disconnect from the form-clear signal, if we're connected.\n   * This should be called from the `componentWillUnmount` function of every\n   * element that uses it.\n   */\n  public disconnect(): void {\n    this.formClearListener?.disconnect()\n    this.formClearListener = undefined\n    this.lastWidgetMgr = undefined\n    this.lastFormId = undefined\n  }\n}\n"],"names":["BOOLEAN_TRUE_VALUES","BOOLEAN_FALSE_VALUES","getErrorCell","errorMsg","errorDetails","arguments","length","undefined","concat","kind","GridCellKind","readonly","allowOverlay","data","displayData","isError","isErrorCell","cell","hasOwnProperty","isMissingValueCell","isMissingValue","getEmptyCell","getTextCell","faded","style","toGlideColumn","column","id","title","hasMenu","themeOverride","icon","isStretched","grow","isIndex","width","mergeColumnParameters","defaultParams","userParams","isNullOrUndefined","merge","toSafeArray","Uint8Array","TextDecoder","decode","trim","startsWith","endsWith","split","JSON","parse","error","parsedData","stringify","_key","value","Number","isArray","map","includes","toSafeString","toString","toSafeBoolean","cleanedValue","toLowerCase","toSafeNumber","NaN","unformattedValue","numbro","notNullOrUndefined","Int32Array","formatNumber","format","maxPrecision","isNaN","isFinite","Math","round","repeat","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","notation","sprintf","formatMoment","momentDate","DateTimeFormat","dateStyle","timeStyle","toDate","fromNow","calendar","toSafeDate","Date","getTime","parsedTimestamp","timestampInSeconds","parsedMomentDate","moment","utc","isValid","parsedMomentTime","countDecimals","numberStr","indexOf","toLocaleString","useGrouping","LINE_BREAK_REGEX","RegExp","removeLineBreaks","text","replace","ObjectColumn","props","cellTemplate","contentAlignment","sortMode","isEditable","getCell","cellData","getCellValue","isEditableType","TextColumn","parameters","columnTypeOptions","validateRegex","validate","validateInput","isRequired","corrected","max_chars","slice","test","validationResult","applyTimezone","timezone","utcOffset","tz","BaseDateTimeColumn","defaultFormat","defaultStep","inputType","toISOString","_parameters$step","step","defaultTimezoneOffset","minDate","maxDate","_applyTimezone","min_value","max_value","copyData","contentAlign","date","displayDate","min","max","timezoneOffset","_cell$data","DateTimeColumn","_props$columnTypeOpti","_props$columnTypeOpti2","_props$arrowType","_props$columnTypeOpti3","arrowType","meta","hasTimezone","TimeColumn","_props$columnTypeOpti4","_props$columnTypeOpti5","DateColumn","CheckboxColumn","isIntegerType","arrowTypeName","NumberColumn","Quiver","allowNegative","fixedDecimals","decimals","trunc","isInteger","isSafeInteger","SelectboxColumn","dataType","options","uniqueTypes","Set","x","size","has","allowedValues","filter","opt","_cell$data2","_cell$data5","_toSafeNumber","_cell$data3","_toSafeBoolean","_cell$data4","ListColumn","isString","extractCssProperty","htmlElementId","property","cssStyle","regex","match","exec","getIndexFromArrow","indexPosition","types","index","indexNames","name","isHidden","getColumnFromArrow","columnPosition","columns","numpy_type","pandas_type","getCategoricalOptions","getCellFromArrow","arrowCell","cssStyles","content","contentType","field","_arrowCell$field","parsedDate","type","unit","displayContent","_data","cssId","fontColor","textDark","backgroundColor","bgCell","applyPandasStylerCss","LinkColumn","ImageColumn","allowAdd","imageUrls","ProgressColumn","measureLabel","label","String","normalizeCellValue","BaseChartColumn","chart_type","y_min","y_max","values","displayValues","graphKind","yAxis","chartData","convertedChartData","normalizedChartData","maxValue","MIN_SAFE_INTEGER","minValue","MAX_SAFE_INTEGER","i","convertedValue","push","v","join","LineChartColumn","BarChartColumn","ColumnTypes","Map","Object","entries","object","checkbox","selectbox","list","number","link","datetime","time","line_chart","bar_chart","image","progress","CustomCells","INDEX_IDENTIFIER","COLUMN_POSITION_PREFIX","COLUMN_WIDTH_MAPPING","small","medium","large","parseWidthConfig","applyColumnConfig","columnProps","columnConfigMapping","columnConfig","get","indexNumber","disabled","hidden","required","type_config","alignment","defaultValue","default","help","getColumnType","_column$columnTypeOpt","customType","ColumnType","logWarning","typeName","getColumnTypeFromArrow","element","logError","getColumnConfig","stretchColumns","useContainerWidth","configuredColumns","_data$types$index$len","_data$types","_data$columns$0$lengt","_data$columns","numIndices","numColumns","getAllColumnsFromArrow","updatedColumn","editingMode","ArrowProto","columnOrder","orderedColumns","forEach","columnName","find","getColumnName","constructor","numRows","editedCells","addedRows","deletedRows","this","toJson","columnsByIndex","set","currentState","edited_rows","added_rows","deleted_rows","row","rowIndex","_map","editedRow","colIndex","addedRow","isIncomplete","cellValue","_k","fromJson","editingStateJson","editingState","columnsByName","keys","key","colName","_this$editedCells$get","isAddedRow","col","rowCache","setCell","addRow","rowCells","deleteRows","rows","sort","a","b","deleteRow","splice","delete","getOriginalRowIndex","originalIndex","getNumRows","theme","useTheme","headerIcons","React","editable","p","bgColor","accentColor","colors","primary","accentFg","white","accentLight","transparentize","borderColor","fadedText05","horizontalBorderColor","fontFamily","genericFonts","bodyFont","bgSearchResult","bgIconHeader","fadedText60","fgIconHeader","bgHeader","bgMix","bgHeaderHasFocus","secondaryBg","bgHeaderHovered","textHeader","textHeaderSelected","textGroupHeader","headerFontStyle","fontSizes","sm","baseFontStyle","editorFontSize","bodyText","textMedium","textLight","fadedText40","textBubble","bgCellMedium","cellHorizontalPadding","cellVerticalPadding","bgBubble","bgBubbleSelected","linkColor","linkText","drilldownBorder","darkenedBgMix25","tableBorderRadius","radii","lg","getCellContent","_ref","originalCol","originalRow","current","editedCell","setSort","getCellContentSorted","getOriginalIndex","useGlideColumnSort","updatedColumns","direction","updateSortingHeader","sortColumn","sortDirection","clickedColumn","mode","fixedNumRows","refreshCells","applyEdits","onCellEdited","updatedCell","currentCell","currentValue","newValue","newCell","lastUpdated","performance","now","appendEmptyRow","newRow","onRowAppended","onDelete","selection","_selection$current","rowsToDelete","toArray","range","updatedCells","selectedArea","y","height","onPaste","target","targetCol","targetRow","rowData","pasteDataValue","validateCell","tooltip","setTooltip","timeoutRef","onItemHovered","args","clearTimeout","location","colIdx","rowIdx","tooltipContent","hasTooltip","setTimeout","left","bounds","top","clearTooltip","hasSelectionRow","drawCell","ctx","rect","colPos","contentRendered","drawTextCell","spriteManager","hyperWrapping","drawMissingPlaceholder","save","beginPath","moveTo","lineTo","fillStyle","fill","restore","drawRequiredIndicator","customRenderers","useExtraCells","columnSizes","setColumnSizes","useState","onColumnResize","_newSize","_colIndex","newSizeWithGrow","ROW_HEIGHT","MIN_TABLE_HEIGHT","containerWidth","containerHeight","isFullScreen","initialWidth","maxHeight","calculateMaxHeight","initialHeight","maxWidth","resizableSize","setResizableSize","rowHeight","minHeight","minWidth","StyledImage","_styled","objectFit","ImageCellEditor","urls","imageData","_jsx","href","rel","children","src","StyledResizableContainer","position","display","borderRadius","scrollbarWidth","open","setOpen","closeTooltip","Popover","StyledTooltipContentWrapper","className","StreamlitMarkdown","fontSize","source","allowHTML","placement","PLACEMENT","accessibilityType","ACCESSIBILITY_TYPE","showArrow","popoverMargin","onClickOutside","onEsc","overrides","Body","borderTopLeftRadius","md","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","paddingTop","paddingBottom","paddingLeft","paddingRight","Inner","hasLightBackgroundColor","color","fontWeight","isOpen","withFullScreenWrapper","_ref2","widgetMgr","resizableRef","dataEditorRef","useCustomTheme","isFocused","setIsFocused","isTouchDevice","window","matchMedia","matches","gridSelection","setGridSelection","CompactSelection","clearSelection","cells","_dataEditorRef$curren","updateCells","READ_ONLY","DYNAMIC","dataDimensions","dimensions","originalNumRows","isEmptyTable","dataColumns","isLargeTable","EditingState","setNumRows","resetEditingState","originalColumns","useColumnLoader","initialWidgetValue","getStringValue","getOriginalCellContent","useDataLoader","useColumnSort","clearSelections","triggerRerun","debounce","currentEditingState","currentWidgetState","setStringValue","fromUi","useDataEditor","useTooltips","useCustomRenderer","glideColumns","useColumnSizer","useTableSizer","getEmptyStateContent","_ref3","_col","_row","span","formClearHelper","FormClearHelper","manageFormClearListener","formId","disconnect","_jsxs","onBlur","Resizable","ref","defaultSize","border","enable","right","bottom","topRight","bottomRight","bottomLeft","topLeft","grid","snapGap","onResizeStop","_event","_direction","_delta","GlideDataEditor","minColumnWidth","maxColumnWidth","maxColumnAutoWidth","headerHeight","freezeColumns","smoothScrollX","smoothScrollY","verticalBorder","getCellsForSelection","rowMarkers","rangeSelect","columnSelect","rowSelect","keybindings","search","downFill","onHeaderClicked","onGridSelectionChange","newSelection","onMouseMove","fixedShadowX","fixedShadowY","experimental","scrollbarWidthOverride","imageEditorOverride","fillHandle","trailingRowOptions","sticky","tint","rowMarkerTheme","rowSelectionMode","Tooltip","formClearListener","lastWidgetMgr","lastFormId","listener","isValidFormId","addFormClearedListener","_this$formClearListen"],"sourceRoot":""}