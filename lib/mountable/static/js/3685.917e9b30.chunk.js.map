{"version":3,"file":"static/js/3685.917e9b30.chunk.js","mappings":"oJA0BO,MAAMA,EAAgBC,WAAAA,GAAA,KACnBC,uBAAiB,OAEjBC,mBAAa,OAEbC,gBAAU,EAYXC,uBAAAA,CACLC,EACAC,EACAC,IAIEC,EAAAA,EAAAA,IAAmBC,KAAKR,oBACxBQ,KAAKP,gBAAkBG,GACvBI,KAAKN,aAAeG,IAMtBG,KAAKC,cAGAC,EAAAA,EAAAA,IAAcL,KAKnBG,KAAKR,kBAAoBI,EAAUO,uBAAuBN,EAAQC,GAClEE,KAAKP,cAAgBG,EACrBI,KAAKN,WAAaG,GACpB,CAOOI,UAAAA,GAAoB,IAADG,EACF,QAAtBA,EAAAJ,KAAKR,yBAAiB,IAAAY,GAAtBA,EAAwBH,aACxBD,KAAKR,uBAAoBa,EACzBL,KAAKP,mBAAgBY,EACrBL,KAAKN,gBAAaW,CACpB,EAaK,SAASC,EAAkBC,GAIH,IAJI,QACjCC,EAAO,UACPZ,EAAS,cACTa,GACoBF,GACpBG,EAAAA,EAAAA,YAAU,KACR,KAAKR,EAAAA,EAAAA,IAAcM,EAAQX,QACzB,OAGF,MAAML,EAAoBI,EAAUO,uBAClCK,EAAQX,OACRY,GAGF,MAAO,KACLjB,EAAkBS,YAAY,CAC/B,GACA,CAACO,EAASZ,EAAWa,GAC1B,C,2MC/FO,MAAME,GAAiBC,E,OAAAA,GAAA,OAAAC,OAAA,YAAAD,EAAWL,IAAA,IAAC,MAAEO,GAAOP,EAAA,MAAM,CACvD,6BAA8B,CAC5BQ,WAAYD,EAAME,OAAOC,aAE5B,GAAC,I,qCCwCF,MAAMC,EAAwBA,CAC5BtB,EACAY,IAEOZ,EAAUuB,iBAAiBX,GAG9BY,EACJZ,IACsB,IAADa,EACrB,OAAsB,QAAtBA,EAAOb,EAAQc,eAAO,IAAAD,EAAAA,EAAI,IAAI,EAG1BE,EACJf,IACsB,IAADgB,EACrB,OAAoB,QAApBA,EAAOhB,EAAQiB,aAAK,IAAAD,EAAAA,EAAI,IAAI,EAGxBE,EAAuBA,CAC3BlB,EACAZ,EACA+B,EACAC,KAEAhC,EAAUiC,iBACRrB,EACAmB,EAAgBF,MAChB,CAAEK,OAAQH,EAAgBG,QAC1BF,EACD,EAGGG,EAAyBC,IAAU,IAADC,EACtC,MAAM,QAAEzB,EAAO,UAAEZ,EAAS,MAAEsC,EAAK,WAAEN,GAAeI,EAE5ClB,GAAsBqB,EAAAA,EAAAA,MACrBV,EAAOW,IAAsBC,EAAAA,EAAAA,GAGlC,CACAnB,wBACAE,2BACAG,wBACAG,uBACAlB,UACAZ,YACAgC,eAGIU,EACJ9B,EAAQ+B,cAAgB,GAAKd,EAAMe,QAAUhC,EAAQ+B,cAEjDE,GAAkBC,EAAAA,EAAAA,UAAQ,KAC9B,GAA8B,IAA1BlC,EAAQ+B,cACV,MAAO,aACF,GAAId,EAAMe,SAAWhC,EAAQ+B,cAAe,CACjD,MAAMI,EAAmC,IAA1BnC,EAAQ+B,cAAsB,UAAY,SACzD,MAAQ,6BAA4B/B,EAAQ+B,iBAAiBI,4BAC/D,CACA,MAAO,YAAY,GAClB,CAACnC,EAAQ+B,cAAed,EAAMe,SAE3BI,GAAiBF,EAAAA,EAAAA,UAAQ,IACtBjB,EAAMoB,KAAIC,IACf,MAAMC,EAAQvC,EAAQwC,QAAQF,GAC9B,MAAO,CAAErB,MAAOqB,EAAEG,WAAYF,QAAO,KAEtC,CAACvC,EAAQwC,QAASvB,IAEfyB,GAAmBC,EAAAA,EAAAA,cACtBC,IACC,MAAMC,EAAWA,KAAe,IAADC,EAC7B,MAAMC,EAAqB,QAAdD,EAAGF,EAAKT,cAAM,IAAAW,OAAA,EAAXA,EAAa7B,MAC7B,OAAO+B,SAASD,EAAS,GAAG,EAG9B,OAAQH,EAAKK,MACX,IAAK,SACH,OAAOC,IAAQjC,EAAO4B,KAExB,IAAK,QACH,MAAO,GAET,IAAK,SACH,OAAO5B,EAAMkC,OAAO,CAACN,MAEvB,QACE,MAAM,IAAIO,MAAO,gCAA+BR,EAAKK,QAEzD,GAEF,CAAChC,IAGGoC,GAAWV,EAAAA,EAAAA,cACdW,IAEGtD,EAAQ+B,eACQ,WAAhBuB,EAAOL,MACPhC,EAAMe,QAAUhC,EAAQ+B,eAI1BH,EAAmB,CACjBX,MAAOyB,EAAiBY,GACxBhC,QAAQ,GACR,GAEJ,CAACtB,EAAQ+B,cAAeW,EAAkBd,EAAoBX,EAAMe,SAGhEuB,GAAgBZ,EAAAA,EAAAA,cACpB,CAACH,EAA4BgB,KAC3B,GAAI1B,EACF,MAAO,GAGT,MAAM2B,EAAoBjB,EAAQkB,QAChCvB,IAAWlB,EAAM0C,SAASC,OAAOzB,EAAOlB,UAG1C,OAAO4C,EAAAA,EAAAA,IACLJ,EACAD,EACD,GAEH,CAAC1B,EAAmBb,IAGhB6C,EAAQ,CAAEpC,UACV,QAAEc,GAAYxC,EACd+D,EAA8B,IAAnBvB,EAAQR,QAAsBR,EAAMuC,SAC/CC,EACe,IAAnBxB,EAAQR,OAAe,wBAA0BhC,EAAQgE,YACrDC,EAAqCzB,EAAQH,KACjD,CAACF,EAAgB+B,KACR,CACL3B,MAAOJ,EACPlB,MAAOiD,EAAIzB,eAOX0B,EAAuB3B,EAAQR,OAAS,GAE9C,OACEoC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAgB,cAAY,gBAAgBP,MAAOA,EAAMQ,SAAA,EACtEC,EAAAA,EAAAA,KAACC,EAAAA,EAAW,CACVjC,MAAOvC,EAAQuC,MACfwB,SAAUA,EACVU,iBAAiBC,EAAAA,EAAAA,IACQ,QADuBjD,EAC9CzB,EAAQyE,uBAAe,IAAAhD,OAAA,EAAvBA,EAAyBR,OACzBqD,SAEDtE,EAAQ2E,OACPJ,EAAAA,EAAAA,KAACK,EAAAA,EAAqB,CAAAN,UACpBC,EAAAA,EAAAA,KAACM,EAAAA,EAAW,CACVC,QAAS9E,EAAQ2E,KACjBI,UAAWC,EAAAA,EAAUC,iBAK7BV,EAAAA,EAAAA,KAACpE,EAAc,CAAAmE,UACbC,EAAAA,EAAAA,KAACW,EAAAA,EAAQ,CACP1C,QAASyB,EACTkB,SAAS,QACTC,SAAS,QACT,aAAYpF,EAAQuC,MACpByB,YAAaA,EACbf,KAAMoC,EAAAA,GAAKC,OACXC,OAAK,EACLlC,SAAUA,EACVpC,MAAOmB,EACP2B,SAAUA,EACVyB,KAAM,UACNC,aAAcxD,EACdsB,cAAeA,EACfmC,eAAe,EACfC,UAAW,CACTC,YAAa,CACXC,UAAWC,EAAAA,EACXtE,MAAO,CACLmE,UAAW,CACTI,IAAK,CACHjC,MAAOA,KAAA,CACLpC,MAAOpB,EAAM0F,UAAUC,GACvBC,OAAQ5F,EAAM0F,UAAUC,SAOlCE,eAAgB,CACdrC,MAAOA,KAAA,CACLsC,aAAc9F,EAAM+F,QAAQC,MAGhCC,iBAAkB,CAChBzC,MAAO,CACL0C,UAAWlG,EAAMmG,MAAMC,iBAEvBC,gBAAiBrG,EAAMmG,MAAMG,YAC7BC,iBAAkBvG,EAAMmG,MAAMG,YAC9BE,eAAgBxG,EAAMmG,MAAMG,YAC5BG,kBAAmBzG,EAAMmG,MAAMG,cAGnCI,YAAa,CACXlD,MAAOA,KAAA,CACLmD,KAAM,UACNC,QAAS,SAGbC,eAAgB,CACdrD,MAAOA,KAAA,CACLsD,YAAa9G,EAAM+F,QAAQC,GAC3Be,WAAY/G,EAAM+F,QAAQiB,KAC1BC,cAAejH,EAAM+F,QAAQiB,KAC7BlB,aAAc9F,EAAM+F,QAAQiB,QAGhCE,UAAW,CACThG,MAAO,CACLmE,UAAW,CACTI,IAAK,CACHjC,MAAO,CACL2D,MAAOnH,EAAME,OAAOkH,SAEpBC,QAASrH,EAAM+F,QAAQuB,QACvB1B,OAAQ5F,EAAMmG,MAAMoB,cACpBnG,MAAOpB,EAAMmG,MAAMoB,cACnB,SAAU,CACRC,KAAMxH,EAAME,OAAOuH,eAO/BC,WAAY,CACVlE,MAAO,CACL2D,MAAOnH,EAAME,OAAOkH,WAGxBO,IAAK,CACHzG,MAAO,CACLmE,UAAW,CACTuC,KAAM,CACJpE,MAAO,CACLqE,oBAAqB7H,EAAM8H,MAAMC,GACjCC,qBAAsBhI,EAAM8H,MAAMC,GAClCE,wBAAyBjI,EAAM8H,MAAMC,GACrCG,uBAAwBlI,EAAM8H,MAAMC,GACpCI,SAAUnI,EAAMoI,UAAUL,GAC1BjB,YAAa9G,EAAM+F,QAAQC,GAC3BqC,WAAYrI,EAAM+F,QAAQiB,KAC1BsB,YAAatI,EAAM+F,QAAQC,GAI3BJ,OAAS,QAAO5F,EAAMmG,MAAMC,0BAA0BpG,EAAM+F,QAAQwC,MACpEC,SAAW,eAAcxI,EAAM+F,QAAQ0C,QAG3CC,OAAQ,CACNlF,MAAO,CACLsD,YAAa,IAGjB6B,WAAY,CACVzH,MAAO,CACLmE,UAAW,CACTI,IAAK,CACHjC,MAAO,CAELpC,MAAO,UACPwE,OAAQ,kBASxBgD,WAAY,CACV1H,MAAO,CACLmE,UAAW,CACTuC,KAAM,CACJpE,MAAO,CACL2E,SAAUnI,EAAMoI,UAAUpC,QAMpC6C,MAAO,CACL3H,MAAO,CAEL4H,SACEC,EAAAA,KAAqC,IAAzBlF,EACR,WACA,OAGVmF,SAAU,CAAEzD,UAAW0D,EAAAA,UAIzB,EAIV,GAAeC,EAAAA,EAAAA,MAAKjI,E,gFCnTb,SAASkI,EAAyB1J,GActC,IAXD,sBACAW,EAAqB,gBACrBgJ,EAAe,qBACfxI,EAAoB,QACpBlB,EAAO,UACPZ,EAAS,WACTgC,EAAU,cACVnB,GACoCF,EAIpC,MAAO4J,EAAcC,IAAmBC,EAAAA,EAAAA,WAAY,KAAO,IAADC,EAGxD,OAC2C,QAD3CA,EACEpJ,EAAsBtB,EAAWY,UAAQ,IAAA8J,EAAAA,EACzCJ,EAAgBtK,EAAWY,EAAQ,KAShC+J,EAAqBC,IAC1BH,EAAAA,EAAAA,UAAoC,CAClC5I,MAAO0I,EACPrI,QAAQ,KAKZpB,EAAAA,EAAAA,YAAU,MACJ+J,EAAAA,EAAAA,IAAkBF,KACtBC,EAAuB,MAEvBJ,EAAgBG,EAAoB9I,OACpCC,EAAqBlB,EAASZ,EAAW2K,EAAqB3I,GAAW,GACxE,CACD2I,EACA7I,EACAlB,EACAZ,EACAgC,IAOF,MAAM8I,GAAoBvH,EAAAA,EAAAA,cAAY,KACpCqH,EAAuB,CACrB/I,MAAOyI,EAAgBtK,EAAWY,GAClCsB,QAAQ,IAEG,OAAbrB,QAAa,IAAbA,GAAAA,GAAiB,GAChB,CACD+J,EACAhK,EACA0J,EACAtK,EACAa,IAMF,OAFAH,EAAAA,EAAAA,GAAmB,CAAEV,YAAWY,UAASC,cAAeiK,IAEjD,CAACP,EAAcK,EACxB,CAqBO,SAASnI,EAAmBsI,GAehC,IAZD,sBACAzJ,EAAqB,yBACrBE,EAAwB,sBACxBG,EAAqB,qBACrBG,EAAoB,QACpBlB,EAAO,UACPZ,EAAS,WACTgC,EAAU,cACVnB,GAC8BkK,EAI9B,MAAMT,GAAkB/G,EAAAA,EAAAA,cACtB,CAACyH,EAAIC,IACIzJ,EAAyByJ,IAElC,CAACzJ,KAGI+I,EAAcK,GAA0BP,EAA0B,CACvE/I,wBACAgJ,kBACAxI,uBACAlB,UACAZ,YACAgC,aACAnB,kBAeF,OAVAC,EAAAA,EAAAA,YAAU,KACHF,EAAQsK,WACbtK,EAAQsK,UAAW,EAEnBN,EAAuB,CACrB/I,MAAOF,EAAsBf,GAC7BsB,QAAQ,IACR,GACD,CAACtB,EAASe,EAAuBiJ,IAE7B,CAACL,EAAcK,EACxB,C","sources":["../../../streamlit/frontend/lib/src/components/widgets/Form/FormClearHelper.ts","../../../streamlit/frontend/lib/src/components/widgets/Multiselect/styled-components.ts","../../../streamlit/frontend/lib/src/components/widgets/Multiselect/Multiselect.tsx","../../../streamlit/frontend/lib/src/useBasicWidgetState.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useEffect } from \"react\"\n\nimport { SignalConnection } from \"typed-signals\"\n\nimport {\n  isValidFormId,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\n\nexport class FormClearHelper {\n  private formClearListener?: SignalConnection\n\n  private lastWidgetMgr?: WidgetStateManager\n\n  private lastFormId?: string\n\n  /**\n   * Register the listener that will be called when the widget's form is cleared.\n   * This should be called in the `render` function of every class-based widget\n   * element - it mimics the behavior of a `useEffect` hook, and ensures that\n   * subscription and unsubscription happen correctly.\n   *\n   * Hooks-based widgets can just use `useEffect` and call\n   * `widgetMgr.addFormClearedListener` directly. Or just use the convenient\n   * hook `useFormClearHelper`, below.\n   */\n  public manageFormClearListener(\n    widgetMgr: WidgetStateManager,\n    formId: string,\n    listener: () => void\n  ): void {\n    // If we're already subscribed and our params haven't changed, early-out.\n    if (\n      notNullOrUndefined(this.formClearListener) &&\n      this.lastWidgetMgr === widgetMgr &&\n      this.lastFormId === formId\n    ) {\n      return\n    }\n\n    // Close our previous subscription, if we had one.\n    this.disconnect()\n\n    // If we're not part of a form, there's nothing to do.\n    if (!isValidFormId(formId)) {\n      return\n    }\n\n    // Make the new subscription.\n    this.formClearListener = widgetMgr.addFormClearedListener(formId, listener)\n    this.lastWidgetMgr = widgetMgr\n    this.lastFormId = formId\n  }\n\n  /**\n   * Disconnect from the form-clear signal, if we're connected.\n   * This should be called from the `componentWillUnmount` function of every\n   * element that uses it.\n   */\n  public disconnect(): void {\n    this.formClearListener?.disconnect()\n    this.formClearListener = undefined\n    this.lastWidgetMgr = undefined\n    this.lastFormId = undefined\n  }\n}\n\ninterface FormElementProtoInterface {\n  formId: string\n}\n\ninterface FormClearHelperArgs {\n  element: FormElementProtoInterface\n  widgetMgr: WidgetStateManager\n  onFormCleared: () => void\n}\n\nexport function useFormClearHelper({\n  element,\n  widgetMgr,\n  onFormCleared,\n}: FormClearHelperArgs): void {\n  useEffect(() => {\n    if (!isValidFormId(element.formId)) {\n      return\n    }\n\n    const formClearListener = widgetMgr.addFormClearedListener(\n      element.formId,\n      onFormCleared\n    )\n\n    return () => {\n      formClearListener.disconnect()\n    }\n  }, [element, widgetMgr, onFormCleared])\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport const StyledUISelect = styled.div(({ theme }) => ({\n  \"span[aria-disabled='true']\": {\n    background: theme.colors.fadedText05,\n  },\n}))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { FC, memo, useCallback, useMemo } from \"react\"\n\nimport { ChevronDown } from \"baseui/icon\"\nimport {\n  OnChangeParams,\n  Option,\n  TYPE,\n  Select as UISelect,\n} from \"baseui/select\"\nimport without from \"lodash/without\"\nimport { isMobile } from \"react-device-detect\"\nimport { useTheme } from \"@emotion/react\"\n\nimport { VirtualDropdown } from \"@streamlit/lib/src/components/shared/Dropdown\"\nimport { fuzzyFilterSelectOptions } from \"@streamlit/lib/src/components/shared/Dropdown/Selectbox\"\nimport { Placement } from \"@streamlit/lib/src/components/shared/Tooltip\"\nimport TooltipIcon from \"@streamlit/lib/src/components/shared/TooltipIcon\"\nimport {\n  StyledWidgetLabelHelp,\n  WidgetLabel,\n} from \"@streamlit/lib/src/components/widgets/BaseWidget\"\nimport { StyledUISelect } from \"@streamlit/lib/src/components/widgets/Multiselect/styled-components\"\nimport { MultiSelect as MultiSelectProto } from \"@streamlit/lib/src/proto\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\nimport { labelVisibilityProtoValueToEnum } from \"@streamlit/lib/src/util/utils\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\nimport {\n  useBasicWidgetState,\n  ValueWithSource,\n} from \"@streamlit/lib/src/useBasicWidgetState\"\n\nexport interface Props {\n  disabled: boolean\n  element: MultiSelectProto\n  widgetMgr: WidgetStateManager\n  width: number\n  fragmentId?: string\n}\n\ntype MultiselectValue = number[]\n\ninterface MultiselectOption {\n  label: string\n  value: string\n}\n\nconst getStateFromWidgetMgr = (\n  widgetMgr: WidgetStateManager,\n  element: MultiSelectProto\n): MultiselectValue | undefined => {\n  return widgetMgr.getIntArrayValue(element)\n}\n\nconst getDefaultStateFromProto = (\n  element: MultiSelectProto\n): MultiselectValue => {\n  return element.default ?? null\n}\n\nconst getCurrStateFromProto = (\n  element: MultiSelectProto\n): MultiselectValue => {\n  return element.value ?? null\n}\n\nconst updateWidgetMgrState = (\n  element: MultiSelectProto,\n  widgetMgr: WidgetStateManager,\n  valueWithSource: ValueWithSource<MultiselectValue>,\n  fragmentId?: string\n): void => {\n  widgetMgr.setIntArrayValue(\n    element,\n    valueWithSource.value,\n    { fromUi: valueWithSource.fromUi },\n    fragmentId\n  )\n}\n\nconst Multiselect: FC<Props> = props => {\n  const { element, widgetMgr, width, fragmentId } = props\n\n  const theme: EmotionTheme = useTheme()\n  const [value, setValueWithSource] = useBasicWidgetState<\n    MultiselectValue,\n    MultiSelectProto\n  >({\n    getStateFromWidgetMgr,\n    getDefaultStateFromProto,\n    getCurrStateFromProto,\n    updateWidgetMgrState,\n    element,\n    widgetMgr,\n    fragmentId,\n  })\n\n  const overMaxSelections =\n    element.maxSelections > 0 && value.length >= element.maxSelections\n\n  const getNoResultsMsg = useMemo(() => {\n    if (element.maxSelections === 0) {\n      return \"No results\"\n    } else if (value.length === element.maxSelections) {\n      const option = element.maxSelections !== 1 ? \"options\" : \"option\"\n      return `You can only select up to ${element.maxSelections} ${option}. Remove an option first.`\n    }\n    return \"No results\"\n  }, [element.maxSelections, value.length])\n\n  const valueFromState = useMemo(() => {\n    return value.map(i => {\n      const label = element.options[i]\n      return { value: i.toString(), label }\n    })\n  }, [element.options, value])\n\n  const generateNewState = useCallback(\n    (data: OnChangeParams): MultiselectValue => {\n      const getIndex = (): number => {\n        const valueId = data.option?.value\n        return parseInt(valueId, 10)\n      }\n\n      switch (data.type) {\n        case \"remove\": {\n          return without(value, getIndex())\n        }\n        case \"clear\": {\n          return []\n        }\n        case \"select\": {\n          return value.concat([getIndex()])\n        }\n        default: {\n          throw new Error(`State transition is unknown: ${data.type}`)\n        }\n      }\n    },\n    [value]\n  )\n\n  const onChange = useCallback(\n    (params: OnChangeParams) => {\n      if (\n        element.maxSelections &&\n        params.type === \"select\" &&\n        value.length >= element.maxSelections\n      ) {\n        return\n      }\n      setValueWithSource({\n        value: generateNewState(params),\n        fromUi: true,\n      })\n    },\n    [element.maxSelections, generateNewState, setValueWithSource, value.length]\n  )\n\n  const filterOptions = useCallback(\n    (options: readonly Option[], filterValue: string): readonly Option[] => {\n      if (overMaxSelections) {\n        return []\n      }\n      // We need to manually filter for previously selected options here\n      const unselectedOptions = options.filter(\n        option => !value.includes(Number(option.value))\n      )\n\n      return fuzzyFilterSelectOptions(\n        unselectedOptions as MultiselectOption[],\n        filterValue\n      )\n    },\n    [overMaxSelections, value]\n  )\n\n  const style = { width }\n  const { options } = element\n  const disabled = options.length === 0 ? true : props.disabled\n  const placeholder =\n    options.length === 0 ? \"No options to select.\" : element.placeholder\n  const selectOptions: MultiselectOption[] = options.map(\n    (option: string, idx: number) => {\n      return {\n        label: option,\n        value: idx.toString(),\n      }\n    }\n  )\n\n  // Check if we have more than 10 options in the selectbox.\n  // If that's true, we show the keyboard on mobile. If not, we hide it.\n  const showKeyboardOnMobile = options.length > 10\n\n  return (\n    <div className=\"stMultiSelect\" data-testid=\"stMultiSelect\" style={style}>\n      <WidgetLabel\n        label={element.label}\n        disabled={disabled}\n        labelVisibility={labelVisibilityProtoValueToEnum(\n          element.labelVisibility?.value\n        )}\n      >\n        {element.help && (\n          <StyledWidgetLabelHelp>\n            <TooltipIcon\n              content={element.help}\n              placement={Placement.TOP_RIGHT}\n            />\n          </StyledWidgetLabelHelp>\n        )}\n      </WidgetLabel>\n      <StyledUISelect>\n        <UISelect\n          options={selectOptions}\n          labelKey=\"label\"\n          valueKey=\"value\"\n          aria-label={element.label}\n          placeholder={placeholder}\n          type={TYPE.select}\n          multi\n          onChange={onChange}\n          value={valueFromState}\n          disabled={disabled}\n          size={\"compact\"}\n          noResultsMsg={getNoResultsMsg}\n          filterOptions={filterOptions}\n          closeOnSelect={false}\n          overrides={{\n            SelectArrow: {\n              component: ChevronDown,\n              props: {\n                overrides: {\n                  Svg: {\n                    style: () => ({\n                      width: theme.iconSizes.xl,\n                      height: theme.iconSizes.xl,\n                    }),\n                  },\n                },\n              },\n            },\n\n            IconsContainer: {\n              style: () => ({\n                paddingRight: theme.spacing.sm,\n              }),\n            },\n            ControlContainer: {\n              style: {\n                minHeight: theme.sizes.minElementHeight,\n                // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n                borderLeftWidth: theme.sizes.borderWidth,\n                borderRightWidth: theme.sizes.borderWidth,\n                borderTopWidth: theme.sizes.borderWidth,\n                borderBottomWidth: theme.sizes.borderWidth,\n              },\n            },\n            Placeholder: {\n              style: () => ({\n                flex: \"inherit\",\n                opacity: \"0.7\",\n              }),\n            },\n            ValueContainer: {\n              style: () => ({\n                paddingLeft: theme.spacing.sm,\n                paddingTop: theme.spacing.none,\n                paddingBottom: theme.spacing.none,\n                paddingRight: theme.spacing.none,\n              }),\n            },\n            ClearIcon: {\n              props: {\n                overrides: {\n                  Svg: {\n                    style: {\n                      color: theme.colors.darkGray,\n                      // setting this width and height makes the clear-icon align with dropdown arrows of other input fields\n                      padding: theme.spacing.threeXS,\n                      height: theme.sizes.clearIconSize,\n                      width: theme.sizes.clearIconSize,\n                      \":hover\": {\n                        fill: theme.colors.bodyText,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n            SearchIcon: {\n              style: {\n                color: theme.colors.darkGray,\n              },\n            },\n            Tag: {\n              props: {\n                overrides: {\n                  Root: {\n                    style: {\n                      borderTopLeftRadius: theme.radii.md,\n                      borderTopRightRadius: theme.radii.md,\n                      borderBottomRightRadius: theme.radii.md,\n                      borderBottomLeftRadius: theme.radii.md,\n                      fontSize: theme.fontSizes.md,\n                      paddingLeft: theme.spacing.sm,\n                      marginLeft: theme.spacing.none,\n                      marginRight: theme.spacing.sm,\n                      // The tag height is derived from the minElementHeight\n                      // minus a top and bottom padding (2 * spacing.xs)\n                      // to nicely fit into the input field.\n                      height: `calc(${theme.sizes.minElementHeight} - 2 * ${theme.spacing.xs})`,\n                      maxWidth: `calc(100% - ${theme.spacing.lg})`,\n                    },\n                  },\n                  Action: {\n                    style: {\n                      paddingLeft: 0,\n                    },\n                  },\n                  ActionIcon: {\n                    props: {\n                      overrides: {\n                        Svg: {\n                          style: {\n                            // The action icon should be around 0.625% of the parent font size.\n                            width: \"0.625em\",\n                            height: \"0.625em\",\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n            MultiValue: {\n              props: {\n                overrides: {\n                  Root: {\n                    style: {\n                      fontSize: theme.fontSizes.sm,\n                    },\n                  },\n                },\n              },\n            },\n            Input: {\n              props: {\n                // Change the 'readonly' prop to hide the mobile keyboard if options < 10\n                readOnly:\n                  isMobile && showKeyboardOnMobile === false\n                    ? \"readonly\"\n                    : null,\n              },\n            },\n            Dropdown: { component: VirtualDropdown },\n          }}\n        />\n      </StyledUISelect>\n    </div>\n  )\n}\n\nexport default memo(Multiselect)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Dispatch,\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\"\n\nimport {\n  Source,\n  WidgetStateManager,\n} from \"@streamlit/lib/src/WidgetStateManager\"\nimport { useFormClearHelper } from \"@streamlit/lib/src/components/widgets/Form\"\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nexport type ValueWithSource<T> = {\n  value: T\n} & Source\n\n// Interface for a proto that has a .formId\ninterface ValueElementProtoInterface {\n  formId: string\n}\n\ninterface BaseArgs<\n  T, // Type of the value stored in WidgetStateManager.\n  P extends ValueElementProtoInterface // Proto for this widget.\n> {\n  // Important: these callback functions need to have stable references! So\n  // either declare them at the module level or wrap in useCallback.\n  getStateFromWidgetMgr: (wm: WidgetStateManager, el: P) => T | undefined\n  updateWidgetMgrState: (\n    el: P,\n    wm: WidgetStateManager,\n    vws: ValueWithSource<T>,\n    fragmentId?: string\n  ) => void\n  element: P\n  widgetMgr: WidgetStateManager\n  fragmentId?: string\n  onFormCleared?: () => void\n}\n\nexport interface UseBasicWidgetClientStateArgs<\n  T, // Type of the value stored in WidgetStateManager.\n  P extends ValueElementProtoInterface // Proto for this widget.\n> extends BaseArgs<T, P> {\n  // Important: these callback functions need to have stable references! So\n  // either declare them at the module level or wrap in useCallback.\n  getDefaultState: (wm: WidgetStateManager, el: P) => T\n}\n\n/**\n * A React hook that makes the simplest kinds of widgets very easy to implement.\n * Use the clientState version when the widget does not have a .setValue on its\n * proto, otherwise utilize `useBasicWidgetState`.\n */\nexport function useBasicWidgetClientState<\n  T, // Type of the value stored in WidgetStateManager.\n  P extends ValueElementProtoInterface // Proto for this widget.\n>({\n  getStateFromWidgetMgr,\n  getDefaultState,\n  updateWidgetMgrState,\n  element,\n  widgetMgr,\n  fragmentId,\n  onFormCleared,\n}: UseBasicWidgetClientStateArgs<T, P>): [\n  T,\n  Dispatch<SetStateAction<ValueWithSource<T> | null>>\n] {\n  const [currentValue, setCurrentValue] = useState<T>(() => {\n    // If WidgetStateManager knew a value for this widget, initialize to that.\n    // Otherwise, use the default value.\n    return (\n      getStateFromWidgetMgr(widgetMgr, element) ??\n      getDefaultState(widgetMgr, element)\n    )\n  })\n\n  // This acts as an \"event\":\n  // - It's null most of the time\n  // - It only has a value the moment when the user calls setValue (internally\n  //   called setNextValueWithSource). And then it's immediately set to null\n  //   internally.\n  const [nextValueWithSource, setNextValueWithSource] =\n    useState<ValueWithSource<T> | null>({\n      value: currentValue,\n      fromUi: false,\n    })\n\n  // When someone calls setNextValueWithSource, update internal state and tell\n  // widget manager to update its state too.\n  useEffect(() => {\n    if (isNullOrUndefined(nextValueWithSource)) return\n    setNextValueWithSource(null) // Clear \"event\".\n\n    setCurrentValue(nextValueWithSource.value)\n    updateWidgetMgrState(element, widgetMgr, nextValueWithSource, fragmentId)\n  }, [\n    nextValueWithSource,\n    updateWidgetMgrState,\n    element,\n    widgetMgr,\n    fragmentId,\n  ])\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  const handleFormCleared = useCallback((): void => {\n    setNextValueWithSource({\n      value: getDefaultState(widgetMgr, element),\n      fromUi: true,\n    })\n    onFormCleared?.()\n  }, [\n    setNextValueWithSource,\n    element,\n    getDefaultState,\n    widgetMgr,\n    onFormCleared,\n  ])\n\n  // Manage our form-clear event handler.\n  useFormClearHelper({ widgetMgr, element, onFormCleared: handleFormCleared })\n\n  return [currentValue, setNextValueWithSource]\n}\n\n// Interface for a proto that has a setValue, and .formId\ninterface ValueElementProtoInterfaceWithSetValue\n  extends ValueElementProtoInterface {\n  setValue: boolean\n}\n\nexport interface UseBasicWidgetStateArgs<\n  T, // Type of the value stored in WidgetStateManager.\n  P extends ValueElementProtoInterfaceWithSetValue // Proto for this widget.\n> extends BaseArgs<T, P> {\n  // Important: these callback functions need to have stable references! So\n  // either declare them at the module level or wrap in useCallback.\n  getDefaultStateFromProto: (el: P) => T\n  getCurrStateFromProto: (el: P) => T\n}\n\n/**\n * A React hook that makes the simplest kinds of widgets very easy to implement.\n */\nexport function useBasicWidgetState<\n  T, // Type of the value stored in WidgetStateManager.\n  P extends ValueElementProtoInterfaceWithSetValue // Proto for this widget.\n>({\n  getStateFromWidgetMgr,\n  getDefaultStateFromProto,\n  getCurrStateFromProto,\n  updateWidgetMgrState,\n  element,\n  widgetMgr,\n  fragmentId,\n  onFormCleared,\n}: UseBasicWidgetStateArgs<T, P>): [\n  T,\n  Dispatch<SetStateAction<ValueWithSource<T> | null>>\n] {\n  const getDefaultState = useCallback<(wm: WidgetStateManager, el: P) => T>(\n    (wm, el) => {\n      return getDefaultStateFromProto(el)\n    },\n    [getDefaultStateFromProto]\n  )\n\n  const [currentValue, setNextValueWithSource] = useBasicWidgetClientState({\n    getStateFromWidgetMgr,\n    getDefaultState,\n    updateWidgetMgrState,\n    element,\n    widgetMgr,\n    fragmentId,\n    onFormCleared,\n  })\n\n  // Respond to value changes via session_state. This is also set via an\n  // \"event\", this time using the .setValue property of the proto.\n  useEffect(() => {\n    if (!element.setValue) return\n    element.setValue = false // Clear \"event\".\n\n    setNextValueWithSource({\n      value: getCurrStateFromProto(element),\n      fromUi: false,\n    })\n  }, [element, getCurrStateFromProto, setNextValueWithSource])\n\n  return [currentValue, setNextValueWithSource]\n}\n"],"names":["FormClearHelper","constructor","formClearListener","lastWidgetMgr","lastFormId","manageFormClearListener","widgetMgr","formId","listener","notNullOrUndefined","this","disconnect","isValidFormId","addFormClearedListener","_this$formClearListen","undefined","useFormClearHelper","_ref","element","onFormCleared","useEffect","StyledUISelect","_styled","target","theme","background","colors","fadedText05","getStateFromWidgetMgr","getIntArrayValue","getDefaultStateFromProto","_element$default","default","getCurrStateFromProto","_element$value","value","updateWidgetMgrState","valueWithSource","fragmentId","setIntArrayValue","fromUi","Multiselect","props","_element$labelVisibil","width","useTheme","setValueWithSource","useBasicWidgetState","overMaxSelections","maxSelections","length","getNoResultsMsg","useMemo","option","valueFromState","map","i","label","options","toString","generateNewState","useCallback","data","getIndex","_data$option","valueId","parseInt","type","without","concat","Error","onChange","params","filterOptions","filterValue","unselectedOptions","filter","includes","Number","fuzzyFilterSelectOptions","style","disabled","placeholder","selectOptions","idx","showKeyboardOnMobile","_jsxs","className","children","_jsx","WidgetLabel","labelVisibility","labelVisibilityProtoValueToEnum","help","StyledWidgetLabelHelp","TooltipIcon","content","placement","Placement","TOP_RIGHT","UISelect","labelKey","valueKey","TYPE","select","multi","size","noResultsMsg","closeOnSelect","overrides","SelectArrow","component","ChevronDown","Svg","iconSizes","xl","height","IconsContainer","paddingRight","spacing","sm","ControlContainer","minHeight","sizes","minElementHeight","borderLeftWidth","borderWidth","borderRightWidth","borderTopWidth","borderBottomWidth","Placeholder","flex","opacity","ValueContainer","paddingLeft","paddingTop","none","paddingBottom","ClearIcon","color","darkGray","padding","threeXS","clearIconSize","fill","bodyText","SearchIcon","Tag","Root","borderTopLeftRadius","radii","md","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","fontSize","fontSizes","marginLeft","marginRight","xs","maxWidth","lg","Action","ActionIcon","MultiValue","Input","readOnly","isMobile","Dropdown","VirtualDropdown","memo","useBasicWidgetClientState","getDefaultState","currentValue","setCurrentValue","useState","_getStateFromWidgetMg","nextValueWithSource","setNextValueWithSource","isNullOrUndefined","handleFormCleared","_ref2","wm","el","setValue"],"sourceRoot":""}