{"version":3,"file":"static/js/8076.e2f5307c.chunk.js","mappings":"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","sources":["../../../streamlit/frontend/lib/src/components/widgets/Form/FormClearHelper.ts","../../../streamlit/frontend/lib/src/components/widgets/Selectbox/Selectbox.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useEffect } from \"react\"\n\nimport { SignalConnection } from \"typed-signals\"\n\nimport {\n  isValidFormId,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\n\nexport class FormClearHelper {\n  private formClearListener?: SignalConnection\n\n  private lastWidgetMgr?: WidgetStateManager\n\n  private lastFormId?: string\n\n  /**\n   * Register the listener that will be called when the widget's form is cleared.\n   * This should be called in the `render` function of every class-based widget\n   * element - it mimics the behavior of a `useEffect` hook, and ensures that\n   * subscription and unsubscription happen correctly.\n   *\n   * Hooks-based widgets can just use `useEffect` and call\n   * `widgetMgr.addFormClearedListener` directly. Or just use the convenient\n   * hook `useFormClearHelper`, below.\n   */\n  public manageFormClearListener(\n    widgetMgr: WidgetStateManager,\n    formId: string,\n    listener: () => void\n  ): void {\n    // If we're already subscribed and our params haven't changed, early-out.\n    if (\n      notNullOrUndefined(this.formClearListener) &&\n      this.lastWidgetMgr === widgetMgr &&\n      this.lastFormId === formId\n    ) {\n      return\n    }\n\n    // Close our previous subscription, if we had one.\n    this.disconnect()\n\n    // If we're not part of a form, there's nothing to do.\n    if (!isValidFormId(formId)) {\n      return\n    }\n\n    // Make the new subscription.\n    this.formClearListener = widgetMgr.addFormClearedListener(formId, listener)\n    this.lastWidgetMgr = widgetMgr\n    this.lastFormId = formId\n  }\n\n  /**\n   * Disconnect from the form-clear signal, if we're connected.\n   * This should be called from the `componentWillUnmount` function of every\n   * element that uses it.\n   */\n  public disconnect(): void {\n    this.formClearListener?.disconnect()\n    this.formClearListener = undefined\n    this.lastWidgetMgr = undefined\n    this.lastFormId = undefined\n  }\n}\n\ninterface FormElementProtoInterface {\n  formId: string\n}\n\ninterface FormClearHelperArgs {\n  element: FormElementProtoInterface\n  widgetMgr: WidgetStateManager\n  onFormCleared: () => void\n}\n\nexport function useFormClearHelper({\n  element,\n  widgetMgr,\n  onFormCleared,\n}: FormClearHelperArgs): void {\n  useEffect(() => {\n    if (!isValidFormId(element.formId)) {\n      return\n    }\n\n    const formClearListener = widgetMgr.addFormClearedListener(\n      element.formId,\n      onFormCleared\n    )\n\n    return () => {\n      formClearListener.disconnect()\n    }\n  }, [element, widgetMgr, onFormCleared])\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport { withTheme } from \"@emotion/react\"\n\nimport { Selectbox as SelectboxProto } from \"@streamlit/lib/src/proto\"\nimport { FormClearHelper } from \"@streamlit/lib/src/components/widgets/Form\"\nimport {\n  Source,\n  WidgetStateManager,\n} from \"@streamlit/lib/src/WidgetStateManager\"\nimport UISelectbox from \"@streamlit/lib/src/components/shared/Dropdown\"\nimport {\n  isNullOrUndefined,\n  labelVisibilityProtoValueToEnum,\n} from \"@streamlit/lib/src/util/utils\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\n\nexport interface Props {\n  disabled: boolean\n  element: SelectboxProto\n  widgetMgr: WidgetStateManager\n  width: number\n  theme: EmotionTheme\n  fragmentId?: string\n}\n\ninterface State {\n  /**\n   * The value specified by the user via the UI. If the user didn't touch this\n   * widget's UI, the default value is used.\n   */\n  value: number | null\n}\n\nexport class Selectbox extends React.PureComponent<Props, State> {\n  private readonly formClearHelper = new FormClearHelper()\n\n  public state: State = {\n    value: this.initialValue,\n  }\n\n  get initialValue(): number | null {\n    // If WidgetStateManager knew a value for this widget, initialize to that.\n    // Otherwise, use the default value from the widget protobuf.\n    const storedValue = this.props.widgetMgr.getIntValue(this.props.element)\n    return storedValue ?? this.props.element.default ?? null\n  }\n\n  public componentDidMount(): void {\n    if (this.props.element.setValue) {\n      this.updateFromProtobuf()\n    } else {\n      this.commitWidgetValue({ fromUi: false })\n    }\n  }\n\n  public componentDidUpdate(): void {\n    this.maybeUpdateFromProtobuf()\n  }\n\n  public componentWillUnmount(): void {\n    this.formClearHelper.disconnect()\n  }\n\n  private maybeUpdateFromProtobuf(): void {\n    const { setValue } = this.props.element\n    if (setValue) {\n      this.updateFromProtobuf()\n    }\n  }\n\n  private updateFromProtobuf(): void {\n    const { value } = this.props.element\n    this.props.element.setValue = false\n    this.setState({ value: value ?? null }, () => {\n      this.commitWidgetValue({ fromUi: false })\n    })\n  }\n\n  /** Commit state.value to the WidgetStateManager. */\n  private commitWidgetValue = (source: Source): void => {\n    const { widgetMgr, element, fragmentId } = this.props\n    widgetMgr.setIntValue(element, this.state.value, source, fragmentId)\n  }\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  private onFormCleared = (): void => {\n    this.setState(\n      (_, prevProps) => {\n        return { value: prevProps.element.default ?? null }\n      },\n      () => this.commitWidgetValue({ fromUi: true })\n    )\n  }\n\n  private onChange = (value: number | null): void => {\n    this.setState({ value }, () => this.commitWidgetValue({ fromUi: true }))\n  }\n\n  public render(): React.ReactNode {\n    const { options, help, label, labelVisibility, formId, placeholder } =\n      this.props.element\n    const { disabled, widgetMgr } = this.props\n    const clearable =\n      isNullOrUndefined(this.props.element.default) && !disabled\n\n    // Manage our form-clear event handler.\n    this.formClearHelper.manageFormClearListener(\n      widgetMgr,\n      formId,\n      this.onFormCleared\n    )\n\n    return (\n      <UISelectbox\n        label={label}\n        labelVisibility={labelVisibilityProtoValueToEnum(\n          labelVisibility?.value\n        )}\n        options={options}\n        disabled={disabled}\n        width={this.props.width}\n        onChange={this.onChange}\n        value={this.state.value}\n        help={help}\n        placeholder={placeholder}\n        clearable={clearable}\n      />\n    )\n  }\n}\n\nexport default withTheme(Selectbox)\n"],"names":["FormClearHelper","constructor","formClearListener","lastWidgetMgr","lastFormId","manageFormClearListener","widgetMgr","formId","listener","notNullOrUndefined","this","disconnect","isValidFormId","addFormClearedListener","_this$formClearListen","undefined","useFormClearHelper","_ref","element","onFormCleared","useEffect","Selectbox","React","arguments","formClearHelper","state","value","initialValue","commitWidgetValue","source","fragmentId","props","setIntValue","setState","_","prevProps","_prevProps$element$de","default","fromUi","onChange","storedValue","getIntValue","componentDidMount","setValue","updateFromProtobuf","componentDidUpdate","maybeUpdateFromProtobuf","componentWillUnmount","render","options","help","label","labelVisibility","placeholder","disabled","clearable","isNullOrUndefined","_jsx","UISelectbox","labelVisibilityProtoValueToEnum","width","withTheme"],"sourceRoot":""}