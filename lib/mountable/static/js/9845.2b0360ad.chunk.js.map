{"version":3,"file":"static/js/9845.2b0360ad.chunk.js","mappings":"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","sources":["../../../streamlit/frontend/lib/src/components/widgets/Form/FormClearHelper.ts","../../../streamlit/frontend/lib/src/components/widgets/Slider/styled-components.ts","../../../streamlit/frontend/lib/src/components/widgets/Slider/Slider.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isValidFormId } from \"@streamlit/lib/src/util/utils\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\nimport { SignalConnection } from \"typed-signals\"\n\nexport class FormClearHelper {\n  private formClearListener?: SignalConnection\n\n  private lastWidgetMgr?: WidgetStateManager\n\n  private lastFormId?: string\n\n  /**\n   * Register the listener that will be called when the widget's form is cleared.\n   * This should be called in the `render` function of every class-based widget\n   * element - it mimics the behavior of a `useEffect` hook, and ensures that\n   * subscription and unsubscription happen correctly.\n   *\n   * Hooks-based widgets can just use `useEffect` and call\n   * `widgetMgr.addFormClearedListener` directly.\n   */\n  public manageFormClearListener(\n    widgetMgr: WidgetStateManager,\n    formId: string,\n    listener: () => void\n  ): void {\n    // If we're already subscribed and our params haven't changed, early-out.\n    if (\n      this.formClearListener != null &&\n      this.lastWidgetMgr === widgetMgr &&\n      this.lastFormId === formId\n    ) {\n      return\n    }\n\n    // Close our previous subscription, if we had one.\n    this.disconnect()\n\n    // If we're not part of a form, there's nothing to do.\n    if (!isValidFormId(formId)) {\n      return\n    }\n\n    // Make the new subscription.\n    this.formClearListener = widgetMgr.addFormClearedListener(formId, listener)\n    this.lastWidgetMgr = widgetMgr\n    this.lastFormId = formId\n  }\n\n  /**\n   * Disconnect from the form-clear signal, if we're connected.\n   * This should be called from the `componentWillUnmount` function of every\n   * element that uses it.\n   */\n  public disconnect(): void {\n    this.formClearListener?.disconnect()\n    this.formClearListener = undefined\n    this.lastWidgetMgr = undefined\n    this.lastFormId = undefined\n  }\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\nimport { transparentize } from \"color2k\"\n\nexport interface StyledSliderProps {\n  disabled: boolean\n}\n\nexport const StyledThumb = styled.div<StyledSliderProps>(\n  ({ disabled, theme }) => ({\n    alignItems: \"center\",\n    backgroundColor: disabled ? theme.colors.gray : theme.colors.primary,\n    borderTopLeftRadius: \"100%\",\n    borderTopRightRadius: \"100%\",\n    borderBottomLeftRadius: \"100%\",\n    borderBottomRightRadius: \"100%\",\n    borderTopStyle: \"none\",\n    borderBottomStyle: \"none\",\n    borderRightStyle: \"none\",\n    borderLeftStyle: \"none\",\n    boxShadow: \"none\",\n    display: \"flex\",\n    height: theme.radii.xl,\n    justifyContent: \"center\",\n    width: theme.radii.xl,\n    \":focus\": {\n      outline: \"none\",\n    },\n    \":focus-visible\": {\n      boxShadow: `0 0 0 0.2rem ${transparentize(theme.colors.primary, 0.5)}`,\n    },\n  })\n)\n\nexport const StyledThumbValue = styled.div<StyledSliderProps>(\n  ({ disabled, theme }) => ({\n    fontFamily: theme.genericFonts.codeFont,\n    fontSize: theme.fontSizes.sm,\n    paddingBottom: theme.spacing.twoThirdsSmFont,\n    color: disabled ? theme.colors.gray : theme.colors.primary,\n    top: \"-22px\",\n    position: \"absolute\",\n    whiteSpace: \"nowrap\",\n    backgroundColor: theme.colors.transparent,\n    lineHeight: theme.lineHeights.base,\n    fontWeight: \"normal\",\n  })\n)\n\nexport const StyledTickBar = styled.div(({ theme }) => ({\n  paddingBottom: theme.spacing.none,\n  paddingLeft: theme.spacing.none,\n  paddingRight: theme.spacing.none,\n  paddingTop: theme.spacing.twoThirdsSmFont,\n  justifyContent: \"space-between\",\n  alignItems: \"center\",\n  display: \"flex\",\n}))\n\nexport const StyledTickBarItem = styled.div<StyledSliderProps>(\n  ({ disabled, theme }) => ({\n    lineHeight: theme.lineHeights.base,\n    fontWeight: \"normal\",\n    fontSize: theme.fontSizes.sm,\n    fontFamily: theme.genericFonts.codeFont,\n    color: disabled ? theme.colors.fadedText40 : \"inherit\",\n  })\n)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport pick from \"lodash/pick\"\nimport { StyleProps, Slider as UISlider } from \"baseui/slider\"\nimport { withTheme } from \"@emotion/react\"\nimport { sprintf } from \"sprintf-js\"\nimport { FormClearHelper } from \"@streamlit/lib/src/components/widgets/Form\"\nimport {\n  WidgetStateManager,\n  Source,\n} from \"@streamlit/lib/src/WidgetStateManager\"\nimport { Slider as SliderProto } from \"@streamlit/lib/src/proto\"\nimport {\n  debounce,\n  labelVisibilityProtoValueToEnum,\n} from \"@streamlit/lib/src/util/utils\"\nimport moment from \"moment\"\nimport {\n  WidgetLabel,\n  StyledWidgetLabelHelp,\n} from \"@streamlit/lib/src/components/widgets/BaseWidget\"\nimport TooltipIcon from \"@streamlit/lib/src/components/shared/TooltipIcon\"\nimport { Placement } from \"@streamlit/lib/src/components/shared/Tooltip\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\nimport {\n  StyledThumb,\n  StyledThumbValue,\n  StyledTickBar,\n  StyledTickBarItem,\n} from \"./styled-components\"\n\nconst DEBOUNCE_TIME_MS = 200\n\nexport interface Props {\n  disabled: boolean\n  element: SliderProto\n  theme: EmotionTheme\n  widgetMgr: WidgetStateManager\n  width: number\n  fragmentId?: string\n}\n\ninterface State {\n  /**\n   * The value specified by the user via the UI. If the user didn't touch this\n   * widget's UI, the default value is used.\n   */\n  value: number[]\n}\n\nclass Slider extends React.PureComponent<Props, State> {\n  private readonly formClearHelper = new FormClearHelper()\n\n  public state: State\n\n  private sliderRef = React.createRef<HTMLDivElement>()\n\n  private thumbRef: React.MutableRefObject<HTMLDivElement>[] = []\n\n  private thumbValueRef: React.RefObject<HTMLDivElement>[] = []\n\n  private readonly commitWidgetValueDebounced: (source: Source) => void\n\n  public constructor(props: Props) {\n    super(props)\n    this.commitWidgetValueDebounced = debounce(\n      DEBOUNCE_TIME_MS,\n      this.commitWidgetValue.bind(this)\n    )\n    this.state = { value: this.initialValue }\n  }\n\n  get initialValue(): number[] {\n    const storedValue = this.props.widgetMgr.getDoubleArrayValue(\n      this.props.element\n    )\n    return storedValue !== undefined ? storedValue : this.props.element.default\n  }\n\n  public componentDidMount(): void {\n    // Check thumb value's alignment vs. slider container\n    // Delay the alignment to allow the page layout to complete\n    setTimeout(() => {\n      this.thumbValueAlignment()\n    }, 0)\n\n    if (this.props.element.setValue) {\n      this.updateFromProtobuf()\n    } else {\n      this.commitWidgetValue({ fromUi: false })\n    }\n  }\n\n  public componentDidUpdate(): void {\n    this.maybeUpdateFromProtobuf()\n  }\n\n  public componentWillUnmount(): void {\n    this.formClearHelper.disconnect()\n  }\n\n  private maybeUpdateFromProtobuf(): void {\n    const { setValue } = this.props.element\n    if (setValue) {\n      this.updateFromProtobuf()\n    }\n  }\n\n  private updateFromProtobuf(): void {\n    const { value } = this.props.element\n    this.props.element.setValue = false\n    this.setState({ value }, () => {\n      this.commitWidgetValue({ fromUi: false })\n    })\n  }\n\n  /** Commit state.value to the WidgetStateManager. */\n  private commitWidgetValue = (source: Source): void => {\n    const { widgetMgr, element, fragmentId } = this.props\n    widgetMgr.setDoubleArrayValue(\n      element,\n      this.state.value,\n      source,\n      fragmentId\n    )\n  }\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  private onFormCleared = (): void => {\n    this.setState(\n      (_, prevProps) => {\n        return { value: prevProps.element.default }\n      },\n      () => this.commitWidgetValue({ fromUi: true })\n    )\n  }\n\n  private handleChange = ({ value }: { value: number[] }): void => {\n    this.setState({ value }, () =>\n      this.commitWidgetValueDebounced({ fromUi: true })\n    )\n  }\n\n  /**\n   * Return the value of the slider. This will either be an array with\n   * one value (for a single value slider), or an array with two\n   * values (for a range slider).\n   */\n  private get value(): number[] {\n    const { min, max } = this.props.element\n    const { value } = this.state\n    let start = value[0]\n    let end = value.length > 1 ? value[1] : value[0]\n    // Adjust the value if it's out of bounds.\n    if (start > end) {\n      start = end\n    }\n    if (start < min) {\n      start = min\n    }\n    if (start > max) {\n      start = max\n    }\n    if (end < min) {\n      end = min\n    }\n    if (end > max) {\n      end = max\n    }\n    return value.length > 1 ? [start, end] : [start]\n  }\n\n  private isDateTimeType(): boolean {\n    const { dataType } = this.props.element\n    return (\n      dataType === SliderProto.DataType.DATETIME ||\n      dataType === SliderProto.DataType.DATE ||\n      dataType === SliderProto.DataType.TIME\n    )\n  }\n\n  private formatValue(value: number): string {\n    const { format, options } = this.props.element\n    if (this.isDateTimeType()) {\n      // Python datetime uses microseconds, but JS & Moment uses milliseconds\n      // The timestamp is always set to the UTC timezone, even so, the actual timezone\n      // for this timestamp in the backend could be different.\n      // However, the frontend component does not need to know about the actual timezone.\n      return moment.utc(value / 1000).format(format)\n    }\n\n    if (options.length > 0) {\n      return sprintf(format, options[value])\n    }\n\n    return sprintf(format, value)\n  }\n\n  private alignValueOnThumb(\n    slider: HTMLDivElement | null,\n    thumb: HTMLDivElement | null,\n    thumbValue: HTMLDivElement | null\n  ): void {\n    if (slider && thumb && thumbValue) {\n      const sliderPosition = slider.getBoundingClientRect()\n      const thumbPosition = thumb.getBoundingClientRect()\n      const thumbValuePosition = thumbValue.getBoundingClientRect()\n\n      const thumbMidpoint = thumbPosition.left + thumbPosition.width / 2\n      const thumbValueOverflowsLeft =\n        thumbMidpoint - thumbValuePosition.width / 2 < sliderPosition.left\n      const thumbValueOverflowsRight =\n        thumbMidpoint + thumbValuePosition.width / 2 > sliderPosition.right\n\n      thumbValue.style.left = thumbValueOverflowsLeft ? \"0\" : \"\"\n      thumbValue.style.right = thumbValueOverflowsRight ? \"0\" : \"\"\n    }\n  }\n\n  private thumbValueAlignment(): void {\n    const sliderDiv = this.sliderRef.current\n    const thumb1Div = this.thumbRef[0]?.current\n    const thumb2Div = this.thumbRef[1]?.current\n    const thumb1ValueDiv = this.thumbValueRef[0]?.current\n    const thumb2ValueDiv = this.thumbValueRef[1]?.current\n    // Minimum gap between thumb values (in px)\n    const labelGap = 16\n\n    // Handles label alignment over each thumb\n    this.alignValueOnThumb(sliderDiv, thumb1Div, thumb1ValueDiv)\n    this.alignValueOnThumb(sliderDiv, thumb2Div, thumb2ValueDiv)\n\n    // Checks & handles label spacing when two thumb values & they overlap\n    if (\n      sliderDiv &&\n      thumb1Div &&\n      thumb2Div &&\n      thumb1ValueDiv &&\n      thumb2ValueDiv\n    ) {\n      const slider = sliderDiv.getBoundingClientRect()\n      const thumb1 = thumb1Div.getBoundingClientRect()\n      const thumb2 = thumb2Div.getBoundingClientRect()\n      const thumb1Value = thumb1ValueDiv.getBoundingClientRect()\n      const thumb2Value = thumb2ValueDiv.getBoundingClientRect()\n\n      // Check if thumb values are overlapping or too close together\n      if (thumb1Value.right + labelGap > thumb2Value.left) {\n        // Check whether to shift 1st thumb value left or 2nd thumb value right\n        const moveLeft =\n          thumb2Value.left - labelGap - thumb1Value.width > slider.left\n\n        if (moveLeft) {\n          thumb1ValueDiv.style.right = `${\n            thumb2Value.width + labelGap - (thumb2.right - thumb1.right)\n          }px`\n        } else {\n          thumb2ValueDiv.style.left = `${\n            thumb1Value.width + labelGap - (thumb2.left - thumb1.left)\n          }px`\n        }\n      }\n    }\n  }\n\n  // eslint-disable-next-line react/display-name\n  private renderThumb = React.forwardRef<HTMLDivElement, StyleProps>(\n    (props: StyleProps, ref): JSX.Element => {\n      const { $value, $thumbIndex } = props\n      const thumbIndex = $thumbIndex || 0\n      this.thumbRef[thumbIndex] = ref as React.MutableRefObject<HTMLDivElement>\n      this.thumbValueRef[thumbIndex] ||= React.createRef<HTMLDivElement>()\n\n      const formattedValue = $value\n        ? this.formatValue($value[$thumbIndex as number])\n        : \"\"\n      const passThrough = pick(props, [\n        \"role\",\n        \"style\",\n        \"aria-valuemax\",\n        \"aria-valuemin\",\n        \"aria-valuenow\",\n        \"tabIndex\",\n        \"onKeyUp\",\n        \"onKeyDown\",\n        \"onMouseEnter\",\n        \"onMouseLeave\",\n        \"draggable\",\n      ])\n      const ariaValueText: Record<string, string> = {}\n\n      if (this.props.element.options.length > 0 || this.isDateTimeType()) {\n        ariaValueText[\"aria-valuetext\"] = formattedValue\n      }\n\n      return (\n        <StyledThumb\n          {...passThrough}\n          disabled={props.$disabled === true}\n          ref={this.thumbRef[thumbIndex]}\n          aria-valuetext={formattedValue}\n          aria-label={this.props.element.label}\n        >\n          <StyledThumbValue\n            className=\"StyledThumbValue\"\n            data-testid=\"stThumbValue\"\n            disabled={props.$disabled === true}\n            ref={this.thumbValueRef[thumbIndex]}\n          >\n            {formattedValue}\n          </StyledThumbValue>\n        </StyledThumb>\n      )\n    }\n  )\n\n  private renderTickBar = (): JSX.Element => {\n    const { disabled, element } = this.props\n    const { max, min } = element\n\n    return (\n      <StyledTickBar data-testid=\"stTickBar\">\n        <StyledTickBarItem disabled={disabled} data-testid=\"stTickBarMin\">\n          {this.formatValue(min)}\n        </StyledTickBarItem>\n        <StyledTickBarItem disabled={disabled} data-testid=\"stTickBarMax\">\n          {this.formatValue(max)}\n        </StyledTickBarItem>\n      </StyledTickBar>\n    )\n  }\n\n  public render(): React.ReactNode {\n    const { disabled, element, theme, width, widgetMgr } = this.props\n    const { colors, fonts, fontSizes, spacing } = theme\n    const style = { width }\n\n    // Manage our form-clear event handler.\n    this.formClearHelper.manageFormClearListener(\n      widgetMgr,\n      element.formId,\n      this.onFormCleared\n    )\n\n    // Check the thumb value's alignment vs. slider container\n    this.thumbValueAlignment()\n\n    return (\n      <div\n        ref={this.sliderRef}\n        className=\"stSlider\"\n        data-testid=\"stSlider\"\n        style={style}\n      >\n        <WidgetLabel\n          label={element.label}\n          disabled={disabled}\n          labelVisibility={labelVisibilityProtoValueToEnum(\n            element.labelVisibility?.value\n          )}\n        >\n          {element.help && (\n            <StyledWidgetLabelHelp>\n              <TooltipIcon\n                content={element.help}\n                placement={Placement.TOP_RIGHT}\n              />\n            </StyledWidgetLabelHelp>\n          )}\n        </WidgetLabel>\n        <UISlider\n          min={element.min}\n          max={element.max}\n          step={element.step}\n          value={this.value}\n          onChange={this.handleChange}\n          disabled={disabled}\n          overrides={{\n            Root: {\n              style: {\n                paddingTop: spacing.twoThirdsSmFont,\n              },\n            },\n            Thumb: this.renderThumb,\n            Tick: {\n              style: {\n                fontFamily: fonts.monospace,\n                fontSize: fontSizes.sm,\n              },\n            },\n            Track: {\n              style: {\n                backgroundColor: \"none !important\",\n                paddingBottom: 0,\n                paddingLeft: 0,\n                paddingRight: 0,\n                paddingTop: spacing.twoThirdsSmFont,\n              },\n            },\n            InnerTrack: {\n              style: ({ $disabled }: StyleProps) => ({\n                height: \"4px\",\n                ...($disabled ? { background: colors.darkenedBgMix25 } : {}),\n              }),\n            },\n            TickBar: this.renderTickBar,\n          }}\n        />\n      </div>\n    )\n  }\n}\n\nexport default withTheme(Slider)\n"],"names":["FormClearHelper","constructor","formClearListener","lastWidgetMgr","lastFormId","manageFormClearListener","widgetMgr","formId","listener","this","disconnect","isValidFormId","addFormClearedListener","_this$formClearListen","undefined","StyledThumb","_styled","target","_ref","disabled","theme","alignItems","backgroundColor","colors","gray","primary","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","borderTopStyle","borderBottomStyle","borderRightStyle","borderLeftStyle","boxShadow","display","height","radii","xl","justifyContent","width","outline","transparentize","StyledThumbValue","_ref2","fontFamily","genericFonts","codeFont","fontSize","fontSizes","sm","paddingBottom","spacing","twoThirdsSmFont","color","top","position","whiteSpace","transparent","lineHeight","lineHeights","base","fontWeight","StyledTickBar","_ref3","none","paddingLeft","paddingRight","paddingTop","StyledTickBarItem","_ref4","fadedText40","Slider","React","_props","super","formClearHelper","state","sliderRef","thumbRef","thumbValueRef","commitWidgetValueDebounced","commitWidgetValue","source","element","fragmentId","props","setDoubleArrayValue","value","onFormCleared","setState","_","prevProps","default","fromUi","handleChange","renderThumb","ref","$value","$thumbIndex","thumbIndex","formattedValue","formatValue","passThrough","pick","ariaValueText","options","length","isDateTimeType","_jsx","$disabled","label","children","className","renderTickBar","max","min","_jsxs","debounce","bind","initialValue","storedValue","getDoubleArrayValue","componentDidMount","setTimeout","thumbValueAlignment","setValue","updateFromProtobuf","componentDidUpdate","maybeUpdateFromProtobuf","componentWillUnmount","start","end","dataType","SliderProto","format","moment","sprintf","alignValueOnThumb","slider","thumb","thumbValue","sliderPosition","getBoundingClientRect","thumbPosition","thumbValuePosition","thumbMidpoint","left","thumbValueOverflowsLeft","thumbValueOverflowsRight","right","style","_this$thumbRef$","_this$thumbRef$2","_this$thumbValueRef$","_this$thumbValueRef$2","sliderDiv","current","thumb1Div","thumb2Div","thumb1ValueDiv","thumb2ValueDiv","thumb1","thumb2","thumb1Value","thumb2Value","render","_element$labelVisibil","fonts","WidgetLabel","labelVisibility","labelVisibilityProtoValueToEnum","help","StyledWidgetLabelHelp","TooltipIcon","content","placement","Placement","UISlider","step","onChange","overrides","Root","Thumb","Tick","monospace","Track","InnerTrack","background","darkenedBgMix25","TickBar","withTheme"],"sourceRoot":""}