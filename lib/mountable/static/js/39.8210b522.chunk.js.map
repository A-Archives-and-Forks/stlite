{"version":3,"sources":["../../../streamlit/frontend/src/components/widgets/DataFrame/DataFrameCells.tsx","../../../streamlit/frontend/src/components/widgets/DataFrame/styled-components.ts","../../../streamlit/frontend/src/components/widgets/DataFrame/DataFrame.tsx"],"names":["ColumnType","determineColumnType","quiverType","dataTypeName","Quiver","getTypeName","columnType","Text","Boolean","includes","Number","startsWith","List","getDisplayContent","quiverCell","displayContent","format","content","contentType","field","replace","extractCssProperty","htmlElementId","property","cssStyle","regex","RegExp","match","exec","trim","getCellTemplate","type","readonly","style","kind","GridCellKind","data","displayData","allowOverlay","undefined","contentAlign","Bubble","Error","StyledResizableContainer","position","display","height","minWidth","scrollbarWidth","ROW_HEIGHT","createDataFrameTheme","theme","accentColor","colors","primary","accentFg","white","accentLight","transparentize","borderColor","fadedText05","fontFamily","genericFonts","bodyFont","bgSearchResult","bgIconHeader","fadedText60","fgIconHeader","bgHeader","bgMix","bgHeaderHasFocus","secondaryBg","bgHeaderHovered","textHeader","textHeaderSelected","headerFontStyle","fontSizes","sm","baseFontStyle","editorFontSize","textDark","bodyText","textMedium","textLight","textBubble","bgCell","bgColor","bgCellMedium","cellHorizontalPadding","cellVerticalPadding","bgBubble","bgBubbleSelected","linkColor","linkText","drilldownBorder","darkenedBgMix25","useDataLoader","element","sort","useState","Map","columnSizes","setColumnSizes","columns","stretchColumn","useContainerWidth","width","isEmpty","push","id","title","hasMenu","getTemplate","grow","numIndices","types","index","length","numColumns","i","columnTitle","getColumns","map","column","has","get","numRows","dimensions","rows","onColumnResize","React","useCallback","newSize","colIndex","newSizeWithGrow","set","getCellContent","col","row","cellTemplate","cssStyles","cellKind","Custom","cssId","themeOverride","fontColor","backgroundColor","formattedContents","notNullOrUndefined","cellData","Int32Array","JSON","parse","stringify","_key","value","fillCellTemplate","getCell","error","logError","getCellContentSorted","useColumnSort","updatedColumns","direction","updateSortingHeader","withFullScreenWrapper","initialWidth","containerWidth","containerHeight","isFullScreen","setSort","dataEditorRef","useRef","useTheme","isFocused","setIsFocused","CompactSelection","empty","gridSelection","setGridSelection","resizableRef","onHeaderClick","sortDirection","clickedColumn","mode","maxHeight","Math","max","initialHeight","min","maxWidth","MIN_COLUMN_WIDTH","resizableSize","setResizableSize","useLayoutEffect","current","className","onBlur","data-testid","ref","defaultSize","border","minHeight","enable","top","right","bottom","left","topRight","bottomRight","bottomLeft","topLeft","grid","snapGap","size","onResizeStop","_event","_direction","_ref","_delta","minColumnWidth","maxColumnWidth","rowHeight","headerHeight","freezeColumns","smoothScrollX","smoothScrollY","verticalBorder","getCellsForSelection","rowMarkers","rangeSelect","columnSelect","rowSelect","keybindings","search","onHeaderClicked","onGridSelectionChange","newSelection","onMouseMove","args","experimental","scrollbarWidthOverride"],"mappings":"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","file":"static/js/39.8210b522.chunk.js","sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  GridCellKind,\n  TextCell,\n  Theme as GlideTheme,\n  BooleanCell,\n  NumberCell,\n  BubbleCell,\n} from \"@glideapps/glide-data-grid\"\n\nimport { DataFrameCell, Quiver, Type as QuiverType } from \"src/lib/Quiver\"\nimport { notNullOrUndefined } from \"src/lib/utils\"\n\nexport enum ColumnType {\n  Text = \"text\",\n  Number = \"number\",\n  Boolean = \"boolean\",\n  List = \"list\",\n}\n\n/**\n * Maps the data type from Quiver to a valid column type.\n */\nexport function determineColumnType(quiverType: QuiverType): ColumnType {\n  const dataTypeName = quiverType && Quiver.getTypeName(quiverType)\n\n  let columnType = ColumnType.Text\n\n  if (!dataTypeName) {\n    // Use text column as fallback\n    columnType = ColumnType.Text\n  } else if (dataTypeName === \"bool\") {\n    columnType = ColumnType.Boolean\n  } else if ([\"int64\", \"float64\", \"range\"].includes(dataTypeName)) {\n    // The default index in pandas uses a range type.\n    columnType = ColumnType.Number\n  } else if (dataTypeName.startsWith(\"list\")) {\n    columnType = ColumnType.List\n  }\n\n  return columnType\n}\n\n/**\n * Returns either the formatted content or display value for a Quiver cell.\n */\nexport function getDisplayContent(quiverCell: DataFrameCell): string {\n  const displayContent =\n    quiverCell.displayContent ||\n    Quiver.format(quiverCell.content, quiverCell.contentType, quiverCell.field)\n\n  // Remove all line breaks\n  return displayContent.replace(/(\\r\\n|\\n|\\r)/gm, \" \")\n}\n\n/**\n * Extracts a CSS property value from a given CSS style string by using a regex.\n *\n * @param htmlElementId: The ID of the HTML element to extract the property for.\n * @param property: The css property to extract the value for.\n * @param cssStyle: The css style string.\n *\n * @return the CSS property value or undefined if the property is not found.\n */\nexport function extractCssProperty(\n  htmlElementId: string,\n  property: string,\n  cssStyle: string\n): string | undefined {\n  // This regex is supposed to extract the value of a CSS property\n  // for a specified HTML element ID from a CSS style string:\n  const regex = new RegExp(\n    `${htmlElementId}[,\\\\s].*{(?:[^}]*[\\\\s;]{1})?${property}:\\\\s*([^;}]+)[;]?.*}`,\n    \"gm\"\n  )\n  // Makes the regex simpler to match the element correctly:\n  cssStyle = cssStyle.replace(/{/g, \" {\")\n\n  const match = regex.exec(cssStyle)\n  if (match) {\n    return match[1].trim()\n  }\n\n  return undefined\n}\n/**\n * Returns a template object representing an empty cell for a given data type.\n *\n * @param type: The type of the column.\n * @param readonly: If true, returns a read-only version of the cell template.\n * @param style: The style used for the column.\n *\n * @return a GridCell object that can be used by glide-data-grid.\n */\nexport function getCellTemplate(\n  type: ColumnType,\n  readonly: boolean,\n  style: \"normal\" | \"faded\" = \"normal\"\n): GridCell {\n  if (type === ColumnType.Text) {\n    return {\n      kind: GridCellKind.Text,\n      data: \"\",\n      displayData: \"\",\n      allowOverlay: true,\n      readonly,\n      style,\n    } as TextCell\n  }\n\n  if (type === ColumnType.Boolean) {\n    return {\n      kind: GridCellKind.Boolean,\n      data: false,\n      readonly,\n      allowOverlay: false, // no overlay possible\n      style,\n    } as BooleanCell\n  }\n\n  if (type === ColumnType.Number) {\n    return {\n      kind: GridCellKind.Number,\n      data: undefined,\n      displayData: \"\",\n      readonly,\n      allowOverlay: true,\n      contentAlign: \"right\",\n      style,\n    } as NumberCell\n  }\n\n  if (type === ColumnType.List) {\n    return {\n      kind: GridCellKind.Bubble,\n      data: [],\n      allowOverlay: true,\n      style,\n    } as BubbleCell\n  }\n\n  throw new Error(`Unsupported cell type: ${type}`)\n}\n\n/**\n * Returns the sort mode based on the given column type.\n */\nexport function getColumnSortMode(columnType: ColumnType): string {\n  if (columnType === ColumnType.Number) {\n    // Smart mode also works correctly for numbers\n    return \"smart\"\n  }\n\n  return \"default\"\n}\n\n/**\n * Returns a glide-data-grid compatible cell object based on the\n * cell data from the quiver object. Different types of data will\n * result in different cell types.\n *\n * @param cellTemplate: the empty cell template from the column.\n * @param quiverCell: a dataframe cell object from Quiver.\n * @param cssStyles: optional css styles to apply on the cell.\n *\n * @return a GridCell object that can be used by glide-data-grid.\n */\nexport function fillCellTemplate(\n  cellTemplate: GridCell,\n  quiverCell: DataFrameCell,\n  cssStyles: string | undefined = undefined\n): GridCell {\n  let cellKind = cellTemplate.kind\n  if (cellTemplate.kind === GridCellKind.Custom) {\n    cellKind = (cellTemplate.data as any)?.kind\n\n    if (!cellKind) {\n      throw new Error(`Unable to determine cell type for custom cell.`)\n    }\n  }\n\n  if (cssStyles && quiverCell.cssId) {\n    const themeOverride = {} as Partial<GlideTheme>\n\n    // Extract and apply the font color\n    const fontColor = extractCssProperty(quiverCell.cssId, \"color\", cssStyles)\n    if (fontColor) {\n      themeOverride.textDark = fontColor\n    }\n\n    // Extract and apply the background color\n    const backgroundColor = extractCssProperty(\n      quiverCell.cssId,\n      \"background-color\",\n      cssStyles\n    )\n    if (backgroundColor) {\n      themeOverride.bgCell = backgroundColor\n    }\n\n    if (themeOverride) {\n      // Apply the background and font color in the theme override\n      cellTemplate = {\n        ...cellTemplate,\n        themeOverride,\n      }\n    }\n  }\n\n  if (cellKind === GridCellKind.Text) {\n    const formattedContents = getDisplayContent(quiverCell)\n    return {\n      ...cellTemplate,\n      data:\n        typeof quiverCell.content === \"string\" ||\n        !notNullOrUndefined(quiverCell.content) // don't use formattedContents for null/undefined\n          ? quiverCell.content\n          : formattedContents,\n      displayData: formattedContents,\n    } as TextCell\n  }\n\n  if (cellKind === GridCellKind.Number) {\n    const formattedContents = getDisplayContent(quiverCell)\n    let cellData = quiverCell.content\n\n    if (cellData instanceof Int32Array) {\n      // int values need to be extracted this way:\n      // eslint-disable-next-line prefer-destructuring\n      cellData = (cellData as Int32Array)[0]\n    }\n\n    return {\n      ...cellTemplate,\n      data: notNullOrUndefined(cellData) ? Number(cellData) : undefined,\n      displayData: formattedContents,\n    } as NumberCell\n  }\n\n  if (cellKind === GridCellKind.Boolean) {\n    return {\n      ...cellTemplate,\n      data: quiverCell.content as boolean,\n    } as BooleanCell\n  }\n\n  if (cellKind === GridCellKind.Bubble) {\n    // TODO(lukasmasuch): we use JSON.parse(JSON.stringify) here to handle type conversations to base types.\n    // This could be improved by introducing some custom code for handling type conversations.\n    return {\n      ...cellTemplate,\n      data: notNullOrUndefined(quiverCell.content)\n        ? JSON.parse(\n            JSON.stringify(quiverCell.content, (_key, value) =>\n              typeof value === \"bigint\" ? Number(value) : value\n            )\n          )\n        : [],\n    } as BubbleCell\n  }\n\n  throw new Error(`Unsupported cell kind: ${cellKind}`)\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\n/**\n * A resizable data grid container component.\n */\nexport const StyledResizableContainer = styled.div(() => ({\n  position: \"relative\",\n  display: \"inline-block\",\n\n  \"& .glideDataEditor\": {\n    height: \"100%\",\n    minWidth: \"100%\",\n  },\n\n  \"& .dvn-scroller\": {\n    scrollbarWidth: \"thin\",\n    [\"overflowX\" as any]: \"overlay !important\",\n    [\"overflowY\" as any]: \"overlay !important\",\n  },\n}))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement, useState } from \"react\"\nimport {\n  DataEditor as GlideDataEditor,\n  GridCell,\n  GridColumn,\n  DataEditorProps,\n  DataEditorRef,\n  GridSelection,\n  CompactSelection,\n  GridMouseEventArgs,\n  Theme as GlideTheme,\n} from \"@glideapps/glide-data-grid\"\nimport { Resizable, Size as ResizableSize } from \"re-resizable\"\nimport { useColumnSort } from \"@glideapps/glide-data-grid-source\"\nimport { transparentize } from \"color2k\"\nimport { useTheme } from \"@emotion/react\"\n\nimport withFullScreenWrapper from \"src/hocs/withFullScreenWrapper\"\nimport { Quiver } from \"src/lib/Quiver\"\nimport { logError } from \"src/lib/log\"\nimport { Theme } from \"src/theme\"\nimport { Arrow as ArrowProto } from \"src/autogen/proto\"\n\nimport {\n  getCellTemplate,\n  fillCellTemplate,\n  getColumnSortMode,\n  determineColumnType,\n  ColumnType,\n} from \"./DataFrameCells\"\nimport { StyledResizableContainer } from \"./styled-components\"\n\nimport \"@glideapps/glide-data-grid/dist/index.css\"\n\nconst ROW_HEIGHT = 35\nconst MIN_COLUMN_WIDTH = 35\nconst MAX_COLUMN_WIDTH = 650\n// Min width for the resizable table container:\n// Based on one column at minimum width + 2 for borders + 1 to prevent overlap problem with selection ring.\nconst MIN_TABLE_WIDTH = MIN_COLUMN_WIDTH + 3\n// Min height for the resizable table container:\n// Based on header + one column, and + 2 for borders + 1 to prevent overlap problem with selection ring.\nconst MIN_TABLE_HEIGHT = 2 * ROW_HEIGHT + 3\nconst DEFAULT_TABLE_HEIGHT = 400\n\n/**\n * Creates a glide-data-grid compatible theme based on our theme configuration.\n *\n * @param theme: Our theme configuration.\n *\n * @return a glide-data-grid compatible theme.\n */\nexport function createDataFrameTheme(theme: Theme): Partial<GlideTheme> {\n  return {\n    // Explanations: https://github.com/glideapps/glide-data-grid/blob/main/packages/core/API.md#theme\n    accentColor: theme.colors.primary,\n    accentFg: theme.colors.white,\n    accentLight: transparentize(theme.colors.primary, 0.9),\n    borderColor: theme.colors.fadedText05,\n    fontFamily: theme.genericFonts.bodyFont,\n    bgSearchResult: transparentize(theme.colors.primary, 0.9),\n    // Header styling:\n    bgIconHeader: theme.colors.fadedText60,\n    fgIconHeader: theme.colors.white,\n    bgHeader: theme.colors.bgMix,\n    bgHeaderHasFocus: theme.colors.secondaryBg,\n    bgHeaderHovered: theme.colors.bgMix, // uses same color as bgHeader to deactivate the hover effect\n    textHeader: theme.colors.fadedText60,\n    textHeaderSelected: theme.colors.white,\n    headerFontStyle: `${theme.fontSizes.sm}`,\n    // Cell styling:\n    baseFontStyle: theme.fontSizes.sm,\n    editorFontSize: theme.fontSizes.sm,\n    textDark: theme.colors.bodyText,\n    textMedium: transparentize(theme.colors.bodyText, 0.2),\n    textLight: theme.colors.fadedText60,\n    textBubble: theme.colors.fadedText60,\n    bgCell: theme.colors.bgColor,\n    bgCellMedium: theme.colors.bgColor, // uses same as bgCell to always have the same background color\n    cellHorizontalPadding: 8,\n    cellVerticalPadding: 3,\n    // Special cells:\n    bgBubble: theme.colors.secondaryBg,\n    bgBubbleSelected: theme.colors.secondaryBg,\n    linkColor: theme.colors.linkText,\n    drilldownBorder: theme.colors.darkenedBgMix25,\n  }\n}\n\n/**\n * The GridColumn type extended with a function to get a template of the given type.\n */\ntype GridColumnWithCellTemplate = GridColumn & {\n  getTemplate(): GridCell\n  columnType: ColumnType\n}\n\n/**\n * Returns a list of glide-data-grid compatible columns based on a Quiver instance.\n */\nexport function getColumns(\n  element: ArrowProto,\n  data: Quiver\n): GridColumnWithCellTemplate[] {\n  const columns: GridColumnWithCellTemplate[] = []\n  const stretchColumn = element.useContainerWidth || element.width\n\n  if (data.isEmpty()) {\n    // Tables that don't have any columns cause an exception in glide-data-grid.\n    // As a workaround, we are adding an empty index column in this case.\n    columns.push({\n      id: `empty-index`,\n      title: \"\",\n      hasMenu: false,\n      getTemplate: () => {\n        return getCellTemplate(ColumnType.Text, true, \"faded\")\n      },\n      columnType: ColumnType.Text,\n      ...(stretchColumn ? { grow: 1 } : {}),\n    } as GridColumnWithCellTemplate)\n    return columns\n  }\n\n  const numIndices = data.types?.index?.length ?? 0\n  const numColumns = data.columns?.[0]?.length ?? 0\n\n  for (let i = 0; i < numIndices; i++) {\n    const quiverType = data.types.index[i]\n    const columnType = determineColumnType(quiverType)\n    columns.push({\n      id: `index-${i}`,\n      // Indices currently have empty titles:\n      title: \"\",\n      hasMenu: false,\n      getTemplate: () => {\n        return getCellTemplate(columnType, true, \"faded\")\n      },\n      columnType,\n      ...(stretchColumn ? { grow: 1 } : {}),\n    } as GridColumnWithCellTemplate)\n  }\n\n  for (let i = 0; i < numColumns; i++) {\n    const columnTitle = data.columns[0][i]\n\n    const quiverType = data.types.data[i]\n    const columnType = determineColumnType(quiverType)\n\n    columns.push({\n      id: `column-${columnTitle}-${i}`,\n      title: columnTitle,\n      hasMenu: false,\n      getTemplate: () => {\n        return getCellTemplate(columnType, true)\n      },\n      columnType,\n      ...(stretchColumn ? { grow: 3 } : {}),\n    } as GridColumnWithCellTemplate)\n  }\n  return columns\n}\n\n/**\n * Configuration type for column sorting hook.\n */\ntype ColumnSortConfig = {\n  column: GridColumn\n  mode?: \"default\" | \"raw\" | \"smart\"\n  direction?: \"asc\" | \"desc\"\n}\n\n/**\n * Updates the column headers based on the sorting configuration.\n */\nfunction updateSortingHeader(\n  columns: GridColumnWithCellTemplate[],\n  sort: ColumnSortConfig | undefined\n): GridColumnWithCellTemplate[] {\n  if (sort === undefined) {\n    return columns\n  }\n  return columns.map(column => {\n    if (column.id === sort.column.id) {\n      return {\n        ...column,\n        title:\n          sort.direction === \"asc\" ? `↑ ${column.title}` : `↓ ${column.title}`,\n      }\n    }\n    return column\n  })\n}\n\n/**\n * Create return type for useDataLoader hook based on the DataEditorProps.\n */\ntype DataLoaderReturn = { numRows: number; numIndices: number } & Pick<\n  DataEditorProps,\n  \"columns\" | \"getCellContent\" | \"onColumnResize\"\n>\n\n/**\n * A custom hook that handles all data loading capabilities for the interactive data table.\n * This also includes the logic to load and configure columns.\n * And features that influence the data representation and column configuration\n * such as column resizing, sorting, etc.\n */\nexport function useDataLoader(\n  element: ArrowProto,\n  data: Quiver,\n  sort?: ColumnSortConfig | undefined\n): DataLoaderReturn {\n  // The columns with the corresponding empty template for every type:\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [columnSizes, setColumnSizes] = useState<Map<string, number>>(\n    () => new Map()\n  )\n\n  const columns = getColumns(element, data).map(column => {\n    // Apply column widths from state\n    if (\n      column.id &&\n      columnSizes.has(column.id) &&\n      columnSizes.get(column.id) !== undefined\n    ) {\n      return {\n        ...column,\n        width: columnSizes.get(column.id),\n        grow: 0, // Deactivate grow for this column\n      } as GridColumnWithCellTemplate\n    }\n    return column\n  })\n\n  // Number of rows of the table minus 1 for the header row:\n  const numRows = data.isEmpty() ? 1 : data.dimensions.rows - 1\n  const numIndices = data.types?.index?.length ?? 0\n\n  const onColumnResize = React.useCallback(\n    (\n      column: GridColumn,\n      newSize: number,\n      colIndex: number,\n      newSizeWithGrow: number\n    ) => {\n      if (column.id) {\n        setColumnSizes(new Map(columnSizes).set(column.id, newSizeWithGrow))\n      }\n    },\n    [columns]\n  )\n\n  const getCellContent = React.useCallback(\n    ([col, row]: readonly [number, number]): GridCell => {\n      if (data.isEmpty()) {\n        return {\n          ...getCellTemplate(ColumnType.Text, true, \"faded\"),\n          displayData: \"empty\",\n        } as GridCell\n      }\n\n      if (col > columns.length - 1) {\n        // This should never happen\n        return getCellTemplate(ColumnType.Text, true)\n      }\n\n      const cellTemplate = columns[col].getTemplate()\n      if (row > numRows - 1) {\n        // This should never happen\n        return cellTemplate\n      }\n      try {\n        // Quiver has the header in first row\n        const quiverCell = data.getCell(row + 1, col)\n        return fillCellTemplate(cellTemplate, quiverCell, data.cssStyles)\n      } catch (error) {\n        // This should not happen in read-only table.\n        logError(error)\n        return cellTemplate\n      }\n    },\n    [columns, numRows, data]\n  )\n\n  const { getCellContent: getCellContentSorted } = useColumnSort({\n    columns,\n    getCellContent,\n    rows: numRows,\n    sort,\n  })\n\n  const updatedColumns = updateSortingHeader(columns, sort)\n\n  return {\n    numRows,\n    numIndices,\n    columns: updatedColumns,\n    getCellContent: getCellContentSorted,\n    onColumnResize,\n  }\n}\nexport interface DataFrameProps {\n  element: ArrowProto\n  data: Quiver\n  width: number\n  height?: number\n  isFullScreen?: boolean\n}\n\nfunction DataFrame({\n  element,\n  data,\n  width: containerWidth,\n  height: containerHeight,\n  isFullScreen,\n}: DataFrameProps): ReactElement {\n  const [sort, setSort] = React.useState<ColumnSortConfig>()\n  const dataEditorRef = React.useRef<DataEditorRef>(null)\n  const theme: Theme = useTheme()\n\n  const stretchColumn = element.useContainerWidth || element.width\n\n  const { numRows, numIndices, columns, getCellContent, onColumnResize } =\n    useDataLoader(element, data, sort)\n\n  const [isFocused, setIsFocused] = React.useState<boolean>(true)\n\n  const [gridSelection, setGridSelection] = React.useState<GridSelection>({\n    columns: CompactSelection.empty(),\n    rows: CompactSelection.empty(),\n  })\n\n  const resizableRef = React.useRef<Resizable>(null)\n\n  const onHeaderClick = React.useCallback(\n    (index: number) => {\n      let sortDirection = \"asc\"\n      const clickedColumn = columns[index]\n\n      if (sort && sort.column.id === clickedColumn.id) {\n        // The clicked column is already sorted\n        if (sort.direction === \"asc\") {\n          // Sort column descending\n          sortDirection = \"desc\"\n        } else {\n          // Remove sorting of column\n          setSort(undefined)\n          return\n        }\n      }\n\n      setSort({\n        column: clickedColumn,\n        direction: sortDirection,\n        mode: getColumnSortMode(\n          (clickedColumn as GridColumnWithCellTemplate).columnType\n        ),\n      } as ColumnSortConfig)\n    },\n    [sort, columns]\n  )\n\n  // Automatic table height calculation: numRows +1 because of header, and +2 pixels for borders\n  let maxHeight = Math.max(\n    (numRows + 1) * ROW_HEIGHT + 1 + 2,\n    MIN_TABLE_HEIGHT\n  )\n  let initialHeight = Math.min(maxHeight, DEFAULT_TABLE_HEIGHT)\n\n  if (element.height) {\n    // User has explicitly configured a height\n    initialHeight = Math.max(element.height, MIN_TABLE_HEIGHT)\n    maxHeight = Math.max(element.height, maxHeight)\n  }\n\n  if (containerHeight) {\n    // If container height is set (e.g. when used in fullscreen)\n    // The maxHeight and height should not be larger than container height\n    initialHeight = Math.min(initialHeight, containerHeight)\n    maxHeight = Math.min(maxHeight, containerHeight)\n\n    if (!element.height) {\n      // If no explicit height is set, set height to max height (fullscreen mode)\n      initialHeight = maxHeight\n    }\n  }\n\n  let initialWidth: number | undefined // If container width is undefined, auto set based on column widths\n  let maxWidth = containerWidth\n\n  if (element.useContainerWidth) {\n    // Always use the full container width\n    initialWidth = containerWidth\n  } else if (element.width) {\n    // User has explicitly configured a width\n    initialWidth = Math.min(\n      Math.max(element.width, MIN_TABLE_WIDTH),\n      containerWidth\n    )\n    maxWidth = Math.min(Math.max(element.width, maxWidth), containerWidth)\n  }\n\n  const [resizableSize, setResizableSize] = React.useState<ResizableSize>({\n    width: initialWidth || \"100%\",\n    height: initialHeight,\n  })\n\n  React.useLayoutEffect(() => {\n    // This prevents weird table resizing behavior if the container width\n    // changes and the table uses the full container width.\n    if (\n      resizableRef.current &&\n      element.useContainerWidth &&\n      resizableSize.width === \"100%\"\n    ) {\n      setResizableSize({\n        width: containerWidth,\n        height: resizableSize.height,\n      })\n    }\n  }, [containerWidth])\n\n  React.useLayoutEffect(() => {\n    if (resizableRef.current) {\n      // Reset the height if the number of rows changes (e.g. via add_rows)\n      setResizableSize({\n        width: resizableSize.width,\n        height: initialHeight,\n      })\n    }\n  }, [numRows])\n\n  React.useLayoutEffect(() => {\n    if (resizableRef.current) {\n      if (isFullScreen) {\n        setResizableSize({\n          width: stretchColumn ? maxWidth : \"100%\",\n          height: maxHeight,\n        })\n      } else {\n        setResizableSize({\n          width: initialWidth || \"100%\",\n          height: initialHeight,\n        })\n      }\n    }\n  }, [isFullScreen])\n\n  return (\n    <StyledResizableContainer\n      className=\"stDataFrame\"\n      onBlur={() => {\n        // If the container loses focus, clear the current selection\n        if (!isFocused) {\n          setGridSelection({\n            columns: CompactSelection.empty(),\n            rows: CompactSelection.empty(),\n            current: undefined,\n          } as GridSelection)\n        }\n      }}\n    >\n      <Resizable\n        data-testid=\"stDataFrameResizable\"\n        ref={resizableRef}\n        defaultSize={resizableSize}\n        style={{\n          border: `1px solid ${theme.colors.fadedText05}`,\n        }}\n        minHeight={MIN_TABLE_HEIGHT}\n        maxHeight={maxHeight}\n        minWidth={MIN_TABLE_WIDTH}\n        maxWidth={maxWidth}\n        enable={{\n          top: false,\n          right: false,\n          bottom: false,\n          left: false,\n          topRight: false,\n          bottomRight: true,\n          bottomLeft: false,\n          topLeft: false,\n        }}\n        grid={[1, ROW_HEIGHT]}\n        snapGap={ROW_HEIGHT / 3}\n        size={resizableSize}\n        onResizeStop={(_event, _direction, _ref, _delta) => {\n          if (resizableRef.current) {\n            setResizableSize({\n              width: resizableRef.current.size.width,\n              height:\n                // Add an additional pixel if it is stretched to full width\n                // to allow the full cell border to be visible\n                maxHeight - resizableRef.current.size.height === 3\n                  ? resizableRef.current.size.height + 3\n                  : resizableRef.current.size.height,\n            })\n          }\n        }}\n      >\n        <GlideDataEditor\n          className=\"glideDataEditor\"\n          ref={dataEditorRef}\n          columns={columns}\n          rows={numRows}\n          minColumnWidth={MIN_COLUMN_WIDTH}\n          maxColumnWidth={MAX_COLUMN_WIDTH}\n          rowHeight={ROW_HEIGHT}\n          headerHeight={ROW_HEIGHT}\n          getCellContent={getCellContent}\n          onColumnResize={onColumnResize}\n          // Freeze all index columns:\n          freezeColumns={numIndices}\n          smoothScrollX={true}\n          // Only deactivate smooth mode for vertical scrolling for large tables:\n          smoothScrollY={numRows < 100000}\n          // Show borders between cells:\n          verticalBorder={true}\n          // Activate copy to clipboard functionality:\n          getCellsForSelection={true}\n          // Deactivate row markers and numbers:\n          rowMarkers={\"none\"}\n          // Deactivate selections:\n          rangeSelect={\"rect\"}\n          columnSelect={\"none\"}\n          rowSelect={\"none\"}\n          // Activate search:\n          keybindings={{ search: true }}\n          // Header click is used for column sorting:\n          onHeaderClicked={onHeaderClick}\n          gridSelection={gridSelection}\n          onGridSelectionChange={(newSelection: GridSelection) => {\n            setGridSelection(newSelection)\n          }}\n          theme={createDataFrameTheme(theme)}\n          onMouseMove={(args: GridMouseEventArgs) => {\n            // Determine if the dataframe is focused or not\n            if (args.kind === \"out-of-bounds\" && isFocused) {\n              setIsFocused(false)\n            } else if (args.kind !== \"out-of-bounds\" && !isFocused) {\n              setIsFocused(true)\n            }\n          }}\n          experimental={{\n            // We use an overlay scrollbar, so no need to have space for reserved for the scrollbar:\n            scrollbarWidthOverride: 1,\n          }}\n        />\n      </Resizable>\n    </StyledResizableContainer>\n  )\n}\n\nexport default withFullScreenWrapper(DataFrame)\n"],"sourceRoot":""}