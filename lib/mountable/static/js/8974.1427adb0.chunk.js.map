{"version":3,"file":"static/js/8974.1427adb0.chunk.js","mappings":"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","sources":["../../../streamlit/frontend/lib/src/components/shared/FullScreenWrapper/styled-components.ts","../../../streamlit/frontend/lib/src/components/shared/FullScreenWrapper/FullScreenWrapper.tsx","../../../streamlit/frontend/lib/src/components/shared/FullScreenWrapper/withFullScreenWrapper.tsx","../../../streamlit/frontend/lib/src/components/shared/Toolbar/styled-components.ts","../../../streamlit/frontend/lib/src/components/shared/Toolbar/Toolbar.tsx","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/utils.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/ObjectColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/TextColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/DateTimeColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/CheckboxColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/isIntegerType.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/NumberColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/SelectboxColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/ListColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/arrowUtils.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/LinkColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/ImageColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/ProgressColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/ChartColumn.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/index.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useColumnLoader.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/EditingState.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useCustomTheme.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useDataLoader.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useColumnSort.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useSelectionHandler.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useDataExporter.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useDataEditor.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useTooltips.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useCustomRenderer.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useColumnSizer.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/hooks/useTableSizer.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/columns/cells/ImageCellEditor.tsx","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/Tooltip.tsx","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/styled-components.ts","../../../streamlit/frontend/lib/src/components/widgets/DataFrame/DataFrame.tsx","../../../streamlit/frontend/lib/src/components/widgets/Form/FormClearHelper.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport interface StyledFullScreenButtonProps {\n  isExpanded: boolean\n}\n\nexport const StyledFullScreenButton =\n  styled.button<StyledFullScreenButtonProps>(({ isExpanded, theme }) => {\n    const variableProps = isExpanded\n      ? {\n          right: \"0.4rem\",\n          top: \"0.5rem\",\n          backgroundColor: \"transparent\",\n        }\n      : {\n          right: \"-3.0rem\",\n          top: \"-0.375rem\",\n          opacity: 0,\n          transform: \"scale(0)\",\n          backgroundColor: theme.colors.lightenedBg05,\n        }\n\n    return {\n      position: \"absolute\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n\n      zIndex: theme.zIndices.sidebar + 1,\n      height: \"2.5rem\",\n      width: \"2.5rem\",\n      transition: \"opacity 300ms 150ms, transform 300ms 150ms\",\n      border: \"none\",\n      color: theme.colors.fadedText60,\n      borderRadius: \"50%\",\n\n      ...variableProps,\n\n      \"&:focus\": {\n        outline: \"none\",\n      },\n\n      \"&:active, &:focus-visible, &:hover\": {\n        opacity: 1,\n        outline: \"none\",\n        transform: \"scale(1)\",\n        color: theme.colors.bodyText,\n        transition: \"none\",\n      },\n    }\n  })\n\nexport interface StyledFullScreenFrameProps {\n  isExpanded: boolean\n}\n\nexport const StyledFullScreenFrame = styled.div<StyledFullScreenFrameProps>(\n  ({ theme, isExpanded }) => ({\n    \"&:hover\": {\n      [StyledFullScreenButton as any]: {\n        opacity: 1,\n        transform: \"scale(1)\",\n        transition: \"none\",\n      },\n    },\n\n    ...(isExpanded\n      ? {\n          position: \"fixed\",\n          top: 0,\n          left: 0,\n          bottom: 0,\n          right: 0,\n          background: theme.colors.bgColor,\n          zIndex: theme.zIndices.fullscreenWrapper,\n          padding: theme.spacing.md,\n          paddingTop: \"2.875rem\", // Old header height to avoid addtl cascading visual/snapshot changes\n          overflow: [\"auto\", \"overlay\"],\n          display: \"flex\", // To avoid extra spaces that lead to scrollbars.\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }\n      : {}),\n  })\n)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { PureComponent } from \"react\"\nimport { withTheme } from \"@emotion/react\"\nimport { FullscreenEnter, FullscreenExit } from \"@emotion-icons/open-iconic\"\nimport Icon from \"@streamlit/lib/src/components/shared/Icon\"\nimport { LibContext } from \"@streamlit/lib/src/components/core/LibContext\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\nimport {\n  StyledFullScreenFrame,\n  StyledFullScreenButton,\n} from \"./styled-components\"\n\nexport type Size = {\n  width: number\n  expanded: boolean\n  height?: number\n  expand: () => void\n  collapse: () => void\n}\n\n/*\n * Function responsible for rendering children.\n * This function should implement the following signature:\n * ({ height, width }) => PropTypes.element\n */\nexport interface FullScreenWrapperProps {\n  children: (props: Size) => React.ReactNode\n  width: number\n  height?: number\n  theme: EmotionTheme\n  disableFullscreenMode?: boolean\n}\n\ninterface State {\n  expanded: boolean\n  fullWidth: number\n  fullHeight: number\n}\n\n/*\n * A component that draws a button on the top right of the\n * wrapper element. OnClick, change the element container\n * to fixed and cover all screen, updating wrapped element height and width\n */\nclass FullScreenWrapper extends PureComponent<FullScreenWrapperProps, State> {\n  public context!: React.ContextType<typeof LibContext>\n\n  public static contextType = LibContext\n\n  public constructor(props: FullScreenWrapperProps) {\n    super(props)\n    this.state = {\n      expanded: false,\n      ...this.getWindowDimensions(),\n    }\n  }\n\n  public componentDidMount(): void {\n    window.addEventListener(\"resize\", this.updateWindowDimensions)\n    document.addEventListener(\"keydown\", this.controlKeys, false)\n  }\n\n  public componentWillUnmount(): void {\n    window.removeEventListener(\"resize\", this.updateWindowDimensions)\n    document.removeEventListener(\"keydown\", this.controlKeys, false)\n  }\n\n  private controlKeys = (event: any): void => {\n    const { expanded } = this.state\n\n    if (event.keyCode === 27 && expanded) {\n      // Exit fullscreen\n      this.zoomOut()\n    }\n  }\n\n  private zoomIn = (): void => {\n    document.body.style.overflow = \"hidden\"\n    this.context.setFullScreen(true)\n    this.setState({ expanded: true })\n  }\n\n  private zoomOut = (): void => {\n    document.body.style.overflow = \"unset\"\n    this.context.setFullScreen(false)\n    this.setState({ expanded: false })\n  }\n\n  private convertScssRemValueToPixels = (scssValue: string): number => {\n    const remValue = parseFloat(scssValue)\n    return (\n      remValue *\n      parseFloat(getComputedStyle(document.documentElement).fontSize)\n    )\n  }\n\n  private getWindowDimensions = (): Pick<\n    State,\n    \"fullWidth\" | \"fullHeight\"\n  > => {\n    const padding = this.convertScssRemValueToPixels(\n      this.props.theme.spacing.md\n    )\n    const paddingTop = this.convertScssRemValueToPixels(\n      // Old header height to avoid addtl cascading visual/snapshot changes\n      \"2.875rem\"\n    )\n\n    return {\n      fullWidth: window.innerWidth - padding * 2, // Left and right\n      fullHeight: window.innerHeight - (padding + paddingTop), // Bottom and Top\n    }\n  }\n\n  private updateWindowDimensions = (): void => {\n    this.setState(this.getWindowDimensions())\n  }\n\n  public render(): JSX.Element {\n    const { expanded, fullWidth, fullHeight } = this.state\n    const { children, width, height, disableFullscreenMode } = this.props\n\n    let buttonImage = FullscreenEnter\n    let buttonOnClick = this.zoomIn\n    let buttonTitle = \"View fullscreen\"\n\n    if (expanded) {\n      buttonImage = FullscreenExit\n      buttonOnClick = this.zoomOut\n      buttonTitle = \"Exit fullscreen\"\n    }\n\n    return (\n      <StyledFullScreenFrame\n        isExpanded={expanded}\n        data-testid={\"stFullScreenFrame\"}\n      >\n        {!disableFullscreenMode && (\n          <StyledFullScreenButton\n            data-testid=\"StyledFullScreenButton\"\n            onClick={buttonOnClick}\n            title={buttonTitle}\n            isExpanded={expanded}\n          >\n            <Icon content={buttonImage} />\n          </StyledFullScreenButton>\n        )}\n        {expanded\n          ? children({\n              width: fullWidth,\n              height: fullHeight,\n              expanded,\n              expand: this.zoomIn,\n              collapse: this.zoomOut,\n            })\n          : children({\n              width,\n              height,\n              expanded,\n              expand: this.zoomIn,\n              collapse: this.zoomOut,\n            })}\n      </StyledFullScreenFrame>\n    )\n  }\n}\n\nexport default withTheme(FullScreenWrapper)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { PureComponent, ComponentType, ReactNode } from \"react\"\nimport hoistNonReactStatics from \"hoist-non-react-statics\"\n\nimport FullScreenWrapper from \"./FullScreenWrapper\"\n\nexport interface Props {\n  width: number\n  height?: number\n  disableFullscreenMode?: boolean\n}\n\n// Our wrapper takes the wrapped component's props, plus \"width\", \"height?\".\n// It will pass \"isFullScreen\" to the wrapped component automatically\n// (but the wrapped component is free to ignore that prop).\ntype WrapperProps<P> = Omit<P & Props, \"isFullScreen\" | \"collapse\" | \"expand\">\n\nfunction withFullScreenWrapper<P>(\n  WrappedComponent: ComponentType<React.PropsWithChildren<P>>,\n  forceDisableFullScreenMode = false\n): ComponentType<React.PropsWithChildren<WrapperProps<P>>> {\n  class ComponentWithFullScreenWrapper extends PureComponent<WrapperProps<P>> {\n    public static readonly displayName = `withFullScreenWrapper(${\n      WrappedComponent.displayName || WrappedComponent.name\n    })`\n\n    public render = (): ReactNode => {\n      const { width, height, disableFullscreenMode } = this.props\n\n      return (\n        <FullScreenWrapper\n          width={width}\n          height={height}\n          disableFullscreenMode={\n            forceDisableFullScreenMode || disableFullscreenMode\n          }\n        >\n          {({ width, height, expanded, expand, collapse }) => (\n            // `(this.props as P)` is required due to a TS bug:\n            // https://github.com/microsoft/TypeScript/issues/28938#issuecomment-450636046\n            <WrappedComponent\n              {...(this.props as P)}\n              width={width}\n              height={height}\n              isFullScreen={expanded}\n              expand={expand}\n              collapse={collapse}\n            />\n          )}\n        </FullScreenWrapper>\n      )\n    }\n  }\n\n  // Static methods must be copied over\n  // https://en.reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n  return hoistNonReactStatics(ComponentWithFullScreenWrapper, WrappedComponent)\n}\n\nexport default withFullScreenWrapper\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled, { StyledComponent } from \"@emotion/styled\"\n\nimport { hasLightBackgroundColor } from \"@streamlit/lib/src/theme\"\n\nconst TOP_DISTANCE = \"-2.4rem\"\n\nexport interface StyledToolbarWrapperProps {\n  locked?: boolean\n  target?: StyledComponent<any, any, any>\n}\n\nexport const StyledToolbarWrapper = styled.div<StyledToolbarWrapperProps>(\n  ({ theme, locked, target }) => ({\n    padding: `${theme.spacing.sm} 0 ${theme.spacing.sm} ${theme.spacing.sm}`,\n    position: \"absolute\",\n    top: locked ? TOP_DISTANCE : \"-1rem\",\n    right: theme.spacing.none,\n    transition: \"none\",\n    ...(!locked && {\n      opacity: 0,\n      \"&:active, &:focus-visible, &:hover\": {\n        transition: \"opacity 150ms 100ms, top 100ms 100ms\",\n        opacity: 1,\n        top: TOP_DISTANCE,\n      },\n      ...(target && {\n        [`${target}:hover &, ${target}:active &, ${target}:focus-visible &`]: {\n          transition: \"opacity 150ms 100ms, top 100ms 100ms\",\n          opacity: 1,\n          top: TOP_DISTANCE,\n        },\n      }),\n    }),\n  })\n)\n\nexport const StyledToolbar = styled.div(({ theme }) => ({\n  color: hasLightBackgroundColor(theme)\n    ? theme.colors.fadedText60\n    : theme.colors.bodyText,\n  display: \"flex\",\n  flexDirection: \"row\",\n  alignItems: \"center\",\n  justifyContent: \"flex-end\",\n  boxShadow: \"1px 2px 8px rgba(0, 0, 0, 0.08)\",\n  borderRadius: theme.radii.default,\n  backgroundColor: theme.colors.lightenedBg05,\n  width: \"fit-content\",\n  zIndex: theme.zIndices.sidebar + 1,\n}))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\n\nimport { EmotionIcon } from \"@emotion-icons/emotion-icon\"\nimport { useTheme } from \"@emotion/react\"\nimport { StyledComponent } from \"@emotion/styled\"\nimport { Fullscreen, FullscreenExit } from \"@emotion-icons/material-outlined\"\n\nimport StreamlitMarkdown from \"@streamlit/lib/src/components/shared/StreamlitMarkdown\"\nimport Tooltip, {\n  Placement,\n} from \"@streamlit/lib/src/components/shared/Tooltip\"\nimport Button, {\n  BaseButtonKind,\n} from \"@streamlit/lib/src/components/shared/BaseButton\"\nimport Icon from \"@streamlit/lib/src/components/shared/Icon\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\n\nimport { StyledToolbar, StyledToolbarWrapper } from \"./styled-components\"\n\nexport interface ToolbarActionProps {\n  label: string\n  icon?: EmotionIcon\n  show_label?: boolean\n  onClick: () => void\n}\n\nexport function ToolbarAction({\n  label,\n  show_label,\n  icon,\n  onClick,\n}: ToolbarActionProps): ReactElement {\n  const theme: EmotionTheme = useTheme()\n\n  const displayLabel = show_label ? label : \"\"\n  return (\n    <div data-testid=\"stElementToolbarButton\">\n      <Tooltip\n        content={\n          <StreamlitMarkdown\n            source={label}\n            allowHTML={false}\n            style={{ fontSize: theme.fontSizes.sm }}\n          />\n        }\n        placement={Placement.TOP}\n        // The default tooltip delay (== how fast the tooltip is triggered) of 200ms\n        // is a bit too fast for the toolbar use case. Therefore, we are setting it to 1000ms.\n        onMouseEnterDelay={1000}\n        inline\n      >\n        <Button\n          onClick={event => {\n            if (onClick) {\n              onClick()\n            }\n            event.stopPropagation()\n          }}\n          kind={BaseButtonKind.ELEMENT_TOOLBAR}\n        >\n          {icon && (\n            <Icon\n              content={icon}\n              size=\"md\"\n              testid=\"stElementToolbarButtonIcon\"\n            />\n          )}\n          {displayLabel && <span>{displayLabel}</span>}\n        </Button>\n      </Tooltip>\n    </div>\n  )\n}\n\nexport interface ToolbarProps {\n  onExpand?: () => void\n  onCollapse?: () => void\n  isFullScreen?: boolean\n  locked?: boolean\n  target?: StyledComponent<any, any, any>\n  disableFullscreenMode?: boolean\n}\n\nconst Toolbar: React.FC<React.PropsWithChildren<ToolbarProps>> = ({\n  onExpand,\n  onCollapse,\n  isFullScreen,\n  locked,\n  children,\n  target,\n  disableFullscreenMode,\n}): ReactElement => {\n  return (\n    <StyledToolbarWrapper\n      className={\"stElementToolbar\"}\n      data-testid={\"stElementToolbar\"}\n      locked={locked || isFullScreen}\n      target={target}\n    >\n      <StyledToolbar>\n        {children}\n        {onExpand && !disableFullscreenMode && !isFullScreen && (\n          <ToolbarAction\n            label={\"Fullscreen\"}\n            icon={Fullscreen}\n            onClick={() => onExpand()}\n          />\n        )}\n        {onCollapse && !disableFullscreenMode && isFullScreen && (\n          <ToolbarAction\n            label={\"Close fullscreen\"}\n            icon={FullscreenExit}\n            onClick={() => onCollapse()}\n          />\n        )}\n      </StyledToolbar>\n    </StyledToolbarWrapper>\n  )\n}\n\nexport default Toolbar\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  Theme as GlideTheme,\n  TextCell,\n  GridCellKind,\n  LoadingCell,\n  GridColumn,\n  BaseGridCell,\n} from \"@glideapps/glide-data-grid\"\nimport toString from \"lodash/toString\"\nimport merge from \"lodash/merge\"\nimport numbro from \"numbro\"\nimport { sprintf } from \"sprintf-js\"\nimport moment, { Moment } from \"moment\"\nimport \"moment-duration-format\"\nimport \"moment-timezone\"\n\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\nimport {\n  Type as ArrowType,\n  Quiver,\n} from \"@streamlit/lib/src/dataframes/Quiver\"\nimport {\n  notNullOrUndefined,\n  isNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\n/**\n * Interface used for defining the properties (configuration options) of a column.\n * These options can also be used to overwrite from user-defined column config.\n */\nexport interface BaseColumnProps {\n  // The id of the column:\n  readonly id: string\n  // The name of the column from the original data:\n  readonly name: string\n  // The display title of the column:\n  readonly title: string\n  // The index number of the column:\n  readonly indexNumber: number\n  // The arrow data type of the column:\n  readonly arrowType: ArrowType\n  // If `True`, the column can be edited:\n  readonly isEditable: boolean\n  // If `True`, the column is hidden (will not be shown):\n  readonly isHidden: boolean\n  // If `True`, the column is a table index:\n  readonly isIndex: boolean\n  // If `True`, the column is a stretched:\n  readonly isStretched: boolean\n  // If `True`, a value is required before the cell or row can be submitted:\n  readonly isRequired?: boolean\n  // The initial width of the column:\n  readonly width?: number\n  // A help text that is displayed on hovering the column header.\n  readonly help?: string\n  // Configuration options related to the column type:\n  readonly columnTypeOptions?: Record<string, any>\n  // The content alignment of the column:\n  readonly contentAlignment?: \"left\" | \"center\" | \"right\"\n  // The default value of the column used when adding a new row:\n  readonly defaultValue?: string | number | boolean\n  // Theme overrides for this column:\n  readonly themeOverride?: Partial<GlideTheme>\n  // A custom icon to be displayed in the column header:\n  readonly icon?: string\n}\n\n/**\n * The interface that is implemented by any column type.\n */\nexport interface BaseColumn extends BaseColumnProps {\n  readonly kind: string\n  // Defines the sort mode that should be used for this column type:\n  // default: Sorts by interpreting all values as strings.\n  // smart: Detects if value is a number or a string and sorts accordingly.\n  // raw: Sorts based on the actual type of the cell data value.\n  readonly sortMode: \"default\" | \"raw\" | \"smart\"\n  // Validate the input data for compatibility with the column type:\n  // Either returns a boolean indicating if the data is valid or not, or\n  // returns the corrected value.\n  validateInput?(data?: any): boolean | any\n  // Get a cell with the provided data for the column type:\n  getCell(data?: any, validate?: boolean): GridCell\n  // Get the raw value of the given cell:\n  getCellValue(cell: GridCell): any | null\n}\n\n/**\n * A type that describes the function signature used to create a column based on\n * some column properties.\n */\nexport type ColumnCreator = {\n  (props: BaseColumnProps, theme: EmotionTheme): BaseColumn\n  readonly isEditableType: boolean\n}\n\n// See pydantic for inspiration: https://pydantic-docs.helpmanual.io/usage/types/#booleans\nconst BOOLEAN_TRUE_VALUES = [\"true\", \"t\", \"yes\", \"y\", \"on\", \"1\"]\nconst BOOLEAN_FALSE_VALUES = [\"false\", \"f\", \"no\", \"n\", \"off\", \"0\"]\n\n/**\n * Interface used for indicating if a cell contains an error.\n */\ninterface ErrorCell extends TextCell {\n  readonly isError: true\n}\n\n/**\n * Returns a cell with an error message.\n *\n * @param errorMsg: A short error message to use as display value.\n * @param errorDetails: The full error message to show when the user\n *                     clicks on a cell.\n *\n * @return a read-only GridCell object that can be used by glide-data-grid.\n */\nexport function getErrorCell(errorMsg: string, errorDetails = \"\"): ErrorCell {\n  errorMsg = `⚠️ ${errorMsg}`\n  return {\n    kind: GridCellKind.Text,\n    readonly: true,\n    allowOverlay: true,\n    data: errorMsg + (errorDetails ? `\\n\\n${errorDetails}\\n` : \"\"),\n    displayData: errorMsg,\n    isError: true,\n  } as ErrorCell\n}\n\n/**\n * Returns `true` if the given cell contains an error.\n * This can happen if the value type is not compatible with\n * the given value type.\n */\nexport function isErrorCell(cell: GridCell): cell is ErrorCell {\n  return cell.hasOwnProperty(\"isError\") && (cell as ErrorCell).isError\n}\n\ninterface CellWithTooltip extends BaseGridCell {\n  readonly tooltip: string\n}\n\n/**\n * Returns `true` if the given cell has a tooltip\n */\nexport function hasTooltip(cell: BaseGridCell): cell is CellWithTooltip {\n  return (\n    cell.hasOwnProperty(\"tooltip\") && (cell as CellWithTooltip).tooltip !== \"\"\n  )\n}\n/**\n * Interface used for indicating if a cell contains no value.\n */\ninterface MissingValueCell extends BaseGridCell {\n  readonly isMissingValue: true\n}\n\n/**\n * Returns `true` if the given cell contains no value (-> missing value).\n * For example, a number cell that contains null is interpreted as a missing value.\n */\nexport function isMissingValueCell(\n  cell: BaseGridCell\n): cell is MissingValueCell {\n  return (\n    cell.hasOwnProperty(\"isMissingValue\") &&\n    (cell as MissingValueCell).isMissingValue\n  )\n}\n\n/**\n * Returns an empty cell.\n */\nexport function getEmptyCell(missingCell = false): LoadingCell {\n  if (missingCell) {\n    return {\n      kind: GridCellKind.Loading,\n      allowOverlay: false,\n      isMissingValue: true,\n    } as LoadingCell\n  }\n\n  return {\n    kind: GridCellKind.Loading,\n    allowOverlay: false,\n  } as LoadingCell\n}\n\n/**\n * Returns an empty text cell.\n *\n * @param readonly: If true, returns a read-only version of the cell.\n * @param faded: If true, returns a faded version of the cell.\n *\n * @return a GridCell object that can be used by glide-data-grid.\n */\nexport function getTextCell(readonly: boolean, faded: boolean): TextCell {\n  const style = faded ? \"faded\" : \"normal\"\n  return {\n    kind: GridCellKind.Text,\n    data: \"\",\n    displayData: \"\",\n    allowOverlay: true,\n    readonly,\n    style,\n  } as TextCell\n}\n\n/**\n * Converts from our BaseColumn format to the glide-data-grid compatible GridColumn.\n */\nexport function toGlideColumn(column: BaseColumn): GridColumn {\n  return {\n    id: column.id,\n    title: column.title,\n    hasMenu: false,\n    themeOverride: column.themeOverride,\n    icon: column.icon,\n    ...(column.isStretched && {\n      grow: column.isIndex ? 1 : 3,\n    }),\n    ...(column.width && {\n      width: column.width,\n    }),\n  } as GridColumn\n}\n\n/**\n * Merges the default column parameters with the user-defined column parameters.\n *\n * @param defaultParams - The default column parameters.\n * @param userParams - The user-defined column parameters.\n *\n * @returns The merged column parameters.\n */\nexport function mergeColumnParameters(\n  defaultParams: Record<string, any> | undefined | null,\n  userParams: Record<string, any> | undefined | null\n): Record<string, any> {\n  if (isNullOrUndefined(defaultParams)) {\n    return userParams || {}\n  }\n\n  if (isNullOrUndefined(userParams)) {\n    return defaultParams || {}\n  }\n\n  return merge(defaultParams, userParams)\n}\n\n/**\n * Converts the given value of unknown type to an array without\n * the risks of any exceptions.\n *\n * @param data - The value to convert to an array.\n *\n * @returns The converted array or an empty array if the value cannot be interpreted as an array.\n */\nexport function toSafeArray(data: any): any[] {\n  if (isNullOrUndefined(data)) {\n    return []\n  }\n\n  if (typeof data === \"number\" || typeof data === \"boolean\") {\n    // Single number or boolean\n    return [data]\n  }\n\n  if (data instanceof Uint8Array) {\n    // Stlite: Uint8Array is used for any list data in fastparquet.\n    // It stores a json string representation in the Uint8Array.\n    // We need to convert this to a string first\n    // to later have it load as json.\n    data = new TextDecoder(\"utf-8\").decode(data)\n  }\n\n  if (typeof data === \"string\") {\n    if (data === \"\") {\n      // Empty string\n      return []\n    }\n\n    // Try to parse string to an array\n    if (data.trim().startsWith(\"[\") && data.trim().endsWith(\"]\")) {\n      // Support for JSON arrays: [\"foo\", 1, null, \"test\"]\n      try {\n        return JSON.parse(data)\n      } catch (error) {\n        return [data]\n      }\n    } else {\n      // Support for comma-separated values: \"foo,1,,test\"\n      return data.split(\",\")\n    }\n  }\n\n  try {\n    const parsedData = JSON.parse(\n      JSON.stringify(data, (_key, value) =>\n        typeof value === \"bigint\" ? Number(value) : value\n      )\n    )\n    if (!Array.isArray(parsedData)) {\n      return [toSafeString(parsedData)]\n    }\n\n    return parsedData.map((value: any) =>\n      [\"string\", \"number\", \"boolean\", \"null\"].includes(typeof value)\n        ? value\n        : toSafeString(value)\n    )\n  } catch (error) {\n    return [toSafeString(data)]\n  }\n}\n\n/**\n * Converts the given value of unknown type to a string without\n * the risks of any exceptions.\n *\n * @param data - The value to convert to a string.\n *\n * @return The converted string or a string showing the type of the object as fallback.\n */\nexport function toSafeString(data: any): string {\n  try {\n    try {\n      return toString(data)\n    } catch (error) {\n      return JSON.stringify(data, (_key, value) =>\n        typeof value === \"bigint\" ? Number(value) : value\n      )\n    }\n  } catch (error) {\n    // This is most likely an object that cannot be converted to a string\n    // console.log converts this to `[object Object]` which we are doing here as well:\n    return `[${typeof data}]`\n  }\n}\n\n/**\n * Converts the given value of unknown type to a boolean without\n * the risks of any exceptions.\n *\n * @param value - The value to convert to a boolean.\n *\n * @return The converted boolean, null if the value is empty or undefined if the\n *         value cannot be interpreted as a boolean.\n */\nexport function toSafeBoolean(value: any): boolean | null | undefined {\n  if (isNullOrUndefined(value)) {\n    return null\n  }\n\n  if (typeof value === \"boolean\") {\n    return value\n  }\n\n  const cleanedValue = toSafeString(value).toLowerCase().trim()\n  if (cleanedValue === \"\") {\n    return null\n  } else if (BOOLEAN_TRUE_VALUES.includes(cleanedValue)) {\n    return true\n  } else if (BOOLEAN_FALSE_VALUES.includes(cleanedValue)) {\n    return false\n  }\n  // The value cannot be interpreted as boolean\n  return undefined\n}\n\n/**\n * Converts the given value of unknown type to a number without\n * the risks of any exceptions.\n *\n * @param value - The value to convert to a number.\n *\n * @returns The converted number or null if the value is empty or undefined or NaN if the\n *          value cannot be interpreted as a number.\n */\nexport function toSafeNumber(value: any): number | null {\n  // TODO(lukasmasuch): Should this return null as replacement for NaN?\n\n  if (isNullOrUndefined(value)) {\n    return null\n  }\n\n  if (Array.isArray(value)) {\n    return NaN\n  }\n\n  if (typeof value === \"string\") {\n    if (value.trim().length === 0) {\n      // Empty string should return null\n      return null\n    }\n\n    try {\n      // Try to convert string to number via numbro:\n      // https://numbrojs.com/old-format.html#unformat\n      const unformattedValue = numbro.unformat(value.trim())\n      if (notNullOrUndefined(unformattedValue)) {\n        return unformattedValue\n      }\n    } catch (error) {\n      // Do nothing here\n    }\n  } else if (value instanceof Int32Array) {\n    // int values need to be extracted this way:\n    // eslint-disable-next-line prefer-destructuring\n    return Number(value[0])\n  }\n\n  return Number(value)\n}\n\n/**\n * Formats the given number to a string based on a provided format or the default format.\n *\n * @param value - The number to format.\n * @param format - The format to use. If not provided, the default format is used.\n * @param maxPrecision - The maximum number of decimals to show. This is only used by the default format.\n *                     If not provided, the default is 4 decimals and trailing zeros are hidden.\n *\n * @returns The formatted number as a string.\n */\nexport function formatNumber(\n  value: number,\n  format?: string | undefined,\n  maxPrecision?: number | undefined\n): string {\n  if (Number.isNaN(value) || !Number.isFinite(value)) {\n    return \"\"\n  }\n\n  if (isNullOrUndefined(format) || format === \"\") {\n    if (maxPrecision === 0) {\n      // Numbro is unable to format the number with 0 decimals.\n      value = Math.round(value)\n    }\n    return numbro(value).format(\n      notNullOrUndefined(maxPrecision)\n        ? `0,0.${\"0\".repeat(maxPrecision)}`\n        : `0,0.[0000]` // If no precision is given, use 4 decimals and hide trailing zeros\n    )\n  }\n\n  if (format === \"percent\") {\n    return new Intl.NumberFormat(undefined, {\n      style: \"percent\",\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(value)\n  } else if ([\"compact\", \"scientific\", \"engineering\"].includes(format)) {\n    return new Intl.NumberFormat(undefined, {\n      notation: format as any,\n    }).format(value)\n  } else if (format === \"duration[ns]\") {\n    return moment.duration(value / (1000 * 1000), \"milliseconds\").humanize()\n  } else if (format.startsWith(\"period[\")) {\n    return Quiver.formatPeriodType(BigInt(value), format as any)\n  }\n\n  return sprintf(format, value)\n}\n\n/**\n * Formats the given date to a string with the given format.\n *\n * @param momentDate The moment date to format.\n * @param format The format to use.\n *   If the format is `locale` the date will be formatted according to the user's locale.\n *   If the format is `relative` the date will be formatted as a relative time (e.g. \"2 hours ago\").\n *   Otherwise, it is interpreted as momentJS format string: https://momentjs.com/docs/#/displaying/format/\n * @returns The formatted date as a string.\n */\nexport function formatMoment(momentDate: Moment, format: string): string {\n  if (format === \"locale\") {\n    return new Intl.DateTimeFormat(undefined, {\n      dateStyle: \"medium\",\n      timeStyle: \"medium\",\n    }).format(momentDate.toDate())\n  } else if (format === \"distance\") {\n    return momentDate.fromNow()\n  } else if (format === \"relative\") {\n    return momentDate.calendar()\n  }\n  return momentDate.format(format)\n}\n\n/**\n * Converts the given value of unknown type to a date without\n * the risks of any exceptions.\n *\n * Note: Unix timestamps are only supported in seconds.\n *\n * @param value - The value to convert to a date.\n *\n * @returns The converted date or null if the value cannot be interpreted as a date.\n */\nexport function toSafeDate(value: any): Date | null | undefined {\n  if (isNullOrUndefined(value)) {\n    return null\n  }\n\n  // Return the value as-is if it is already a date\n  if (value instanceof Date) {\n    if (!isNaN(value.getTime())) {\n      return value\n    }\n    return undefined\n  }\n\n  if (typeof value === \"string\" && value.trim().length === 0) {\n    // Empty string should return null\n    return null\n  }\n\n  try {\n    const parsedTimestamp = Number(value)\n    if (!isNaN(parsedTimestamp)) {\n      // Unix timestamps can be have different units.\n      // As default, we handle the unit as second, but\n      // if it larger than a certain threshold, we assume\n      // a different unit. This is not 100% accurate, but\n      // should be good enough since it is unlikely that\n      // users are actually referring to years >= 5138.\n      let timestampInSeconds = parsedTimestamp\n      if (parsedTimestamp >= 10 ** 18) {\n        // Assume that the timestamp is in nanoseconds\n        // and adjust to seconds\n        timestampInSeconds = parsedTimestamp / 1000 ** 3\n      } else if (parsedTimestamp >= 10 ** 15) {\n        // Assume that the timestamp is in microseconds\n        // and adjust to seconds\n        timestampInSeconds = parsedTimestamp / 1000 ** 2\n      } else if (parsedTimestamp >= 10 ** 12) {\n        // Assume that the timestamp is in milliseconds\n        // and adjust to seconds\n        timestampInSeconds = parsedTimestamp / 1000\n      }\n\n      // Parse it as a unix timestamp in seconds\n      const parsedMomentDate = moment.unix(timestampInSeconds).utc()\n      if (parsedMomentDate.isValid()) {\n        return parsedMomentDate.toDate()\n      }\n    }\n\n    if (typeof value === \"string\") {\n      // Try to parse string via momentJS:\n      const parsedMomentDate = moment.utc(value)\n      if (parsedMomentDate.isValid()) {\n        return parsedMomentDate.toDate()\n      }\n      // The pasted value was not a valid date string\n      // Try to interpret value as time string instead (HH:mm:ss)\n      const parsedMomentTime = moment.utc(value, [\n        moment.HTML5_FMT.TIME_MS, // HH:mm:ss.SSS\n        moment.HTML5_FMT.TIME_SECONDS, // HH:mm:ss\n        moment.HTML5_FMT.TIME, // HH:mm\n      ])\n      if (parsedMomentTime.isValid()) {\n        return parsedMomentTime.toDate()\n      }\n    }\n  } catch (error) {\n    return undefined\n  }\n\n  // Unable to interpret this value as a date:\n  return undefined\n}\n\n/**\n * Count the number of decimals in a number.\n *\n * @param {number} value - The number to count the decimals for.\n *\n * @returns {number} The number of decimals.\n */\nexport function countDecimals(value: number): number {\n  if (value % 1 === 0) {\n    return 0\n  }\n\n  let numberStr = value.toString()\n\n  if (numberStr.indexOf(\"e\") !== -1) {\n    // Handle scientific notation\n    numberStr = value.toLocaleString(\"fullwide\", {\n      useGrouping: false,\n      maximumFractionDigits: 20,\n    })\n  }\n\n  if (numberStr.indexOf(\".\") === -1) {\n    // Fallback to 0 decimals, this can happen with\n    // extremely large or small numbers\n    return 0\n  }\n\n  return numberStr.split(\".\")[1].length\n}\n\n/**\n * Truncates a number to a specified number of decimal places without rounding.\n *\n * @param {number} value - The number to be truncated.\n * @param {number} decimals - The number of decimal places to preserve after truncation.\n *\n * @returns {number} The truncated number.\n *\n * @example\n * truncateDecimals(3.14159265, 2); // returns 3.14\n * truncateDecimals(123.456, 0); // returns 123\n */\nexport function truncateDecimals(value: number, decimals: number): number {\n  return decimals === 0\n    ? Math.trunc(value)\n    : Math.trunc(value * 10 ** decimals) / 10 ** decimals\n}\n\nconst LINE_BREAK_REGEX = new RegExp(/(\\r\\n|\\n|\\r)/gm)\n\n/**\n * Removes all line breaks from the given text.\n * @param text - The text to remove line breaks from.\n * @returns The text without line breaks.\n */\nexport function removeLineBreaks(text: string): string {\n  if (text.indexOf(\"\\n\") !== -1) {\n    return text.replace(LINE_BREAK_REGEX, \" \")\n  }\n  return text\n}\n\n/**\n * Determines the correct value to display in a link cell based on the `href` and `regexPattern` parameters.\n *\n * @param href - The raw url value.\n * @param displayTextRegex - The regex pattern which will be applied to the `href`. If no match is found, then we return the `href`.\n * @returns - The string value to be displayed in the cell.\n *\n * * @example\n * const regex = new RegExp(\"https:\\/\\/(.*?)\\.streamlit\\.app\")\n * const regex2 = new RegExp(\"https:\\/\\/roadmap\\.(.*?)\\.app\")\n * getLinkDisplayValueFromRegex(regex, \"https://roadmap.streamlit.app\"); // returns \"roadmap\"\n * getLinkDisplayValueFromRegex(regex, \"https://roadmap.streamlit.app\"); // returns \"streamlit\"\n */\nexport function getLinkDisplayValueFromRegex(\n  displayTextRegex: RegExp,\n  href?: string | null\n): string {\n  if (isNullOrUndefined(href)) {\n    return \"\"\n  }\n\n  try {\n    // apply the regex pattern to display the value\n    const patternMatch = href.match(displayTextRegex)\n    if (patternMatch && patternMatch[1] !== undefined) {\n      // return the first matching group\n      // Since this might be a URI encoded value, we decode it.\n      return decodeURI(patternMatch[1])\n    }\n\n    // if the regex doesn't find a match with the url, just use the url as display value\n    return href\n  } catch (error) {\n    // if there was any error return the href\n    return href\n  }\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, TextCell, GridCellKind } from \"@glideapps/glide-data-grid\"\n\nimport {\n  notNullOrUndefined,\n  isNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  toSafeString,\n  removeLineBreaks,\n} from \"./utils\"\n\n/**\n * A column type for read-only cells used as a fallback\n * for data types that are currently not supported for editing.\n */\nfunction ObjectColumn(props: BaseColumnProps): BaseColumn {\n  const cellTemplate = {\n    kind: GridCellKind.Text,\n    data: \"\",\n    displayData: \"\",\n    allowOverlay: true,\n    contentAlignment: props.contentAlignment,\n    readonly: true,\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as TextCell\n  return {\n    ...props,\n    kind: \"object\",\n    sortMode: \"default\",\n    isEditable: false, // Object columns are read-only.\n    getCell(data?: any): GridCell {\n      try {\n        const cellData = notNullOrUndefined(data) ? toSafeString(data) : null\n        const displayData = notNullOrUndefined(cellData)\n          ? removeLineBreaks(cellData) // Remove line breaks to show all content in the cell\n          : \"\"\n        return {\n          ...cellTemplate,\n          data: cellData,\n          displayData,\n          isMissingValue: isNullOrUndefined(data),\n        } as TextCell\n      } catch (error) {\n        return getErrorCell(\n          toSafeString(data),\n          `The value cannot be interpreted as a string. Error: ${error}`\n        )\n      }\n    },\n    getCellValue(cell: TextCell): string | null {\n      return cell.data === undefined ? null : cell.data\n    },\n  }\n}\n\nObjectColumn.isEditableType = false\n\nexport default ObjectColumn\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, TextCell, GridCellKind } from \"@glideapps/glide-data-grid\"\n\nimport {\n  notNullOrUndefined,\n  isNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  toSafeString,\n  removeLineBreaks,\n} from \"./utils\"\n\nexport interface TextColumnParams {\n  // The maximum number of characters the user can enter into the text input.\n  readonly max_chars?: number\n  // Regular expression that the input's value must match for the value to pass\n  readonly validate?: string\n}\n\n/**\n * A column that supports rendering & editing of text values.\n */\nfunction TextColumn(props: BaseColumnProps): BaseColumn {\n  const parameters = (props.columnTypeOptions as TextColumnParams) || {}\n\n  let validateRegex: RegExp | string | undefined = undefined\n\n  if (parameters.validate) {\n    // Prepare the validation regex:\n    try {\n      // u flag allows unicode characters\n      // s flag allows . to match newlines\n      validateRegex = new RegExp(parameters.validate, \"us\")\n    } catch (error) {\n      // Put error message in validateRegex so we can display it in the cell\n      validateRegex = `Invalid validate regex: ${parameters.validate}.\\nError: ${error}`\n    }\n  }\n\n  const cellTemplate = {\n    kind: GridCellKind.Text,\n    data: \"\",\n    displayData: \"\",\n    allowOverlay: true,\n    contentAlignment: props.contentAlignment,\n    readonly: !props.isEditable,\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as TextCell\n\n  const validateInput = (data?: any): boolean | string => {\n    if (isNullOrUndefined(data)) {\n      if (props.isRequired) {\n        return false\n      }\n      return true\n    }\n\n    let cellData = toSafeString(data)\n    // A flag to indicate whether the value has been auto-corrected.\n    // This is used to decide if we should return the corrected value or true.\n    // But we still run all other validations on the corrected value below.\n    let corrected = false\n\n    if (parameters.max_chars && cellData.length > parameters.max_chars) {\n      cellData = cellData.slice(0, parameters.max_chars)\n      corrected = true\n    }\n\n    if (\n      validateRegex instanceof RegExp &&\n      validateRegex.test(cellData) === false\n    ) {\n      return false\n    }\n\n    return corrected ? cellData : true\n  }\n\n  return {\n    ...props,\n    kind: \"text\",\n    sortMode: \"default\",\n    validateInput,\n    getCell(data?: any, validate?: boolean): GridCell {\n      if (typeof validateRegex === \"string\") {\n        // The regex is invalid, we return an error to indicate this\n        // to the developer:\n        return getErrorCell(toSafeString(data), validateRegex)\n      }\n\n      if (validate) {\n        const validationResult = validateInput(data)\n        if (validationResult === false) {\n          // The input is invalid, we return an error cell which will\n          // prevent this cell to be inserted into the table.\n          // This cell should never be actually displayed to the user.\n          // It's mostly used internally to prevent invalid input to be\n          // inserted into the table.\n          return getErrorCell(toSafeString(data), \"Invalid input.\")\n        } else if (typeof validationResult === \"string\") {\n          // Apply corrections:\n          data = validationResult\n        }\n      }\n\n      try {\n        const cellData = notNullOrUndefined(data) ? toSafeString(data) : null\n        const displayData = notNullOrUndefined(cellData)\n          ? removeLineBreaks(cellData) // Remove line breaks to show all content in the cell\n          : \"\"\n        return {\n          ...cellTemplate,\n          isMissingValue: isNullOrUndefined(cellData),\n          data: cellData,\n          displayData,\n        } as TextCell\n      } catch (error) {\n        // This should never happen, but if it does, we want to show an error\n        return getErrorCell(\n          \"Incompatible value\",\n          `The value cannot be interpreted as string. Error: ${error}`\n        )\n      }\n    },\n    getCellValue(cell: TextCell): string | null {\n      return cell.data === undefined ? null : cell.data\n    },\n  }\n}\n\nTextColumn.isEditableType = true\n\nexport default TextColumn\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, GridCellKind } from \"@glideapps/glide-data-grid\"\nimport { DatePickerType } from \"@glideapps/glide-data-grid-cells\"\nimport moment, { Moment } from \"moment\"\nimport \"moment-timezone\"\n\nimport {\n  notNullOrUndefined,\n  isNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  mergeColumnParameters,\n  toSafeDate,\n  getErrorCell,\n  toSafeString,\n  formatMoment,\n} from \"./utils\"\n\n/**\n * Apply a timezone to a MomentJS date.\n *\n * @param momentDate The date to apply the timezone to\n * @param timezone The timezone to apply. This can be a timezone name\n * (e.g. \"America/New_York\" or \"UTC\") or a UTC offset (e.g. \"+05:00\" or \"-08:00\")\n * @returns The date with the timezone applied\n */\nfunction applyTimezone(momentDate: Moment, timezone: string): Moment {\n  if (timezone.startsWith(\"+\") || timezone.startsWith(\"-\")) {\n    // Timezone is a UTC offset (e.g. \"+05:00\" or \"-08:00\")\n    momentDate = momentDate.utcOffset(timezone, false)\n  } else {\n    // Timezone is a timezone name (e.g. \"America/New_York\" or \"UTC\")\n    momentDate = momentDate.tz(timezone)\n  }\n  return momentDate\n}\n\nexport interface DateTimeColumnParams {\n  // A momentJS formatting syntax to format the display value.\n  readonly format?: string\n  // Specifies the granularity that the value must adhere.\n  // For time and datetime, this is the number of seconds between each allowed value.\n  // For date, this is the number of days between each allowed value.\n  readonly step?: number\n  // A timezone identifier, e.g. \"America/New_York\", \"+05:00\", or \"UTC\"\n  readonly timezone?: string\n  // The minimum allowed value for editing. This needs to be an ISO formatted datetime/date/time string (UTC).\n  readonly min_value?: string\n  // The maximum allowed value for editing. This needs to be an ISO formatted datetime/date/time string (UTC).\n  readonly max_value?: string\n}\n\n/**\n * Base class for datetime columns. This class is not meant to be used directly.\n * Instead, use the DateColumn, TimeColumn, or DateTimeColumn classes.\n *\n * @param kind The kind of column. This should be one of \"date\", \"time\", or \"datetime\".\n * @param props The column properties\n * @param defaultFormat The default format to use for rendering and copy data\n * @param defaultStep The default step to use, can be overridden by the user\n * @param inputType The type of input to use for editing. This should be one of \"datetime-local\", \"time\", or \"date\".\n * @param toISOString A function that converts a Date object to an ISO formatted string\n * @param timezone The timezone to use to make the datetime values timezone aware.\n *\n * @returns A BaseColumn object\n */\nfunction BaseDateTimeColumn(\n  kind: string,\n  props: BaseColumnProps,\n  defaultFormat: string, // used for rendering and copy data\n  defaultStep: number,\n  inputType: \"datetime-local\" | \"time\" | \"date\",\n  toISOString: (date: Date) => string,\n  timezone?: string\n): BaseColumn {\n  const parameters = mergeColumnParameters(\n    // Default parameters:\n    {\n      format: defaultFormat,\n      step: defaultStep,\n      timezone,\n    },\n    // User parameters:\n    props.columnTypeOptions\n  ) as DateTimeColumnParams\n\n  let defaultTimezoneOffset: number | undefined = undefined\n  if (notNullOrUndefined(parameters.timezone)) {\n    // We try to determine the timezone offset based on today's date\n    // This is needed for the date picker to work correctly when the value is null\n    // TODO(lukasmasuch): But this might not be correct for dates in the past or future\n    // since the timezone offset might have changed based on a timezone name.\n    try {\n      defaultTimezoneOffset =\n        applyTimezone(moment(), parameters.timezone)?.utcOffset() || undefined\n    } catch (error) {\n      // Do nothing\n    }\n  }\n\n  let minDate: Date | undefined = undefined\n  if (notNullOrUndefined(parameters.min_value)) {\n    minDate = toSafeDate(parameters.min_value) || undefined\n  }\n\n  let maxDate: Date | undefined = undefined\n  if (notNullOrUndefined(parameters.max_value)) {\n    maxDate = toSafeDate(parameters.max_value) || undefined\n  }\n\n  const cellTemplate = {\n    kind: GridCellKind.Custom,\n    allowOverlay: true,\n    copyData: \"\",\n    readonly: !props.isEditable,\n    contentAlign: props.contentAlignment,\n    style: props.isIndex ? \"faded\" : \"normal\",\n    data: {\n      kind: \"date-picker-cell\",\n      date: undefined,\n      displayDate: \"\",\n      step: parameters.step?.toString() || \"1\",\n      format: inputType,\n      min: minDate,\n      max: maxDate,\n    },\n  } as DatePickerType\n\n  const validateInput = (data?: any): boolean | Date => {\n    const cellData: Date | null | undefined = toSafeDate(data)\n    if (cellData === null) {\n      if (props.isRequired) {\n        return false\n      }\n      return true\n    }\n\n    if (cellData === undefined) {\n      // Input cannot be interpreted as a date\n      return false\n    }\n\n    // Apply min_value configuration option:\n    if (\n      notNullOrUndefined(minDate) &&\n      // We compare on a string level so that it also works correctly for time and date values\n      toISOString(cellData) < toISOString(minDate)\n    ) {\n      return false\n    }\n\n    // Apply min_value configuration option:\n    if (\n      notNullOrUndefined(maxDate) &&\n      toISOString(cellData) > toISOString(maxDate)\n    ) {\n      return false\n    }\n\n    // TODO: validate step size\n\n    return true\n  }\n\n  return {\n    ...props,\n    kind,\n    sortMode: \"default\",\n    validateInput,\n    getCell(data?: any, validate?: boolean): GridCell {\n      if (validate === true) {\n        const validationResult = validateInput(data)\n        if (validationResult === false) {\n          // The input is invalid, we return an error cell which will\n          // prevent this cell to be inserted into the table.\n          return getErrorCell(toSafeString(data), \"Invalid input.\")\n        } else if (validationResult instanceof Date) {\n          // Apply corrections:\n          data = validationResult\n        }\n      }\n\n      const cellData = toSafeDate(data)\n\n      let copyData = \"\"\n      let displayDate = \"\"\n      // Initialize with default offset base on today's date\n      let timezoneOffset = defaultTimezoneOffset\n\n      if (cellData === undefined) {\n        return getErrorCell(\n          toSafeString(data),\n          \"The value cannot be interpreted as a datetime object.\"\n        )\n      }\n\n      if (cellData !== null) {\n        // Convert to moment object\n        let momentDate = moment.utc(cellData)\n\n        if (!momentDate.isValid()) {\n          // The moment date should never be invalid here.\n          return getErrorCell(\n            toSafeString(cellData),\n            `This should never happen. Please report this bug. \\nError: ${momentDate.toString()}`\n          )\n        }\n\n        if (parameters.timezone) {\n          try {\n            momentDate = applyTimezone(momentDate, parameters.timezone)\n          } catch (error) {\n            return getErrorCell(\n              momentDate.toISOString(),\n              `Failed to adjust to the provided timezone: ${parameters.timezone}. \\nError: ${error}`\n            )\n          }\n\n          timezoneOffset = momentDate.utcOffset()\n        }\n\n        try {\n          displayDate = formatMoment(\n            momentDate,\n            parameters.format || defaultFormat\n          )\n        } catch (error) {\n          return getErrorCell(\n            momentDate.toISOString(),\n            `Failed to format the date for rendering with: ${parameters.format}. \\nError: ${error}`\n          )\n        }\n        // Copy data should always use the default format\n        copyData = formatMoment(momentDate, defaultFormat)\n      }\n\n      return {\n        ...cellTemplate,\n        copyData,\n        isMissingValue: isNullOrUndefined(cellData),\n        data: {\n          ...cellTemplate.data,\n          date: cellData,\n          displayDate,\n          timezoneOffset,\n        },\n      } as DatePickerType\n    },\n    getCellValue(cell: DatePickerType): string | null {\n      return isNullOrUndefined(cell?.data?.date)\n        ? null\n        : toISOString(cell.data.date)\n    },\n  }\n}\n\n/**\n * Creates a new datetime column.\n * A datetime column supports optimized rendering and editing for datetime values.\n *\n * @param props The column properties.\n * @returns The new column.\n */\nexport default function DateTimeColumn(props: BaseColumnProps): BaseColumn {\n  // Do a smart selection of the default format based on the step size\n  let defaultFormat = \"YYYY-MM-DD HH:mm:ss\"\n  if (props.columnTypeOptions?.step >= 60) {\n    defaultFormat = \"YYYY-MM-DD HH:mm\"\n  } else if (props.columnTypeOptions?.step < 1) {\n    defaultFormat = \"YYYY-MM-DD HH:mm:ss.SSS\"\n  }\n\n  const timezone: string | undefined = props.arrowType?.meta?.timezone\n  const hasTimezone: boolean =\n    notNullOrUndefined(timezone) ||\n    // Timezone can also be configure by the user:\n    notNullOrUndefined(props?.columnTypeOptions?.timezone)\n\n  return BaseDateTimeColumn(\n    \"datetime\",\n    props,\n    hasTimezone ? defaultFormat + \"Z\" : defaultFormat,\n    1,\n    \"datetime-local\",\n    (date: Date): string => {\n      if (hasTimezone) {\n        return date.toISOString()\n      }\n      return date.toISOString().replace(\"Z\", \"\")\n    },\n    timezone\n  )\n}\n\nDateTimeColumn.isEditableType = true\n\n/**\n * Creates a new time column.\n * A time column supports optimized rendering and editing for time values.\n *\n * @param props The column properties.\n * @returns The new column.\n */\nexport function TimeColumn(props: BaseColumnProps): BaseColumn {\n  // Do a smart selection of the default format based on the step size\n  let defaultFormat = \"HH:mm:ss\"\n  if (props.columnTypeOptions?.step >= 60) {\n    defaultFormat = \"HH:mm\"\n  } else if (props.columnTypeOptions?.step < 1) {\n    defaultFormat = \"HH:mm:ss.SSS\"\n  }\n\n  return BaseDateTimeColumn(\n    \"time\",\n    props,\n    defaultFormat,\n    1,\n    \"time\",\n    (date: Date): string => {\n      // Only return the time part of the ISO string:\n      return date.toISOString().split(\"T\")[1].replace(\"Z\", \"\")\n    }\n  )\n}\n\nTimeColumn.isEditableType = true\n\n/**\n * Creates a new date column.\n * A date column supports optimized rendering and editing for date values.\n *\n * @param props The column properties.\n * @returns The new column.\n */\nexport function DateColumn(props: BaseColumnProps): BaseColumn {\n  return BaseDateTimeColumn(\n    \"date\",\n    props,\n    \"YYYY-MM-DD\",\n    1,\n    \"date\",\n    (date: Date): string => {\n      // Only return the date part of the ISO string:\n      return date.toISOString().split(\"T\")[0]\n    }\n  )\n}\n\nDateColumn.isEditableType = true\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  BooleanCell,\n  GridCellKind,\n} from \"@glideapps/glide-data-grid\"\n\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  toSafeString,\n  toSafeBoolean,\n} from \"./utils\"\n\n/**\n * A column type that supports optimized rendering and editing for boolean values\n * by using checkboxes.\n */\nfunction CheckboxColumn(props: BaseColumnProps): BaseColumn {\n  const cellTemplate = {\n    kind: GridCellKind.Boolean,\n    data: false,\n    allowOverlay: false, // no overlay possible\n    contentAlign: props.contentAlignment,\n    readonly: !props.isEditable,\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as BooleanCell\n\n  return {\n    ...props,\n    kind: \"checkbox\",\n    sortMode: \"default\",\n    getCell(data?: any): GridCell {\n      let cellData = null\n\n      cellData = toSafeBoolean(data)\n      if (cellData === undefined) {\n        return getErrorCell(\n          toSafeString(data),\n          `The value cannot be interpreted as boolean.`\n        )\n      }\n\n      // We are not setting isMissingValue here because the checkbox column\n      // does not work with the missing cell rendering.\n      return {\n        ...cellTemplate,\n        data: cellData,\n        isMissingValue: isNullOrUndefined(cellData),\n      } as BooleanCell\n    },\n    getCellValue(cell: BooleanCell): boolean | null {\n      return cell.data === undefined ? null : cell.data\n    },\n  }\n}\n\nCheckboxColumn.isEditableType = true\n\nexport default CheckboxColumn\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns true if a given arrow type name is an integer type.\n */\nexport function isIntegerType(arrowTypeName: string): boolean {\n  return (\n    (arrowTypeName.startsWith(\"int\") &&\n      !arrowTypeName.startsWith(\"interval\")) ||\n    arrowTypeName === \"range\" ||\n    arrowTypeName.startsWith(\"uint\")\n  )\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, GridCellKind, NumberCell } from \"@glideapps/glide-data-grid\"\n\nimport { Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport {\n  notNullOrUndefined,\n  isNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport { isIntegerType } from \"@streamlit/lib/src/components/widgets/DataFrame/isIntegerType\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  toSafeString,\n  mergeColumnParameters,\n  toSafeNumber,\n  formatNumber,\n  countDecimals,\n  truncateDecimals,\n} from \"./utils\"\n\nexport interface NumberColumnParams {\n  // The minimum allowed value for editing. Is set to 0 for unsigned values.\n  readonly min_value?: number\n  // The maximum allowed value for editing.\n  readonly max_value?: number\n  // A formatting syntax (e.g. sprintf) to format the display value.\n  // This can be used for adding prefix or suffix, or changing the number of decimals of the display value.\n  readonly format?: string\n  // Specifies the granularity that the value must adhere.\n  // This will also influence the maximum precision. This will impact the number of decimals\n  // allowed to be entered as well as the number of decimals displayed (if format is not specified).\n  // This is set to 1 for integer types.\n  readonly step?: number\n}\n\n/**\n * A column types that supports optimized rendering and editing for numbers.\n * This supports float, integer, and unsigned integer types.\n */\nfunction NumberColumn(props: BaseColumnProps): BaseColumn {\n  const arrowTypeName = Quiver.getTypeName(props.arrowType)\n  let format = undefined\n  if (arrowTypeName === \"timedelta64[ns]\") {\n    // Use duration formatting for timedelta64[ns] type:\n    format = \"duration[ns]\"\n  } else if (arrowTypeName.startsWith(\"period[\")) {\n    // Use period formatting for period types:\n    format = arrowTypeName\n  }\n  const parameters = mergeColumnParameters(\n    // Default parameters:\n    {\n      // Set step to 1 for integer types\n      step: isIntegerType(arrowTypeName) ? 1 : undefined,\n      // if uint (unsigned int), only positive numbers are allowed\n      min_value: arrowTypeName.startsWith(\"uint\") ? 0 : undefined,\n      format,\n    } as NumberColumnParams,\n    // User parameters:\n    props.columnTypeOptions\n  ) as NumberColumnParams\n\n  const allowNegative =\n    isNullOrUndefined(parameters.min_value) || parameters.min_value < 0\n\n  const fixedDecimals =\n    notNullOrUndefined(parameters.step) && !Number.isNaN(parameters.step)\n      ? countDecimals(parameters.step)\n      : undefined\n\n  const cellTemplate = {\n    kind: GridCellKind.Number,\n    data: undefined,\n    displayData: \"\",\n    readonly: !props.isEditable,\n    allowOverlay: true,\n    contentAlign: props.contentAlignment || \"right\",\n    style: props.isIndex ? \"faded\" : \"normal\",\n    allowNegative,\n    fixedDecimals,\n    // We don't want to show any thousand separators\n    // in the cell overlay/editor:\n    thousandSeparator: \"\",\n  } as NumberCell\n\n  const validateInput = (data?: any): boolean | number => {\n    let cellData: number | null = toSafeNumber(data)\n\n    if (isNullOrUndefined(cellData)) {\n      if (props.isRequired) {\n        return false\n      }\n      return true\n    }\n\n    if (Number.isNaN(cellData)) {\n      return false\n    }\n\n    // A flag to indicate whether the value has been auto-corrected.\n    // This is used to decide if we should return the corrected value or true.\n    // But we still run all other validations on the corrected value below.\n    let corrected = false\n\n    // Apply max_value configuration option:\n    if (\n      notNullOrUndefined(parameters.max_value) &&\n      cellData > parameters.max_value\n    ) {\n      cellData = parameters.max_value\n      corrected = true\n    }\n\n    // Apply min_value configuration option:\n    if (\n      notNullOrUndefined(parameters.min_value) &&\n      cellData < parameters.min_value\n    ) {\n      // Only return false, since correcting it negatively impacts\n      // the user experience.\n      return false\n    }\n\n    // TODO(lukasmasuch): validate step size?\n    // if (notNullOrUndefined(parameters.step) && parameters.step !== 1)\n\n    return corrected ? cellData : true\n  }\n\n  return {\n    ...props,\n    kind: \"number\",\n    sortMode: \"smart\",\n    validateInput,\n    getCell(data?: any, validate?: boolean): GridCell {\n      if (validate === true) {\n        const validationResult = validateInput(data)\n        if (validationResult === false) {\n          // The input is invalid, we return an error cell which will\n          // prevent this cell to be inserted into the table.\n          // This cell should never be actually displayed to the user.\n          // It's mostly used internally to prevent invalid input to be\n          // inserted into the table.\n          return getErrorCell(toSafeString(data), \"Invalid input.\")\n        } else if (typeof validationResult === \"number\") {\n          // Apply corrections:\n          data = validationResult\n        }\n      }\n\n      let cellData: number | null = toSafeNumber(data)\n      let displayData = \"\"\n\n      if (notNullOrUndefined(cellData)) {\n        if (Number.isNaN(cellData)) {\n          return getErrorCell(\n            toSafeString(data),\n            \"The value cannot be interpreted as a number.\"\n          )\n        }\n\n        // Cut decimals:\n        if (notNullOrUndefined(fixedDecimals)) {\n          cellData = truncateDecimals(cellData, fixedDecimals)\n        }\n\n        // Check if the value is larger than the maximum supported value:\n        if (Number.isInteger(cellData) && !Number.isSafeInteger(cellData)) {\n          return getErrorCell(\n            toSafeString(data),\n            \"The value is larger than the maximum supported integer values in number columns (2^53).\"\n          )\n        }\n\n        try {\n          displayData = formatNumber(\n            cellData,\n            parameters.format,\n            fixedDecimals\n          )\n        } catch (error) {\n          return getErrorCell(\n            toSafeString(cellData),\n            notNullOrUndefined(parameters.format)\n              ? `Failed to format the number based on the provided format configuration: (${parameters.format}). Error: ${error}`\n              : `Failed to format the number. Error: ${error}`\n          )\n        }\n      }\n\n      return {\n        ...cellTemplate,\n        data: cellData,\n        displayData,\n        isMissingValue: isNullOrUndefined(cellData),\n        // We want to enforce the raw number without formatting when its copied:\n        copyData: isNullOrUndefined(cellData) ? \"\" : toSafeString(cellData),\n      } as NumberCell\n    },\n    getCellValue(cell: NumberCell): number | null {\n      return cell.data === undefined ? null : cell.data\n    },\n  }\n}\n\nNumberColumn.isEditableType = true\n\nexport default NumberColumn\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, GridCellKind } from \"@glideapps/glide-data-grid\"\nimport { DropdownCellType } from \"@glideapps/glide-data-grid-cells\"\n\nimport { Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport {\n  isNullOrUndefined,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  toSafeString,\n  mergeColumnParameters,\n  toSafeNumber,\n  toSafeBoolean,\n} from \"./utils\"\n\nexport interface SelectboxColumnParams {\n  /** A list of options available in the selectbox.\n   * Every value in the column needs to match one of the options.\n   */\n  readonly options: (string | number | boolean)[]\n}\n\n/**\n * A column type that supports optimized rendering and editing for categorical values\n * by using a selectbox. This is automatically used by categorical columns (Pandas).\n *\n */\nfunction SelectboxColumn(props: BaseColumnProps): BaseColumn {\n  // The selectbox column can be either string, number or boolean type\n  // based on the options type.\n  let dataType: \"number\" | \"boolean\" | \"string\" = \"string\"\n\n  const parameters = mergeColumnParameters(\n    // Default parameters:\n    {\n      options:\n        Quiver.getTypeName(props.arrowType) === \"bool\" ? [true, false] : [],\n    },\n    // User parameters:\n    props.columnTypeOptions\n  ) as SelectboxColumnParams\n\n  const uniqueTypes = new Set(parameters.options.map(x => typeof x))\n  if (uniqueTypes.size === 1) {\n    if (uniqueTypes.has(\"number\") || uniqueTypes.has(\"bigint\")) {\n      dataType = \"number\"\n    } else if (uniqueTypes.has(\"boolean\")) {\n      dataType = \"boolean\"\n    }\n  }\n\n  const cellTemplate = {\n    kind: GridCellKind.Custom,\n    allowOverlay: true,\n    copyData: \"\",\n    contentAlign: props.contentAlignment,\n    readonly: !props.isEditable,\n    data: {\n      kind: \"dropdown-cell\",\n      allowedValues: [\n        // Add empty option if the column is not configured as required:\n        ...(props.isRequired !== true ? [null] : []),\n        ...parameters.options\n          .filter(opt => opt !== null && opt !== \"\") // ignore empty option if it exists\n          .map(opt => toSafeString(opt)), // convert everything to string\n      ],\n      value: \"\",\n      readonly: !props.isEditable,\n    },\n  } as DropdownCellType\n\n  return {\n    ...props,\n    kind: \"selectbox\",\n    sortMode: \"default\",\n    getCell(data?: any, validate?: boolean): GridCell {\n      // Empty string refers to a missing value\n      let cellData = null\n      if (notNullOrUndefined(data) && data !== \"\") {\n        cellData = toSafeString(data)\n      }\n\n      if (validate && !cellTemplate.data.allowedValues.includes(cellData)) {\n        return getErrorCell(\n          toSafeString(cellData),\n          `The value is not part of the allowed options.`\n        )\n      }\n\n      return {\n        ...cellTemplate,\n        isMissingValue: cellData === null,\n        copyData: cellData || \"\", // Column sorting is done via the copyData value\n        data: {\n          ...cellTemplate.data,\n          value: cellData,\n        },\n      } as DropdownCellType\n    },\n    getCellValue(cell: DropdownCellType): string | number | boolean | null {\n      if (isNullOrUndefined(cell.data?.value) || cell.data?.value === \"\") {\n        return null\n      }\n      if (dataType === \"number\") {\n        return toSafeNumber(cell.data?.value) ?? null\n      } else if (dataType === \"boolean\") {\n        return toSafeBoolean(cell.data?.value) ?? null\n      }\n      return cell.data?.value\n    },\n  }\n}\n\nSelectboxColumn.isEditableType = true\n\nexport default SelectboxColumn\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, BubbleCell, GridCellKind } from \"@glideapps/glide-data-grid\"\n\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  toSafeArray,\n  toSafeString,\n  isMissingValueCell,\n} from \"./utils\"\n\n/**\n * A column type that supports optimized rendering values of array/list types.\n */\nfunction ListColumn(props: BaseColumnProps): BaseColumn {\n  const cellTemplate = {\n    kind: GridCellKind.Bubble,\n    data: [],\n    allowOverlay: true,\n    contentAlign: props.contentAlignment,\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as BubbleCell\n\n  return {\n    ...props,\n    kind: \"list\",\n    sortMode: \"default\",\n    isEditable: false, // List column is always readonly\n    getCell(data?: any): GridCell {\n      const cellData = isNullOrUndefined(data) ? [] : toSafeArray(data)\n\n      return {\n        ...cellTemplate,\n        data: cellData,\n        isMissingValue: isNullOrUndefined(data),\n        copyData: isNullOrUndefined(data)\n          ? \"\"\n          : toSafeString(\n              cellData.map((x: any) =>\n                // Replace commas with spaces since commas are used to\n                // separate the list items.\n                typeof x === \"string\" && x.includes(\",\")\n                  ? x.replace(/,/g, \" \")\n                  : x\n              )\n            ),\n      } as BubbleCell\n    },\n    getCellValue(cell: BubbleCell): string[] | null {\n      if (isNullOrUndefined(cell.data) || isMissingValueCell(cell)) {\n        return null\n      }\n\n      return cell.data\n    },\n  }\n}\n\nListColumn.isEditableType = false\n\nexport default ListColumn\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  Theme as GlideTheme,\n  TextCell,\n  NumberCell,\n  GridCellKind,\n  UriCell,\n} from \"@glideapps/glide-data-grid\"\nimport { DatePickerType } from \"@glideapps/glide-data-grid-cells\"\nimport moment from \"moment\"\n\nimport {\n  DataFrameCell,\n  Quiver,\n  Type as ArrowType,\n} from \"@streamlit/lib/src/dataframes/Quiver\"\nimport {\n  notNullOrUndefined,\n  isNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  ColumnCreator,\n  ObjectColumn,\n  CheckboxColumn,\n  NumberColumn,\n  TextColumn,\n  SelectboxColumn,\n  ListColumn,\n  isErrorCell,\n  DateTimeColumn,\n  TimeColumn,\n  DateColumn,\n  removeLineBreaks,\n} from \"./columns\"\n\n/**\n * Extracts a CSS property value from a given CSS style string by using a regex.\n *\n * @param htmlElementId - The ID of the HTML element to extract the property for.\n * @param property - The css property to extract the value for.\n * @param cssStyle - The css style string.\n *\n * @return the CSS property value or undefined if the property is not found.\n */\nexport function extractCssProperty(\n  htmlElementId: string,\n  property: string,\n  cssStyle: string\n): string | undefined {\n  // This regex is supposed to extract the value of a CSS property\n  // for a specified HTML element ID from a CSS style string:\n  const regex = new RegExp(\n    `${htmlElementId}[,\\\\s].*{(?:[^}]*[\\\\s;]{1})?${property}:\\\\s*([^;}]+)[;]?.*}`,\n    \"gm\"\n  )\n  // Makes the regex simpler to match the element correctly:\n  cssStyle = cssStyle.replace(/{/g, \" {\")\n\n  const match = regex.exec(cssStyle)\n  if (match) {\n    return match[1].trim()\n  }\n\n  return undefined\n}\n/**\n * Applies pandas styler CSS to style the cell.\n *\n * @param cell: The cell to style.\n * @param cssId: The css ID of the cell.\n * @param cssStyles: All CSS styles from pandas styler.\n *\n * @return a styled grid cell.\n */\nexport function applyPandasStylerCss(\n  cell: GridCell,\n  cssId: string,\n  cssStyles: string\n): GridCell {\n  const themeOverride = {} as Partial<GlideTheme>\n\n  // Extract and apply the font color\n  const fontColor = extractCssProperty(cssId, \"color\", cssStyles)\n  if (fontColor) {\n    themeOverride.textDark = fontColor\n  }\n\n  // Extract and apply the background color\n  const backgroundColor = extractCssProperty(\n    cssId,\n    \"background-color\",\n    cssStyles\n  )\n  if (backgroundColor) {\n    themeOverride.bgCell = backgroundColor\n  }\n\n  if (backgroundColor === \"yellow\" && fontColor === undefined) {\n    // Yellow is used by pandas styler as the default highlight color.\n    // But yellow won't work well with our default font color in dark mode.\n    // Therefore, we are overriding the font color to our dark font color which\n    // always works well with yellow background.\n    themeOverride.textDark = \"#31333F\"\n  }\n\n  if (themeOverride) {\n    // Apply the background and font color in the theme override\n    return {\n      ...cell,\n      themeOverride,\n    }\n  }\n  return cell\n}\n\n/**\n * Maps the data type from Arrow to a column type.\n */\nexport function getColumnTypeFromArrow(arrowType: ArrowType): ColumnCreator {\n  let typeName = arrowType ? Quiver.getTypeName(arrowType) : null\n\n  if (!typeName) {\n    // Use object column as fallback\n    return ObjectColumn\n  }\n\n  typeName = typeName.toLowerCase().trim()\n  // Match based on arrow types\n  if ([\"unicode\", \"empty\"].includes(typeName)) {\n    return TextColumn\n  }\n\n  if ([\"datetime\", \"datetimetz\"].includes(typeName)) {\n    return DateTimeColumn\n  }\n  if (typeName === \"time\") {\n    return TimeColumn\n  }\n  if (typeName === \"date\") {\n    return DateColumn\n  }\n  if ([\"object\", \"bytes\"].includes(typeName)) {\n    return ObjectColumn\n  }\n  if ([\"bool\"].includes(typeName)) {\n    return CheckboxColumn\n  }\n  if (\n    [\n      \"int8\",\n      \"int16\",\n      \"int32\",\n      \"int64\",\n      \"uint8\",\n      \"uint16\",\n      \"uint32\",\n      \"uint64\",\n      \"float16\",\n      \"float32\",\n      \"float64\",\n      \"float96\",\n      \"float128\",\n      \"range\", // The default index in pandas uses a range type.\n      \"decimal\",\n    ].includes(typeName)\n  ) {\n    return NumberColumn\n  }\n  if (typeName === \"categorical\") {\n    return SelectboxColumn\n  }\n  if (typeName.startsWith(\"list\")) {\n    return ListColumn\n  }\n\n  return ObjectColumn\n}\n\n/**\n * Creates the column props for an index column from the Arrow metadata.\n *\n * @param data - The Arrow data.\n * @param indexPosition - The numeric position of the index column.\n *\n * @return the column props for the index column.\n */\nexport function getIndexFromArrow(\n  data: Quiver,\n  indexPosition: number\n): BaseColumnProps {\n  const arrowType = data.types.index[indexPosition]\n  const title = data.indexNames[indexPosition]\n  let isEditable = true\n\n  if (Quiver.getTypeName(arrowType) === \"range\") {\n    // Range indices are not editable\n    isEditable = false\n  }\n\n  return {\n    id: `index-${indexPosition}`,\n    name: title,\n    title,\n    isEditable,\n    arrowType,\n    isIndex: true,\n    isHidden: false,\n  } as BaseColumnProps\n}\n\n/**\n * Creates the column props for a data column from the Arrow metadata.\n *\n * @param data - The Arrow data.\n * @param columnPosition - The numeric position of the data column.\n *        Starts with 0 at the first non-index column.\n *\n * @return the column props for the data column.\n */\nexport function getColumnFromArrow(\n  data: Quiver,\n  columnPosition: number\n): BaseColumnProps {\n  const title = data.columns[0][columnPosition]\n  let arrowType = data.types.data[columnPosition]\n\n  if (isNullOrUndefined(arrowType)) {\n    // Use empty column type as fallback\n    arrowType = {\n      meta: null,\n      numpy_type: \"object\",\n      pandas_type: \"object\",\n    } as ArrowType\n  }\n\n  let columnTypeOptions\n  if (Quiver.getTypeName(arrowType) === \"categorical\") {\n    // Get the available categories and use it in column type metadata\n    const options = data.getCategoricalOptions(columnPosition)\n    if (notNullOrUndefined(options)) {\n      columnTypeOptions = {\n        options,\n      }\n    }\n  }\n\n  return {\n    id: `column-${title}-${columnPosition}`,\n    name: title,\n    title,\n    isEditable: true,\n    arrowType,\n    columnTypeOptions,\n    isIndex: false,\n    isHidden: false,\n  } as BaseColumnProps\n}\n\n/**\n * Creates the column props for an empty index column.\n * This is used for DataFrames that don't have any index.\n * At least one column is required for glide.\n */\nexport function getEmptyIndexColumn(): BaseColumnProps {\n  return {\n    id: `empty-index`,\n    title: \"\",\n    indexNumber: 0,\n    isEditable: false,\n    isIndex: true,\n  } as BaseColumnProps\n}\n\n/**\n * Creates the column props for all columns from the Arrow metadata.\n *\n * @param data - The Arrow data.\n * @return the column props for all columns.\n */\nexport function getAllColumnsFromArrow(data: Quiver): BaseColumnProps[] {\n  const columns: BaseColumnProps[] = []\n\n  const { dimensions } = data\n  const numIndices = dimensions.headerColumns\n  const numColumns = dimensions.dataColumns\n\n  if (numIndices === 0 && numColumns === 0) {\n    // Tables that don't have any columns cause an exception in glide-data-grid.\n    // As a workaround, we are adding an empty index column in this case.\n    columns.push(getEmptyIndexColumn())\n    return columns\n  }\n\n  for (let i = 0; i < numIndices; i++) {\n    const column = {\n      ...getIndexFromArrow(data, i),\n      indexNumber: i,\n    } as BaseColumnProps\n\n    columns.push(column)\n  }\n\n  for (let i = 0; i < numColumns; i++) {\n    const column = {\n      ...getColumnFromArrow(data, i),\n      indexNumber: i + numIndices,\n    } as BaseColumnProps\n\n    columns.push(column)\n  }\n  return columns\n}\n\n/**\n * Returns a glide-data-grid compatible cell object based on the\n * cell data from the Quiver (Arrow) object. Different types of data will\n * result in different cell types.\n *\n * @param column - The colum of the cell.\n * @param arrowCell - The dataframe cell object from Arrow.\n * @param cssStyles - Optional css styles to apply on the cell.\n *\n * @return a GridCell object that can be used by glide-data-grid.\n */\nexport function getCellFromArrow(\n  column: BaseColumn,\n  arrowCell: DataFrameCell,\n  cssStyles: string | undefined = undefined\n): GridCell {\n  const typeName = column.arrowType\n    ? Quiver.getTypeName(column.arrowType)\n    : null\n\n  let cellTemplate\n  if (column.kind === \"object\") {\n    // Always use display value from Quiver for object types\n    // these are special types that the dataframe only support in read-only mode.\n    cellTemplate = column.getCell(\n      notNullOrUndefined(arrowCell.content)\n        ? removeLineBreaks(\n            Quiver.format(\n              arrowCell.content,\n              arrowCell.contentType,\n              arrowCell.field\n            )\n          )\n        : null\n    )\n  } else if (\n    [\"time\", \"date\", \"datetime\"].includes(column.kind) &&\n    notNullOrUndefined(arrowCell.content) &&\n    (typeof arrowCell.content === \"number\" ||\n      typeof arrowCell.content === \"bigint\")\n  ) {\n    // This is a special case where we want to already parse a numerical timestamp\n    // to a date object based on the arrow field metadata.\n    // Our implementation only supports unix timestamps in seconds, so we need to\n    // do some custom conversion here.\n    let parsedDate\n    if (\n      typeName === \"time\" &&\n      notNullOrUndefined(arrowCell.field?.type?.unit)\n    ) {\n      // Time values needs to be adjusted to seconds based on the unit\n      parsedDate = moment\n        .unix(\n          Quiver.convertToSeconds(\n            arrowCell.content,\n            arrowCell.field?.type?.unit ?? 0\n          )\n        )\n        .utc()\n        .toDate()\n    } else {\n      // All other datetime related values are assumed to be in milliseconds\n      parsedDate = moment.utc(Number(arrowCell.content)).toDate()\n    }\n\n    cellTemplate = column.getCell(parsedDate)\n  } else if (typeName === \"decimal\") {\n    // This is a special case where we want to already prepare a decimal value\n    // to a number string based on the arrow field metadata. This is required\n    // because we don't have access to the required scale in the number column.\n    const decimalStr = isNullOrUndefined(arrowCell.content)\n      ? null\n      : Quiver.format(\n          arrowCell.content,\n          arrowCell.contentType,\n          arrowCell.field\n        )\n    cellTemplate = column.getCell(decimalStr)\n  } else {\n    cellTemplate = column.getCell(arrowCell.content)\n  }\n\n  if (isErrorCell(cellTemplate)) {\n    // Directly return error cells without any additional modification\n    return cellTemplate\n  }\n\n  if (!column.isEditable) {\n    // Only apply display content and css styles to non-editable cells.\n    if (notNullOrUndefined(arrowCell.displayContent)) {\n      const displayData = removeLineBreaks(arrowCell.displayContent)\n      // If the display content is set, use that instead of the content.\n      // This is only supported for text, object, date, datetime, time and number cells.\n      // Non-editable datetime cells will use the text cell kind\n      // so we don't need to handle date-time-cell cells extra here.\n      if (cellTemplate.kind === GridCellKind.Text) {\n        cellTemplate = {\n          ...cellTemplate,\n          displayData,\n        } as TextCell\n      } else if (cellTemplate.kind === GridCellKind.Number) {\n        cellTemplate = {\n          ...cellTemplate,\n          displayData,\n        } as NumberCell\n      } else if (cellTemplate.kind === GridCellKind.Uri) {\n        cellTemplate = {\n          ...cellTemplate,\n          displayData,\n        } as UriCell\n      } else if (\n        cellTemplate.kind === GridCellKind.Custom &&\n        (cellTemplate as DatePickerType).data?.kind === \"date-picker-cell\"\n      ) {\n        cellTemplate = {\n          ...cellTemplate,\n          data: {\n            ...(cellTemplate as DatePickerType).data,\n            displayDate: displayData,\n          },\n        } as DatePickerType\n      }\n    }\n\n    if (cssStyles && arrowCell.cssId) {\n      cellTemplate = applyPandasStylerCss(\n        cellTemplate,\n        arrowCell.cssId,\n        cssStyles\n      )\n    }\n  }\n  return cellTemplate\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, GridCellKind, UriCell } from \"@glideapps/glide-data-grid\"\n\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  toSafeString,\n  getErrorCell,\n  getLinkDisplayValueFromRegex,\n} from \"./utils\"\n\nexport interface LinkColumnParams {\n  // The maximum number of characters the user can enter into the text input.\n  readonly max_chars?: number\n  // Regular expression that the input's value must match for the value to pass\n  readonly validate?: string\n  // a value to display in the link cell. Can be a regex to parse out a specific substring of the url to be displayed\n  readonly display_text?: string\n}\n\n/**\n * The link column is a special column that interprets the cell content as\n * an hyperlink / url and allows the user to click on it.\n */\nfunction LinkColumn(props: BaseColumnProps): BaseColumn {\n  const parameters = (props.columnTypeOptions as LinkColumnParams) || {}\n\n  let validateRegex: RegExp | string | undefined = undefined\n\n  if (parameters.validate) {\n    // Prepare the validation regex:\n    try {\n      // u flag allows unicode characters\n      // s flag allows . to match newlines\n      validateRegex = new RegExp(parameters.validate, \"us\")\n    } catch (error) {\n      // Put error message in validateRegex so we can display it in the cell\n      validateRegex = `Invalid validate regex: ${parameters.validate}.\\nError: ${error}`\n    }\n  }\n\n  // Determine if the user's provided display text is a regexp pattern or not.\n  let displayTextRegex: RegExp | undefined = undefined\n  if (\n    !isNullOrUndefined(parameters.display_text) &&\n    parameters.display_text.includes(\"(\") &&\n    parameters.display_text.includes(\")\")\n  ) {\n    try {\n      displayTextRegex = new RegExp(parameters.display_text, \"us\")\n    } catch (error) {\n      // The regex is invalid, interpret it as static display text.\n      displayTextRegex = undefined\n    }\n  }\n\n  const cellTemplate = {\n    kind: GridCellKind.Uri,\n    readonly: !props.isEditable,\n    allowOverlay: true,\n    contentAlign: props.contentAlignment,\n    style: props.isIndex ? \"faded\" : \"normal\",\n    hoverEffect: true,\n    data: \"\",\n    displayData: \"\",\n    copyData: \"\",\n  } as UriCell\n\n  const validateInput = (href?: string): boolean => {\n    if (isNullOrUndefined(href)) {\n      if (props.isRequired) {\n        return false\n      }\n      return true\n    }\n\n    const cellHref = toSafeString(href)\n\n    if (parameters.max_chars && cellHref.length > parameters.max_chars) {\n      // value is too long\n      return false\n    }\n\n    if (\n      validateRegex instanceof RegExp &&\n      validateRegex.test(cellHref) === false\n    ) {\n      return false\n    }\n\n    return true\n  }\n\n  return {\n    ...props,\n    kind: \"link\",\n    sortMode: \"default\",\n    validateInput,\n    getCell(data?: any, validate?: boolean): GridCell {\n      if (isNullOrUndefined(data)) {\n        return {\n          ...cellTemplate,\n          data: null as any,\n          isMissingValue: true,\n          onClickUri: () => {},\n        } as UriCell\n      }\n\n      const href: string = data\n      if (typeof validateRegex === \"string\") {\n        // The regex is invalid, we return an error to indicate this\n        // to the developer:\n        return getErrorCell(toSafeString(href), validateRegex)\n      }\n\n      if (validate) {\n        const validationResult = validateInput(href)\n        if (validationResult === false) {\n          // The input is invalid, we return an error cell which will\n          // prevent this cell to be inserted into the table.\n          // This cell should never be actually displayed to the user.\n          // It's mostly used internally to prevent invalid input to be\n          // inserted into the table.\n          return getErrorCell(toSafeString(href), \"Invalid input.\")\n        }\n      }\n\n      let displayText = \"\"\n      if (href) {\n        if (displayTextRegex !== undefined) {\n          // Set display value to be the regex extracted portion of the href.\n          displayText = getLinkDisplayValueFromRegex(displayTextRegex, href)\n        } else {\n          // Use user provided display_text unless it's null, undefined, or an empty string.\n          // If it's any of those falsy values, use the href.\n          displayText = parameters.display_text || href\n        }\n      }\n\n      return {\n        ...cellTemplate,\n        data: href,\n        displayData: displayText,\n        isMissingValue: isNullOrUndefined(href),\n        onClickUri: a => {\n          window.open(\n            href.startsWith(\"www.\") ? `https://${href}` : href,\n            \"_blank\",\n            \"noopener,noreferrer\"\n          )\n          a.preventDefault()\n        },\n        copyData: href,\n      } as UriCell\n    },\n    getCellValue(cell: UriCell): string | null {\n      return isNullOrUndefined(cell.data) ? null : cell.data\n    },\n  }\n}\n\nLinkColumn.isEditableType = true\n\nexport default LinkColumn\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell, GridCellKind, ImageCell } from \"@glideapps/glide-data-grid\"\n\nimport { notNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nimport { BaseColumn, BaseColumnProps, toSafeString } from \"./utils\"\n\n/**\n * A column type that renders an image as a cell value. On cell selection, open\n * the cell overlay with a full version of the image.\n *\n * This column type is currently read-only.\n */\nfunction ImageColumn(props: BaseColumnProps): BaseColumn {\n  const cellTemplate = {\n    kind: GridCellKind.Image,\n    data: [],\n    displayData: [],\n    readonly: true,\n    allowOverlay: true,\n    contentAlign: props.contentAlignment || \"center\",\n    style: props.isIndex ? \"faded\" : \"normal\",\n  } as ImageCell\n\n  return {\n    ...props,\n    kind: \"image\",\n    sortMode: \"default\",\n    isEditable: false, // Image columns are always read-only\n    getCell(data?: any): GridCell {\n      // The native image cell implementation in glide-data-grid expects an array\n      // of image URLs. For our usecase, we only support single images. We\n      // need to wrap the image URL in an array to have it compatible with the\n      // implementation in glide-data-grid.\n      const imageUrls = notNullOrUndefined(data) ? [toSafeString(data)] : []\n\n      return {\n        ...cellTemplate,\n        data: imageUrls,\n        isMissingValue: !notNullOrUndefined(data),\n        displayData: imageUrls,\n      } as ImageCell\n    },\n    getCellValue(cell: ImageCell): string | null {\n      if (cell.data === undefined || cell.data.length === 0) {\n        return null\n      }\n\n      // We use the image cell only for single images,\n      // so we can safely return just the first element\n      return cell.data[0]\n    },\n  }\n}\n\nImageColumn.isEditableType = false\n\nexport default ImageColumn\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  GridCellKind,\n  LoadingCell,\n} from \"@glideapps/glide-data-grid\"\nimport { RangeCellType } from \"@glideapps/glide-data-grid-cells\"\n\nimport { Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport {\n  isNullOrUndefined,\n  notNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport { isIntegerType } from \"@streamlit/lib/src/components/widgets/DataFrame/isIntegerType\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  getEmptyCell,\n  toSafeString,\n  mergeColumnParameters,\n  formatNumber,\n  toSafeNumber,\n  countDecimals,\n} from \"./utils\"\n\nexport interface ProgressColumnParams {\n  // The minimum permitted value. Defaults to 0.\n  readonly min_value?: number\n  // The maximum permitted value. Defaults to 100 if the underlying data is integer,\n  // or 1 for all others types.\n  readonly max_value?: number\n  // A formatting syntax (e.g. sprintf) to format the display value.\n  // This can be used for adding prefix or suffix, or changing the number of decimals of the display value.\n  readonly format?: string\n  // The stepping interval. Defaults to 0.01.\n  // Mainly useful once we provide editing capabilities.\n  readonly step?: number\n}\n\n/**\n * A read-only column type to support rendering values that have a defined\n * range. This is rendered via a progress-bar-like visualization.\n */\nfunction ProgressColumn(props: BaseColumnProps): BaseColumn {\n  const arrowTypeName = Quiver.getTypeName(props.arrowType)\n  const isInteger = isIntegerType(arrowTypeName)\n\n  const parameters = mergeColumnParameters(\n    // Default parameters:\n    {\n      min_value: 0,\n      max_value: isInteger ? 100 : 1,\n      step: isInteger ? 1 : 0.01,\n      format: isInteger ? \"%3d%%\" : \"percent\",\n    } as ProgressColumnParams,\n    // User parameters:\n    props.columnTypeOptions\n  ) as ProgressColumnParams\n\n  // Measure the display value of the max value, so that all progress bars are aligned correctly:\n  let measureLabel: string\n  try {\n    measureLabel = formatNumber(\n      parameters.max_value as number,\n      parameters.format\n    )\n  } catch (error) {\n    measureLabel = toSafeString(parameters.max_value)\n  }\n\n  const fixedDecimals =\n    isNullOrUndefined(parameters.step) || Number.isNaN(parameters.step)\n      ? undefined\n      : countDecimals(parameters.step)\n\n  const cellTemplate = {\n    kind: GridCellKind.Custom,\n    allowOverlay: false,\n    copyData: \"\",\n    contentAlign: props.contentAlignment,\n    data: {\n      kind: \"range-cell\",\n      min: parameters.min_value,\n      max: parameters.max_value,\n      step: parameters.step,\n      value: parameters.min_value,\n      label: String(parameters.min_value),\n      measureLabel,\n      readonly: true,\n    },\n  } as RangeCellType\n\n  return {\n    ...props,\n    kind: \"progress\",\n    sortMode: \"smart\",\n    isEditable: false, // Progress column is always readonly\n    getCell(data?: any): GridCell {\n      if (isNullOrUndefined(data)) {\n        // TODO(lukasmasuch): Use a missing cell?\n        return getEmptyCell()\n      }\n\n      if (\n        isNullOrUndefined(parameters.min_value) ||\n        isNullOrUndefined(parameters.max_value) ||\n        Number.isNaN(parameters.min_value) ||\n        Number.isNaN(parameters.max_value) ||\n        parameters.min_value >= parameters.max_value\n      ) {\n        return getErrorCell(\n          \"Invalid min/max parameters\",\n          `The min_value (${parameters.min_value}) and max_value (${parameters.max_value}) parameters must be valid numbers.`\n        )\n      }\n\n      if (\n        isNullOrUndefined(parameters.step) ||\n        Number.isNaN(parameters.step)\n      ) {\n        return getErrorCell(\n          \"Invalid step parameter\",\n          `The step parameter (${parameters.step}) must be a valid number.`\n        )\n      }\n\n      const cellData = toSafeNumber(data)\n\n      if (Number.isNaN(cellData) || isNullOrUndefined(cellData)) {\n        return getErrorCell(\n          toSafeString(data),\n          \"The value cannot be interpreted as a number.\"\n        )\n      }\n\n      // Check if the value is larger than the maximum supported value:\n      if (Number.isInteger(cellData) && !Number.isSafeInteger(cellData)) {\n        return getErrorCell(\n          toSafeString(data),\n          \"The value is larger than the maximum supported integer values in number columns (2^53).\"\n        )\n      }\n\n      let displayData = \"\"\n\n      try {\n        displayData = formatNumber(cellData, parameters.format, fixedDecimals)\n      } catch (error) {\n        return getErrorCell(\n          toSafeString(cellData),\n          notNullOrUndefined(parameters.format)\n            ? `Failed to format the number based on the provided format configuration: (${parameters.format}). Error: ${error}`\n            : `Failed to format the number. Error: ${error}`\n        )\n      }\n\n      // If the value is outside the range, we scale it to the min/max\n      // for the visualization.\n      const normalizeCellValue = Math.min(\n        parameters.max_value,\n        Math.max(parameters.min_value, cellData)\n      )\n\n      return {\n        ...cellTemplate,\n        isMissingValue: isNullOrUndefined(data),\n        copyData: String(cellData), // Column sorting is done via the copyData value\n        data: {\n          ...cellTemplate.data,\n          value: normalizeCellValue,\n          label: displayData,\n        },\n      } as RangeCellType\n    },\n    getCellValue(cell: RangeCellType | LoadingCell): number | null {\n      if (cell.kind === GridCellKind.Loading) {\n        return null\n      }\n      return cell.data?.value === undefined ? null : cell.data?.value\n    },\n  }\n}\n\nProgressColumn.isEditableType = false\n\nexport default ProgressColumn\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GridCell,\n  GridCellKind,\n  LoadingCell,\n} from \"@glideapps/glide-data-grid\"\nimport { SparklineCellType } from \"@glideapps/glide-data-grid-cells\"\n\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  getErrorCell,\n  getEmptyCell,\n  toSafeString,\n  toSafeArray,\n  mergeColumnParameters,\n  toSafeNumber,\n  formatNumber,\n} from \"./utils\"\n\nexport const LINE_CHART_TYPE = \"line_chart\"\nexport const AREA_CHART_TYPE = \"area_chart\"\nexport const BAR_CHART_TYPE = \"bar_chart\"\n\nexport interface ChartColumnParams {\n  // The minimum value used for plotting the chart. Defaults to 0.\n  readonly y_min?: number\n  // The maximum value used for plotting the chart. Defaults to 1.\n  readonly y_max?: number\n}\n\n/**\n * Base class for chart columns. This class is not meant to be used directly.\n * Instead, use the LineChartColumn and BarChartColumn classes.\n */\nfunction BaseChartColumn(\n  kind: string,\n  props: BaseColumnProps,\n  chart_type: \"line\" | \"bar\" | \"area\"\n): BaseColumn {\n  const parameters = mergeColumnParameters(\n    // Default parameters:\n    {\n      y_min: 0,\n      y_max: 1,\n    },\n    // User parameters:\n    props.columnTypeOptions\n  ) as ChartColumnParams\n\n  const cellTemplate = {\n    kind: GridCellKind.Custom,\n    allowOverlay: false,\n    copyData: \"\",\n    contentAlign: props.contentAlignment,\n    data: {\n      kind: \"sparkline-cell\",\n      values: [],\n      displayValues: [],\n      graphKind: chart_type,\n      yAxis: [parameters.y_min, parameters.y_max],\n    },\n  } as SparklineCellType\n\n  return {\n    ...props,\n    kind,\n    sortMode: \"default\",\n    isEditable: false, // Chart column is always read-only\n    getCell(data?: any): GridCell {\n      if (\n        isNullOrUndefined(parameters.y_min) ||\n        isNullOrUndefined(parameters.y_max) ||\n        Number.isNaN(parameters.y_min) ||\n        Number.isNaN(parameters.y_max) ||\n        parameters.y_min >= parameters.y_max\n      ) {\n        return getErrorCell(\n          \"Invalid min/max y-axis configuration\",\n          `The y_min (${parameters.y_min}) and y_max (${parameters.y_max}) configuration options must be valid numbers.`\n        )\n      }\n\n      if (isNullOrUndefined(data)) {\n        // TODO(lukasmasuch): Use a missing cell?\n        return getEmptyCell()\n      }\n\n      const chartData = toSafeArray(data)\n\n      const convertedChartData: number[] = []\n      let normalizedChartData: number[] = []\n      if (chartData.length === 0) {\n        return getEmptyCell()\n      }\n\n      // Initialize with smallest and biggest number\n      let maxValue = Number.MIN_SAFE_INTEGER\n      let minValue = Number.MAX_SAFE_INTEGER\n\n      // Try to convert all values to numbers and find min/max\n      for (let i = 0; i < chartData.length; i++) {\n        const convertedValue = toSafeNumber(chartData[i])\n        if (\n          Number.isNaN(convertedValue) ||\n          isNullOrUndefined(convertedValue)\n        ) {\n          return getErrorCell(\n            toSafeString(chartData),\n            `The value cannot be interpreted as a numeric array. ${toSafeString(\n              convertedValue\n            )} is not a number.`\n          )\n        }\n\n        if (convertedValue > maxValue) {\n          maxValue = convertedValue\n        }\n\n        if (convertedValue < minValue) {\n          minValue = convertedValue\n        }\n\n        convertedChartData.push(convertedValue)\n      }\n\n      if (\n        convertedChartData.length > 0 &&\n        (maxValue > parameters.y_max || minValue < parameters.y_min)\n      ) {\n        // Normalize values between the configured range\n        normalizedChartData = convertedChartData.map(v =>\n          maxValue - minValue === 0 // Prevent division by zero\n            ? maxValue > (parameters.y_max || 1)\n              ? parameters.y_max || 1 // Use max value\n              : parameters.y_min || 0 // Use min value\n            : ((parameters.y_max || 1) - (parameters.y_min || 0)) *\n                ((v - minValue) / (maxValue - minValue)) +\n              (parameters.y_min || 0)\n        )\n      } else {\n        // Values are already in the configured range\n        normalizedChartData = convertedChartData\n      }\n\n      return {\n        ...cellTemplate,\n        copyData: convertedChartData.join(\",\"), // Column sorting is done via the copyData value\n        data: {\n          ...cellTemplate.data,\n          values: normalizedChartData,\n          displayValues: convertedChartData.map(v => formatNumber(v)),\n        },\n        isMissingValue: isNullOrUndefined(data),\n      } as SparklineCellType\n    },\n    getCellValue(\n      cell: SparklineCellType | LoadingCell\n    ): readonly number[] | null {\n      if (cell.kind === GridCellKind.Loading) {\n        return null\n      }\n\n      return cell.data?.values === undefined ? null : cell.data?.values\n    },\n  }\n}\n\n/**\n * A column type that renders the cell value as a line-chart.\n * The data is expected to be a numeric array.\n *\n * This column type is currently read-only.\n */\nexport function LineChartColumn(props: BaseColumnProps): BaseColumn {\n  return BaseChartColumn(LINE_CHART_TYPE, props, \"line\")\n}\n\nLineChartColumn.isEditableType = false\n\n/**\n * A column type that renders the cell value as a bar-chart.\n * The data is expected to be a numeric array.\n *\n * This column type is currently read-only.\n */\nexport function BarChartColumn(props: BaseColumnProps): BaseColumn {\n  return BaseChartColumn(BAR_CHART_TYPE, props, \"bar\")\n}\n\nBarChartColumn.isEditableType = false\n\n/**\n * A column type that renders the cell value as an area-chart.\n * The data is expected to be a numeric array.\n *\n * This column type is currently read-only.\n */\nexport function AreaChartColumn(props: BaseColumnProps): BaseColumn {\n  return BaseChartColumn(AREA_CHART_TYPE, props, \"area\")\n}\n\nAreaChartColumn.isEditableType = false\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ObjectColumn from \"./ObjectColumn\"\nimport TextColumn from \"./TextColumn\"\nimport CheckboxColumn from \"./CheckboxColumn\"\nimport SelectboxColumn from \"./SelectboxColumn\"\nimport ListColumn from \"./ListColumn\"\nimport NumberColumn from \"./NumberColumn\"\nimport LinkColumn from \"./LinkColumn\"\nimport ImageColumn from \"./ImageColumn\"\nimport ProgressColumn from \"./ProgressColumn\"\nimport DateTimeColumn, { DateColumn, TimeColumn } from \"./DateTimeColumn\"\nimport {\n  LineChartColumn,\n  BarChartColumn,\n  AreaChartColumn,\n} from \"./ChartColumn\"\n\nexport { ImageCellEditor } from \"./cells/ImageCellEditor\"\n\nimport { ColumnCreator } from \"./utils\"\n\nexport * from \"./utils\"\n\n/**\n * All available column types need to be registered here.\n *\n * These names must match the column names used in the backend.\n */\nexport const ColumnTypes = new Map<string, ColumnCreator>(\n  Object.entries({\n    object: ObjectColumn,\n    text: TextColumn,\n    checkbox: CheckboxColumn,\n    selectbox: SelectboxColumn,\n    list: ListColumn,\n    number: NumberColumn,\n    link: LinkColumn,\n    datetime: DateTimeColumn,\n    date: DateColumn,\n    time: TimeColumn,\n    line_chart: LineChartColumn,\n    bar_chart: BarChartColumn,\n    area_chart: AreaChartColumn,\n    image: ImageColumn,\n    progress: ProgressColumn,\n  })\n)\n\nexport const CustomCells = []\n\nexport {\n  ObjectColumn,\n  TextColumn,\n  CheckboxColumn,\n  SelectboxColumn,\n  ListColumn,\n  NumberColumn,\n  LinkColumn,\n  DateTimeColumn,\n  DateColumn,\n  TimeColumn,\n  LineChartColumn,\n  BarChartColumn,\n  AreaChartColumn,\n  ImageColumn,\n  ProgressColumn,\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\"\n\nimport merge from \"lodash/merge\"\nimport { useTheme } from \"@emotion/react\"\n\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\nimport { Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport { Arrow as ArrowProto } from \"@streamlit/lib/src/proto\"\nimport {\n  notNullOrUndefined,\n  isNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\nimport { logWarning, logError } from \"@streamlit/lib/src/util/log\"\n\nimport {\n  getColumnTypeFromArrow,\n  getAllColumnsFromArrow,\n  getEmptyIndexColumn,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/arrowUtils\"\nimport {\n  BaseColumn,\n  BaseColumnProps,\n  ObjectColumn,\n  ColumnTypes,\n  ColumnCreator,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\n\n// Using this ID for column config will apply the config to all index columns\nexport const INDEX_IDENTIFIER = \"_index\"\n// Prefix used in the config column mapping when referring to a column via the numeric position\nexport const COLUMN_POSITION_PREFIX = \"_pos:\"\n\n// Predefined column widths configurable by the user\nexport const COLUMN_WIDTH_MAPPING = {\n  small: 75,\n  medium: 200,\n  large: 400,\n}\n\n/**\n * Options to configure columns.\n *\n * This needs to be kept in sync with the ColumnConfig TypeDict in the backend.\n * This will be eventually replaced with a proto message.\n */\nexport interface ColumnConfigProps {\n  label?: string\n  width?: \"small\" | \"medium\" | \"large\" | number\n  help?: string\n  hidden?: boolean\n  disabled?: boolean\n  required?: boolean\n  default?: number | string | boolean\n  alignment?: \"left\" | \"center\" | \"right\"\n  // uses snake_case to match the property names in the backend:\n  type_config?: Record<string, unknown>\n}\n\n/**\n * Parse the user-defined width configuration and return the width in pixels.\n */\nfunction parseWidthConfig(\n  width?: \"small\" | \"medium\" | \"large\" | number\n): number | undefined {\n  if (isNullOrUndefined(width)) {\n    return undefined\n  }\n\n  if (typeof width === \"number\") {\n    return width\n  }\n\n  if (width in COLUMN_WIDTH_MAPPING) {\n    return COLUMN_WIDTH_MAPPING[width]\n  }\n\n  return undefined\n}\n\n/**\n * Apply the user-defined column configuration if supplied.\n *\n * @param columnProps - The column properties to apply the config to.\n * @param columnConfigMapping - The user-defined column configuration mapping.\n *\n * @return the column properties with the config applied.\n */\nexport function applyColumnConfig(\n  columnProps: BaseColumnProps,\n  columnConfigMapping: Map<string | number, ColumnConfigProps>\n): BaseColumnProps {\n  if (!columnConfigMapping) {\n    // No column config configured\n    return columnProps\n  }\n\n  let columnConfig\n  if (\n    columnConfigMapping.has(columnProps.name) &&\n    columnProps.name !== INDEX_IDENTIFIER // \"index\" is not supported as name for normal columns\n  ) {\n    // Config is configured based on the column name\n    columnConfig = columnConfigMapping.get(columnProps.name)\n  } else if (\n    columnConfigMapping.has(\n      `${COLUMN_POSITION_PREFIX}${columnProps.indexNumber}`\n    )\n  ) {\n    // Config is configured based on the column position, e.g. col:0 -> first column\n    columnConfig = columnConfigMapping.get(\n      `${COLUMN_POSITION_PREFIX}${columnProps.indexNumber}`\n    )\n  } else if (\n    columnProps.isIndex &&\n    columnConfigMapping.has(INDEX_IDENTIFIER)\n  ) {\n    // Config is configured for the index column (or all index columns for multi-index)\n    columnConfig = columnConfigMapping.get(INDEX_IDENTIFIER)\n  }\n\n  if (!columnConfig) {\n    // No column config found for this column\n    return columnProps\n  }\n\n  // This will update all column props with the user-defined config for all\n  // configuration options that are not undefined:\n  return merge({ ...columnProps }, {\n    title: columnConfig.label,\n    width: parseWidthConfig(columnConfig.width),\n    isEditable: notNullOrUndefined(columnConfig.disabled)\n      ? !columnConfig.disabled\n      : undefined,\n    isHidden: columnConfig.hidden,\n    isRequired: columnConfig.required,\n    columnTypeOptions: columnConfig.type_config,\n    contentAlignment: columnConfig.alignment,\n    defaultValue: columnConfig.default,\n    help: columnConfig.help,\n  } as BaseColumnProps) as BaseColumnProps\n}\n\n/**\n * Extracts the user-defined column configuration from the JSON config.\n *\n * @param configJson - the column config JSON from the proto.\n *\n * @returns the user-defined column configuration.\n */\nexport function getColumnConfig(configJson: string): Map<string, any> {\n  if (!configJson) {\n    return new Map()\n  }\n  try {\n    return new Map(Object.entries(JSON.parse(configJson)))\n  } catch (error) {\n    // This is not expected to happen, but if it does, we'll return an empty map\n    // and log the error to the console.\n    logError(error)\n    return new Map()\n  }\n}\n\ntype ColumnLoaderReturn = {\n  columns: BaseColumn[]\n}\n\n/**\n * Get the column type (creator class of column type) for the given column properties.\n *\n * @param column - The column properties.\n *\n * @returns the column creator of the corresponding column type.\n */\nexport function getColumnType(column: BaseColumnProps): ColumnCreator {\n  const customType = column.columnTypeOptions?.type as string\n  // Create a column instance based on the column properties\n  let ColumnType: ColumnCreator | undefined\n  if (notNullOrUndefined(customType)) {\n    if (ColumnTypes.has(customType)) {\n      ColumnType = ColumnTypes.get(customType)\n    } else {\n      logWarning(\n        `Unknown column type configured in column configuration: ${customType}`\n      )\n    }\n  }\n  if (isNullOrUndefined(ColumnType)) {\n    // Load based on arrow type\n    ColumnType = getColumnTypeFromArrow(column.arrowType)\n  }\n  return ColumnType\n}\n\n/**\n * Custom hook that handles loads and configures all table columns from the Arrow table.\n *\n * @param element - The proto message of the dataframe element\n * @param data - The Arrow data extracted from the proto message\n * @param disabled - Whether the widget is disabled\n *\n * @returns the columns and the cell content getter compatible with glide-data-grid.\n */\nfunction useColumnLoader(\n  element: ArrowProto,\n  data: Quiver,\n  disabled: boolean\n): ColumnLoaderReturn {\n  const theme: EmotionTheme = useTheme()\n\n  const columnConfigMapping = React.useMemo(() => {\n    return getColumnConfig(element.columns)\n  }, [element.columns])\n\n  const stretchColumns: boolean =\n    element.useContainerWidth ||\n    (notNullOrUndefined(element.width) && element.width > 0)\n\n  // Converts the columns from Arrow into columns compatible with glide-data-grid\n  const columns: BaseColumn[] = React.useMemo(() => {\n    let configuredColumns = getAllColumnsFromArrow(data)\n      .map(column => {\n        // Apply column configurations\n        let updatedColumn = {\n          ...column,\n          ...applyColumnConfig(column, columnConfigMapping),\n          isStretched: stretchColumns,\n        } as BaseColumnProps\n\n        const ColumnType = getColumnType(updatedColumn)\n\n        // Make sure editing is deactivated if the column is read-only, disabled,\n        // or a not editable type.\n        if (\n          element.editingMode === ArrowProto.EditingMode.READ_ONLY ||\n          disabled ||\n          ColumnType.isEditableType === false\n        ) {\n          updatedColumn = {\n            ...updatedColumn,\n            isEditable: false,\n          }\n        }\n\n        if (\n          element.editingMode !== ArrowProto.EditingMode.READ_ONLY &&\n          updatedColumn.isEditable == true\n        ) {\n          // Set editable icon for all editable columns:\n          updatedColumn = {\n            ...updatedColumn,\n            icon: \"editable\",\n          }\n\n          // Make sure that required columns are not hidden when editing mode is dynamic:\n          if (\n            updatedColumn.isRequired &&\n            element.editingMode === ArrowProto.EditingMode.DYNAMIC\n          ) {\n            updatedColumn = {\n              ...updatedColumn,\n              isHidden: false,\n            }\n          }\n        }\n\n        return ColumnType(updatedColumn, theme)\n      })\n      .filter(column => {\n        // Filter out all columns that are hidden\n        return !column.isHidden\n      })\n\n    // Reorder columns based on the user configuration:\n    if (element.columnOrder && element.columnOrder.length > 0) {\n      const orderedColumns: BaseColumn[] = []\n\n      // Add all index columns to the beginning of the list:\n      configuredColumns.forEach(column => {\n        if (column.isIndex) {\n          orderedColumns.push(column)\n        }\n      })\n\n      // Reorder non-index columns based on the configured column order:\n      element.columnOrder.forEach(columnName => {\n        const column = configuredColumns.find(\n          column => column.name === columnName\n        )\n        if (column && !column.isIndex) {\n          orderedColumns.push(column)\n        }\n      })\n\n      configuredColumns = orderedColumns\n    }\n\n    // If all columns got filtered out, we add an empty index column\n    // to prevent errors from glide-data-grid.\n    return configuredColumns.length > 0\n      ? configuredColumns\n      : [ObjectColumn(getEmptyIndexColumn())]\n  }, [\n    data,\n    columnConfigMapping,\n    stretchColumns,\n    disabled,\n    element.editingMode,\n    element.columnOrder,\n    theme,\n  ])\n\n  return {\n    columns,\n  }\n}\n\nexport default useColumnLoader\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GridCell } from \"@glideapps/glide-data-grid\"\n\nimport {\n  notNullOrUndefined,\n  isNullOrUndefined,\n} from \"@streamlit/lib/src/util/utils\"\n\nimport { BaseColumn, isMissingValueCell } from \"./columns\"\nimport { INDEX_IDENTIFIER } from \"./hooks/useColumnLoader\"\n\n/**\n * Get the column name for a given column to use in the widget state.\n * This is either the column name or the index identifier for index columns.\n */\nexport function getColumnName(column: BaseColumn): string {\n  // TODO(lukasmasuch): We need to adapt this once we want to support multi-index columns.\n  return column.isIndex\n    ? INDEX_IDENTIFIER\n    : isNullOrUndefined(column.name)\n    ? \"\"\n    : column.name\n}\n\n/**\n * The editing state keeps track of all table edits applied by the user.\n */\nclass EditingState {\n  // row -> column -> GridCell\n  // Using [number, number] as a key for a Map would not work.\n  private editedCells: Map<number, Map<number, GridCell>> = new Map()\n\n  // List of rows represented by of column -> GridCell mappings\n  private addedRows: Array<Map<number, GridCell>> = []\n\n  // List of deleted row IDs\n  private deletedRows: number[] = []\n\n  // The original number of rows in the table (without potential additions & deletions)\n  private numRows = 0\n\n  constructor(numRows: number) {\n    this.numRows = numRows\n  }\n\n  /**\n   * Convert the current editing state to a JSON string.\n   *\n   * @param columns - The columns of the table\n   * @returns JSON string\n   */\n  toJson(columns: BaseColumn[]): string {\n    const columnsByIndex = new Map<number, BaseColumn>()\n    columns.forEach(column => {\n      columnsByIndex.set(column.indexNumber, column)\n    })\n\n    const currentState = {\n      // We use snake case here since this is the widget state\n      // that is sent and used in the backend. Therefore, it should\n      // conform with the Python naming conventions.\n      edited_rows: {} as Record<number, Record<string, any>>,\n      added_rows: [] as Record<string, any>[],\n      deleted_rows: [] as number[],\n    }\n\n    // Loop through all edited cells and transform into the structure\n    // we use for the JSON-compatible widget state:\n    // row position -> column name -> edited value\n    this.editedCells.forEach(\n      (row: Map<number, GridCell>, rowIndex: number, _map) => {\n        const editedRow: Record<string, any> = {}\n        row.forEach((cell: GridCell, colIndex: number, _map) => {\n          const column = columnsByIndex.get(colIndex)\n          if (column) {\n            editedRow[getColumnName(column)] = column.getCellValue(cell)\n          }\n        })\n        currentState.edited_rows[rowIndex] = editedRow\n      }\n    )\n\n    // Loop through all added rows and transform into the format that\n    // we use for the JSON-compatible widget state:\n    // List of column name -> edited value\n    this.addedRows.forEach((row: Map<number, GridCell>) => {\n      const addedRow: Record<string, any> = {}\n      // This flags is used to check if the row is incomplete\n      // (i.e. missing required values) and should therefore not be included in\n      // the current state version.\n      let isIncomplete = false\n      row.forEach((cell: GridCell, colIndex: number, _map) => {\n        const column = columnsByIndex.get(colIndex)\n        if (column) {\n          const cellValue = column.getCellValue(cell)\n\n          if (\n            column.isRequired &&\n            column.isEditable &&\n            isMissingValueCell(cell)\n          ) {\n            // If the cell is missing a required value, the row is incomplete\n            isIncomplete = true\n          }\n\n          if (notNullOrUndefined(cellValue)) {\n            addedRow[getColumnName(column)] = cellValue\n          }\n        }\n      })\n      if (!isIncomplete) {\n        currentState.added_rows.push(addedRow)\n      }\n    })\n\n    // The deleted rows don't need to be transformed\n    currentState.deleted_rows = this.deletedRows\n\n    // Convert undefined values to null, otherwise this is removed here since\n    // undefined does not exist in JSON.\n    const json = JSON.stringify(currentState, (_k, v) =>\n      v === undefined ? null : v\n    )\n    return json\n  }\n\n  /**\n   * Load the editing state from a JSON string.\n   *\n   * @param columns - The columns of the table\n   * @returns JSON string\n   */\n  fromJson(editingStateJson: string, columns: BaseColumn[]): void {\n    // Clear existing state:\n    this.editedCells = new Map()\n    this.addedRows = []\n    this.deletedRows = []\n\n    // Parse JSON editing string:\n    const editingState = JSON.parse(editingStateJson)\n    // Map columns to column index\n    const columnsByIndex = new Map<number, BaseColumn>()\n    columns.forEach(column => {\n      columnsByIndex.set(column.indexNumber, column)\n    })\n\n    // Map column name to columns\n    const columnsByName = new Map<string, BaseColumn>()\n    columns.forEach(column => {\n      columnsByName.set(getColumnName(column), column)\n    })\n\n    // Loop through all edited cells and transform into the structure\n    // we use for the editing state:\n    // row -> column -> GridCell\n    Object.keys(editingState.edited_rows).forEach(key => {\n      const rowIndex = Number(key)\n      const editedRow = editingState.edited_rows[key]\n      Object.keys(editedRow).forEach((colName: string) => {\n        const cellValue = editedRow[colName]\n        const column = columnsByName.get(colName)\n        if (column) {\n          const cell = column.getCell(cellValue)\n          if (cell) {\n            if (!this.editedCells.has(rowIndex)) {\n              this.editedCells.set(rowIndex, new Map())\n            }\n            this.editedCells.get(rowIndex)?.set(column.indexNumber, cell)\n          }\n        }\n      })\n    })\n\n    // Loop through all added rows and transform into the format that\n    // we use for the editing state:\n    // List of column index -> edited value\n    editingState.added_rows.forEach((row: Record<string, any>) => {\n      const addedRow: Map<number, GridCell> = new Map()\n      // Initialize all columns with null (empty) values first\n      // This is necessary to ensure that all columns are present in the added row.\n      // We will overwrite the empty values with the actual values below\n      // if the actual value exists. We need to do this since we are only\n      // putting none-empty values in the widget state for optimization reasons.\n      columns.forEach(column => {\n        addedRow.set(column.indexNumber, column.getCell(null))\n      })\n\n      // Set the cells that were actually edited in the row\n      Object.keys(row).forEach(colName => {\n        const cellValue = row[colName]\n\n        const column = columnsByName.get(colName)\n\n        if (column) {\n          const cell = column.getCell(cellValue)\n          if (cell) {\n            addedRow.set(column.indexNumber, cell)\n          }\n        }\n      })\n      this.addedRows.push(addedRow)\n    })\n\n    // The deleted rows don't need to be transformed\n    this.deletedRows = editingState.deleted_rows\n  }\n\n  /**\n   * Returns true if the given row was added by the user through the UI.\n   */\n  isAddedRow(row: number): boolean {\n    return row >= this.numRows\n  }\n\n  /**\n   * Returns the cell at the given column and row,\n   * in case the cell was edited or added.\n   *\n   * @param col - The column index\n   * @param row - The row index\n   *\n   * @returns The edited cell at the given column and row\n   */\n  getCell(col: number, row: number): GridCell | undefined {\n    if (this.isAddedRow(row)) {\n      // Added rows have their own editing state\n      return this.addedRows[row - this.numRows].get(col)\n    }\n\n    const rowCache = this.editedCells.get(row)\n    if (rowCache === undefined) {\n      return undefined\n    }\n\n    return rowCache.get(col)\n  }\n\n  /**\n   * Adds a cell to the editing state for the given column and row index.\n   *\n   * @param col - The column index\n   * @param row - The row index\n   * @param cell - The cell to add to the editing state\n   */\n  setCell(col: number, row: number, cell: GridCell): void {\n    if (this.isAddedRow(row)) {\n      if (row - this.numRows >= this.addedRows.length) {\n        // Added row does not exist. This is only expected to happen\n        // in relation to a trailing row issue in glide-data-grid.\n        return\n      }\n      // Added rows have their own editing state\n      this.addedRows[row - this.numRows].set(col, cell)\n    } else {\n      if (this.editedCells.get(row) === undefined) {\n        this.editedCells.set(row, new Map())\n      }\n\n      const rowCache = this.editedCells.get(row) as Map<number, GridCell>\n      rowCache.set(col, cell)\n    }\n  }\n\n  /**\n   * Adds a new row to the editing state.\n   *\n   * @param rowCells - The cells of the row to add\n   */\n  addRow(rowCells: Map<number, GridCell>): void {\n    this.addedRows.push(rowCells)\n  }\n\n  /**\n   * Deletes the given rows from the editing state.\n   *\n   * @param rows - The rows to delete\n   */\n  deleteRows(rows: number[]): void {\n    // Delete row one by one starting from the row with the highest index\n    rows\n      .sort((a, b) => b - a)\n      .forEach(row => {\n        this.deleteRow(row)\n      })\n  }\n\n  /**\n   * Deletes the given row from the editing state.\n   *\n   * @param row - The row to delete\n   */\n  deleteRow(row: number): void {\n    if (isNullOrUndefined(row) || row < 0) {\n      // This should never happen\n      return\n    }\n\n    if (this.isAddedRow(row)) {\n      // Remove from added rows:\n      this.addedRows.splice(row - this.numRows, 1)\n      // there is nothing more we have to do\n      return\n    }\n\n    if (!this.deletedRows.includes(row)) {\n      // Add to the set\n      this.deletedRows.push(row)\n      // Sort the deleted rows (important for calculation of the original row index)\n      this.deletedRows = this.deletedRows.sort((a, b) => a - b)\n    }\n\n    // Remove all cells from cell state associated with this row:\n    this.editedCells.delete(row)\n  }\n\n  /**\n   * Returns the original row index of the given row.\n   * Since the user can delete rows, the original row index and the\n   * current one can diverge.\n   *\n   * @param row - The row index from the current state\n   *\n   * @returns The original row index\n   */\n  getOriginalRowIndex(row: number): number {\n    // Just count all deleted rows before this row to determine the original row index:\n    let originalIndex = row\n    for (let i = 0; i < this.deletedRows.length; i++) {\n      if (this.deletedRows[i] > originalIndex) {\n        break\n      }\n      originalIndex += 1\n    }\n    return originalIndex\n  }\n\n  /**\n   * Returns the total number of rows of the current state.\n   */\n  getNumRows(): number {\n    return this.numRows + this.addedRows.length - this.deletedRows.length\n  }\n}\n\nexport default EditingState\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\"\n\nimport { transparentize } from \"color2k\"\nimport { Theme as GlideTheme, SpriteMap } from \"@glideapps/glide-data-grid\"\nimport { useTheme } from \"@emotion/react\"\n\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\n\ntype CustomThemeReturn = {\n  theme: Partial<GlideTheme>\n  tableBorderRadius: string\n  headerIcons: SpriteMap\n}\n\n/**\n * Creates a glide-data-grid compatible theme based on our theme configuration.\n *\n * @return a glide-data-grid compatible theme.\n */\nfunction useCustomTheme(): CustomThemeReturn {\n  const theme: EmotionTheme = useTheme()\n\n  const headerIcons = React.useMemo<SpriteMap>(() => {\n    return {\n      // Material design icon `edit_note`:\n      // https://fonts.google.com/icons?selected=Material%20Symbols%20Outlined%3Aedit_note%3AFILL%400%3Bwght%40400%3BGRAD%400%3Bopsz%4048\n      // We need to provide this as string as explained explained here: https://github.com/glideapps/glide-data-grid/blob/main/packages/core/API.md#headericons\n      editable: p =>\n        `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"40\" viewBox=\"0 96 960 960\" width=\"40\" fill=\"${p.bgColor}\"><path d=\"m800.641 679.743-64.384-64.384 29-29q7.156-6.948 17.642-6.948 10.485 0 17.742 6.948l29 29q6.948 7.464 6.948 17.95 0 10.486-6.948 17.434l-29 29Zm-310.64 246.256v-64.383l210.82-210.821 64.384 64.384-210.821 210.82h-64.383Zm-360-204.872v-50.254h289.743v50.254H130.001Zm0-162.564v-50.255h454.615v50.255H130.001Zm0-162.307v-50.255h454.615v50.255H130.001Z\"/></svg>`,\n    }\n  }, [])\n\n  const glideTheme = React.useMemo<Partial<GlideTheme>>(() => {\n    return {\n      // Explanations: https://github.com/glideapps/glide-data-grid/blob/main/packages/core/API.md#theme\n      accentColor: theme.colors.primary,\n      accentFg: theme.colors.white,\n      accentLight: transparentize(theme.colors.primary, 0.9),\n      borderColor: theme.colors.fadedText05,\n      horizontalBorderColor: theme.colors.fadedText05,\n      fontFamily: theme.genericFonts.bodyFont,\n      bgSearchResult: transparentize(theme.colors.primary, 0.9),\n      resizeIndicatorColor: theme.colors.primary,\n      // Header styling:\n      bgIconHeader: theme.colors.fadedText60,\n      fgIconHeader: theme.colors.white,\n      bgHeader: theme.colors.bgMix,\n      bgHeaderHasFocus: theme.colors.secondaryBg,\n      bgHeaderHovered: theme.colors.secondaryBg,\n      textHeader: theme.colors.fadedText60,\n      textHeaderSelected: theme.colors.white,\n      textGroupHeader: theme.colors.fadedText60,\n      headerFontStyle: `${theme.fontSizes.sm}`,\n      // Cell styling:\n      baseFontStyle: theme.fontSizes.sm,\n      editorFontSize: theme.fontSizes.sm,\n      textDark: theme.colors.bodyText,\n      textMedium: transparentize(theme.colors.bodyText, 0.2),\n      textLight: theme.colors.fadedText40,\n      textBubble: theme.colors.fadedText60,\n      bgCell: theme.colors.bgColor,\n      bgCellMedium: theme.colors.bgColor, // uses same as bgCell to always have the same background color\n      cellHorizontalPadding: 8,\n      cellVerticalPadding: 3,\n      // Special cells:\n      bgBubble: theme.colors.secondaryBg,\n      bgBubbleSelected: theme.colors.secondaryBg,\n      linkColor: theme.colors.linkText,\n      drilldownBorder: theme.colors.darkenedBgMix25,\n      // Unused settings:\n      // lineHeight\n      // headerIconSize: number;\n      // markerFontStyle: string;\n      // resizeIndicatorColor?: string;\n      // headerBottomBorderColor?: string;\n    }\n  }, [theme])\n\n  return {\n    theme: glideTheme,\n    tableBorderRadius: theme.radii.default,\n    // Configure custom SVG icons used in the column header:\n    headerIcons,\n  }\n}\n\nexport default useCustomTheme\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport { GridCell, DataEditorProps } from \"@glideapps/glide-data-grid\"\n\nimport { notNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\nimport { Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport { getCellFromArrow } from \"@streamlit/lib/src/components/widgets/DataFrame/arrowUtils\"\nimport EditingState from \"@streamlit/lib/src/components/widgets/DataFrame/EditingState\"\nimport {\n  BaseColumn,\n  getErrorCell,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\n\ntype DataLoaderReturn = Pick<DataEditorProps, \"getCellContent\">\n\n/**\n * Custom hook that handles all data loading capabilities for the interactive data table.\n * This also includes the logic to load and configure columns.\n *\n * @param data - The Arrow data extracted from the proto message\n * @param numRows - The number of rows of the current state (includes row additions/deletions)\n * @param editingState - The editing state of the data editor\n *\n * @returns the columns and the cell content getter compatible with glide-data-grid.\n */\nfunction useDataLoader(\n  data: Quiver,\n  columns: BaseColumn[],\n  numRows: number,\n  editingState: React.MutableRefObject<EditingState>\n): DataLoaderReturn {\n  const getCellContent = React.useCallback(\n    ([col, row]: readonly [number, number]): GridCell => {\n      if (col > columns.length - 1) {\n        return getErrorCell(\n          \"Column index out of bounds.\",\n          \"This should never happen. Please report this bug.\"\n        )\n      }\n\n      if (row > numRows - 1) {\n        return getErrorCell(\n          \"Row index out of bounds.\",\n          \"This should never happen. Please report this bug.\"\n        )\n      }\n      const column = columns[col]\n\n      const originalCol = column.indexNumber\n      const originalRow = editingState.current.getOriginalRowIndex(row)\n      const isAddedRow = editingState.current.isAddedRow(originalRow)\n      // Use editing state if editable or if it is an appended row\n      if (column.isEditable || isAddedRow) {\n        const editedCell = editingState.current.getCell(\n          originalCol,\n          originalRow\n        )\n        if (notNullOrUndefined(editedCell)) {\n          return editedCell\n        } else if (isAddedRow) {\n          // This is not expected to happen. All cells to added rows should\n          // be defined. If not, we return a specific error cell.\n          return getErrorCell(\n            \"Error during cell creation.\",\n            \"This should never happen. Please report this bug. \" +\n              `No cell found for an added row: col=${originalCol}; row=${originalRow}`\n          )\n        }\n      }\n\n      try {\n        // Arrow has the header in first row\n        const arrowCell = data.getCell(originalRow + 1, originalCol)\n        return getCellFromArrow(column, arrowCell, data.cssStyles)\n      } catch (error) {\n        return getErrorCell(\n          \"Error during cell creation.\",\n          `This should never happen. Please report this bug. \\nError: ${error}`\n        )\n      }\n    },\n    [columns, numRows, data, editingState]\n  )\n\n  return {\n    getCellContent,\n  }\n}\n\nexport default useDataLoader\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport {\n  GridColumn,\n  GridCell,\n  DataEditorProps,\n} from \"@glideapps/glide-data-grid\"\nimport { useColumnSort as useGlideColumnSort } from \"@glideapps/glide-data-grid-source\"\n\nimport {\n  BaseColumn,\n  toGlideColumn,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\n\n/**\n * Configuration type for column sorting hook.\n */\ntype ColumnSortConfig = {\n  column: GridColumn\n  mode?: \"default\" | \"raw\" | \"smart\"\n  direction?: \"asc\" | \"desc\"\n}\n\n/**\n * Updates the column headers based on the sorting configuration.\n *\n * @param columns - The columns of the table.\n * @param sort - The current sorting configuration.\n *\n * @returns The updated list of columns.\n */\nfunction updateSortingHeader(\n  columns: BaseColumn[],\n  sort: ColumnSortConfig | undefined\n): BaseColumn[] {\n  if (sort === undefined) {\n    return columns\n  }\n  return columns.map(column => {\n    if (column.id === sort.column.id) {\n      return {\n        ...column,\n        title:\n          sort.direction === \"asc\" ? `↑ ${column.title}` : `↓ ${column.title}`,\n      }\n    }\n    return column\n  })\n}\n\ntype ColumnSortReturn = {\n  columns: BaseColumn[]\n  sortColumn: (index: number) => void\n  getOriginalIndex: (index: number) => number\n} & Pick<DataEditorProps, \"getCellContent\">\n\n/**\n * A React hook that provides column sorting functionality.\n *\n * @param numRows - The number of rows in the table.\n * @param columns - The columns of the table.\n *\n * @returns An object containing the following properties:\n * - `columns`: The updated list of columns.\n * - `sortColumn`: A function that sorts the column at the given index.\n * - `getOriginalIndex`: A function that returns the original index of the row at the given index.\n * - `getCellContent`: An updated function that returns the content of the cell at the given column and row indices.\n */\nfunction useColumnSort(\n  numRows: number,\n  columns: BaseColumn[],\n  getCellContent: ([col, row]: readonly [number, number]) => GridCell\n): ColumnSortReturn {\n  const [sort, setSort] = React.useState<ColumnSortConfig>()\n\n  const { getCellContent: getCellContentSorted, getOriginalIndex } =\n    useGlideColumnSort({\n      columns: columns.map(column => toGlideColumn(column)),\n      getCellContent,\n      rows: numRows,\n      sort,\n    })\n\n  const updatedColumns = React.useMemo(() => {\n    return updateSortingHeader(columns, sort)\n  }, [columns, sort])\n\n  const sortColumn = React.useCallback(\n    (index: number) => {\n      let sortDirection = \"asc\"\n      const clickedColumn = updatedColumns[index]\n\n      if (sort && sort.column.id === clickedColumn.id) {\n        // The clicked column is already sorted\n        if (sort.direction === \"asc\") {\n          // Sort column descending\n          sortDirection = \"desc\"\n        } else {\n          // Remove sorting of column\n          setSort(undefined)\n          return\n        }\n      }\n\n      setSort({\n        column: toGlideColumn(clickedColumn),\n        direction: sortDirection,\n        mode: clickedColumn.sortMode,\n      } as ColumnSortConfig)\n    },\n    [sort, updatedColumns]\n  )\n\n  return {\n    columns: updatedColumns,\n    sortColumn,\n    getOriginalIndex,\n    getCellContent: getCellContentSorted,\n  }\n}\n\nexport default useColumnSort\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport { GridSelection, CompactSelection } from \"@glideapps/glide-data-grid\"\nimport isEqual from \"lodash/isEqual\"\n\nimport { BaseColumn } from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\nimport { Arrow as ArrowProto } from \"@streamlit/lib/src/proto\"\n\nexport type SelectionHandlerReturn = {\n  // The current selection state\n  gridSelection: GridSelection\n  // True, if row selection is activated\n  isRowSelectionActivated: boolean\n  // True, if multi row selection is activated\n  isMultiRowSelectionActivated: boolean\n  // True, if column selection is activated\n  isColumnSelectionActivated: boolean\n  // True, if multi column selections is activated\n  isMultiColumnSelectionActivated: boolean\n  // True, if at least one row is selected\n  isRowSelected: boolean\n  // True, if at least one column is selected\n  isColumnSelected: boolean\n  // True, if at least one cell is selected\n  isCellSelected: boolean\n  // Callback to clear selections\n  clearSelection: (keepRows?: boolean, keepColumns?: boolean) => void\n  // Callback to process selection changes from the grid\n  processSelectionChange: (newSelection: GridSelection) => void\n}\n\n/**\n * Custom hook that handles all selection capabilities for the interactive data table.\n *\n * @param element - The Arrow proto message\n * @param isEmptyTable - Whether the table is empty\n * @param isDisabled - Whether the table is disabled\n * @param columns - The columns of the table.\n * @param syncSelectionState - The callback to sync the selection state\n *\n * @returns the selection handler return object\n */\nfunction useSelectionHandler(\n  element: ArrowProto,\n  isEmptyTable: boolean,\n  isDisabled: boolean,\n  columns: BaseColumn[],\n  syncSelectionState: (newSelection: GridSelection) => void\n): SelectionHandlerReturn {\n  const [gridSelection, setGridSelection] = React.useState<GridSelection>({\n    columns: CompactSelection.empty(),\n    rows: CompactSelection.empty(),\n    current: undefined,\n  })\n\n  const isRowSelectionActivated =\n    !isEmptyTable &&\n    !isDisabled &&\n    (element.selectionMode.includes(ArrowProto.SelectionMode.MULTI_ROW) ||\n      element.selectionMode.includes(ArrowProto.SelectionMode.SINGLE_ROW))\n  const isMultiRowSelectionActivated =\n    isRowSelectionActivated &&\n    element.selectionMode.includes(ArrowProto.SelectionMode.MULTI_ROW)\n\n  const isColumnSelectionActivated =\n    !isEmptyTable &&\n    !isDisabled &&\n    (element.selectionMode.includes(ArrowProto.SelectionMode.SINGLE_COLUMN) ||\n      element.selectionMode.includes(ArrowProto.SelectionMode.MULTI_COLUMN))\n  const isMultiColumnSelectionActivated =\n    isColumnSelectionActivated &&\n    element.selectionMode.includes(ArrowProto.SelectionMode.MULTI_COLUMN)\n\n  const isRowSelected = gridSelection.rows.length > 0\n  const isColumnSelected = gridSelection.columns.length > 0\n  const isCellSelected = gridSelection.current !== undefined\n\n  /**\n   * This callback is used to process selection changes and - if activated -\n   * trigger a sync of the state with the widget state\n   */\n  const processSelectionChange = React.useCallback(\n    (newSelection: GridSelection) => {\n      const rowSelectionChanged = !isEqual(\n        newSelection.rows.toArray(),\n        gridSelection.rows.toArray()\n      )\n\n      const columnSelectionChanged = !isEqual(\n        newSelection.columns.toArray(),\n        gridSelection.columns.toArray()\n      )\n\n      const cellSelectionChanged = !isEqual(\n        newSelection.current,\n        gridSelection.current\n      )\n\n      // A flag to determine if the selection should be synced with the widget state\n      let syncSelection =\n        (isRowSelectionActivated && rowSelectionChanged) ||\n        (isColumnSelectionActivated && columnSelectionChanged)\n\n      let updatedSelection = newSelection\n      if (\n        (isRowSelectionActivated || isColumnSelectionActivated) &&\n        newSelection.current !== undefined &&\n        cellSelectionChanged\n      ) {\n        // The default behavior is that row selections are cleared when a cell is selected.\n        // This is not desired when row selection is activated. Instead, we want to keep the\n        // row selection and only update the cell selection.\n        updatedSelection = {\n          ...newSelection,\n          rows: gridSelection.rows,\n          columns: gridSelection.columns,\n        }\n        // It should not sync the selection\n        // when only the cell selection changes\n        syncSelection = false\n      }\n\n      if (\n        rowSelectionChanged &&\n        newSelection.rows.length > 0 &&\n        columnSelectionChanged &&\n        newSelection.columns.length === 0\n      ) {\n        // Keep the column selection if row selection was changed\n        updatedSelection = {\n          ...updatedSelection,\n          columns: gridSelection.columns,\n        }\n        syncSelection = true\n      }\n      if (\n        columnSelectionChanged &&\n        newSelection.columns.length > 0 &&\n        rowSelectionChanged &&\n        newSelection.rows.length === 0\n      ) {\n        // Keep the row selection if column selection was changed\n        updatedSelection = {\n          ...updatedSelection,\n          rows: gridSelection.rows,\n        }\n\n        syncSelection = true\n      }\n\n      if (columnSelectionChanged && updatedSelection.columns.length >= 0) {\n        // Remove all index columns from the column selection\n        // We don't want to allow selection of index columns.\n        let cleanedColumns = updatedSelection.columns\n        columns.forEach((column, idx) => {\n          if (column.isIndex) {\n            cleanedColumns = cleanedColumns.remove(idx)\n          }\n        })\n        if (cleanedColumns.length < updatedSelection.columns.length) {\n          updatedSelection = {\n            ...updatedSelection,\n            columns: cleanedColumns,\n          }\n        }\n      }\n\n      setGridSelection(updatedSelection)\n\n      if (syncSelection) {\n        syncSelectionState(updatedSelection)\n      }\n    },\n    [\n      gridSelection,\n      isRowSelectionActivated,\n      isColumnSelectionActivated,\n      syncSelectionState,\n      columns,\n    ]\n  )\n\n  /**\n   * This callback is used to selections (row/column/cell)\n   * and sync the state with the widget state if column or row selections\n   * are activated and the selection has changed.\n   *\n   * @param keepRows - Whether to keep the row selection (default: false)\n   * @param keepColumns - Whether to keep the column selection (default: false)\n   */\n  const clearSelection = React.useCallback(\n    (keepRows = false, keepColumns = false) => {\n      const emptySelection: GridSelection = {\n        columns: keepColumns\n          ? gridSelection.columns\n          : CompactSelection.empty(),\n        rows: keepRows ? gridSelection.rows : CompactSelection.empty(),\n        current: undefined,\n      }\n      setGridSelection(emptySelection)\n      if (\n        (!keepRows && isRowSelectionActivated) ||\n        (!keepColumns && isColumnSelectionActivated)\n      ) {\n        syncSelectionState(emptySelection)\n      }\n    },\n    [\n      gridSelection,\n      isRowSelectionActivated,\n      isColumnSelectionActivated,\n      syncSelectionState,\n    ]\n  )\n\n  return {\n    gridSelection,\n    isRowSelectionActivated,\n    isMultiRowSelectionActivated,\n    isColumnSelectionActivated,\n    isMultiColumnSelectionActivated,\n    isRowSelected,\n    isColumnSelected,\n    isCellSelected,\n    clearSelection,\n    processSelectionChange,\n  }\n}\n\nexport default useSelectionHandler\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport { DataEditorProps } from \"@glideapps/glide-data-grid\"\n\nimport {\n  BaseColumn,\n  toSafeString,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\nimport { isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\nimport { logError, logWarning } from \"@streamlit/lib/src/util/log\"\n\n// Delimiter between cells\nconst CSV_DELIMITER = \",\"\n// Quote character for cell values containing special characters\nconst CSV_QUOTE_CHAR = '\"'\n// The character used to escape the quote character within a cell\nconst CSV_ESCAPE_CHAR = '\"'\n// Delimiter between rows (newline)\nconst CSV_ROW_DELIMITER = \"\\n\"\n// Used to indicate Unicode encoding of a text file (for excel compatibility)\nconst CSV_UTF8_BOM = \"\\ufeff\"\n// Regex to check if a value contains special characters that need to be escaped\nconst CSV_SPECIAL_CHARS_REGEX = new RegExp(\n  `[${[CSV_DELIMITER, CSV_QUOTE_CHAR, CSV_ROW_DELIMITER].join(\"\")}]`\n)\n\nexport function toCsvRow(rowValues: any[]): string {\n  return (\n    rowValues.map(cell => escapeValue(cell)).join(CSV_DELIMITER) +\n    CSV_ROW_DELIMITER\n  )\n}\n\n/**\n * Escapes a cell value for CSV export.\n *\n * Makes sure that the value is a string, and special characters are escaped correctly.\n */\nfunction escapeValue(value: any): string {\n  if (isNullOrUndefined(value)) {\n    return \"\"\n  }\n  const strValue = toSafeString(value)\n\n  // Special chars need to be escaped:\n  if (CSV_SPECIAL_CHARS_REGEX.test(strValue)) {\n    // Add quotes around the value:\n    return `${CSV_QUOTE_CHAR}${strValue.replace(\n      // Escape all quote chars if inside a quoted string:\n      new RegExp(CSV_QUOTE_CHAR, \"g\"),\n      CSV_ESCAPE_CHAR + CSV_QUOTE_CHAR\n    )}${CSV_QUOTE_CHAR}`\n  }\n\n  return strValue\n}\n\ntype DataExporterReturn = {\n  // A callback to trigger the data download as CSV\n  exportToCsv: () => void\n}\n\n/**\n * Writes CSV data to a specified writable stream using provided data table parameters.\n * Initiates by writing a UTF-8 Byte Order Mark (BOM) for Excel compatibility, followed by\n * column headers and rows constructed from the cell values obtained through `getCellContent`.\n * The function handles encoding and CSV formatting, concluding by closing the writable stream.\n *\n * @param {WritableStreamDefaultWriter} writable - Target stream for CSV data.\n * @param {DataEditorProps[\"getCellContent\"]} getCellContent - The cell content getter compatible with glide-data-grid.\n * @param {BaseColumn[]} columns - The columns of the table.\n * @param {number} numRows - The number of rows of the current state.\n *\n * @returns {Promise<void>} Promise that resolves when the CSV has been fully written.\n */\nasync function writeCsv(\n  writable: WritableStreamDefaultWriter,\n  getCellContent: DataEditorProps[\"getCellContent\"],\n  columns: BaseColumn[],\n  numRows: number\n): Promise<void> {\n  const textEncoder = new TextEncoder()\n\n  // Write UTF-8 BOM for excel compatibility:\n  await writable.write(textEncoder.encode(CSV_UTF8_BOM))\n\n  // Write headers:\n  const headers: string[] = columns.map(column => column.name)\n  await writable.write(textEncoder.encode(toCsvRow(headers)))\n\n  for (let row = 0; row < numRows; row++) {\n    const rowData: any[] = []\n    columns.forEach((column: BaseColumn, col: number, _map) => {\n      rowData.push(column.getCellValue(getCellContent([col, row])))\n    })\n    // Write row to CSV:\n    await writable.write(textEncoder.encode(toCsvRow(rowData)))\n  }\n\n  await writable.close()\n}\n/**\n * Custom hook that handles all the data export/download logic.\n *\n * @param getCellContent - The cell content getter compatible with glide-data-grid.\n * @param columns - The columns of the table.\n * @param numRows - The number of rows of the current state.\n *\n * @returns a callback to trigger the data download as CSV.\n */\nfunction useDataExporter(\n  getCellContent: DataEditorProps[\"getCellContent\"],\n  columns: BaseColumn[],\n  numRows: number,\n  enforceDownloadInNewTab: boolean\n): DataExporterReturn {\n  const exportToCsv = React.useCallback(async () => {\n    const timestamp = new Date().toISOString().slice(0, 16).replace(\":\", \"-\")\n    const suggestedName = `${timestamp}_export.csv`\n    try {\n      // Lazy import to prevent weird breakage in some niche cases\n      // (e.g. usage within the replay.io browser). The package works well\n      // in all of the common browser, but might cause some trouble in\n      // less common browsers. To not crash the whole app, we just lazy import\n      // this here.\n      const nativeFileSystemAdapter = await import(\n        \"native-file-system-adapter\"\n      )\n      const fileHandle = await nativeFileSystemAdapter.showSaveFilePicker({\n        suggestedName,\n        types: [{ accept: { \"text/csv\": [\".csv\"] } }],\n        excludeAcceptAllOption: false,\n      })\n\n      const writer = await fileHandle.createWritable()\n\n      await writeCsv(writer, getCellContent, columns, numRows)\n    } catch (error) {\n      if (error instanceof Error && error.name === \"AbortError\") {\n        // The user has canceled the save dialog. Do nothing.\n        return\n      }\n\n      try {\n        logWarning(\n          \"Failed to export data as CSV with FileSystem API, trying fallback method\",\n          error\n        )\n        // Simulated WritableStream that builds CSV content in-memory for the Blob fallback method\n        let csvContent = \"\"\n\n        const inMemoryWriter = new WritableStream({\n          write: async chunk => {\n            csvContent += new TextDecoder(\"utf-8\").decode(chunk)\n          },\n          close: async () => {},\n        })\n\n        await writeCsv(\n          inMemoryWriter.getWriter(),\n          getCellContent,\n          columns,\n          numRows\n        )\n\n        // Fallback to the old browser download method:\n        const blob = new Blob([csvContent], {\n          type: \"text/csv;charset=utf-8;\",\n        })\n        const url = URL.createObjectURL(blob)\n        const link = document.createElement(\"a\")\n        // Open the download link in a new tab to ensure that this is working in embedded\n        // setups that limit the URL that an iframe can navigate to (e.g. via CSP)\n        if (enforceDownloadInNewTab) {\n          link.setAttribute(\"target\", \"_blank\")\n        } else {\n          link.setAttribute(\"target\", \"_self\")\n        }\n\n        link.style.display = \"none\"\n        link.href = url\n        link.download = suggestedName\n        document.body.appendChild(link) // Required for FF\n        link.click()\n        document.body.removeChild(link) // Clean up\n        URL.revokeObjectURL(url) // Free up memory\n      } catch (error) {\n        logError(\"Failed to export data as CSV\", error)\n      }\n    }\n  }, [columns, numRows, getCellContent, enforceDownloadInNewTab])\n\n  return {\n    exportToCsv,\n  }\n}\n\nexport default useDataExporter\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport {\n  EditableGridCell,\n  GridCell,\n  DataEditorProps,\n  GridSelection,\n  Item,\n  ValidatedGridCell,\n} from \"@glideapps/glide-data-grid\"\n\nimport { logWarning } from \"@streamlit/lib/src/util/log\"\nimport { notNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\nimport {\n  BaseColumn,\n  isErrorCell,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\nimport EditingState from \"@streamlit/lib/src/components/widgets/DataFrame/EditingState\"\n\n/**\n * Create return type for useDataLoader hook based on the DataEditorProps.\n */\ntype DataEditorReturn = Pick<\n  DataEditorProps,\n  \"onCellEdited\" | \"onPaste\" | \"onRowAppended\" | \"onDelete\" | \"validateCell\"\n>\n\n/**\n * Custom hook to handle all aspects related to data editing. This includes editing cells,\n * pasting from clipboard, and appending & deleting rows.\n *\n * @param columns - The columns of the table.\n * @param fixedNumRows - Whether the number of rows is fixed. This means that rows cannot be added or deleted.\n * @param editingState - The editing state of the data editor.\n * @param getCellContent - Function to get a specific cell.\n * @param getOriginalIndex - Function to map a row ID of the current state to the original row ID.\n *                           This mainly changed by sorting of columns.\n * @param updateNumRows - Callback to sync the number of rows from editing state with the component state.\n * @param refreshCells - Callback that allows to trigger a UI refresh of a selection of cells.\n * @param syncEditState - Callback that needs to be called on all edits. This will also trigger a rerun\n *                     and send widget state to the backend.\n *\n * @returns Glide-data-grid compatible functions for editing capabilities.\n */\nfunction useDataEditor(\n  columns: BaseColumn[],\n  fixedNumRows: boolean,\n  editingState: React.MutableRefObject<EditingState>,\n  getCellContent: ([col, row]: readonly [number, number]) => GridCell,\n  getOriginalIndex: (index: number) => number,\n  refreshCells: (\n    cells: {\n      cell: [number, number]\n    }[]\n  ) => void,\n  updateNumRows: () => void,\n  syncEditState: () => void,\n  clearSelection: () => void\n): DataEditorReturn {\n  const onCellEdited = React.useCallback(\n    (\n      [col, row]: readonly [number, number],\n      updatedCell: EditableGridCell\n    ): void => {\n      const column = columns[col]\n\n      if (!column.isEditable) {\n        return\n      }\n\n      const originalCol = column.indexNumber\n\n      // We need to apply two different mappings here. One for the case that\n      // the user has sorted a column, and another one from the editing state\n      // to get the correct row ID when the user has deleted rows.\n      const originalRow = editingState.current.getOriginalRowIndex(\n        getOriginalIndex(row)\n      )\n      const currentCell = getCellContent([col, row])\n      const currentValue = column.getCellValue(currentCell)\n      const newValue = column.getCellValue(updatedCell)\n      if (!isErrorCell(currentCell) && newValue === currentValue) {\n        // No editing is required since the values did not change\n        return\n      }\n\n      const newCell = column.getCell(newValue, true)\n      // Only update the cell if the new cell is not causing any errors:\n      if (!isErrorCell(newCell)) {\n        editingState.current.setCell(originalCol, originalRow, {\n          ...newCell,\n          lastUpdated: performance.now(),\n        })\n\n        syncEditState()\n      } else {\n        logWarning(\n          `Not applying the cell edit since it causes this error:\\n ${newCell.data}`\n        )\n      }\n    },\n    [columns, editingState, getOriginalIndex, getCellContent, syncEditState]\n  )\n\n  /**\n   * Appends a new empty row to the end of the table.\n   */\n  const appendEmptyRow = React.useCallback(() => {\n    if (fixedNumRows) {\n      // Appending rows is not supported\n      return\n    }\n\n    const newRow: Map<number, GridCell> = new Map()\n    columns.forEach(column => {\n      // For the default value, we trust the developer to make a valid choice,\n      // so we do not validate the value here.\n      newRow.set(column.indexNumber, column.getCell(column.defaultValue))\n    })\n    editingState.current.addRow(newRow)\n    updateNumRows()\n  }, [columns, editingState, fixedNumRows, updateNumRows])\n\n  /**\n   * Callback used by glide-data-grid when the user adds a new row in the table UI.\n   */\n  const onRowAppended = React.useCallback(() => {\n    if (fixedNumRows) {\n      // Appending rows is not supported\n      return\n    }\n\n    appendEmptyRow()\n    syncEditState()\n  }, [appendEmptyRow, syncEditState, fixedNumRows])\n\n  /**\n   * Callback used by glide-data-grid when the user deletes a row or cell value in the table UI.\n   */\n  const onDelete = React.useCallback(\n    (selection: GridSelection): GridSelection | boolean => {\n      if (selection.rows.length > 0) {\n        // User has selected one or more rows\n        if (fixedNumRows) {\n          // Deleting rows is not supported\n          return true\n        }\n\n        const rowsToDelete = selection.rows.toArray().map(row => {\n          return editingState.current.getOriginalRowIndex(\n            getOriginalIndex(row)\n          )\n        })\n        // We need to delete all rows at once, so that the indexes work correct\n        editingState.current.deleteRows(rowsToDelete)\n        updateNumRows()\n        clearSelection()\n        syncEditState()\n        return false\n      }\n      if (selection.current?.range) {\n        // User has selected one or more cells\n        const updatedCells: { cell: [number, number] }[] = []\n        const selectedArea = selection.current.range\n        for (\n          let row = selectedArea.y;\n          row < selectedArea.y + selectedArea.height;\n          row++\n        ) {\n          for (\n            let col = selectedArea.x;\n            col < selectedArea.x + selectedArea.width;\n            col++\n          ) {\n            const column = columns[col]\n            // Only allow deletion if the column is editable and not configured as required\n            if (column.isEditable && !column.isRequired) {\n              updatedCells.push({\n                cell: [col, row],\n              })\n              onCellEdited(\n                [col, row],\n                column.getCell(null) as EditableGridCell\n              )\n            }\n          }\n        }\n\n        if (updatedCells.length > 0) {\n          syncEditState()\n          refreshCells(updatedCells)\n        }\n        return false\n      }\n      return true\n    },\n    [\n      columns,\n      editingState,\n      fixedNumRows,\n      refreshCells,\n      getOriginalIndex,\n      syncEditState,\n      onCellEdited,\n      clearSelection,\n      updateNumRows,\n    ]\n  )\n\n  /**\n   * Callback used by glide-data-grid when the user pastes data into the table.\n   */\n  const onPaste = React.useCallback(\n    (target: Item, values: readonly (readonly string[])[]): boolean => {\n      const [targetCol, targetRow] = target\n\n      const updatedCells: { cell: [number, number] }[] = []\n\n      for (let row = 0; row < values.length; row++) {\n        const rowData = values[row]\n        if (row + targetRow >= editingState.current.getNumRows()) {\n          if (fixedNumRows) {\n            // Only add new rows if editing mode is dynamic, otherwise break here\n            break\n          }\n          // Adding rows during paste would not work currently. However, we already disallow\n          // sorting in dynamic mode, so we don't have to do anything here.\n          appendEmptyRow()\n        }\n        for (let col = 0; col < rowData.length; col++) {\n          const pasteDataValue = rowData[col]\n\n          const rowIndex = row + targetRow\n          const colIndex = col + targetCol\n\n          if (colIndex >= columns.length) {\n            // We could potentially add new columns here in the future.\n            break\n          }\n\n          const column = columns[colIndex]\n          // Only add to columns that are editable:\n          if (column.isEditable) {\n            const newCell = column.getCell(pasteDataValue, true)\n\n            // We are not editing cells if the pasted value leads to an error:\n            if (notNullOrUndefined(newCell) && !isErrorCell(newCell)) {\n              const originalCol = column.indexNumber\n              const originalRow = editingState.current.getOriginalRowIndex(\n                getOriginalIndex(rowIndex)\n              )\n              const currentValue = column.getCellValue(\n                getCellContent([colIndex, rowIndex])\n              )\n              const newValue = column.getCellValue(newCell)\n              // Edit the cell only if the value actually changed:\n              if (newValue !== currentValue) {\n                editingState.current.setCell(originalCol, originalRow, {\n                  ...newCell,\n                  lastUpdated: performance.now(),\n                })\n\n                updatedCells.push({\n                  cell: [colIndex, rowIndex],\n                })\n              }\n            }\n          }\n        }\n\n        if (updatedCells.length > 0) {\n          syncEditState()\n          refreshCells(updatedCells)\n        }\n      }\n\n      return false\n    },\n    [\n      columns,\n      editingState,\n      fixedNumRows,\n      getOriginalIndex,\n      getCellContent,\n      appendEmptyRow,\n      syncEditState,\n      refreshCells,\n    ]\n  )\n\n  /**\n   * Callback used by glide-data-grid to validate the data inputted into a cell by the user.\n   */\n  const validateCell = React.useCallback(\n    (cell: Item, newValue: EditableGridCell) => {\n      const col = cell[0]\n      if (col >= columns.length) {\n        // This should never happen.\n        // But we return true (default) to avoid any unknown issues.\n        return true\n      }\n\n      const column = columns[col]\n      if (column.validateInput) {\n        // We get the actual raw value of the new cell and\n        // validate it based on the column validateInput implementation:\n        const validationResult = column.validateInput(\n          column.getCellValue(newValue)\n        )\n        if (validationResult === true || validationResult === false) {\n          // Only return if the validation result is a valid boolean value (true or false)\n          // validationResult can also be other values, so we need to check this specifically.\n          return validationResult\n        }\n        // If it is any other value, we return it as a corrected cell:\n        return column.getCell(validationResult) as ValidatedGridCell\n      }\n      // If no validation is implemented, we accept the value:\n      return true\n    },\n    [columns]\n  )\n\n  return {\n    onCellEdited,\n    onPaste,\n    onRowAppended,\n    onDelete,\n    validateCell,\n  }\n}\n\nexport default useDataEditor\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport {\n  GridCell,\n  DataEditorProps,\n  GridMouseEventArgs,\n} from \"@glideapps/glide-data-grid\"\n\nimport { notNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\nimport {\n  BaseColumn,\n  hasTooltip,\n  isMissingValueCell,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\n\n// Debounce time for triggering the tooltip on hover.\nexport const DEBOUNCE_TIME_MS = 600\n// Tooltip message for required cells that are empty.\nexport const REQUIRED_CELL_TOOLTIP = \"⚠️ Please fill out this cell.\"\n\nexport type TooltipsReturn = {\n  // The tooltip to show (if any):\n  tooltip: { content: string; left: number; top: number } | undefined\n  // A callback to clear the tooltip:\n  clearTooltip: () => void\n  // The glide-data-grid function that is called when a cell is hovered:\n} & Pick<DataEditorProps, \"onItemHovered\">\n\n/**\n * Hook that can show a tooltip when hovering over a cell or header if configured.\n *\n * The tooltip is shown after a delay, and is cleared when the user clicks outside,\n * fires escape, or moves outside of the target cell.\n *\n * @param columns columns of the datagrid\n * @param getCellContent function that returns the cell content for a given cell position\n * @returns the tooltip to show (if any), a callback to clear the tooltip, and the\n * onItemHovered callback to pass to the datagrid\n */\nfunction useTooltips(\n  columns: BaseColumn[],\n  getCellContent: ([col, row]: readonly [number, number]) => GridCell\n): TooltipsReturn {\n  const [tooltip, setTooltip] = React.useState<\n    { content: string; left: number; top: number } | undefined\n  >()\n  const timeoutRef = React.useRef<any>(null)\n\n  const onItemHovered = React.useCallback(\n    (args: GridMouseEventArgs) => {\n      // Always reset the tooltips on any change here\n      clearTimeout(timeoutRef.current)\n      timeoutRef.current = 0\n      setTooltip(undefined)\n\n      if ((args.kind === \"header\" || args.kind === \"cell\") && args.location) {\n        const colIdx = args.location[0]\n        const rowIdx = args.location[1]\n        let tooltipContent: string | undefined\n\n        if (colIdx < 0 || colIdx >= columns.length) {\n          // Ignore negative column index (Row index column)\n          // and column index that is out of bounds\n          return\n        }\n\n        const column = columns[colIdx]\n\n        if (args.kind === \"header\" && notNullOrUndefined(column)) {\n          tooltipContent = column.help\n        } else if (args.kind === \"cell\") {\n          // TODO(lukasmasuch): Ignore the last row if num_rows=dynamic (trailing row).\n\n          const cell = getCellContent([colIdx, rowIdx])\n          if (\n            column.isRequired &&\n            column.isEditable &&\n            isMissingValueCell(cell)\n          ) {\n            tooltipContent = REQUIRED_CELL_TOOLTIP\n          } else if (hasTooltip(cell)) {\n            tooltipContent = cell.tooltip\n          }\n        }\n\n        if (tooltipContent) {\n          timeoutRef.current = setTimeout(() => {\n            if (tooltipContent) {\n              setTooltip({\n                content: tooltipContent,\n                left: args.bounds.x + args.bounds.width / 2,\n                top: args.bounds.y,\n              })\n            }\n          }, DEBOUNCE_TIME_MS)\n        }\n      }\n    },\n    [columns, getCellContent, setTooltip, timeoutRef]\n  )\n\n  const clearTooltip = React.useCallback(() => {\n    setTooltip(undefined)\n  }, [setTooltip])\n\n  return {\n    tooltip,\n    clearTooltip,\n    onItemHovered,\n  }\n}\n\nexport default useTooltips\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\n\nimport {\n  DataEditorProps,\n  DrawCellCallback,\n  Rectangle,\n  Theme as GlideTheme,\n  drawTextCell,\n  BaseDrawArgs,\n} from \"@glideapps/glide-data-grid\"\nimport {\n  SparklineCell,\n  DropdownCell,\n  RangeCell,\n  DatePickerCell,\n} from \"@glideapps/glide-data-grid-cells\"\n\nimport {\n  BaseColumn,\n  CustomCells,\n  isMissingValueCell,\n} from \"@streamlit/lib/src/components/widgets/DataFrame/columns\"\n\n// Token used for missing values (null, NaN, etc.)\nconst NULL_VALUE_TOKEN = \"None\"\n\n/**\n * Draw a red indicator in the top right corner of the cell\n * to indicate that the cell is required.\n */\nexport function drawRequiredIndicator(\n  ctx: CanvasRenderingContext2D,\n  rect: Rectangle,\n  theme: GlideTheme\n): void {\n  ctx.save()\n  ctx.beginPath()\n  // We are first moving the drawing position under the top right corner\n  // 8 pixels from left side (this is the size triangle)\n  // and 1 pixel from top side (to be under the cell border).\n  ctx.moveTo(rect.x + rect.width - 8, rect.y + 1)\n  // We draw the first line to the top right corner.\n  ctx.lineTo(rect.x + rect.width, rect.y + 1)\n  // We draw the second line 8 pixel down on the right cell border\n  ctx.lineTo(rect.x + rect.width, rect.y + 1 + 8)\n  // And now its enough to just fill it with a color to get a triangle.\n  ctx.fillStyle = theme.accentColor\n  ctx.fill()\n  ctx.restore()\n}\n\n/**\n * If a cell is marked as missing, we draw a placeholder symbol with a faded text color.\n */\nexport const drawMissingPlaceholder = (args: BaseDrawArgs): void => {\n  const { cell, theme, ctx } = args\n  drawTextCell(\n    {\n      ...args,\n      theme: {\n        ...theme,\n        textDark: theme.textLight,\n        headerFontFull: `${theme.headerFontStyle} ${theme.fontFamily}`,\n        baseFontFull: `${theme.baseFontStyle} ${theme.fontFamily}`,\n        markerFontFull: `${theme.markerFontStyle} ${theme.fontFamily}`,\n      },\n      // The following props are just added for technical reasons:\n      // @ts-expect-error\n      spriteManager: {},\n      hyperWrapping: false,\n    },\n    NULL_VALUE_TOKEN,\n    cell.contentAlign\n  )\n  // Reset fill style to the original one\n  ctx.fillStyle = theme.textDark\n}\n\n/**\n * Create return type for useCustomRenderer hook based on the DataEditorProps.\n */\ntype CustomRendererReturn = Pick<\n  DataEditorProps,\n  \"drawCell\" | \"customRenderers\"\n>\n\n/**\n * Custom hook that creates some custom cell renderers compatible with glide-data-grid.\n *\n * This includes capabilities like showing a faded placeholder for missing values or\n * a red indicator for required cells.\n *\n * @param columns - The columns of the table.\n *\n * @returns An object containing the following properties:\n * - `drawCell`: A function that overwrites some rendering that can be\n *    passed to the `DataEditor` component.\n * - `customRenderers`: A map of custom cell renderers used by custom cells\n *    that can be passed to the `DataEditor` component.\n */\nfunction useCustomRenderer(columns: BaseColumn[]): CustomRendererReturn {\n  const drawCell: DrawCellCallback = React.useCallback(\n    (args, draw) => {\n      const { cell, theme, ctx, rect } = args\n      const colPos = args.col\n      if (isMissingValueCell(cell) && colPos < columns.length) {\n        const column = columns[colPos]\n\n        // We explicitly ignore some cell types here (e.g. checkbox, progress...) since\n        // they are taking care of rendering their missing value state themselves (usually as empty cell).\n        // All other cell types are rendered with a placeholder symbol and a faded text color via drawMissingPlaceholder.\n        if (\n          [\"checkbox\", \"line_chart\", \"bar_chart\", \"progress\"].includes(\n            column.kind\n          )\n        ) {\n          draw()\n        } else {\n          drawMissingPlaceholder(args as BaseDrawArgs)\n        }\n\n        if (column.isRequired && column.isEditable) {\n          // If the cell value is missing, and it is configured as required & editable,\n          // we draw a red indicator in the top right corner of the cell.\n          drawRequiredIndicator(ctx, rect, theme)\n        }\n        return\n      }\n      draw()\n    },\n    [columns]\n  )\n\n  // Load extra cell renderers from the glide-data-grid-cells package:\n  const customRenderers = React.useMemo(\n    () =>\n      [\n        SparklineCell,\n        DropdownCell,\n        RangeCell,\n        DatePickerCell,\n        ...CustomCells,\n      ] as DataEditorProps[\"customRenderers\"],\n    // This doesn't change during the lifetime of the component,\n    // so we can just run it once at creation time.\n    /* eslint-disable react-hooks/exhaustive-deps */\n    []\n  )\n\n  return {\n    drawCell,\n    customRenderers,\n  }\n}\n\nexport default useCustomRenderer\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useState } from \"react\"\n\nimport { GridColumn, DataEditorProps } from \"@glideapps/glide-data-grid\"\n\ntype ColumnSizerReturn = Pick<DataEditorProps, \"columns\" | \"onColumnResize\">\n\n/**\n * Hook to manage the interactive column resizing capabilities.\n *\n * @param columns - The columns of the table.\n *\n * @returns An object containing the following properties:\n * - columns: The updated list of columns.\n * - onColumnResize: The callback function to be called when a column is resized.\n */\nfunction useColumnSizer(columns: GridColumn[]): ColumnSizerReturn {\n  // The columns with the corresponding empty template for every type:\n  const [columnSizes, setColumnSizes] = useState<Map<string, number>>(\n    () => new Map()\n  )\n\n  const onColumnResize = React.useCallback(\n    (\n      column: GridColumn,\n      _newSize: number,\n      _colIndex: number,\n      newSizeWithGrow: number\n    ) => {\n      if (column.id) {\n        setColumnSizes(new Map(columnSizes).set(column.id, newSizeWithGrow))\n      }\n    },\n    [columnSizes]\n  )\n\n  const sizedColumns = React.useMemo(() => {\n    return columns.map(column => {\n      if (\n        column.id &&\n        columnSizes.has(column.id) &&\n        columnSizes.get(column.id) !== undefined\n      ) {\n        return {\n          ...column,\n          width: columnSizes.get(column.id),\n          // Deactivate grow whenever a column gets manually resized\n          grow: 0,\n        } as GridColumn\n      }\n      return column\n    })\n  }, [columns, columnSizes])\n\n  return {\n    columns: sizedColumns,\n    onColumnResize,\n  }\n}\n\nexport default useColumnSizer\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// TODO: fix incorrect hook usage and delete this lint suppression\n/* eslint-disable react-hooks/exhaustive-deps */\n\nimport React from \"react\"\n\nimport { Size as ResizableSize } from \"re-resizable\"\n\nimport { Arrow as ArrowProto } from \"@streamlit/lib/src/proto\"\nimport { notNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\n\n// Min column width used for manual and automatic resizing\nexport const MIN_COLUMN_WIDTH = 50\n// Max column width used for manual resizing\nexport const MAX_COLUMN_WIDTH = 1000\n// Max column width used for automatic column sizing\nexport const MAX_COLUMN_AUTO_WIDTH = 500\n// The border size in pixels (2)\n// to prevent overlap problem with selection ring.\nexport const BORDER_THRESHOLD = 2\n// The default row height in pixels\nexport const ROW_HEIGHT = 35\n// Min width for the resizable table container:\n// Based on one column at minimum width + borders\nconst MIN_TABLE_WIDTH = MIN_COLUMN_WIDTH + BORDER_THRESHOLD\n// Min height for the resizable table container:\n// Based on header + one column, and border threshold\nconst MIN_TABLE_HEIGHT = 2 * ROW_HEIGHT + BORDER_THRESHOLD\n// The default maximum height of the table:\nconst DEFAULT_TABLE_HEIGHT = 400\n\nexport type AutoSizerReturn = {\n  minHeight: number\n  maxHeight: number\n  minWidth: number\n  maxWidth: number\n  resizableSize: ResizableSize\n  setResizableSize: React.Dispatch<React.SetStateAction<ResizableSize>>\n}\n\nexport function calculateMaxHeight(numRows: number): number {\n  return Math.max(numRows * ROW_HEIGHT + BORDER_THRESHOLD, MIN_TABLE_HEIGHT)\n}\n/**\n * A custom React hook that manages all aspects related to the size of the table.\n *\n * @param element - The ArrowProto element\n * @param numRows - The number of rows in the table\n * @param containerWidth - The width of the surrounding container\n * @param containerHeight - The height of the surrounding container\n * @param isFullScreen - Whether the table is in fullscreen mode\n *\n * @returns The row height, min/max height & width, and the current size of the resizable container.\n */\nfunction useTableSizer(\n  element: ArrowProto,\n  numRows: number,\n  containerWidth: number,\n  containerHeight?: number,\n  isFullScreen?: boolean\n): AutoSizerReturn {\n  let maxHeight = calculateMaxHeight(\n    numRows +\n      1 + // Column header row\n      (element.editingMode === ArrowProto.EditingMode.DYNAMIC ? 1 : 0) // Trailing row\n  )\n\n  let initialHeight = Math.min(maxHeight, DEFAULT_TABLE_HEIGHT)\n\n  if (element.height) {\n    // User has explicitly configured a height\n    initialHeight = Math.max(element.height, MIN_TABLE_HEIGHT)\n    maxHeight = Math.max(element.height, maxHeight)\n  }\n\n  if (containerHeight) {\n    // If container height is set (e.g. when used in fullscreen)\n    // The maxHeight and height should not be larger than container height\n    initialHeight = Math.min(initialHeight, containerHeight)\n    maxHeight = Math.min(maxHeight, containerHeight)\n\n    if (!element.height) {\n      // If no explicit height is set, set height to max height (fullscreen mode)\n      initialHeight = maxHeight\n    }\n  }\n\n  let initialWidth: number | undefined // If container width is undefined, auto set based on column widths\n  let maxWidth = containerWidth\n\n  if (element.useContainerWidth) {\n    // Always use the full container width\n    initialWidth = containerWidth\n  } else if (element.width) {\n    // User has explicitly configured a width\n    initialWidth = Math.min(\n      Math.max(element.width, MIN_TABLE_WIDTH),\n      containerWidth\n    )\n    maxWidth = Math.min(Math.max(element.width, maxWidth), containerWidth)\n  }\n\n  const [resizableSize, setResizableSize] = React.useState<ResizableSize>({\n    width: initialWidth || \"100%\",\n    height: initialHeight,\n  })\n\n  React.useLayoutEffect(() => {\n    // This prevents weird table resizing behavior if the container width\n    // changes and the table uses the full container width.\n    if (element.useContainerWidth && resizableSize.width === \"100%\") {\n      setResizableSize({\n        width: containerWidth,\n        height: resizableSize.height,\n      })\n    }\n  }, [containerWidth])\n\n  // Reset the height if the number of rows changes (e.g. via add_rows):\n  React.useLayoutEffect(() => {\n    setResizableSize({\n      width: resizableSize.width,\n      height: initialHeight,\n    })\n  }, [numRows])\n\n  // Reset the width if the element width parameter was changed:\n  React.useLayoutEffect(() => {\n    setResizableSize({\n      width: initialWidth || \"100%\",\n      height: resizableSize.height,\n    })\n  }, [initialWidth])\n\n  // Reset the height if the element height parameter was changed:\n  React.useLayoutEffect(() => {\n    setResizableSize({\n      width: resizableSize.width,\n      height: initialHeight,\n    })\n  }, [initialHeight])\n\n  // Change sizing if the fullscreen mode is activated or deactivated:\n  React.useLayoutEffect(() => {\n    if (isFullScreen) {\n      const stretchColumns: boolean =\n        element.useContainerWidth ||\n        (notNullOrUndefined(element.width) && element.width > 0)\n      setResizableSize({\n        width: stretchColumns ? maxWidth : \"100%\",\n        height: maxHeight,\n      })\n    } else {\n      setResizableSize({\n        width: initialWidth || \"100%\",\n        height: initialHeight,\n      })\n    }\n  }, [isFullScreen])\n\n  return {\n    minHeight: MIN_TABLE_HEIGHT,\n    maxHeight,\n    minWidth: MIN_TABLE_WIDTH,\n    maxWidth,\n    resizableSize,\n    setResizableSize,\n  }\n}\n\nexport default useTableSizer\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\"\n\nimport { ImageEditorType } from \"@glideapps/glide-data-grid\"\nimport styled from \"@emotion/styled\"\n\nconst StyledImage = styled.img(() => ({\n  maxWidth: \"100%\",\n  maxHeight: \"600px\",\n  objectFit: \"scale-down\",\n}))\n\nexport const ImageCellEditor: ImageEditorType = ({ urls }) => {\n  const imageData = urls && urls.length > 0 ? urls[0] : \"\"\n  // Allow external image links to be opened in a new tab on click\n  if (imageData.startsWith(\"http\")) {\n    return (\n      <a href={imageData} target=\"_blank\" rel=\"noreferrer noopener\">\n        <StyledImage src={imageData}></StyledImage>\n      </a>\n    )\n  }\n\n  return <StyledImage src={imageData}></StyledImage>\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\n\nimport { useTheme } from \"@emotion/react\"\nimport { Popover, PLACEMENT, ACCESSIBILITY_TYPE } from \"baseui/popover\"\n\nimport StreamlitMarkdown from \"@streamlit/lib/src/components/shared/StreamlitMarkdown/StreamlitMarkdown\"\nimport { StyledTooltipContentWrapper } from \"@streamlit/lib/src/components/shared/Tooltip/styled-components\"\nimport { hasLightBackgroundColor } from \"@streamlit/lib/src/theme/utils\"\nimport { EmotionTheme } from \"@streamlit/lib/src/theme\"\n\nexport interface TooltipProps {\n  // The top position of the tooltip.\n  top: number\n  // The left position of the tooltip.\n  left: number\n  // The markdown content of the tooltip.\n  content: string\n  // Callback from useTooltips hook to clear the tooltip\n  clearTooltip: () => void\n}\n\n/**\n * A tooltip that can be positioned anywhere on the screen.\n *\n * This is mostly the same as the shared tooltip implementation, but\n * we cannot use that one since it is a StatefulTooltip and requires\n * a target component and cannot be triggered programmatically.\n * We need to be able to position the tooltip anywhere on the screen, so we use a Popover\n * instead. Since Popover doesn't support positioning to a virtual position,\n * we are using an invisible div as a workaround.\n *\n * @param top The top position of the tooltip.\n * @param left The left position of the tooltip.\n * @param content The markdown content of the tooltip.\n * @returns The tooltip react element.\n */\nfunction Tooltip({\n  top,\n  left,\n  content,\n  clearTooltip,\n}: TooltipProps): ReactElement {\n  const [open, setOpen] = React.useState(true)\n  const theme: EmotionTheme = useTheme()\n  const { colors, fontSizes, radii } = theme\n\n  const closeTooltip = React.useCallback((): void => {\n    setOpen(false)\n    clearTooltip()\n  }, [clearTooltip, setOpen])\n\n  return (\n    <Popover\n      content={\n        <StyledTooltipContentWrapper className=\"stTooltipContent\">\n          <StreamlitMarkdown\n            style={{ fontSize: fontSizes.sm }}\n            source={content}\n            allowHTML={false}\n          />\n        </StyledTooltipContentWrapper>\n      }\n      placement={PLACEMENT.top}\n      accessibilityType={ACCESSIBILITY_TYPE.tooltip}\n      showArrow={false}\n      popoverMargin={5}\n      onClickOutside={closeTooltip}\n      onEsc={closeTooltip}\n      overrides={{\n        Body: {\n          style: {\n            // This is annoying, but a bunch of warnings get logged when the\n            // shorthand version `borderRadius` is used here since the long\n            // names are used by BaseWeb and mixing the two is apparently\n            // bad :(\n            borderTopLeftRadius: radii.md,\n            borderTopRightRadius: radii.md,\n            borderBottomLeftRadius: radii.md,\n            borderBottomRightRadius: radii.md,\n\n            paddingTop: \"0 !important\",\n            paddingBottom: \"0 !important\",\n            paddingLeft: \"0 !important\",\n            paddingRight: \"0 !important\",\n\n            backgroundColor: \"transparent\",\n          },\n        },\n        Inner: {\n          style: {\n            backgroundColor: hasLightBackgroundColor(theme)\n              ? colors.bgColor\n              : colors.secondaryBg,\n            color: colors.bodyText,\n            fontSize: fontSizes.sm,\n            fontWeight: \"normal\",\n            // See the long comment about `borderRadius`. The same applies here\n            // to `padding`.\n            paddingTop: \"0 !important\",\n            paddingBottom: \"0 !important\",\n            paddingLeft: \"0 !important\",\n            paddingRight: \"0 !important\",\n          },\n        },\n      }}\n      isOpen={open}\n    >\n      <div\n        className=\"stTooltipTarget\"\n        data-testid=\"stTooltipTarget\"\n        style={{\n          // This is an invisible div that's used to position the tooltip.\n          // The position is provided from outside via the `top` and `left` properties.\n          // This a workaround for the fact that BaseWeb's Popover  doesn't support\n          // positioning to a virtual position and always requires a target\n          // component for positioning.\n          position: \"fixed\",\n          top,\n          left,\n        }}\n      ></div>\n    </Popover>\n  )\n}\n\nexport default Tooltip\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport interface StyledResizableContainerProps {\n  hasCustomizedScrollbars: boolean\n}\n\n/**\n * A resizable data grid container component.\n */\nexport const StyledResizableContainer =\n  styled.div<StyledResizableContainerProps>(\n    ({ hasCustomizedScrollbars, theme }) => ({\n      position: \"relative\",\n      display: \"inline-block\",\n\n      \"& .glideDataEditor\": {\n        height: \"100%\",\n        minWidth: \"100%\",\n        borderRadius: theme.radii.default,\n      },\n\n      \"& .dvn-scroller\": {\n        // We only want to configure scrollbar aspects for browsers that\n        // don't support custom scrollbars (e.g. Firefox). Also, applying this\n        // in Chrome causes the scrollbar to change to the default scrollbar style.\n        ...(!hasCustomizedScrollbars && { scrollbarWidth: \"thin\" }),\n        [\"overflowX\" as any]: \"auto !important\",\n        [\"overflowY\" as any]: \"auto !important\",\n      },\n    })\n  )\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\nimport {\n  DataEditor as GlideDataEditor,\n  DataEditorRef,\n  GridSelection,\n  GridMouseEventArgs,\n  GridCell,\n  Item as GridCellPosition,\n  CompactSelection,\n} from \"@glideapps/glide-data-grid\"\nimport { Resizable } from \"re-resizable\"\nimport {\n  Delete,\n  Add,\n  FileDownload,\n  Search,\n  Close,\n} from \"@emotion-icons/material-outlined\"\n\nimport { FormClearHelper } from \"@streamlit/lib/src/components/widgets/Form\"\nimport { withFullScreenWrapper } from \"@streamlit/lib/src/components/shared/FullScreenWrapper\"\nimport { Quiver } from \"@streamlit/lib/src/dataframes/Quiver\"\nimport { Arrow as ArrowProto } from \"@streamlit/lib/src/proto\"\nimport {\n  WidgetInfo,\n  WidgetStateManager,\n} from \"@streamlit/lib/src/WidgetStateManager\"\nimport { debounce, isNullOrUndefined } from \"@streamlit/lib/src/util/utils\"\nimport Toolbar, {\n  ToolbarAction,\n} from \"@streamlit/lib/src/components/shared/Toolbar\"\nimport { LibContext } from \"@streamlit/lib/src/components/core/LibContext\"\n\nimport EditingState, { getColumnName } from \"./EditingState\"\nimport {\n  useCustomTheme,\n  useTableSizer,\n  useDataLoader,\n  useDataEditor,\n  useColumnSizer,\n  useColumnSort,\n  useColumnLoader,\n  useTooltips,\n  useCustomRenderer,\n  useDataExporter,\n  useSelectionHandler,\n} from \"./hooks\"\nimport {\n  BORDER_THRESHOLD,\n  MIN_COLUMN_WIDTH,\n  MAX_COLUMN_WIDTH,\n  MAX_COLUMN_AUTO_WIDTH,\n  ROW_HEIGHT,\n} from \"./hooks/useTableSizer\"\nimport {\n  BaseColumn,\n  toGlideColumn,\n  getTextCell,\n  ImageCellEditor,\n} from \"./columns\"\nimport Tooltip from \"./Tooltip\"\nimport { StyledResizableContainer } from \"./styled-components\"\n\nimport \"@glideapps/glide-data-grid/dist/index.css\"\nimport \"@glideapps/glide-data-grid-cells/dist/index.css\"\n\n// Debounce time for triggering a widget state update\n// This prevents rapid updates to the widget state.\nconst DEBOUNCE_TIME_MS = 150\n// Number of rows that triggers some optimization features\n// for large tables.\nconst LARGE_TABLE_ROWS_THRESHOLD = 150000\n// The size in px of the customized webkit scrollbar (defined in globalStyles)\nconst WEBKIT_SCROLLBAR_SIZE = 6\n\n// This is the state that is sent to the backend\n// This needs to be the same structure that is also defined\n// in the Python code.\nexport interface DataframeState {\n  selection: {\n    rows: number[]\n    // We use column names instead of indices to make\n    // it easier to use and unify with how data editor edits\n    // are stored.\n    columns: string[]\n  }\n}\n\nexport interface DataFrameProps {\n  element: ArrowProto\n  data: Quiver\n  width: number\n  height?: number\n  disabled: boolean\n  widgetMgr: WidgetStateManager\n  isFullScreen?: boolean\n  expand?: () => void\n  collapse?: () => void\n  disableFullscreenMode?: boolean\n  fragmentId?: string\n}\n\n/**\n * The main component used by dataframe & data_editor to render an editable table.\n *\n * @param element - The element's proto message\n * @param data - The Arrow data to render (extracted from the proto message)\n * @param width - The width of the container\n * @param height - The height of the container\n * @param disabled - Whether the widget is disabled\n * @param widgetMgr - The widget manager\n * @param isFullScreen - Whether the widget is in full screen mode\n */\nfunction DataFrame({\n  element,\n  data,\n  width: containerWidth,\n  height: containerHeight,\n  disabled,\n  widgetMgr,\n  isFullScreen,\n  disableFullscreenMode,\n  expand,\n  collapse,\n  fragmentId,\n}: Readonly<DataFrameProps>): ReactElement {\n  const resizableRef = React.useRef<Resizable>(null)\n  const dataEditorRef = React.useRef<DataEditorRef>(null)\n  const resizableContainerRef = React.useRef<HTMLDivElement>(null)\n\n  const { theme, headerIcons, tableBorderRadius } = useCustomTheme()\n\n  const {\n    libConfig: { enforceDownloadInNewTab = false }, // Default to false, if no libConfig, e.g. for tests\n  } = React.useContext(LibContext)\n\n  const [isFocused, setIsFocused] = React.useState<boolean>(true)\n  const [showSearch, setShowSearch] = React.useState(false)\n  const [hasVerticalScroll, setHasVerticalScroll] =\n    React.useState<boolean>(false)\n  const [hasHorizontalScroll, setHasHorizontalScroll] =\n    React.useState<boolean>(false)\n\n  // Determine if the device is primary using touch as input:\n  const isTouchDevice = React.useMemo<boolean>(\n    () => window.matchMedia && window.matchMedia(\"(pointer: coarse)\").matches,\n    []\n  )\n\n  // Determine if it uses customized scrollbars (webkit browsers):\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/::-webkit-scrollbar#css.selectors.-webkit-scrollbar\n  const hasCustomizedScrollbars = React.useMemo<boolean>(\n    () =>\n      (window.navigator.userAgent.includes(\"Mac OS\") &&\n        window.navigator.userAgent.includes(\"Safari\")) ||\n      window.navigator.userAgent.includes(\"Chrome\"),\n    []\n  )\n\n  // This is done to keep some backwards compatibility\n  // so that old arrow proto messages from the st.dataframe\n  // would still work. Those messages don't have the\n  // editingMode field defined.\n  if (isNullOrUndefined(element.editingMode)) {\n    element.editingMode = ArrowProto.EditingMode.READ_ONLY\n  }\n\n  const { READ_ONLY, DYNAMIC } = ArrowProto.EditingMode\n\n  // Number of rows of the table minus 1 for the header row:\n  const dataDimensions = data.dimensions\n  const originalNumRows = Math.max(0, dataDimensions.rows - 1)\n\n  // For empty tables, we show an extra row that\n  // contains \"empty\" as a way to indicate that the table is empty.\n  const isEmptyTable =\n    originalNumRows === 0 &&\n    // We don't show empty state for dynamic mode with a table that has\n    // data columns defined.\n    !(element.editingMode === DYNAMIC && dataDimensions.dataColumns > 0)\n\n  // For large tables, we apply some optimizations to handle large data\n  const isLargeTable = originalNumRows > LARGE_TABLE_ROWS_THRESHOLD\n\n  const editingState = React.useRef<EditingState>(\n    new EditingState(originalNumRows)\n  )\n\n  const [numRows, setNumRows] = React.useState(\n    editingState.current.getNumRows()\n  )\n\n  React.useEffect(() => {\n    editingState.current = new EditingState(originalNumRows)\n    setNumRows(editingState.current.getNumRows())\n  }, [originalNumRows])\n\n  const resetEditingState = React.useCallback(() => {\n    editingState.current = new EditingState(originalNumRows)\n    setNumRows(editingState.current.getNumRows())\n  }, [originalNumRows])\n\n  const { columns: originalColumns } = useColumnLoader(element, data, disabled)\n\n  /**\n   * On the first rendering, try to load initial widget state if\n   * it exists. This is required in the case that other elements\n   * are inserted before this widget. In this case, it can happen\n   * that the dataframe component is unmounted and thereby loses\n   * its state. Once the same element is rendered again, we try to\n   * reconstruct the state from the widget manager values.\n   */\n  React.useEffect(\n    () => {\n      if (element.editingMode === READ_ONLY) {\n        // We don't need to load the initial widget state\n        // for read-only dataframes.\n        return\n      }\n\n      const initialWidgetValue = widgetMgr.getStringValue({\n        id: element.id,\n        formId: element.formId,\n      } as WidgetInfo)\n\n      if (!initialWidgetValue) {\n        // No initial widget value was saved in the widget manager.\n        // No need to reconstruct something.\n        return\n      }\n\n      editingState.current.fromJson(initialWidgetValue, originalColumns)\n      setNumRows(editingState.current.getNumRows())\n    },\n    // We only want to run this effect once during the initial component load\n    // so we disable the eslint rule.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  )\n\n  const { getCellContent: getOriginalCellContent } = useDataLoader(\n    data,\n    originalColumns,\n    numRows,\n    editingState\n  )\n\n  const { columns, sortColumn, getOriginalIndex, getCellContent } =\n    useColumnSort(originalNumRows, originalColumns, getOriginalCellContent)\n\n  /**\n   * This callback is used to synchronize the selection state with the state\n   * of the widget state of the component. This might also send a rerun message\n   * to the backend if the selection state has changed.\n   *\n   * @param newSelection - The new selection state\n   */\n  // The debounce method doesn't allow dependency inspection. Therefore, we\n  // need to disable the eslint rule for exhaustive-deps.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const syncSelectionState = React.useCallback(\n    // Use debounce to prevent rapid updates to the widget state.\n    debounce(DEBOUNCE_TIME_MS, (newSelection: GridSelection) => {\n      // If we want to support selections also with the editable mode,\n      // we would need to integrate the `syncEditState` and `syncSelections` functions\n      // into a single function that updates the widget state with both the editing\n      // state and the selection state.\n\n      const selectionState: DataframeState = {\n        selection: {\n          rows: [] as number[],\n          columns: [] as string[],\n        },\n      }\n\n      selectionState.selection.rows = newSelection.rows.toArray().map(row => {\n        return getOriginalIndex(row)\n      })\n      selectionState.selection.columns = newSelection.columns\n        .toArray()\n        .map(columnIdx => {\n          return getColumnName(columns[columnIdx])\n        })\n      const newWidgetState = JSON.stringify(selectionState)\n      const currentWidgetState = widgetMgr.getStringValue({\n        id: element.id,\n        formId: element.formId,\n      } as WidgetInfo)\n\n      // Only update if there is actually a difference to the previous selection state\n      if (\n        currentWidgetState === undefined ||\n        currentWidgetState !== newWidgetState\n      ) {\n        widgetMgr.setStringValue(\n          {\n            id: element.id,\n            formId: element.formId,\n          } as WidgetInfo,\n          newWidgetState,\n          {\n            fromUi: true,\n          },\n          fragmentId\n        )\n      }\n    }),\n    [\n      element.id,\n      element.formId,\n      widgetMgr,\n      fragmentId,\n      getOriginalIndex,\n      getColumnName,\n    ]\n  )\n\n  const {\n    gridSelection,\n    isRowSelectionActivated,\n    isMultiRowSelectionActivated,\n    isColumnSelectionActivated,\n    isMultiColumnSelectionActivated,\n    isRowSelected,\n    isColumnSelected,\n    isCellSelected,\n    clearSelection,\n    processSelectionChange,\n  } = useSelectionHandler(\n    element,\n    isEmptyTable,\n    disabled,\n    columns,\n    syncSelectionState\n  )\n\n  React.useEffect(() => {\n    // Clear cell selections if fullscreen mode changes\n    // but keep row & column selections.\n    // In the past we saw some weird side-effects, so we decided to clean\n    // it when entering fullscreen-mode. If we decide to change this, we have\n    // to play around and get to the bottom of it.\n    clearSelection(true, true)\n    // Only run this on changes to the fullscreen mode:\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isFullScreen])\n\n  // This callback is used to refresh the rendering of specified cells\n  const refreshCells = React.useCallback(\n    (\n      cells: {\n        cell: GridCellPosition\n      }[]\n    ) => {\n      dataEditorRef.current?.updateCells(cells)\n    },\n    []\n  )\n\n  /**\n   * On the first rendering, try to load initial selection state\n   * from the widget state if it exists. This is required in the\n   * case that other elements are inserted before this widget.\n   *\n   * This effect needs to run after the fullscreen effect that\n   * clears cell selections, since both modify the same state object.\n   */\n  React.useEffect(\n    () => {\n      if (!isRowSelectionActivated && !isColumnSelectionActivated) {\n        // Only run this if selections are activated.\n        return\n      }\n\n      const initialWidgetValue = widgetMgr.getStringValue({\n        id: element.id,\n        formId: element.formId,\n      } as WidgetInfo)\n\n      if (initialWidgetValue) {\n        const columnNames: string[] = columns.map(column => {\n          return getColumnName(column)\n        })\n\n        const selectionState: DataframeState = JSON.parse(initialWidgetValue)\n\n        let rowSelection = CompactSelection.empty()\n        let columnSelection = CompactSelection.empty()\n\n        selectionState.selection?.rows?.forEach(row => {\n          rowSelection = rowSelection.add(row)\n        })\n\n        selectionState.selection?.columns?.forEach(column => {\n          columnSelection = columnSelection.add(columnNames.indexOf(column))\n        })\n\n        if (rowSelection.length > 0 || columnSelection.length > 0) {\n          // Update the initial selection state if something was selected\n          const initialSelection: GridSelection = {\n            rows: rowSelection,\n            columns: columnSelection,\n            current: undefined,\n          }\n          processSelectionChange(initialSelection)\n        }\n      }\n    },\n    // We only want to run this effect once during the initial component load\n    // so we disable the eslint rule.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  )\n\n  /**\n   * This callback is used to update the number of rows based\n   * on the latest editing state. This is required to keep the\n   * component state in sync with the editing state.\n   */\n  const updateNumRows = React.useCallback(() => {\n    if (numRows !== editingState.current.getNumRows()) {\n      // Reset the number of rows if it has been changed in the editing state\n      setNumRows(editingState.current.getNumRows())\n    }\n  }, [numRows])\n\n  /**\n   * This callback is used to synchronize the editing state with\n   * the widget state of the component. This might also send a rerun message\n   * to the backend if the editing state has changed.\n   */\n  // The debounce method doesn't allow dependency inspection. Therefore, we\n  // need to disable the eslint rule for exhaustive-deps.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const syncEditState = React.useCallback(\n    // Use debounce to prevent rapid updates to the widget state.\n    debounce(DEBOUNCE_TIME_MS, () => {\n      const currentEditingState = editingState.current.toJson(columns)\n      let currentWidgetState = widgetMgr.getStringValue({\n        id: element.id,\n        formId: element.formId,\n      } as WidgetInfo)\n\n      if (currentWidgetState === undefined) {\n        // Create an empty widget state\n        currentWidgetState = new EditingState(0).toJson([])\n      }\n\n      // Only update if there is actually a difference between editing and widget state\n      if (currentEditingState !== currentWidgetState) {\n        widgetMgr.setStringValue(\n          {\n            id: element.id,\n            formId: element.formId,\n          } as WidgetInfo,\n          currentEditingState,\n          {\n            fromUi: true,\n          },\n          fragmentId\n        )\n      }\n    }),\n    [\n      element.id,\n      element.formId,\n      widgetMgr,\n      fragmentId,\n      columns,\n      editingState.current,\n    ]\n  )\n\n  const { exportToCsv } = useDataExporter(\n    getCellContent,\n    columns,\n    numRows,\n    enforceDownloadInNewTab\n  )\n\n  const { onCellEdited, onPaste, onRowAppended, onDelete, validateCell } =\n    useDataEditor(\n      columns,\n      element.editingMode !== DYNAMIC,\n      editingState,\n      getCellContent,\n      getOriginalIndex,\n      refreshCells,\n      updateNumRows,\n      syncEditState,\n      clearSelection\n    )\n\n  const { tooltip, clearTooltip, onItemHovered } = useTooltips(\n    columns,\n    getCellContent\n  )\n\n  const { drawCell, customRenderers } = useCustomRenderer(columns)\n\n  const transformedColumns = React.useMemo(\n    () => columns.map(column => toGlideColumn(column)),\n    [columns]\n  )\n  const { columns: glideColumns, onColumnResize } =\n    useColumnSizer(transformedColumns)\n\n  const {\n    minHeight,\n    maxHeight,\n    minWidth,\n    maxWidth,\n    resizableSize,\n    setResizableSize,\n  } = useTableSizer(\n    element,\n    numRows,\n    containerWidth,\n    containerHeight,\n    isFullScreen\n  )\n\n  // This is used as fallback in case the table is empty to\n  // insert cells indicating this state:\n  const getEmptyStateContent = React.useCallback(\n    ([_col, _row]: readonly [number, number]): GridCell => {\n      return {\n        ...getTextCell(true, false),\n        displayData: \"empty\",\n        contentAlign: \"center\",\n        allowOverlay: false,\n        themeOverride: {\n          textDark: theme.textLight,\n        },\n        span: [0, Math.max(columns.length - 1, 0)],\n      } as GridCell\n    },\n    [columns, theme.textLight]\n  )\n\n  // This is required for the form clearing functionality:\n  React.useEffect(() => {\n    if (!element.formId) {\n      return\n    }\n\n    const formClearHelper = new FormClearHelper()\n    formClearHelper.manageFormClearListener(widgetMgr, element.formId, () => {\n      // Clear the editing state and the selection state\n      resetEditingState()\n      clearSelection()\n    })\n\n    return () => {\n      formClearHelper.disconnect()\n    }\n  }, [element.formId, resetEditingState, clearSelection, widgetMgr])\n\n  const isDynamicAndEditable =\n    !isEmptyTable && element.editingMode === DYNAMIC && !disabled\n\n  // The index columns are always at the beginning of the table,\n  // so we can just count them to determine the number of columns\n  // that should be frozen.\n  const freezeColumns = isEmptyTable\n    ? 0\n    : columns.filter((col: BaseColumn) => col.isIndex).length\n\n  // Determine if the table requires horizontal or vertical scrolling:\n  React.useEffect(() => {\n    // The setTimeout is a workaround to get the scroll area bounding box\n    // after the grid has been rendered. Otherwise, the scroll area div\n    // (dvn-stack) might not have been created yet.\n    setTimeout(() => {\n      if (resizableContainerRef.current && dataEditorRef.current) {\n        // Get the bounds of the glide-data-grid scroll area (dvn-stack):\n        const scrollAreaBounds = resizableContainerRef.current\n          ?.querySelector(\".dvn-stack\")\n          ?.getBoundingClientRect()\n\n        // We might also be able to use the following as an alternative,\n        // but it seems to cause \"Maximum update depth exceeded\" when scrollbars\n        // are activated or deactivated.\n        // const scrollAreaBounds = dataEditorRef.current?.getBounds()\n        // Also see: https://github.com/glideapps/glide-data-grid/issues/784\n\n        if (scrollAreaBounds) {\n          setHasVerticalScroll(\n            scrollAreaBounds.height >\n              resizableContainerRef.current.clientHeight\n          )\n          setHasHorizontalScroll(\n            scrollAreaBounds.width > resizableContainerRef.current.clientWidth\n          )\n        }\n      }\n    }, 1)\n  }, [resizableSize, numRows, glideColumns])\n\n  return (\n    <StyledResizableContainer\n      data-testid=\"stDataFrame\"\n      className=\"stDataFrame\"\n      hasCustomizedScrollbars={hasCustomizedScrollbars}\n      ref={resizableContainerRef}\n      onMouseDown={e => {\n        if (resizableContainerRef.current && hasCustomizedScrollbars) {\n          // Prevent clicks on the scrollbar handle to propagate to the grid:\n          const boundingClient =\n            resizableContainerRef.current.getBoundingClientRect()\n\n          if (\n            // For whatever reason, we are still able to use the scrollbars even\n            // if the mouse is one pixel outside of the scrollbar. Therefore, we add\n            // an additional pixel.\n            hasHorizontalScroll &&\n            boundingClient.height - (WEBKIT_SCROLLBAR_SIZE + 1) <\n              e.clientY - boundingClient.top\n          ) {\n            e.stopPropagation()\n          }\n          if (\n            hasVerticalScroll &&\n            boundingClient.width - (WEBKIT_SCROLLBAR_SIZE + 1) <\n              e.clientX - boundingClient.left\n          ) {\n            e.stopPropagation()\n          }\n        }\n      }}\n      onBlur={event => {\n        // If the container loses focus, clear the current selection.\n        // Touch screen devices have issues with this, so we don't clear\n        // the selection on those devices.\n        // We also don't want to clear the selection if the user clicks on\n        // on the toolbar by checking that relatedTarget is not a children of\n        // this element. Unfortunately, this check isn't working reliably in Safari.\n        if (\n          !isFocused &&\n          !isTouchDevice &&\n          !event.currentTarget.contains(\n            event.relatedTarget as HTMLElement | null\n          )\n        ) {\n          // Clear cell selections, but keep row & column selections.\n          clearSelection(true, true)\n        }\n      }}\n    >\n      <Toolbar\n        isFullScreen={isFullScreen}\n        disableFullscreenMode={disableFullscreenMode}\n        // Lock the toolbar in some specific situations:\n        locked={\n          (isRowSelected && !isRowSelectionActivated) ||\n          isCellSelected ||\n          (isTouchDevice && isFocused)\n        }\n        onExpand={expand}\n        onCollapse={collapse}\n        target={StyledResizableContainer}\n      >\n        {((isRowSelectionActivated && isRowSelected) ||\n          (isColumnSelectionActivated && isColumnSelected)) && (\n          // Add clear selection action if selections are active\n          // and a valid selections currently exists. Cell selections\n          // are not relevant since they are not synced to the backend\n          // at the moment.\n          <ToolbarAction\n            label={\"Clear selection\"}\n            icon={Close}\n            onClick={() => {\n              clearSelection()\n              clearTooltip()\n            }}\n          />\n        )}\n        {isDynamicAndEditable && isRowSelected && (\n          <ToolbarAction\n            label={\"Delete row(s)\"}\n            icon={Delete}\n            onClick={() => {\n              if (onDelete) {\n                onDelete(gridSelection)\n                clearTooltip()\n              }\n            }}\n          />\n        )}\n        {isDynamicAndEditable && !isRowSelected && (\n          <ToolbarAction\n            label={\"Add row\"}\n            icon={Add}\n            onClick={() => {\n              if (onRowAppended) {\n                setIsFocused(true)\n                onRowAppended()\n                clearTooltip()\n              }\n            }}\n          />\n        )}\n        {!isLargeTable && !isEmptyTable && (\n          <ToolbarAction\n            label={\"Download as CSV\"}\n            icon={FileDownload}\n            onClick={() => exportToCsv()}\n          />\n        )}\n        {!isEmptyTable && (\n          <ToolbarAction\n            label={\"Search\"}\n            icon={Search}\n            onClick={() => {\n              if (!showSearch) {\n                setIsFocused(true)\n                setShowSearch(true)\n              } else {\n                setShowSearch(false)\n              }\n              clearTooltip()\n            }}\n          />\n        )}\n      </Toolbar>\n      <Resizable\n        data-testid=\"stDataFrameResizable\"\n        ref={resizableRef}\n        defaultSize={resizableSize}\n        style={{\n          border: `1px solid ${theme.borderColor}`,\n          borderRadius: `${tableBorderRadius}`,\n        }}\n        minHeight={minHeight}\n        maxHeight={maxHeight}\n        minWidth={minWidth}\n        maxWidth={maxWidth}\n        size={resizableSize}\n        enable={{\n          top: false,\n          right: false,\n          bottom: false,\n          left: false,\n          topRight: false,\n          bottomRight: true,\n          bottomLeft: false,\n          topLeft: false,\n        }}\n        grid={[1, ROW_HEIGHT]}\n        snapGap={ROW_HEIGHT / 3}\n        onResizeStop={(_event, _direction, _ref, _delta) => {\n          if (resizableRef.current) {\n            setResizableSize({\n              width: resizableRef.current.size.width,\n              height:\n                // Add additional pixels if it is stretched to full width\n                // to allow the full cell border to be visible\n                maxHeight - resizableRef.current.size.height ===\n                BORDER_THRESHOLD\n                  ? resizableRef.current.size.height + BORDER_THRESHOLD\n                  : resizableRef.current.size.height,\n            })\n          }\n        }}\n      >\n        <GlideDataEditor\n          className=\"glideDataEditor\"\n          ref={dataEditorRef}\n          columns={glideColumns}\n          rows={isEmptyTable ? 1 : numRows}\n          minColumnWidth={MIN_COLUMN_WIDTH}\n          maxColumnWidth={MAX_COLUMN_WIDTH}\n          maxColumnAutoWidth={MAX_COLUMN_AUTO_WIDTH}\n          rowHeight={ROW_HEIGHT}\n          headerHeight={ROW_HEIGHT}\n          getCellContent={isEmptyTable ? getEmptyStateContent : getCellContent}\n          onColumnResize={isTouchDevice ? undefined : onColumnResize}\n          // Configure resize indicator to only show on the header:\n          resizeIndicator={\"header\"}\n          // Freeze all index columns:\n          freezeColumns={freezeColumns}\n          smoothScrollX={true}\n          smoothScrollY={true}\n          // Show borders between cells:\n          verticalBorder={true}\n          // Activate copy to clipboard functionality:\n          getCellsForSelection={true}\n          // Deactivate row markers and numbers:\n          rowMarkers={\"none\"}\n          // Deactivate selections:\n          rangeSelect={isTouchDevice ? \"cell\" : \"rect\"}\n          columnSelect={\"none\"}\n          rowSelect={\"none\"}\n          // Enable tooltips on hover of a cell or column header:\n          onItemHovered={onItemHovered}\n          // Activate keybindings:\n          keybindings={{ downFill: true }}\n          // Search needs to be activated manually, to support search\n          // via the toolbar:\n          onKeyDown={event => {\n            if ((event.ctrlKey || event.metaKey) && event.key === \"f\") {\n              setShowSearch(cv => !cv)\n              event.stopPropagation()\n              event.preventDefault()\n            }\n          }}\n          showSearch={showSearch}\n          onSearchClose={() => {\n            setShowSearch(false)\n            clearTooltip()\n          }}\n          // Header click is used for column sorting:\n          onHeaderClicked={(colIndex: number, _event) => {\n            if (isEmptyTable || isLargeTable || isColumnSelectionActivated) {\n              // Deactivate sorting for empty state, for large dataframes, or\n              // when column selection is activated.\n              return\n            }\n\n            if (isRowSelectionActivated && isRowSelected) {\n              // Keeping row selections when sorting columns is not supported at the moment.\n              // So we need to clear the selection before we do the sorting.\n              // The reason is that the user would expect the selection to be kept on\n              // the same row after sorting, hover that would require us to map the selection\n              // to the new index of the selected row which adds complexity.\n              clearSelection()\n            }\n            sortColumn(colIndex)\n          }}\n          gridSelection={gridSelection}\n          // We don't have to react to \"onSelectionCleared\" since\n          // we already correctly process selections in\n          // the \"onGridSelectionChange\" callback.\n          onGridSelectionChange={(newSelection: GridSelection) => {\n            // Only allow selection changes if the grid is focused.\n            // This is mainly done because there is a bug when overlay click actions\n            // are outside of the bounds of the table (e.g. select dropdown or date picker).\n            // This results in the first cell being selected for a short period of time\n            // But for touch devices, preventing this can cause issues to select cells.\n            // So we allow selection changes for touch devices even when it is not focused.\n            if (isFocused || isTouchDevice) {\n              processSelectionChange(newSelection)\n              if (tooltip !== undefined) {\n                // Remove the tooltip on every grid selection change:\n                clearTooltip()\n              }\n            }\n          }}\n          theme={theme}\n          onMouseMove={(args: GridMouseEventArgs) => {\n            // Determine if the dataframe is focused or not\n            if (args.kind === \"out-of-bounds\" && isFocused) {\n              setIsFocused(false)\n            } else if (args.kind !== \"out-of-bounds\" && !isFocused) {\n              setIsFocused(true)\n            }\n          }}\n          // Add shadow for index columns and header on scroll:\n          fixedShadowX={true}\n          fixedShadowY={true}\n          experimental={{\n            // We use overflow scrollbars, so we need to deactivate the native\n            // scrollbar override:\n            scrollbarWidthOverride: 0,\n            ...(hasCustomizedScrollbars && {\n              // Add negative padding to the right and bottom to allow the scrollbars in\n              // webkit to overlay the table:\n              paddingBottom: hasHorizontalScroll\n                ? -WEBKIT_SCROLLBAR_SIZE\n                : undefined,\n              paddingRight: hasVerticalScroll\n                ? -WEBKIT_SCROLLBAR_SIZE\n                : undefined,\n            }),\n          }}\n          // Apply custom rendering (e.g. for missing or required cells):\n          drawCell={drawCell}\n          // Add support for additional cells:\n          customRenderers={customRenderers}\n          // Custom image editor to render single images:\n          imageEditorOverride={ImageCellEditor}\n          // Add our custom SVG header icons:\n          headerIcons={headerIcons}\n          // Add support for user input validation:\n          validateCell={validateCell}\n          // The default setup is read only, and therefore we deactivate paste here:\n          onPaste={false}\n          // Activate features required for row selection:\n          {...(isRowSelectionActivated && {\n            rowMarkers: {\n              // Apply style settings for the row markers column:\n              kind: \"checkbox\",\n              checkboxStyle: \"square\",\n              theme: {\n                bgCell: theme.bgHeader,\n                bgCellMedium: theme.bgHeader,\n              },\n            },\n            rowSelectionMode: isMultiRowSelectionActivated ? \"multi\" : \"auto\",\n            rowSelect: disabled\n              ? \"none\"\n              : isMultiRowSelectionActivated\n              ? \"multi\"\n              : \"single\",\n            rowSelectionBlending: \"mixed\",\n            // Deactivate the combination of row selections\n            // and cell selections. This will automatically clear\n            // selected cells when a row is selected.\n            // We are doing this to prevent some issues with drag\n            // and drop selection.\n            rangeSelectionBlending: \"exclusive\",\n          })}\n          // Activate features required for column selection:\n          {...(isColumnSelectionActivated && {\n            columnSelect: disabled\n              ? \"none\"\n              : isMultiColumnSelectionActivated\n              ? \"multi\"\n              : \"single\",\n            columnSelectionBlending: \"mixed\",\n            // Deactivate the combination of column selections\n            // and cell selections. This will automatically clear\n            // selected cells when a column is selected.\n            // We are doing this to prevent some issues with drag\n            // and drop selection.\n            rangeSelectionBlending: \"exclusive\",\n          })}\n          // If element is editable, enable editing features:\n          {...(!isEmptyTable &&\n            element.editingMode !== READ_ONLY &&\n            !disabled && {\n              // Support fill handle for bulk editing:\n              fillHandle: !isTouchDevice,\n              // Support editing:\n              onCellEdited,\n              // Support pasting data for bulk editing:\n              onPaste,\n              // Support deleting cells & rows:\n              onDelete,\n            })}\n          // If element is dynamic, enable adding & deleting rows:\n          {...(!isEmptyTable &&\n            element.editingMode === DYNAMIC && {\n              // Support adding rows:\n              trailingRowOptions: {\n                sticky: false,\n                tint: true,\n              },\n              rowMarkers: {\n                kind: \"checkbox\",\n                checkboxStyle: \"square\",\n                theme: {\n                  bgCell: theme.bgHeader,\n                  bgCellMedium: theme.bgHeader,\n                },\n              },\n              rowSelectionMode: \"multi\",\n              rowSelect: disabled ? \"none\" : \"multi\",\n              // Support adding rows:\n              onRowAppended: disabled ? undefined : onRowAppended,\n              // Deactivate sorting, since it is not supported with dynamic editing:\n              onHeaderClicked: undefined,\n            })}\n        />\n      </Resizable>\n      {tooltip && tooltip.content && (\n        <Tooltip\n          top={tooltip.top}\n          left={tooltip.left}\n          content={tooltip.content}\n          clearTooltip={clearTooltip}\n        ></Tooltip>\n      )}\n    </StyledResizableContainer>\n  )\n}\n\nexport default withFullScreenWrapper(DataFrame, true)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isValidFormId } from \"@streamlit/lib/src/util/utils\"\nimport { WidgetStateManager } from \"@streamlit/lib/src/WidgetStateManager\"\nimport { SignalConnection } from \"typed-signals\"\n\nexport class FormClearHelper {\n  private formClearListener?: SignalConnection\n\n  private lastWidgetMgr?: WidgetStateManager\n\n  private lastFormId?: string\n\n  /**\n   * Register the listener that will be called when the widget's form is cleared.\n   * This should be called in the `render` function of every class-based widget\n   * element - it mimics the behavior of a `useEffect` hook, and ensures that\n   * subscription and unsubscription happen correctly.\n   *\n   * Hooks-based widgets can just use `useEffect` and call\n   * `widgetMgr.addFormClearedListener` directly.\n   */\n  public manageFormClearListener(\n    widgetMgr: WidgetStateManager,\n    formId: string,\n    listener: () => void\n  ): void {\n    // If we're already subscribed and our params haven't changed, early-out.\n    if (\n      this.formClearListener != null &&\n      this.lastWidgetMgr === widgetMgr &&\n      this.lastFormId === formId\n    ) {\n      return\n    }\n\n    // Close our previous subscription, if we had one.\n    this.disconnect()\n\n    // If we're not part of a form, there's nothing to do.\n    if (!isValidFormId(formId)) {\n      return\n    }\n\n    // Make the new subscription.\n    this.formClearListener = widgetMgr.addFormClearedListener(formId, listener)\n    this.lastWidgetMgr = widgetMgr\n    this.lastFormId = formId\n  }\n\n  /**\n   * Disconnect from the form-clear signal, if we're connected.\n   * This should be called from the `componentWillUnmount` function of every\n   * element that uses it.\n   */\n  public disconnect(): void {\n    this.formClearListener?.disconnect()\n    this.formClearListener = undefined\n    this.lastWidgetMgr = undefined\n    this.lastFormId = undefined\n  }\n}\n"],"names":["StyledFullScreenButton","_styled","target","_ref","isExpanded","theme","variableProps","right","top","backgroundColor","opacity","transform","colors","lightenedBg05","position","display","alignItems","justifyContent","zIndex","zIndices","sidebar","height","width","transition","border","color","fadedText60","borderRadius","outline","bodyText","StyledFullScreenFrame","_ref2","left","bottom","background","bgColor","fullscreenWrapper","padding","spacing","md","paddingTop","overflow","FullScreenWrapper","PureComponent","constructor","props","super","context","controlKeys","event","expanded","this","state","keyCode","zoomOut","zoomIn","document","body","style","setFullScreen","setState","convertScssRemValueToPixels","scssValue","parseFloat","getComputedStyle","documentElement","fontSize","getWindowDimensions","fullWidth","window","innerWidth","fullHeight","innerHeight","updateWindowDimensions","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","children","disableFullscreenMode","buttonImage","FullscreenEnter","buttonOnClick","buttonTitle","FullscreenExit","_jsxs","_jsx","onClick","title","Icon","content","expand","collapse","contextType","LibContext","withTheme","WrappedComponent","forceDisableFullScreenMode","arguments","length","undefined","ComponentWithFullScreenWrapper","isFullScreen","displayName","name","hoistNonReactStatics","TOP_DISTANCE","StyledToolbarWrapper","locked","sm","none","StyledToolbar","hasLightBackgroundColor","flexDirection","boxShadow","radii","default","ToolbarAction","label","show_label","icon","useTheme","displayLabel","Tooltip","StreamlitMarkdown","source","allowHTML","fontSizes","placement","Placement","onMouseEnterDelay","inline","Button","stopPropagation","kind","BaseButtonKind","size","testid","onExpand","onCollapse","className","Fullscreen","BOOLEAN_TRUE_VALUES","BOOLEAN_FALSE_VALUES","getErrorCell","errorMsg","errorDetails","GridCellKind","readonly","allowOverlay","data","displayData","isError","isErrorCell","cell","hasOwnProperty","isMissingValueCell","isMissingValue","getEmptyCell","getTextCell","faded","toGlideColumn","column","id","hasMenu","themeOverride","isStretched","grow","isIndex","mergeColumnParameters","defaultParams","userParams","isNullOrUndefined","merge","toSafeArray","Uint8Array","TextDecoder","decode","trim","startsWith","endsWith","split","JSON","parse","error","parsedData","stringify","_key","value","Number","Array","isArray","map","includes","toSafeString","toString","toSafeBoolean","cleanedValue","toLowerCase","toSafeNumber","NaN","unformattedValue","numbro","notNullOrUndefined","Int32Array","formatNumber","format","maxPrecision","isNaN","isFinite","Math","round","repeat","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","notation","moment","humanize","Quiver","BigInt","sprintf","formatMoment","momentDate","DateTimeFormat","dateStyle","timeStyle","toDate","fromNow","calendar","toSafeDate","Date","getTime","parsedTimestamp","timestampInSeconds","parsedMomentDate","utc","isValid","parsedMomentTime","countDecimals","numberStr","indexOf","toLocaleString","useGrouping","LINE_BREAK_REGEX","RegExp","removeLineBreaks","text","replace","ObjectColumn","cellTemplate","contentAlignment","sortMode","isEditable","getCell","cellData","getCellValue","isEditableType","TextColumn","parameters","columnTypeOptions","validateRegex","validate","validateInput","isRequired","corrected","max_chars","slice","test","validationResult","applyTimezone","timezone","utcOffset","tz","BaseDateTimeColumn","defaultFormat","defaultStep","inputType","toISOString","_parameters$step","step","defaultTimezoneOffset","minDate","maxDate","_applyTimezone","min_value","max_value","copyData","contentAlign","date","displayDate","min","max","timezoneOffset","_cell$data","DateTimeColumn","_props$columnTypeOpti","_props$columnTypeOpti2","_props$arrowType","_props$arrowType$meta","_props$columnTypeOpti3","arrowType","meta","hasTimezone","TimeColumn","_props$columnTypeOpti4","_props$columnTypeOpti5","DateColumn","CheckboxColumn","isIntegerType","arrowTypeName","NumberColumn","allowNegative","fixedDecimals","thousandSeparator","decimals","trunc","isInteger","isSafeInteger","SelectboxColumn","dataType","options","uniqueTypes","Set","x","has","allowedValues","filter","opt","_cell$data2","_cell$data5","_toSafeNumber","_cell$data3","_toSafeBoolean","_cell$data4","ListColumn","extractCssProperty","htmlElementId","property","cssStyle","regex","match","exec","getIndexFromArrow","indexPosition","types","index","indexNames","isHidden","getColumnFromArrow","columnPosition","columns","numpy_type","pandas_type","getCategoricalOptions","getCellFromArrow","arrowCell","cssStyles","typeName","contentType","field","_arrowCell$field","_arrowCell$field$type","parsedDate","_arrowCell$field$type2","_arrowCell$field2","_arrowCell$field2$typ","type","unit","decimalStr","displayContent","_cellTemplate$data","cssId","fontColor","textDark","bgCell","applyPandasStylerCss","LinkColumn","displayTextRegex","display_text","hoverEffect","href","cellHref","onClickUri","displayText","patternMatch","decodeURI","getLinkDisplayValueFromRegex","a","open","preventDefault","ImageColumn","imageUrls","ProgressColumn","measureLabel","String","normalizeCellValue","BaseChartColumn","chart_type","y_min","y_max","values","displayValues","graphKind","yAxis","chartData","convertedChartData","normalizedChartData","maxValue","MIN_SAFE_INTEGER","minValue","MAX_SAFE_INTEGER","i","convertedValue","push","v","join","LineChartColumn","BarChartColumn","AreaChartColumn","ColumnTypes","Map","Object","entries","object","checkbox","selectbox","list","number","link","datetime","time","line_chart","bar_chart","area_chart","image","progress","CustomCells","INDEX_IDENTIFIER","COLUMN_POSITION_PREFIX","COLUMN_WIDTH_MAPPING","small","medium","large","parseWidthConfig","applyColumnConfig","columnProps","columnConfigMapping","columnConfig","get","indexNumber","disabled","hidden","required","type_config","alignment","defaultValue","help","getColumnType","_column$columnTypeOpt","customType","ColumnType","logWarning","getColumnTypeFromArrow","element","React","configJson","logError","getColumnConfig","stretchColumns","useContainerWidth","configuredColumns","dimensions","numIndices","headerColumns","numColumns","dataColumns","getAllColumnsFromArrow","updatedColumn","editingMode","ArrowProto","columnOrder","orderedColumns","forEach","columnName","find","getColumnName","numRows","editedCells","addedRows","deletedRows","toJson","columnsByIndex","set","currentState","edited_rows","added_rows","deleted_rows","row","rowIndex","_map","editedRow","colIndex","addedRow","isIncomplete","cellValue","_k","fromJson","editingStateJson","editingState","columnsByName","keys","key","colName","_this$editedCells$get","isAddedRow","col","rowCache","setCell","addRow","rowCells","deleteRows","rows","sort","b","deleteRow","splice","delete","getOriginalRowIndex","originalIndex","getNumRows","headerIcons","editable","p","accentColor","primary","accentFg","white","accentLight","transparentize","borderColor","fadedText05","horizontalBorderColor","fontFamily","genericFonts","bodyFont","bgSearchResult","resizeIndicatorColor","bgIconHeader","fgIconHeader","bgHeader","bgMix","bgHeaderHasFocus","secondaryBg","bgHeaderHovered","textHeader","textHeaderSelected","textGroupHeader","headerFontStyle","baseFontStyle","editorFontSize","textMedium","textLight","fadedText40","textBubble","bgCellMedium","cellHorizontalPadding","cellVerticalPadding","bgBubble","bgBubbleSelected","linkColor","linkText","drilldownBorder","darkenedBgMix25","tableBorderRadius","getCellContent","originalCol","originalRow","current","editedCell","setSort","getCellContentSorted","getOriginalIndex","useGlideColumnSort","updatedColumns","direction","updateSortingHeader","sortColumn","sortDirection","clickedColumn","mode","isEmptyTable","isDisabled","syncSelectionState","gridSelection","setGridSelection","CompactSelection","isRowSelectionActivated","selectionMode","isMultiRowSelectionActivated","isColumnSelectionActivated","isMultiColumnSelectionActivated","isRowSelected","isColumnSelected","isCellSelected","processSelectionChange","newSelection","rowSelectionChanged","isEqual","toArray","columnSelectionChanged","cellSelectionChanged","syncSelection","updatedSelection","cleanedColumns","idx","remove","clearSelection","keepRows","keepColumns","emptySelection","CSV_DELIMITER","CSV_QUOTE_CHAR","CSV_ESCAPE_CHAR","CSV_ROW_DELIMITER","CSV_UTF8_BOM","CSV_SPECIAL_CHARS_REGEX","toCsvRow","rowValues","strValue","escapeValue","async","writeCsv","writable","textEncoder","TextEncoder","write","encode","headers","rowData","close","enforceDownloadInNewTab","exportToCsv","suggestedName","nativeFileSystemAdapter","fileHandle","showSaveFilePicker","accept","excludeAcceptAllOption","writer","createWritable","Error","csvContent","inMemoryWriter","WritableStream","chunk","getWriter","blob","Blob","url","URL","createObjectURL","createElement","setAttribute","download","appendChild","click","removeChild","revokeObjectURL","fixedNumRows","refreshCells","updateNumRows","syncEditState","onCellEdited","updatedCell","currentCell","currentValue","newValue","newCell","lastUpdated","performance","now","appendEmptyRow","newRow","onRowAppended","onDelete","selection","_selection$current","rowsToDelete","range","updatedCells","selectedArea","y","onPaste","targetCol","targetRow","pasteDataValue","validateCell","tooltip","setTooltip","timeoutRef","onItemHovered","args","clearTimeout","location","colIdx","rowIdx","tooltipContent","hasTooltip","setTimeout","bounds","clearTooltip","drawCell","draw","ctx","rect","colPos","drawTextCell","headerFontFull","baseFontFull","markerFontFull","markerFontStyle","spriteManager","hyperWrapping","fillStyle","drawMissingPlaceholder","save","beginPath","moveTo","lineTo","fill","restore","drawRequiredIndicator","customRenderers","SparklineCell","DropdownCell","RangeCell","DatePickerCell","columnSizes","setColumnSizes","useState","onColumnResize","_newSize","_colIndex","newSizeWithGrow","BORDER_THRESHOLD","ROW_HEIGHT","MIN_TABLE_WIDTH","MIN_TABLE_HEIGHT","containerWidth","containerHeight","initialWidth","maxHeight","calculateMaxHeight","initialHeight","maxWidth","resizableSize","setResizableSize","minHeight","minWidth","StyledImage","objectFit","ImageCellEditor","urls","imageData","rel","src","setOpen","closeTooltip","Popover","StyledTooltipContentWrapper","PLACEMENT","accessibilityType","ACCESSIBILITY_TYPE","showArrow","popoverMargin","onClickOutside","onEsc","overrides","Body","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","paddingBottom","paddingLeft","paddingRight","Inner","fontWeight","isOpen","StyledResizableContainer","hasCustomizedScrollbars","scrollbarWidth","withFullScreenWrapper","widgetMgr","fragmentId","resizableRef","dataEditorRef","resizableContainerRef","useCustomTheme","libConfig","isFocused","setIsFocused","showSearch","setShowSearch","hasVerticalScroll","setHasVerticalScroll","hasHorizontalScroll","setHasHorizontalScroll","isTouchDevice","matchMedia","matches","navigator","userAgent","READ_ONLY","DYNAMIC","dataDimensions","originalNumRows","isLargeTable","EditingState","setNumRows","resetEditingState","originalColumns","useColumnLoader","initialWidgetValue","getStringValue","formId","getOriginalCellContent","useDataLoader","useColumnSort","debounce","selectionState","columnIdx","newWidgetState","currentWidgetState","setStringValue","fromUi","useSelectionHandler","cells","_dataEditorRef$curren","updateCells","_selectionState$selec","_selectionState$selec2","_selectionState$selec3","_selectionState$selec4","columnNames","rowSelection","columnSelection","add","currentEditingState","useDataExporter","useDataEditor","useTooltips","useCustomRenderer","transformedColumns","glideColumns","useColumnSizer","useTableSizer","getEmptyStateContent","_ref3","_col","_row","span","formClearHelper","FormClearHelper","manageFormClearListener","disconnect","isDynamicAndEditable","freezeColumns","_resizableContainerRe","_resizableContainerRe2","scrollAreaBounds","querySelector","getBoundingClientRect","clientHeight","clientWidth","ref","onMouseDown","e","boundingClient","clientY","clientX","onBlur","currentTarget","contains","relatedTarget","Toolbar","Close","Delete","Add","FileDownload","Search","Resizable","defaultSize","enable","topRight","bottomRight","bottomLeft","topLeft","grid","snapGap","onResizeStop","_event","_direction","_delta","GlideDataEditor","minColumnWidth","maxColumnWidth","maxColumnAutoWidth","rowHeight","headerHeight","resizeIndicator","smoothScrollX","smoothScrollY","verticalBorder","getCellsForSelection","rowMarkers","rangeSelect","columnSelect","rowSelect","keybindings","downFill","onKeyDown","ctrlKey","metaKey","cv","onSearchClose","onHeaderClicked","onGridSelectionChange","onMouseMove","fixedShadowX","fixedShadowY","experimental","scrollbarWidthOverride","imageEditorOverride","checkboxStyle","rowSelectionMode","rowSelectionBlending","rangeSelectionBlending","columnSelectionBlending","fillHandle","trailingRowOptions","sticky","tint","formClearListener","lastWidgetMgr","lastFormId","listener","isValidFormId","addFormClearedListener","_this$formClearListen"],"sourceRoot":""}