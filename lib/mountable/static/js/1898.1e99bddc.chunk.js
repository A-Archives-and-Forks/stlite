var stlite;(()=>{"use strict";var e={22523:e=>{function t(e){if("string"!==typeof e)throw new TypeError("Path must be a string. Received "+JSON.stringify(e))}function n(e,t){for(var n,o="",r=0,s=-1,i=0,a=0;a<=e.length;++a){if(a<e.length)n=e.charCodeAt(a);else{if(47===n)break;n=47}if(47===n){if(s===a-1||1===i);else if(s!==a-1&&2===i){if(o.length<2||2!==r||46!==o.charCodeAt(o.length-1)||46!==o.charCodeAt(o.length-2))if(o.length>2){var l=o.lastIndexOf("/");if(l!==o.length-1){-1===l?(o="",r=0):r=(o=o.slice(0,l)).length-1-o.lastIndexOf("/"),s=a,i=0;continue}}else if(2===o.length||1===o.length){o="",r=0,s=a,i=0;continue}t&&(o.length>0?o+="/..":o="..",r=2)}else o.length>0?o+="/"+e.slice(s+1,a):o=e.slice(s+1,a),r=a-s-1;s=a,i=0}else 46===n&&-1!==i?++i:i=-1}return o}var o={resolve:function(){for(var e,o="",r=!1,s=arguments.length-1;s>=-1&&!r;s--){var i;s>=0?i=arguments[s]:(void 0===e&&(e=process.cwd()),i=e),t(i),0!==i.length&&(o=i+"/"+o,r=47===i.charCodeAt(0))}return o=n(o,!r),r?o.length>0?"/"+o:"/":o.length>0?o:"."},normalize:function(e){if(t(e),0===e.length)return".";var o=47===e.charCodeAt(0),r=47===e.charCodeAt(e.length-1);return 0!==(e=n(e,!o)).length||o||(e="."),e.length>0&&r&&(e+="/"),o?"/"+e:e},isAbsolute:function(e){return t(e),e.length>0&&47===e.charCodeAt(0)},join:function(){if(0===arguments.length)return".";for(var e,n=0;n<arguments.length;++n){var r=arguments[n];t(r),r.length>0&&(void 0===e?e=r:e+="/"+r)}return void 0===e?".":o.normalize(e)},relative:function(e,n){if(t(e),t(n),e===n)return"";if((e=o.resolve(e))===(n=o.resolve(n)))return"";for(var r=1;r<e.length&&47===e.charCodeAt(r);++r);for(var s=e.length,i=s-r,a=1;a<n.length&&47===n.charCodeAt(a);++a);for(var l=n.length-a,c=i<l?i:l,d=-1,g=0;g<=c;++g){if(g===c){if(l>c){if(47===n.charCodeAt(a+g))return n.slice(a+g+1);if(0===g)return n.slice(a+g)}else i>c&&(47===e.charCodeAt(r+g)?d=g:0===g&&(d=0));break}var u=e.charCodeAt(r+g);if(u!==n.charCodeAt(a+g))break;47===u&&(d=g)}var p="";for(g=r+d+1;g<=s;++g)g!==s&&47!==e.charCodeAt(g)||(0===p.length?p+="..":p+="/..");return p.length>0?p+n.slice(a+d):(a+=d,47===n.charCodeAt(a)&&++a,n.slice(a))},_makeLong:function(e){return e},dirname:function(e){if(t(e),0===e.length)return".";for(var n=e.charCodeAt(0),o=47===n,r=-1,s=!0,i=e.length-1;i>=1;--i)if(47===(n=e.charCodeAt(i))){if(!s){r=i;break}}else s=!1;return-1===r?o?"/":".":o&&1===r?"//":e.slice(0,r)},basename:function(e,n){if(void 0!==n&&"string"!==typeof n)throw new TypeError('"ext" argument must be a string');t(e);var o,r=0,s=-1,i=!0;if(void 0!==n&&n.length>0&&n.length<=e.length){if(n.length===e.length&&n===e)return"";var a=n.length-1,l=-1;for(o=e.length-1;o>=0;--o){var c=e.charCodeAt(o);if(47===c){if(!i){r=o+1;break}}else-1===l&&(i=!1,l=o+1),a>=0&&(c===n.charCodeAt(a)?-1===--a&&(s=o):(a=-1,s=l))}return r===s?s=l:-1===s&&(s=e.length),e.slice(r,s)}for(o=e.length-1;o>=0;--o)if(47===e.charCodeAt(o)){if(!i){r=o+1;break}}else-1===s&&(i=!1,s=o+1);return-1===s?"":e.slice(r,s)},extname:function(e){t(e);for(var n=-1,o=0,r=-1,s=!0,i=0,a=e.length-1;a>=0;--a){var l=e.charCodeAt(a);if(47!==l)-1===r&&(s=!1,r=a+1),46===l?-1===n?n=a:1!==i&&(i=1):-1!==n&&(i=-1);else if(!s){o=a+1;break}}return-1===n||-1===r||0===i||1===i&&n===r-1&&n===o+1?"":e.slice(n,r)},format:function(e){if(null===e||"object"!==typeof e)throw new TypeError('The "pathObject" argument must be of type Object. Received type '+typeof e);return function(e,t){var n=t.dir||t.root,o=t.base||(t.name||"")+(t.ext||"");return n?n===t.root?n+o:n+e+o:o}("/",e)},parse:function(e){t(e);var n={root:"",dir:"",base:"",ext:"",name:""};if(0===e.length)return n;var o,r=e.charCodeAt(0),s=47===r;s?(n.root="/",o=1):o=0;for(var i=-1,a=0,l=-1,c=!0,d=e.length-1,g=0;d>=o;--d)if(47!==(r=e.charCodeAt(d)))-1===l&&(c=!1,l=d+1),46===r?-1===i?i=d:1!==g&&(g=1):-1!==i&&(g=-1);else if(!c){a=d+1;break}return-1===i||-1===l||0===g||1===g&&i===l-1&&i===a+1?-1!==l&&(n.base=n.name=0===a&&s?e.slice(1,l):e.slice(a,l)):(0===a&&s?(n.name=e.slice(1,i),n.base=e.slice(1,l)):(n.name=e.slice(a,i),n.base=e.slice(a,l)),n.ext=e.slice(i,l)),a>0?n.dir=e.slice(0,a-1):s&&(n.dir="/"),n},sep:"/",delimiter:":",win32:null,posix:null};o.posix=o,e.exports=o}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var s=t[o]={exports:{}};return e[o](s,s.exports,n),s.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);(()=>{new RegExp("[".concat("[(<=>!~;@","]"));class e{constructor(){this.promise=new Promise(((e,t)=>{this.resolveInternal=e,this.rejectInternal=t}))}resolve(e){this.resolveInternal(e)}reject(e){this.rejectInternal(e)}}var t=n(22523),o=n.n(t);function r(e,t){const n=o().normalize(t),r=o().dirname(n).split("/"),s=[];for(const o of r){s.push(o);const t=s.join("/");if(e.FS.analyzePath(t).exists){if(e.FS.isDir(t))throw new Error('"'.concat(t,'" already exists and is not a directory.'))}else try{e.FS.mkdir(t)}catch(i){throw console.error('Failed to create a directory "'.concat(t,'"')),i}}}function s(e,t,n,o){r(e,t),e.FS.writeFile(t,n,o)}const i=new RegExp("[".concat("[(<=>!~;@","]"));function a(e){e.forEach((e=>{let t;try{t=new URL(e)}catch{return}if("emfs:"===t.protocol||"file:"===t.protocol)throw new Error('"emfs:" and "file:" protocols are not allowed for the requirement ('.concat(e,")"))}));return e.filter((e=>{const t="streamlit"===function(e){return e.split(i)[0].trim()}(e);return!t||(console.warn('Streamlit is specified in the requirements ("'.concat(e,'"), but it will be ignored. A built-in version of Streamlit will be used.')),!1)}))}var l=function(e,t,n,o){return new(n||(n=Promise))((function(r,s){function i(e){try{l(o.next(e))}catch(t){s(t)}}function a(e){try{l(o.throw(e))}catch(t){s(t)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}l((o=o.apply(e,t||[])).next())}))};function c(e,t){return l(this,void 0,void 0,(function*(){const{scriptURL:n,pyodideIndexURL:o,isESModule:r}=yield function(e){var t;return l(this,void 0,void 0,(function*(){const n="undefined"!==typeof process&&(null===(t=process.versions)||void 0===t?void 0:t.node);let o;o=n?(yield import("node:path")).sep:"/";const r=e.slice(0,e.lastIndexOf(o)+1);if(e.endsWith(".mjs")){if(n){const t=yield import("node:path"),n=yield import("node:url");!e.includes("://")&&t.isAbsolute(e)&&(e=n.pathToFileURL(e).href)}return{scriptURL:e,pyodideIndexURL:r,isESModule:!0}}return{scriptURL:e,pyodideIndexURL:r,isESModule:!1}}))}(e);let s;if(r){s=(yield import(n)).loadPyodide}else importScripts(n),s=self.loadPyodide;return s(Object.assign(Object.assign({},t),{indexURL:o}))}))}function d(e){e.runPython('\nimport micropip\nmicropip.add_mock_package(\n    "pyarrow", "0.0.1",\n    modules={\n        "pyarrow": """\n__version__ = \'0.0.1\'  # TODO: Update when releasing\n\n\nclass Table:\n    @classmethod\n    def from_pandas(*args, **kwargs):\n        raise NotImplementedError("stlite is not supporting this method.")\n\n\nclass Array:\n    def __init__(self, *args, **kwargs):\n        raise NotImplementedError("stlite is not supporting PyArrow.Array")\n\n\nclass ChunkedArray:\n    def __init__(self, *args, **kwargs):\n        raise NotImplementedError("stlite is not supporting PyArrow.ChunkedArray")\n"""\n    }\n)\n')}function g(e){e.runPython('\nimport micropip\n\nmicropip.add_mock_package(\n    "toml", "0.10.1",\n    modules={\n        "toml": """\ndef load(f):\n    import tomllib\n    return tomllib.load(f)\n\ndef loads(s):\n    import tomllib\n    return tomllib.loads(s)\n\ndef dump(obj, f):\n    raise NotImplementedError("stlite is not supporting this method.")\n\ndef dumps(obj):\n    raise NotImplementedError("stlite is not supporting this method.")\n"""\n    }\n)\n')}var u=function(e,t,n,o){return new(n||(n=Promise))((function(r,s){function i(e){try{l(o.next(e))}catch(t){s(t)}}function a(e){try{l(o.throw(e))}catch(t){s(t)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}l((o=o.apply(e,t||[])).next())}))};let p;function m(e,t,n){return u(this,void 0,void 0,(function*(){const o=n.map((t=>function(e,t){if(!p){const t='\nimport ast\nfrom textwrap import dedent\n\ndef find_imports(source: str) -> list[str]:\n    source = dedent(source)\n\n    try:\n        mod = ast.parse(source)\n    except SyntaxError:\n        return []\n    imports = set()\n    for node in mod.body:\n        if isinstance(node, ast.Import):\n            for name in node.names:\n                node_name = name.name\n                imports.add(node_name.split(".")[0])\n        elif isinstance(node, ast.ImportFrom):\n            module_name = node.module\n            if module_name is None:\n                continue\n            imports.add(module_name.split(".")[0])\n    return imports\n';e.runPython(t),p=e.globals.get("find_imports")}return p(t).toJs()}(e,t))),r=function(e){const t=new Set;for(const n of e)for(const e of n)t.add(e);return t}(o),s=Array.from(r).filter((t=>!e.runPython("__import__('importlib').util.find_spec('".concat(t,"')")))).map((t=>e._api._import_name_to_package_name.get(t))).filter((e=>e));if(0===s.length)return;const i=new MessageChannel;t({type:"event:moduleAutoLoad",data:{packagesToLoad:s}},i.port2);try{const t=yield e.loadPackage(s);return i.port1.postMessage({type:"moduleAutoLoad:success",data:{loadedPackages:t}}),void i.port1.close()}catch(a){throw i.port1.postMessage({type:"moduleAutoLoad:error",error:a}),i.port1.close(),a}}))}var f=function(e,t,n,o){return new(n||(n=Promise))((function(r,s){function i(e){try{l(o.next(e))}catch(t){s(t)}}function a(e){try{l(o.throw(e))}catch(t){s(t)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,a)}l((o=o.apply(e,t||[])).next())}))};const h=n.g;function _(e,t,n){const o=m(e,t,n);h.__moduleAutoLoadPromise__=o,e.runPythonAsync("\nfrom streamlit.runtime.scriptrunner import script_runner\nfrom js import __moduleAutoLoadPromise__\n\nscript_runner.moduleAutoLoadPromise = __moduleAutoLoadPromise__\n")}const y=self.postMessage;self.onmessage=function(t,n,o){function i(e){n({type:"event:progress",data:{message:e}})}let l,u;const p=new e,m=function(){var e,r;return f(this,void 0,void 0,(function*(){const m=yield p.promise,y=Object.assign(Object.assign({},o),m);console.debug("Initial data",y);const{entrypoint:v,files:b,archives:w,requirements:k,prebuiltPackageNames:S,wheels:A,mountedSitePackagesSnapshotFilePath:P,pyodideUrl:C=t,streamlitConfig:F,idbfsMountpoints:x,nodefsMountpoints:I,moduleAutoLoad:L}=y,E=a(k);i("Loading Pyodide."),console.debug("Loading Pyodide"),l=yield c(C,{stdout:console.log,stderr:console.error}),console.debug("Loaded Pyodide");let M=!1;x&&(M=!0,x.forEach((e=>{l.FS.mkdir(e),l.FS.mount(l.FS.filesystems.IDBFS,{},e)})),yield new Promise(((e,t)=>{l.FS.syncfs(!0,(n=>{n?t(n):e()}))}))),I&&Object.entries(I).forEach((e=>{let[t,n]=e;l.FS.mkdir(t),l.FS.mount(l.FS.filesystems.NODEFS,{root:n},t)})),i("Mounting files.");const j=[];if(yield Promise.all(Object.keys(b).map((e=>f(this,void 0,void 0,(function*(){const t=b[e];let n;"url"in t?(console.debug("Fetch a file from ".concat(t.url)),n=yield fetch(t.url).then((e=>e.arrayBuffer())).then((e=>new Uint8Array(e)))):n=t.data;const{opts:o}=b[e];console.debug('Write a file "'.concat(e,'"')),s(l,e,n,o),e.endsWith(".py")&&j.push(e)}))))),i("Unpacking archives."),yield Promise.all(w.map((e=>f(this,void 0,void 0,(function*(){let t;"url"in e?(console.debug("Fetch an archive from ".concat(e.url)),t=yield fetch(e.url).then((e=>e.arrayBuffer()))):t=e.buffer;const{format:n,options:o}=e;console.debug("Unpack an archive",{format:n,options:o}),l.unpackArchive(t,n,o)}))))),!P&&!A)throw new Error("Neither snapshot nor wheel files are provided.");P&&(i("Restoring the snapshot."),yield l.runPythonAsync("import tarfile, shutil, site"),yield l.runPythonAsync("\nsite_packages_dirs = site.getsitepackages()\nfor site_packages in site_packages_dirs:\n    shutil.rmtree(site_packages)\n"),console.debug("Unarchive ".concat(P)),yield l.runPythonAsync('\nwith tarfile.open("'.concat(P,'", "r") as tar_gz_file:\n    tar_gz_file.extractall("/")\n')),console.debug("Restored the snapshot"),i("Mocking some packages."),console.debug("Mock pyarrow"),d(l),console.debug("Mocked pyarrow"),console.debug("Mocking toml"),g(l),console.debug("Mocked toml")),i("Installing packages."),console.debug("Installing the prebuilt packages:",S),yield l.loadPackage(S),console.debug("Installed the prebuilt packages"),yield l.loadPackage("micropip");const O=l.pyimport("micropip");if(A?(console.debug("Installing the wheels:",A,"and the requirements:",E),yield O.install.callKwargs([A.stliteServer,A.streamlit,...E],{keep_going:!0}),console.debug("Installed the wheels and the requirements"),i("Mocking some packages."),console.debug("Mock pyarrow"),d(l),console.debug("Mocked pyarrow"),console.debug("Mock toml"),g(l),console.debug("Mocked toml")):(console.debug("Installing the requirements:",E),yield O.install.callKwargs(E,{keep_going:!0}),console.debug("Installed the requirements")),L){const e=j.map((e=>l.FS.readFile(e,{encoding:"utf8"})));_(l,n,e)}yield l.runPythonAsync("\nimport importlib\nimportlib.invalidate_caches()\n"),i("Loading streamlit package."),console.debug("Loading the Streamlit package"),yield l.runPythonAsync("\nimport streamlit.runtime\n    "),console.debug("Loaded the Streamlit package"),i("Setting up the loggers."),console.debug("Setting the loggers"),yield l.runPythonAsync('\nimport logging\nimport streamlit.logger\n\nstreamlit.logger.get_logger = logging.getLogger\nstreamlit.logger.setup_formatter = None\nstreamlit.logger.update_formatter = lambda *a, **k: None\nstreamlit.logger.set_log_level = lambda *a, **k: None\n\nfor name in streamlit.logger._loggers.keys():\n    if name == "root":\n        name = "streamlit"\n    logger = logging.getLogger(name)\n    logger.propagate = True\n    logger.handlers.clear()\n    logger.setLevel(logging.NOTSET)\n\nstreamlit.logger._loggers = {}\n');h.__logCallback__=(e,t)=>{e>=40?console.error(t):e>=30?console.warn(t):e>=20?console.info(t):console.debug(t)},yield l.runPythonAsync('\ndef setup_loggers(streamlit_level, streamlit_message_format):\n    from js import __logCallback__\n\n\n    class JsHandler(logging.Handler):\n        def emit(self, record):\n            msg = self.format(record)\n            __logCallback__(record.levelno, msg)\n\n\n    root_message_format = "%(levelname)s:%(name)s:%(message)s"\n\n    root_logger = logging.getLogger()\n    root_logger.handlers.clear()\n    root_formatter = logging.Formatter(root_message_format)\n    root_handler = JsHandler()\n    root_handler.setFormatter(root_formatter)\n    root_logger.addHandler(root_handler)\n    root_logger.setLevel(logging.DEBUG)\n\n    streamlit_logger = logging.getLogger("streamlit")\n    streamlit_logger.propagate = False\n    streamlit_logger.handlers.clear()\n    streamlit_formatter = logging.Formatter(streamlit_message_format)\n    streamlit_handler = JsHandler()\n    streamlit_handler.setFormatter(streamlit_formatter)\n    streamlit_logger.addHandler(streamlit_handler)\n    streamlit_logger.setLevel(streamlit_level.upper())\n');const R=(null!==(e=null===F||void 0===F?void 0:F["logger.level"])&&void 0!==e?e:"INFO").toString(),T=null!==(r=null===F||void 0===F?void 0:F["logger.messageFormat"])&&void 0!==r?r:"%(asctime)s %(message)s";if(l.globals.get("setup_loggers")(R,T),console.debug("Set the loggers"),i("Mocking some Streamlit functions for the browser environment."),console.debug("Mocking some Streamlit functions"),yield l.runPythonAsync("\nimport streamlit\n\ndef is_cacheable_msg(msg):\n    return False\n\nstreamlit.runtime.runtime.is_cacheable_msg = is_cacheable_msg\n"),console.debug("Mocked some Streamlit functions"),M){i("Setting up the IndexedDB filesystem synchronizer."),console.debug("Setting up the IndexedDB filesystem synchronizer");let e=!1;h.__scriptFinishedCallback__=()=>{console.debug("The script has finished. Syncing the filesystem."),e||(e=!0,l.FS.syncfs(!1,(t=>{e=!1,t&&console.error(t)})))},yield l.runPythonAsync('\nfrom streamlit.runtime.app_session import AppSession\nfrom streamlit.runtime.scriptrunner import ScriptRunnerEvent\nfrom js import __scriptFinishedCallback__\n\ndef wrap_app_session_on_scriptrunner_event(original_method):\n    def wrapped(self, *args, **kwargs):\n        if "event" in kwargs:\n            event = kwargs["event"]\n            if event == ScriptRunnerEvent.SCRIPT_STOPPED_WITH_SUCCESS or event == ScriptRunnerEvent.SCRIPT_STOPPED_FOR_RERUN or event == ScriptRunnerEvent.SHUTDOWN:\n                __scriptFinishedCallback__()\n        return original_method(self, *args, **kwargs)\n    return wrapped\n\nAppSession._on_scriptrunner_event = wrap_app_session_on_scriptrunner_event(AppSession._on_scriptrunner_event)\n'),console.debug("Set up the IndexedDB filesystem synchronizer")}return i("Booting up the Streamlit server."),console.debug("Booting up the Streamlit server"),h.__streamlitFlagOptions__=Object.assign(Object.assign({"browser.gatherUsageStats":!1},F),{"runner.fastReruns":!1}),yield l.runPythonAsync('\nfrom stlite_server.bootstrap import load_config_options, prepare\nfrom stlite_server.server import Server\nfrom js import __streamlitFlagOptions__\n\nflag_options = __streamlitFlagOptions__.to_py()\nload_config_options(flag_options)\n\nmain_script_path = "'.concat(v,'"\nargs = []\n\nprepare(main_script_path, args)\n\nserver = Server(main_script_path)\nserver.start()\n')),console.debug("Booted up the Streamlit server"),console.debug("Setting up the HTTP server"),u=l.globals.get("server").copy(),console.debug("Set up the HTTP server"),n({type:"event:loaded"}),y}))}().catch((e=>{throw n({type:"event:error",data:{error:e}}),e}));return n({type:"event:start"}),e=>f(this,void 0,void 0,(function*(){const t=e.data;if("initData"===t.type)return void p.resolve(t.data);const{moduleAutoLoad:o}=yield m,i=e.ports[0];try{switch(t.type){case"websocket:connect":{console.debug("websocket:connect",t.data);const{path:e}=t.data;u.start_websocket(e,((e,t)=>{if(t){const t=e,o=t.getBuffer("u8");t.destroy();const r=new Uint8ClampedArray(o.data.buffer,o.data.byteOffset,o.data.byteLength);n({type:"websocket:message",data:{payload:new Uint8Array(r)}})}else{n({type:"websocket:message",data:{payload:e}})}})),i.postMessage({type:"reply"});break}case"websocket:send":{console.debug("websocket:send",t.data);const{payload:e}=t.data;u.receive_websocket_from_js(e);break}case"http:request":{console.debug("http:request",t.data);const{request:e}=t.data,n=(e,t,n)=>{const o=new Map(t.toJs()),r=n.toJs();console.debug({statusCode:e,headers:o,body:r});const s={type:"http:response",data:{response:{statusCode:e,headers:o,body:r}}};i.postMessage(s)};u.receive_http_from_js(e.method,decodeURIComponent(e.path),e.headers,e.body,n);break}case"file:write":{const{path:e,data:r,opts:a}=t.data;o&&"string"===typeof r&&e.endsWith(".py")&&(console.debug("Auto install the requirements in ".concat(e)),_(l,n,[r])),console.debug('Write a file "'.concat(e,'"')),s(l,e,r,a),i.postMessage({type:"reply"});break}case"file:rename":{const{oldPath:e,newPath:n}=t.data;console.debug('Rename "'.concat(e,'" to ').concat(n)),function(e,t,n){r(e,n),e.FS.rename(t,n)}(l,e,n),i.postMessage({type:"reply"});break}case"file:unlink":{const{path:e}=t.data;console.debug('Remove "'.concat(e)),l.FS.unlink(e),i.postMessage({type:"reply"});break}case"install":{const{requirements:e}=t.data,n=l.pyimport("micropip"),o=a(e);console.debug("Install the requirements:",o),yield n.install.callKwargs(o,{keep_going:!0}).then((()=>{console.debug("Successfully installed"),i.postMessage({type:"reply"})}))}}}catch(c){if(console.error(c),!(c instanceof Error))throw c;const e=new Error(c.message);e.name=c.name,e.stack=c.stack,i.postMessage({type:"reply",error:e})}}))}("https://cdn.jsdelivr.net/pyodide/v0.26.1/full/pyodide.js",((e,t)=>y(e,t?[t]:void 0)))})(),stlite={}})();
//# sourceMappingURL=1898.1e99bddc.chunk.js.map